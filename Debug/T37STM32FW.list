
T37STM32FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028bc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800297c  0800297c  0000397c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029b4  080029b4  00004064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080029b4  080029b4  00004064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080029b4  080029b4  00004064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029b4  080029b4  000039b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080029b8  080029b8  000039b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080029bc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000064  08002a20  00004064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08002a20  000042e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000803b  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000184e  00000000  00000000  0000c0c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0000d918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000059e  00000000  00000000  0000e078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001702b  00000000  00000000  0000e616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009389  00000000  00000000  00025641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000898c2  00000000  00000000  0002e9ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b828c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c68  00000000  00000000  000b82d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000b9f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000064 	.word	0x20000064
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002964 	.word	0x08002964

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000068 	.word	0x20000068
 8000104:	08002964 	.word	0x08002964

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_fmul>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	464f      	mov	r7, r9
 80003f8:	4646      	mov	r6, r8
 80003fa:	46d6      	mov	lr, sl
 80003fc:	0044      	lsls	r4, r0, #1
 80003fe:	b5c0      	push	{r6, r7, lr}
 8000400:	0246      	lsls	r6, r0, #9
 8000402:	1c0f      	adds	r7, r1, #0
 8000404:	0a76      	lsrs	r6, r6, #9
 8000406:	0e24      	lsrs	r4, r4, #24
 8000408:	0fc5      	lsrs	r5, r0, #31
 800040a:	2c00      	cmp	r4, #0
 800040c:	d100      	bne.n	8000410 <__aeabi_fmul+0x1c>
 800040e:	e0da      	b.n	80005c6 <__aeabi_fmul+0x1d2>
 8000410:	2cff      	cmp	r4, #255	@ 0xff
 8000412:	d074      	beq.n	80004fe <__aeabi_fmul+0x10a>
 8000414:	2380      	movs	r3, #128	@ 0x80
 8000416:	00f6      	lsls	r6, r6, #3
 8000418:	04db      	lsls	r3, r3, #19
 800041a:	431e      	orrs	r6, r3
 800041c:	2300      	movs	r3, #0
 800041e:	4699      	mov	r9, r3
 8000420:	469a      	mov	sl, r3
 8000422:	3c7f      	subs	r4, #127	@ 0x7f
 8000424:	027b      	lsls	r3, r7, #9
 8000426:	0a5b      	lsrs	r3, r3, #9
 8000428:	4698      	mov	r8, r3
 800042a:	007b      	lsls	r3, r7, #1
 800042c:	0e1b      	lsrs	r3, r3, #24
 800042e:	0fff      	lsrs	r7, r7, #31
 8000430:	2b00      	cmp	r3, #0
 8000432:	d074      	beq.n	800051e <__aeabi_fmul+0x12a>
 8000434:	2bff      	cmp	r3, #255	@ 0xff
 8000436:	d100      	bne.n	800043a <__aeabi_fmul+0x46>
 8000438:	e08e      	b.n	8000558 <__aeabi_fmul+0x164>
 800043a:	4642      	mov	r2, r8
 800043c:	2180      	movs	r1, #128	@ 0x80
 800043e:	00d2      	lsls	r2, r2, #3
 8000440:	04c9      	lsls	r1, r1, #19
 8000442:	4311      	orrs	r1, r2
 8000444:	3b7f      	subs	r3, #127	@ 0x7f
 8000446:	002a      	movs	r2, r5
 8000448:	18e4      	adds	r4, r4, r3
 800044a:	464b      	mov	r3, r9
 800044c:	407a      	eors	r2, r7
 800044e:	4688      	mov	r8, r1
 8000450:	b2d2      	uxtb	r2, r2
 8000452:	2b0a      	cmp	r3, #10
 8000454:	dc75      	bgt.n	8000542 <__aeabi_fmul+0x14e>
 8000456:	464b      	mov	r3, r9
 8000458:	2000      	movs	r0, #0
 800045a:	2b02      	cmp	r3, #2
 800045c:	dd0f      	ble.n	800047e <__aeabi_fmul+0x8a>
 800045e:	4649      	mov	r1, r9
 8000460:	2301      	movs	r3, #1
 8000462:	408b      	lsls	r3, r1
 8000464:	21a6      	movs	r1, #166	@ 0xa6
 8000466:	00c9      	lsls	r1, r1, #3
 8000468:	420b      	tst	r3, r1
 800046a:	d169      	bne.n	8000540 <__aeabi_fmul+0x14c>
 800046c:	2190      	movs	r1, #144	@ 0x90
 800046e:	0089      	lsls	r1, r1, #2
 8000470:	420b      	tst	r3, r1
 8000472:	d000      	beq.n	8000476 <__aeabi_fmul+0x82>
 8000474:	e100      	b.n	8000678 <__aeabi_fmul+0x284>
 8000476:	2188      	movs	r1, #136	@ 0x88
 8000478:	4219      	tst	r1, r3
 800047a:	d000      	beq.n	800047e <__aeabi_fmul+0x8a>
 800047c:	e0f5      	b.n	800066a <__aeabi_fmul+0x276>
 800047e:	4641      	mov	r1, r8
 8000480:	0409      	lsls	r1, r1, #16
 8000482:	0c09      	lsrs	r1, r1, #16
 8000484:	4643      	mov	r3, r8
 8000486:	0008      	movs	r0, r1
 8000488:	0c35      	lsrs	r5, r6, #16
 800048a:	0436      	lsls	r6, r6, #16
 800048c:	0c1b      	lsrs	r3, r3, #16
 800048e:	0c36      	lsrs	r6, r6, #16
 8000490:	4370      	muls	r0, r6
 8000492:	4369      	muls	r1, r5
 8000494:	435e      	muls	r6, r3
 8000496:	435d      	muls	r5, r3
 8000498:	1876      	adds	r6, r6, r1
 800049a:	0c03      	lsrs	r3, r0, #16
 800049c:	199b      	adds	r3, r3, r6
 800049e:	4299      	cmp	r1, r3
 80004a0:	d903      	bls.n	80004aa <__aeabi_fmul+0xb6>
 80004a2:	2180      	movs	r1, #128	@ 0x80
 80004a4:	0249      	lsls	r1, r1, #9
 80004a6:	468c      	mov	ip, r1
 80004a8:	4465      	add	r5, ip
 80004aa:	0400      	lsls	r0, r0, #16
 80004ac:	0419      	lsls	r1, r3, #16
 80004ae:	0c00      	lsrs	r0, r0, #16
 80004b0:	1809      	adds	r1, r1, r0
 80004b2:	018e      	lsls	r6, r1, #6
 80004b4:	1e70      	subs	r0, r6, #1
 80004b6:	4186      	sbcs	r6, r0
 80004b8:	0c1b      	lsrs	r3, r3, #16
 80004ba:	0e89      	lsrs	r1, r1, #26
 80004bc:	195b      	adds	r3, r3, r5
 80004be:	430e      	orrs	r6, r1
 80004c0:	019b      	lsls	r3, r3, #6
 80004c2:	431e      	orrs	r6, r3
 80004c4:	011b      	lsls	r3, r3, #4
 80004c6:	d46c      	bmi.n	80005a2 <__aeabi_fmul+0x1ae>
 80004c8:	0023      	movs	r3, r4
 80004ca:	337f      	adds	r3, #127	@ 0x7f
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	dc00      	bgt.n	80004d2 <__aeabi_fmul+0xde>
 80004d0:	e0b1      	b.n	8000636 <__aeabi_fmul+0x242>
 80004d2:	0015      	movs	r5, r2
 80004d4:	0771      	lsls	r1, r6, #29
 80004d6:	d00b      	beq.n	80004f0 <__aeabi_fmul+0xfc>
 80004d8:	200f      	movs	r0, #15
 80004da:	0021      	movs	r1, r4
 80004dc:	4030      	ands	r0, r6
 80004de:	2804      	cmp	r0, #4
 80004e0:	d006      	beq.n	80004f0 <__aeabi_fmul+0xfc>
 80004e2:	3604      	adds	r6, #4
 80004e4:	0132      	lsls	r2, r6, #4
 80004e6:	d503      	bpl.n	80004f0 <__aeabi_fmul+0xfc>
 80004e8:	4b6e      	ldr	r3, [pc, #440]	@ (80006a4 <__aeabi_fmul+0x2b0>)
 80004ea:	401e      	ands	r6, r3
 80004ec:	000b      	movs	r3, r1
 80004ee:	3380      	adds	r3, #128	@ 0x80
 80004f0:	2bfe      	cmp	r3, #254	@ 0xfe
 80004f2:	dd00      	ble.n	80004f6 <__aeabi_fmul+0x102>
 80004f4:	e0bd      	b.n	8000672 <__aeabi_fmul+0x27e>
 80004f6:	01b2      	lsls	r2, r6, #6
 80004f8:	0a52      	lsrs	r2, r2, #9
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	e048      	b.n	8000590 <__aeabi_fmul+0x19c>
 80004fe:	2e00      	cmp	r6, #0
 8000500:	d000      	beq.n	8000504 <__aeabi_fmul+0x110>
 8000502:	e092      	b.n	800062a <__aeabi_fmul+0x236>
 8000504:	2308      	movs	r3, #8
 8000506:	4699      	mov	r9, r3
 8000508:	3b06      	subs	r3, #6
 800050a:	469a      	mov	sl, r3
 800050c:	027b      	lsls	r3, r7, #9
 800050e:	0a5b      	lsrs	r3, r3, #9
 8000510:	4698      	mov	r8, r3
 8000512:	007b      	lsls	r3, r7, #1
 8000514:	24ff      	movs	r4, #255	@ 0xff
 8000516:	0e1b      	lsrs	r3, r3, #24
 8000518:	0fff      	lsrs	r7, r7, #31
 800051a:	2b00      	cmp	r3, #0
 800051c:	d18a      	bne.n	8000434 <__aeabi_fmul+0x40>
 800051e:	4642      	mov	r2, r8
 8000520:	2a00      	cmp	r2, #0
 8000522:	d164      	bne.n	80005ee <__aeabi_fmul+0x1fa>
 8000524:	4649      	mov	r1, r9
 8000526:	3201      	adds	r2, #1
 8000528:	4311      	orrs	r1, r2
 800052a:	4689      	mov	r9, r1
 800052c:	290a      	cmp	r1, #10
 800052e:	dc08      	bgt.n	8000542 <__aeabi_fmul+0x14e>
 8000530:	407d      	eors	r5, r7
 8000532:	2001      	movs	r0, #1
 8000534:	b2ea      	uxtb	r2, r5
 8000536:	2902      	cmp	r1, #2
 8000538:	dc91      	bgt.n	800045e <__aeabi_fmul+0x6a>
 800053a:	0015      	movs	r5, r2
 800053c:	2200      	movs	r2, #0
 800053e:	e027      	b.n	8000590 <__aeabi_fmul+0x19c>
 8000540:	0015      	movs	r5, r2
 8000542:	4653      	mov	r3, sl
 8000544:	2b02      	cmp	r3, #2
 8000546:	d100      	bne.n	800054a <__aeabi_fmul+0x156>
 8000548:	e093      	b.n	8000672 <__aeabi_fmul+0x27e>
 800054a:	2b03      	cmp	r3, #3
 800054c:	d01a      	beq.n	8000584 <__aeabi_fmul+0x190>
 800054e:	2b01      	cmp	r3, #1
 8000550:	d12c      	bne.n	80005ac <__aeabi_fmul+0x1b8>
 8000552:	2300      	movs	r3, #0
 8000554:	2200      	movs	r2, #0
 8000556:	e01b      	b.n	8000590 <__aeabi_fmul+0x19c>
 8000558:	4643      	mov	r3, r8
 800055a:	34ff      	adds	r4, #255	@ 0xff
 800055c:	2b00      	cmp	r3, #0
 800055e:	d055      	beq.n	800060c <__aeabi_fmul+0x218>
 8000560:	2103      	movs	r1, #3
 8000562:	464b      	mov	r3, r9
 8000564:	430b      	orrs	r3, r1
 8000566:	0019      	movs	r1, r3
 8000568:	2b0a      	cmp	r3, #10
 800056a:	dc00      	bgt.n	800056e <__aeabi_fmul+0x17a>
 800056c:	e092      	b.n	8000694 <__aeabi_fmul+0x2a0>
 800056e:	2b0f      	cmp	r3, #15
 8000570:	d000      	beq.n	8000574 <__aeabi_fmul+0x180>
 8000572:	e08c      	b.n	800068e <__aeabi_fmul+0x29a>
 8000574:	2280      	movs	r2, #128	@ 0x80
 8000576:	03d2      	lsls	r2, r2, #15
 8000578:	4216      	tst	r6, r2
 800057a:	d003      	beq.n	8000584 <__aeabi_fmul+0x190>
 800057c:	4643      	mov	r3, r8
 800057e:	4213      	tst	r3, r2
 8000580:	d100      	bne.n	8000584 <__aeabi_fmul+0x190>
 8000582:	e07d      	b.n	8000680 <__aeabi_fmul+0x28c>
 8000584:	2280      	movs	r2, #128	@ 0x80
 8000586:	03d2      	lsls	r2, r2, #15
 8000588:	4332      	orrs	r2, r6
 800058a:	0252      	lsls	r2, r2, #9
 800058c:	0a52      	lsrs	r2, r2, #9
 800058e:	23ff      	movs	r3, #255	@ 0xff
 8000590:	05d8      	lsls	r0, r3, #23
 8000592:	07ed      	lsls	r5, r5, #31
 8000594:	4310      	orrs	r0, r2
 8000596:	4328      	orrs	r0, r5
 8000598:	bce0      	pop	{r5, r6, r7}
 800059a:	46ba      	mov	sl, r7
 800059c:	46b1      	mov	r9, r6
 800059e:	46a8      	mov	r8, r5
 80005a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a2:	2301      	movs	r3, #1
 80005a4:	0015      	movs	r5, r2
 80005a6:	0871      	lsrs	r1, r6, #1
 80005a8:	401e      	ands	r6, r3
 80005aa:	430e      	orrs	r6, r1
 80005ac:	0023      	movs	r3, r4
 80005ae:	3380      	adds	r3, #128	@ 0x80
 80005b0:	1c61      	adds	r1, r4, #1
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dd41      	ble.n	800063a <__aeabi_fmul+0x246>
 80005b6:	0772      	lsls	r2, r6, #29
 80005b8:	d094      	beq.n	80004e4 <__aeabi_fmul+0xf0>
 80005ba:	220f      	movs	r2, #15
 80005bc:	4032      	ands	r2, r6
 80005be:	2a04      	cmp	r2, #4
 80005c0:	d000      	beq.n	80005c4 <__aeabi_fmul+0x1d0>
 80005c2:	e78e      	b.n	80004e2 <__aeabi_fmul+0xee>
 80005c4:	e78e      	b.n	80004e4 <__aeabi_fmul+0xf0>
 80005c6:	2e00      	cmp	r6, #0
 80005c8:	d105      	bne.n	80005d6 <__aeabi_fmul+0x1e2>
 80005ca:	2304      	movs	r3, #4
 80005cc:	4699      	mov	r9, r3
 80005ce:	3b03      	subs	r3, #3
 80005d0:	2400      	movs	r4, #0
 80005d2:	469a      	mov	sl, r3
 80005d4:	e726      	b.n	8000424 <__aeabi_fmul+0x30>
 80005d6:	0030      	movs	r0, r6
 80005d8:	f000 f8d6 	bl	8000788 <__clzsi2>
 80005dc:	2476      	movs	r4, #118	@ 0x76
 80005de:	1f43      	subs	r3, r0, #5
 80005e0:	409e      	lsls	r6, r3
 80005e2:	2300      	movs	r3, #0
 80005e4:	4264      	negs	r4, r4
 80005e6:	4699      	mov	r9, r3
 80005e8:	469a      	mov	sl, r3
 80005ea:	1a24      	subs	r4, r4, r0
 80005ec:	e71a      	b.n	8000424 <__aeabi_fmul+0x30>
 80005ee:	4640      	mov	r0, r8
 80005f0:	f000 f8ca 	bl	8000788 <__clzsi2>
 80005f4:	464b      	mov	r3, r9
 80005f6:	1a24      	subs	r4, r4, r0
 80005f8:	3c76      	subs	r4, #118	@ 0x76
 80005fa:	2b0a      	cmp	r3, #10
 80005fc:	dca1      	bgt.n	8000542 <__aeabi_fmul+0x14e>
 80005fe:	4643      	mov	r3, r8
 8000600:	3805      	subs	r0, #5
 8000602:	4083      	lsls	r3, r0
 8000604:	407d      	eors	r5, r7
 8000606:	4698      	mov	r8, r3
 8000608:	b2ea      	uxtb	r2, r5
 800060a:	e724      	b.n	8000456 <__aeabi_fmul+0x62>
 800060c:	464a      	mov	r2, r9
 800060e:	3302      	adds	r3, #2
 8000610:	4313      	orrs	r3, r2
 8000612:	002a      	movs	r2, r5
 8000614:	407a      	eors	r2, r7
 8000616:	b2d2      	uxtb	r2, r2
 8000618:	2b0a      	cmp	r3, #10
 800061a:	dc92      	bgt.n	8000542 <__aeabi_fmul+0x14e>
 800061c:	4649      	mov	r1, r9
 800061e:	0015      	movs	r5, r2
 8000620:	2900      	cmp	r1, #0
 8000622:	d026      	beq.n	8000672 <__aeabi_fmul+0x27e>
 8000624:	4699      	mov	r9, r3
 8000626:	2002      	movs	r0, #2
 8000628:	e719      	b.n	800045e <__aeabi_fmul+0x6a>
 800062a:	230c      	movs	r3, #12
 800062c:	4699      	mov	r9, r3
 800062e:	3b09      	subs	r3, #9
 8000630:	24ff      	movs	r4, #255	@ 0xff
 8000632:	469a      	mov	sl, r3
 8000634:	e6f6      	b.n	8000424 <__aeabi_fmul+0x30>
 8000636:	0015      	movs	r5, r2
 8000638:	0021      	movs	r1, r4
 800063a:	2201      	movs	r2, #1
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	2b1b      	cmp	r3, #27
 8000640:	dd00      	ble.n	8000644 <__aeabi_fmul+0x250>
 8000642:	e786      	b.n	8000552 <__aeabi_fmul+0x15e>
 8000644:	319e      	adds	r1, #158	@ 0x9e
 8000646:	0032      	movs	r2, r6
 8000648:	408e      	lsls	r6, r1
 800064a:	40da      	lsrs	r2, r3
 800064c:	1e73      	subs	r3, r6, #1
 800064e:	419e      	sbcs	r6, r3
 8000650:	4332      	orrs	r2, r6
 8000652:	0753      	lsls	r3, r2, #29
 8000654:	d004      	beq.n	8000660 <__aeabi_fmul+0x26c>
 8000656:	230f      	movs	r3, #15
 8000658:	4013      	ands	r3, r2
 800065a:	2b04      	cmp	r3, #4
 800065c:	d000      	beq.n	8000660 <__aeabi_fmul+0x26c>
 800065e:	3204      	adds	r2, #4
 8000660:	0153      	lsls	r3, r2, #5
 8000662:	d510      	bpl.n	8000686 <__aeabi_fmul+0x292>
 8000664:	2301      	movs	r3, #1
 8000666:	2200      	movs	r2, #0
 8000668:	e792      	b.n	8000590 <__aeabi_fmul+0x19c>
 800066a:	003d      	movs	r5, r7
 800066c:	4646      	mov	r6, r8
 800066e:	4682      	mov	sl, r0
 8000670:	e767      	b.n	8000542 <__aeabi_fmul+0x14e>
 8000672:	23ff      	movs	r3, #255	@ 0xff
 8000674:	2200      	movs	r2, #0
 8000676:	e78b      	b.n	8000590 <__aeabi_fmul+0x19c>
 8000678:	2280      	movs	r2, #128	@ 0x80
 800067a:	2500      	movs	r5, #0
 800067c:	03d2      	lsls	r2, r2, #15
 800067e:	e786      	b.n	800058e <__aeabi_fmul+0x19a>
 8000680:	003d      	movs	r5, r7
 8000682:	431a      	orrs	r2, r3
 8000684:	e783      	b.n	800058e <__aeabi_fmul+0x19a>
 8000686:	0192      	lsls	r2, r2, #6
 8000688:	2300      	movs	r3, #0
 800068a:	0a52      	lsrs	r2, r2, #9
 800068c:	e780      	b.n	8000590 <__aeabi_fmul+0x19c>
 800068e:	003d      	movs	r5, r7
 8000690:	4646      	mov	r6, r8
 8000692:	e777      	b.n	8000584 <__aeabi_fmul+0x190>
 8000694:	002a      	movs	r2, r5
 8000696:	2301      	movs	r3, #1
 8000698:	407a      	eors	r2, r7
 800069a:	408b      	lsls	r3, r1
 800069c:	2003      	movs	r0, #3
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	e6e9      	b.n	8000476 <__aeabi_fmul+0x82>
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	f7ffffff 	.word	0xf7ffffff

080006a8 <__aeabi_f2iz>:
 80006a8:	0241      	lsls	r1, r0, #9
 80006aa:	0042      	lsls	r2, r0, #1
 80006ac:	0fc3      	lsrs	r3, r0, #31
 80006ae:	0a49      	lsrs	r1, r1, #9
 80006b0:	2000      	movs	r0, #0
 80006b2:	0e12      	lsrs	r2, r2, #24
 80006b4:	2a7e      	cmp	r2, #126	@ 0x7e
 80006b6:	dd03      	ble.n	80006c0 <__aeabi_f2iz+0x18>
 80006b8:	2a9d      	cmp	r2, #157	@ 0x9d
 80006ba:	dd02      	ble.n	80006c2 <__aeabi_f2iz+0x1a>
 80006bc:	4a09      	ldr	r2, [pc, #36]	@ (80006e4 <__aeabi_f2iz+0x3c>)
 80006be:	1898      	adds	r0, r3, r2
 80006c0:	4770      	bx	lr
 80006c2:	2080      	movs	r0, #128	@ 0x80
 80006c4:	0400      	lsls	r0, r0, #16
 80006c6:	4301      	orrs	r1, r0
 80006c8:	2a95      	cmp	r2, #149	@ 0x95
 80006ca:	dc07      	bgt.n	80006dc <__aeabi_f2iz+0x34>
 80006cc:	2096      	movs	r0, #150	@ 0x96
 80006ce:	1a82      	subs	r2, r0, r2
 80006d0:	40d1      	lsrs	r1, r2
 80006d2:	4248      	negs	r0, r1
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1f3      	bne.n	80006c0 <__aeabi_f2iz+0x18>
 80006d8:	0008      	movs	r0, r1
 80006da:	e7f1      	b.n	80006c0 <__aeabi_f2iz+0x18>
 80006dc:	3a96      	subs	r2, #150	@ 0x96
 80006de:	4091      	lsls	r1, r2
 80006e0:	e7f7      	b.n	80006d2 <__aeabi_f2iz+0x2a>
 80006e2:	46c0      	nop			@ (mov r8, r8)
 80006e4:	7fffffff 	.word	0x7fffffff

080006e8 <__aeabi_i2f>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	2800      	cmp	r0, #0
 80006ec:	d012      	beq.n	8000714 <__aeabi_i2f+0x2c>
 80006ee:	17c3      	asrs	r3, r0, #31
 80006f0:	18c5      	adds	r5, r0, r3
 80006f2:	405d      	eors	r5, r3
 80006f4:	0fc4      	lsrs	r4, r0, #31
 80006f6:	0028      	movs	r0, r5
 80006f8:	f000 f846 	bl	8000788 <__clzsi2>
 80006fc:	239e      	movs	r3, #158	@ 0x9e
 80006fe:	1a1b      	subs	r3, r3, r0
 8000700:	2b96      	cmp	r3, #150	@ 0x96
 8000702:	dc0f      	bgt.n	8000724 <__aeabi_i2f+0x3c>
 8000704:	2808      	cmp	r0, #8
 8000706:	d038      	beq.n	800077a <__aeabi_i2f+0x92>
 8000708:	3808      	subs	r0, #8
 800070a:	4085      	lsls	r5, r0
 800070c:	026d      	lsls	r5, r5, #9
 800070e:	0a6d      	lsrs	r5, r5, #9
 8000710:	b2d8      	uxtb	r0, r3
 8000712:	e002      	b.n	800071a <__aeabi_i2f+0x32>
 8000714:	2400      	movs	r4, #0
 8000716:	2000      	movs	r0, #0
 8000718:	2500      	movs	r5, #0
 800071a:	05c0      	lsls	r0, r0, #23
 800071c:	4328      	orrs	r0, r5
 800071e:	07e4      	lsls	r4, r4, #31
 8000720:	4320      	orrs	r0, r4
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	2b99      	cmp	r3, #153	@ 0x99
 8000726:	dc14      	bgt.n	8000752 <__aeabi_i2f+0x6a>
 8000728:	1f42      	subs	r2, r0, #5
 800072a:	4095      	lsls	r5, r2
 800072c:	002a      	movs	r2, r5
 800072e:	4915      	ldr	r1, [pc, #84]	@ (8000784 <__aeabi_i2f+0x9c>)
 8000730:	4011      	ands	r1, r2
 8000732:	0755      	lsls	r5, r2, #29
 8000734:	d01c      	beq.n	8000770 <__aeabi_i2f+0x88>
 8000736:	250f      	movs	r5, #15
 8000738:	402a      	ands	r2, r5
 800073a:	2a04      	cmp	r2, #4
 800073c:	d018      	beq.n	8000770 <__aeabi_i2f+0x88>
 800073e:	3104      	adds	r1, #4
 8000740:	08ca      	lsrs	r2, r1, #3
 8000742:	0149      	lsls	r1, r1, #5
 8000744:	d515      	bpl.n	8000772 <__aeabi_i2f+0x8a>
 8000746:	239f      	movs	r3, #159	@ 0x9f
 8000748:	0252      	lsls	r2, r2, #9
 800074a:	1a18      	subs	r0, r3, r0
 800074c:	0a55      	lsrs	r5, r2, #9
 800074e:	b2c0      	uxtb	r0, r0
 8000750:	e7e3      	b.n	800071a <__aeabi_i2f+0x32>
 8000752:	2205      	movs	r2, #5
 8000754:	0029      	movs	r1, r5
 8000756:	1a12      	subs	r2, r2, r0
 8000758:	40d1      	lsrs	r1, r2
 800075a:	0002      	movs	r2, r0
 800075c:	321b      	adds	r2, #27
 800075e:	4095      	lsls	r5, r2
 8000760:	002a      	movs	r2, r5
 8000762:	1e55      	subs	r5, r2, #1
 8000764:	41aa      	sbcs	r2, r5
 8000766:	430a      	orrs	r2, r1
 8000768:	4906      	ldr	r1, [pc, #24]	@ (8000784 <__aeabi_i2f+0x9c>)
 800076a:	4011      	ands	r1, r2
 800076c:	0755      	lsls	r5, r2, #29
 800076e:	d1e2      	bne.n	8000736 <__aeabi_i2f+0x4e>
 8000770:	08ca      	lsrs	r2, r1, #3
 8000772:	0252      	lsls	r2, r2, #9
 8000774:	0a55      	lsrs	r5, r2, #9
 8000776:	b2d8      	uxtb	r0, r3
 8000778:	e7cf      	b.n	800071a <__aeabi_i2f+0x32>
 800077a:	026d      	lsls	r5, r5, #9
 800077c:	0a6d      	lsrs	r5, r5, #9
 800077e:	308e      	adds	r0, #142	@ 0x8e
 8000780:	e7cb      	b.n	800071a <__aeabi_i2f+0x32>
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	fbffffff 	.word	0xfbffffff

08000788 <__clzsi2>:
 8000788:	211c      	movs	r1, #28
 800078a:	2301      	movs	r3, #1
 800078c:	041b      	lsls	r3, r3, #16
 800078e:	4298      	cmp	r0, r3
 8000790:	d301      	bcc.n	8000796 <__clzsi2+0xe>
 8000792:	0c00      	lsrs	r0, r0, #16
 8000794:	3910      	subs	r1, #16
 8000796:	0a1b      	lsrs	r3, r3, #8
 8000798:	4298      	cmp	r0, r3
 800079a:	d301      	bcc.n	80007a0 <__clzsi2+0x18>
 800079c:	0a00      	lsrs	r0, r0, #8
 800079e:	3908      	subs	r1, #8
 80007a0:	091b      	lsrs	r3, r3, #4
 80007a2:	4298      	cmp	r0, r3
 80007a4:	d301      	bcc.n	80007aa <__clzsi2+0x22>
 80007a6:	0900      	lsrs	r0, r0, #4
 80007a8:	3904      	subs	r1, #4
 80007aa:	a202      	add	r2, pc, #8	@ (adr r2, 80007b4 <__clzsi2+0x2c>)
 80007ac:	5c10      	ldrb	r0, [r2, r0]
 80007ae:	1840      	adds	r0, r0, r1
 80007b0:	4770      	bx	lr
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	02020304 	.word	0x02020304
 80007b8:	01010101 	.word	0x01010101
	...

080007c4 <setLED_MLOCAL>:

// -----------------------------------------------------------------


// ---I/O SECTION---------------------------------------------------
void setLED_MLOCAL(int state){	// LED @ A0
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	if (state != 0) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d007      	beq.n	80007e2 <setLED_MLOCAL+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80007d2:	2390      	movs	r3, #144	@ 0x90
 80007d4:	05db      	lsls	r3, r3, #23
 80007d6:	2201      	movs	r2, #1
 80007d8:	2101      	movs	r1, #1
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 fdfe 	bl	80013dc <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 80007e0:	e006      	b.n	80007f0 <setLED_MLOCAL+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80007e2:	2390      	movs	r3, #144	@ 0x90
 80007e4:	05db      	lsls	r3, r3, #23
 80007e6:	2200      	movs	r2, #0
 80007e8:	2101      	movs	r1, #1
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 fdf6 	bl	80013dc <HAL_GPIO_WritePin>
}
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b002      	add	sp, #8
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <setLED_MSERIAL>:

void setLED_MSERIAL(int state){ // LED @ A1
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	if (state != 0) {
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d007      	beq.n	8000816 <setLED_MSERIAL+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000806:	2390      	movs	r3, #144	@ 0x90
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	2201      	movs	r2, #1
 800080c:	2102      	movs	r1, #2
 800080e:	0018      	movs	r0, r3
 8000810:	f000 fde4 	bl	80013dc <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
	}
}
 8000814:	e006      	b.n	8000824 <setLED_MSERIAL+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000816:	2390      	movs	r3, #144	@ 0x90
 8000818:	05db      	lsls	r3, r3, #23
 800081a:	2200      	movs	r2, #0
 800081c:	2102      	movs	r1, #2
 800081e:	0018      	movs	r0, r3
 8000820:	f000 fddc 	bl	80013dc <HAL_GPIO_WritePin>
}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b002      	add	sp, #8
 800082a:	bd80      	pop	{r7, pc}

0800082c <setLED_BSY>:

void setLED_BSY(int state){		// LED @ A2
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	if (state != 0) {
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d007      	beq.n	800084a <setLED_BSY+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800083a:	2390      	movs	r3, #144	@ 0x90
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	2201      	movs	r2, #1
 8000840:	2108      	movs	r1, #8
 8000842:	0018      	movs	r0, r3
 8000844:	f000 fdca 	bl	80013dc <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
	}
}
 8000848:	e006      	b.n	8000858 <setLED_BSY+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800084a:	2390      	movs	r3, #144	@ 0x90
 800084c:	05db      	lsls	r3, r3, #23
 800084e:	2200      	movs	r2, #0
 8000850:	2108      	movs	r1, #8
 8000852:	0018      	movs	r0, r3
 8000854:	f000 fdc2 	bl	80013dc <HAL_GPIO_WritePin>
}
 8000858:	46c0      	nop			@ (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	b002      	add	sp, #8
 800085e:	bd80      	pop	{r7, pc}

08000860 <debugger>:
	HAL_Delay(100);
	setLED_MLOCAL(1);
	setLED_MSERIAL(1);
}

void debugger(){
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	// this is a debug-entrypoint useful for debugging stuff

	// This test should be used to calibrate / tune the rec magnet
	DEB_BLANK();
 8000864:	f000 fa6e 	bl	8000d44 <DEB_BLANK>
	HAL_Delay(500);
 8000868:	23fa      	movs	r3, #250	@ 0xfa
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	0018      	movs	r0, r3
 800086e:	f000 fb75 	bl	8000f5c <HAL_Delay>
	return;
 8000872:	46c0      	nop			@ (mov r8, r8)
		waitForBTpress();
	}

	DEB_CR();
	DEB_LF();
}
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <init>:

void ui(){

}

void init(){
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	// scary ST-Stuff
    HAL_Init();
 800087c:	f000 fb0a 	bl	8000e94 <HAL_Init>

    SystemClock_Config();
 8000880:	f000 f831 	bl	80008e6 <SystemClock_Config>

    MX_GPIO_Init();
 8000884:	f000 f8e8 	bl	8000a58 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8000888:	f000 f8b6 	bl	80009f8 <MX_USART2_UART_Init>
    MX_USART1_UART_Init();
 800088c:	f000 f882 	bl	8000994 <MX_USART1_UART_Init>
    // -------------------------------------------------------------

    // init vars
    writeBuffer = malloc(0);
 8000890:	2000      	movs	r0, #0
 8000892:	f001 ff65 	bl	8002760 <malloc>
 8000896:	0003      	movs	r3, r0
 8000898:	001a      	movs	r2, r3
 800089a:	4b0d      	ldr	r3, [pc, #52]	@ (80008d0 <init+0x58>)
 800089c:	601a      	str	r2, [r3, #0]
    tty_symbols = malloc(0);
 800089e:	2000      	movs	r0, #0
 80008a0:	f001 ff5e 	bl	8002760 <malloc>
 80008a4:	0003      	movs	r3, r0
 80008a6:	001a      	movs	r2, r3
 80008a8:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <init+0x5c>)
 80008aa:	601a      	str	r2, [r3, #0]

    // init i/o stuff
    setLED_BSY(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f7ff ffbd 	bl	800082c <setLED_BSY>
    setLED_MLOCAL(0);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff ff86 	bl	80007c4 <setLED_MLOCAL>
    setLED_MSERIAL(0);
 80008b8:	2000      	movs	r0, #0
 80008ba:	f7ff ff9d 	bl	80007f8 <setLED_MSERIAL>

    setTTY(0);
 80008be:	2000      	movs	r0, #0
 80008c0:	f000 fa8c 	bl	8000ddc <setTTY>
    // -------------------------------------------------------------
    // wait until bt is pressed

	setLED_BSY(0);
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff ffb1 	bl	800082c <setLED_BSY>
    //TODO: init ESP8266 uart

	// now we can do some UI-Stuff, like ask for bd-rate, esp-ip,
	// termminal-width, etc.
    //booTY();	// Boot TTY
}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000190 	.word	0x20000190
 80008d4:	20000194 	.word	0x20000194

080008d8 <main>:

int main(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

	init();
 80008dc:	f7ff ffcc 	bl	8000878 <init>
    while(1){
        //manageIO();    // Like toggle LEDs, poll Button, etc.
		debugger();
 80008e0:	f7ff ffbe 	bl	8000860 <debugger>
 80008e4:	e7fc      	b.n	80008e0 <main+0x8>

080008e6 <SystemClock_Config>:
}


// ---SCARY ST STUFF :C---------------------------------------------
void SystemClock_Config(void)
{
 80008e6:	b590      	push	{r4, r7, lr}
 80008e8:	b099      	sub	sp, #100	@ 0x64
 80008ea:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ec:	242c      	movs	r4, #44	@ 0x2c
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	0018      	movs	r0, r3
 80008f2:	2334      	movs	r3, #52	@ 0x34
 80008f4:	001a      	movs	r2, r3
 80008f6:	2100      	movs	r1, #0
 80008f8:	f001 ffee 	bl	80028d8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	231c      	movs	r3, #28
 80008fe:	18fb      	adds	r3, r7, r3
 8000900:	0018      	movs	r0, r3
 8000902:	2310      	movs	r3, #16
 8000904:	001a      	movs	r2, r3
 8000906:	2100      	movs	r1, #0
 8000908:	f001 ffe6 	bl	80028d8 <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	0018      	movs	r0, r3
 8000910:	2318      	movs	r3, #24
 8000912:	001a      	movs	r2, r3
 8000914:	2100      	movs	r1, #0
 8000916:	f001 ffdf 	bl	80028d8 <memset>

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800091a:	0021      	movs	r1, r4
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2202      	movs	r2, #2
 8000920:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2201      	movs	r2, #1
 8000926:	60da      	str	r2, [r3, #12]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2210      	movs	r2, #16
 800092c:	611a      	str	r2, [r3, #16]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2200      	movs	r2, #0
 8000932:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000934:	187b      	adds	r3, r7, r1
 8000936:	0018      	movs	r0, r3
 8000938:	f000 fd6e 	bl	8001418 <HAL_RCC_OscConfig>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0x5e>
    {
        Error_Handler();
 8000940:	f000 f8f6 	bl	8000b30 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000944:	211c      	movs	r1, #28
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2207      	movs	r2, #7
 800094a:	601a      	str	r2, [r3, #0]
                                |RCC_CLOCKTYPE_PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2200      	movs	r2, #0
 8000950:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2100      	movs	r1, #0
 8000962:	0018      	movs	r0, r3
 8000964:	f001 f8de 	bl	8001b24 <HAL_RCC_ClockConfig>
 8000968:	1e03      	subs	r3, r0, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0x8a>
    {
        Error_Handler();
 800096c:	f000 f8e0 	bl	8000b30 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2201      	movs	r2, #1
 8000974:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	0018      	movs	r0, r3
 8000980:	f001 fa3c 	bl	8001dfc <HAL_RCCEx_PeriphCLKConfig>
 8000984:	1e03      	subs	r3, r0, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0xa6>
    {
        Error_Handler();
 8000988:	f000 f8d2 	bl	8000b30 <Error_Handler>
    }
}
 800098c:	46c0      	nop			@ (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b019      	add	sp, #100	@ 0x64
 8000992:	bd90      	pop	{r4, r7, pc}

08000994 <MX_USART1_UART_Init>:
    * @brief USART1 Initialization Function
    * @param None
    * @retval None
*/
static void MX_USART1_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8000998:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <MX_USART1_UART_Init+0x5c>)
 800099a:	4a16      	ldr	r2, [pc, #88]	@ (80009f4 <MX_USART1_UART_Init+0x60>)
 800099c:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 9600;
 800099e:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <MX_USART1_UART_Init+0x5c>)
 80009a0:	2296      	movs	r2, #150	@ 0x96
 80009a2:	0192      	lsls	r2, r2, #6
 80009a4:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <MX_USART1_UART_Init+0x5c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <MX_USART1_UART_Init+0x5c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_EVEN;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_USART1_UART_Init+0x5c>)
 80009b4:	2280      	movs	r2, #128	@ 0x80
 80009b6:	00d2      	lsls	r2, r2, #3
 80009b8:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80009ba:	4b0d      	ldr	r3, [pc, #52]	@ (80009f0 <MX_USART1_UART_Init+0x5c>)
 80009bc:	220c      	movs	r2, #12
 80009be:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c0:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <MX_USART1_UART_Init+0x5c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c6:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <MX_USART1_UART_Init+0x5c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <MX_USART1_UART_Init+0x5c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d2:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <MX_USART1_UART_Init+0x5c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d8:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <MX_USART1_UART_Init+0x5c>)
 80009da:	0018      	movs	r0, r3
 80009dc:	f001 fafc 	bl	8001fd8 <HAL_UART_Init>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART1_UART_Init+0x54>
    {
        Error_Handler();
 80009e4:	f000 f8a4 	bl	8000b30 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 80009e8:	46c0      	nop			@ (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	20000080 	.word	0x20000080
 80009f4:	40013800 	.word	0x40013800

080009f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 80009fc:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 80009fe:	4a15      	ldr	r2, [pc, #84]	@ (8000a54 <MX_USART2_UART_Init+0x5c>)
 8000a00:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 38400;
 8000a02:	4b13      	ldr	r3, [pc, #76]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 8000a04:	2296      	movs	r2, #150	@ 0x96
 8000a06:	0212      	lsls	r2, r2, #8
 8000a08:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a3a:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f001 facb 	bl	8001fd8 <HAL_UART_Init>
 8000a42:	1e03      	subs	r3, r0, #0
 8000a44:	d001      	beq.n	8000a4a <MX_USART2_UART_Init+0x52>
    {
        Error_Handler();
 8000a46:	f000 f873 	bl	8000b30 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000108 	.word	0x20000108
 8000a54:	40004400 	.word	0x40004400

08000a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b089      	sub	sp, #36	@ 0x24
 8000a5c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	240c      	movs	r4, #12
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	0018      	movs	r0, r3
 8000a64:	2314      	movs	r3, #20
 8000a66:	001a      	movs	r2, r3
 8000a68:	2100      	movs	r1, #0
 8000a6a:	f001 ff35 	bl	80028d8 <memset>
    /* USER CODE BEGIN MX_GPIO_Init_1 */

    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b2c <MX_GPIO_Init+0xd4>)
 8000a70:	695a      	ldr	r2, [r3, #20]
 8000a72:	4b2e      	ldr	r3, [pc, #184]	@ (8000b2c <MX_GPIO_Init+0xd4>)
 8000a74:	2180      	movs	r1, #128	@ 0x80
 8000a76:	03c9      	lsls	r1, r1, #15
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	615a      	str	r2, [r3, #20]
 8000a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000b2c <MX_GPIO_Init+0xd4>)
 8000a7e:	695a      	ldr	r2, [r3, #20]
 8000a80:	2380      	movs	r3, #128	@ 0x80
 8000a82:	03db      	lsls	r3, r3, #15
 8000a84:	4013      	ands	r3, r2
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	4b28      	ldr	r3, [pc, #160]	@ (8000b2c <MX_GPIO_Init+0xd4>)
 8000a8c:	695a      	ldr	r2, [r3, #20]
 8000a8e:	4b27      	ldr	r3, [pc, #156]	@ (8000b2c <MX_GPIO_Init+0xd4>)
 8000a90:	2180      	movs	r1, #128	@ 0x80
 8000a92:	0289      	lsls	r1, r1, #10
 8000a94:	430a      	orrs	r2, r1
 8000a96:	615a      	str	r2, [r3, #20]
 8000a98:	4b24      	ldr	r3, [pc, #144]	@ (8000b2c <MX_GPIO_Init+0xd4>)
 8000a9a:	695a      	ldr	r2, [r3, #20]
 8000a9c:	2380      	movs	r3, #128	@ 0x80
 8000a9e:	029b      	lsls	r3, r3, #10
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LED_MLOCAL_Pin|LED_MSERIAL_Pin|LED_BSY_Pin|TTY_SEND_Pin, GPIO_PIN_RESET);
 8000aa6:	2390      	movs	r3, #144	@ 0x90
 8000aa8:	05db      	lsls	r3, r3, #23
 8000aaa:	2200      	movs	r2, #0
 8000aac:	211b      	movs	r1, #27
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 fc94 	bl	80013dc <HAL_GPIO_WritePin>

    /*Configure GPIO pins : LED_MLOCAL_Pin LED_MSERIAL_Pin LED_BSY_Pin TTY_SEND_Pin */
    GPIO_InitStruct.Pin = LED_MLOCAL_Pin|LED_MSERIAL_Pin|LED_BSY_Pin;
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	220b      	movs	r2, #11
 8000ab8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	2201      	movs	r2, #1
 8000abe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	193a      	adds	r2, r7, r4
 8000ace:	2390      	movs	r3, #144	@ 0x90
 8000ad0:	05db      	lsls	r3, r3, #23
 8000ad2:	0011      	movs	r1, r2
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f000 fb19 	bl	800110c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TTY_SEND_Pin;
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	2210      	movs	r2, #16
 8000ade:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ae0:	193b      	adds	r3, r7, r4
 8000ae2:	2211      	movs	r2, #17
 8000ae4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	2203      	movs	r2, #3
 8000af0:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	193a      	adds	r2, r7, r4
 8000af4:	2390      	movs	r3, #144	@ 0x90
 8000af6:	05db      	lsls	r3, r3, #23
 8000af8:	0011      	movs	r1, r2
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 fb06 	bl	800110c <HAL_GPIO_Init>

    /*Configure GPIO pins : TTY_RECEIVE_Pin BT_Mode_Pin */
    GPIO_InitStruct.Pin = TTY_RECEIVE_Pin|BT_MODE_Pin;
 8000b00:	0021      	movs	r1, r4
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2282      	movs	r2, #130	@ 0x82
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	187a      	adds	r2, r7, r1
 8000b18:	2390      	movs	r3, #144	@ 0x90
 8000b1a:	05db      	lsls	r3, r3, #23
 8000b1c:	0011      	movs	r1, r2
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 faf4 	bl	800110c <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */

    /* USER CODE END MX_GPIO_Init_2 */
}
 8000b24:	46c0      	nop			@ (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b009      	add	sp, #36	@ 0x24
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	40021000 	.word	0x40021000

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	46c0      	nop			@ (mov r8, r8)
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	e7fd      	b.n	8000b38 <Error_Handler+0x8>

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	4b0f      	ldr	r3, [pc, #60]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b44:	699a      	ldr	r2, [r3, #24]
 8000b46:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b48:	2101      	movs	r1, #1
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	619a      	str	r2, [r3, #24]
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	2201      	movs	r2, #1
 8000b54:	4013      	ands	r3, r2
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b5c:	69da      	ldr	r2, [r3, #28]
 8000b5e:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b60:	2180      	movs	r1, #128	@ 0x80
 8000b62:	0549      	lsls	r1, r1, #21
 8000b64:	430a      	orrs	r2, r1
 8000b66:	61da      	str	r2, [r3, #28]
 8000b68:	4b05      	ldr	r3, [pc, #20]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b6a:	69da      	ldr	r2, [r3, #28]
 8000b6c:	2380      	movs	r3, #128	@ 0x80
 8000b6e:	055b      	lsls	r3, r3, #21
 8000b70:	4013      	ands	r3, r2
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	40021000 	.word	0x40021000

08000b84 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b08d      	sub	sp, #52	@ 0x34
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	241c      	movs	r4, #28
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	0018      	movs	r0, r3
 8000b92:	2314      	movs	r3, #20
 8000b94:	001a      	movs	r2, r3
 8000b96:	2100      	movs	r1, #0
 8000b98:	f001 fe9e 	bl	80028d8 <memset>
  if(huart->Instance==USART1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a39      	ldr	r2, [pc, #228]	@ (8000c88 <HAL_UART_MspInit+0x104>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d134      	bne.n	8000c10 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ba6:	4b39      	ldr	r3, [pc, #228]	@ (8000c8c <HAL_UART_MspInit+0x108>)
 8000ba8:	699a      	ldr	r2, [r3, #24]
 8000baa:	4b38      	ldr	r3, [pc, #224]	@ (8000c8c <HAL_UART_MspInit+0x108>)
 8000bac:	2180      	movs	r1, #128	@ 0x80
 8000bae:	01c9      	lsls	r1, r1, #7
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	619a      	str	r2, [r3, #24]
 8000bb4:	4b35      	ldr	r3, [pc, #212]	@ (8000c8c <HAL_UART_MspInit+0x108>)
 8000bb6:	699a      	ldr	r2, [r3, #24]
 8000bb8:	2380      	movs	r3, #128	@ 0x80
 8000bba:	01db      	lsls	r3, r3, #7
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b32      	ldr	r3, [pc, #200]	@ (8000c8c <HAL_UART_MspInit+0x108>)
 8000bc4:	695a      	ldr	r2, [r3, #20]
 8000bc6:	4b31      	ldr	r3, [pc, #196]	@ (8000c8c <HAL_UART_MspInit+0x108>)
 8000bc8:	2180      	movs	r1, #128	@ 0x80
 8000bca:	0289      	lsls	r1, r1, #10
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	615a      	str	r2, [r3, #20]
 8000bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8000c8c <HAL_UART_MspInit+0x108>)
 8000bd2:	695a      	ldr	r2, [r3, #20]
 8000bd4:	2380      	movs	r3, #128	@ 0x80
 8000bd6:	029b      	lsls	r3, r3, #10
 8000bd8:	4013      	ands	r3, r2
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bde:	193b      	adds	r3, r7, r4
 8000be0:	22c0      	movs	r2, #192	@ 0xc0
 8000be2:	00d2      	lsls	r2, r2, #3
 8000be4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	0021      	movs	r1, r4
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2202      	movs	r2, #2
 8000bec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	187a      	adds	r2, r7, r1
 8000c02:	2390      	movs	r3, #144	@ 0x90
 8000c04:	05db      	lsls	r3, r3, #23
 8000c06:	0011      	movs	r1, r2
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f000 fa7f 	bl	800110c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c0e:	e037      	b.n	8000c80 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a1e      	ldr	r2, [pc, #120]	@ (8000c90 <HAL_UART_MspInit+0x10c>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d132      	bne.n	8000c80 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c8c <HAL_UART_MspInit+0x108>)
 8000c1c:	69da      	ldr	r2, [r3, #28]
 8000c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c8c <HAL_UART_MspInit+0x108>)
 8000c20:	2180      	movs	r1, #128	@ 0x80
 8000c22:	0289      	lsls	r1, r1, #10
 8000c24:	430a      	orrs	r2, r1
 8000c26:	61da      	str	r2, [r3, #28]
 8000c28:	4b18      	ldr	r3, [pc, #96]	@ (8000c8c <HAL_UART_MspInit+0x108>)
 8000c2a:	69da      	ldr	r2, [r3, #28]
 8000c2c:	2380      	movs	r3, #128	@ 0x80
 8000c2e:	029b      	lsls	r3, r3, #10
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <HAL_UART_MspInit+0x108>)
 8000c38:	695a      	ldr	r2, [r3, #20]
 8000c3a:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <HAL_UART_MspInit+0x108>)
 8000c3c:	2180      	movs	r1, #128	@ 0x80
 8000c3e:	0289      	lsls	r1, r1, #10
 8000c40:	430a      	orrs	r2, r1
 8000c42:	615a      	str	r2, [r3, #20]
 8000c44:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <HAL_UART_MspInit+0x108>)
 8000c46:	695a      	ldr	r2, [r3, #20]
 8000c48:	2380      	movs	r3, #128	@ 0x80
 8000c4a:	029b      	lsls	r3, r3, #10
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000c52:	211c      	movs	r1, #28
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	4a0f      	ldr	r2, [pc, #60]	@ (8000c94 <HAL_UART_MspInit+0x110>)
 8000c58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2203      	movs	r2, #3
 8000c6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2201      	movs	r2, #1
 8000c70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	187a      	adds	r2, r7, r1
 8000c74:	2390      	movs	r3, #144	@ 0x90
 8000c76:	05db      	lsls	r3, r3, #23
 8000c78:	0011      	movs	r1, r2
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 fa46 	bl	800110c <HAL_GPIO_Init>
}
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b00d      	add	sp, #52	@ 0x34
 8000c86:	bd90      	pop	{r4, r7, pc}
 8000c88:	40013800 	.word	0x40013800
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40004400 	.word	0x40004400
 8000c94:	00008004 	.word	0x00008004

08000c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c9c:	46c0      	nop			@ (mov r8, r8)
 8000c9e:	e7fd      	b.n	8000c9c <NMI_Handler+0x4>

08000ca0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca4:	46c0      	nop			@ (mov r8, r8)
 8000ca6:	e7fd      	b.n	8000ca4 <HardFault_Handler+0x4>

08000ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cac:	46c0      	nop			@ (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc0:	f000 f930 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc4:	46c0      	nop			@ (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd4:	4a14      	ldr	r2, [pc, #80]	@ (8000d28 <_sbrk+0x5c>)
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <_sbrk+0x60>)
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce0:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <_sbrk+0x64>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	@ (8000d34 <_sbrk+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	18d3      	adds	r3, r2, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cfc:	f001 fe06 	bl	800290c <__errno>
 8000d00:	0003      	movs	r3, r0
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d06:	2301      	movs	r3, #1
 8000d08:	425b      	negs	r3, r3
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d12:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	18d2      	adds	r2, r2, r3
 8000d1a:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <_sbrk+0x64>)
 8000d1c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b006      	add	sp, #24
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20001800 	.word	0x20001800
 8000d2c:	00000400 	.word	0x00000400
 8000d30:	20000198 	.word	0x20000198
 8000d34:	200002e8 	.word	0x200002e8

08000d38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d3c:	46c0      	nop			@ (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <DEB_BLANK>:
}




void DEB_BLANK(){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	TTY_Startbit();
 8000d48:	f000 f80c 	bl	8000d64 <TTY_Startbit>

    TTY_Stopbit(1.0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4b04      	ldr	r3, [pc, #16]	@ (8000d60 <DEB_BLANK+0x1c>)
 8000d50:	0010      	movs	r0, r2
 8000d52:	0019      	movs	r1, r3
 8000d54:	f000 f81c 	bl	8000d90 <TTY_Stopbit>
}
 8000d58:	46c0      	nop			@ (mov r8, r8)
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	3ff00000 	.word	0x3ff00000

08000d64 <TTY_Startbit>:

	setTTY(0);
	HAL_Delay(90);

}
void TTY_Startbit(){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	setTTY(1);
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f000 f837 	bl	8000ddc <setTTY>
	HAL_Delay(1000 / baud);
 8000d6e:	4b07      	ldr	r3, [pc, #28]	@ (8000d8c <TTY_Startbit+0x28>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	0019      	movs	r1, r3
 8000d74:	23fa      	movs	r3, #250	@ 0xfa
 8000d76:	0098      	lsls	r0, r3, #2
 8000d78:	f7ff fa50 	bl	800021c <__divsi3>
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f000 f8ec 	bl	8000f5c <HAL_Delay>
}
 8000d84:	46c0      	nop			@ (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	20000004 	.word	0x20000004

08000d90 <TTY_Stopbit>:

void TTY_Stopbit(){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	setTTY(0);
 8000d94:	2000      	movs	r0, #0
 8000d96:	f000 f821 	bl	8000ddc <setTTY>
	HAL_Delay((int)(stopbit_cnt * (1000 / baud)));
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd4 <TTY_Stopbit+0x44>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	0019      	movs	r1, r3
 8000da0:	23fa      	movs	r3, #250	@ 0xfa
 8000da2:	0098      	lsls	r0, r3, #2
 8000da4:	f7ff fa3a 	bl	800021c <__divsi3>
 8000da8:	0003      	movs	r3, r0
 8000daa:	0018      	movs	r0, r3
 8000dac:	f7ff fc9c 	bl	80006e8 <__aeabi_i2f>
 8000db0:	1c02      	adds	r2, r0, #0
 8000db2:	4b09      	ldr	r3, [pc, #36]	@ (8000dd8 <TTY_Stopbit+0x48>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	1c19      	adds	r1, r3, #0
 8000db8:	1c10      	adds	r0, r2, #0
 8000dba:	f7ff fb1b 	bl	80003f4 <__aeabi_fmul>
 8000dbe:	1c03      	adds	r3, r0, #0
 8000dc0:	1c18      	adds	r0, r3, #0
 8000dc2:	f7ff fc71 	bl	80006a8 <__aeabi_f2iz>
 8000dc6:	0003      	movs	r3, r0
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f000 f8c7 	bl	8000f5c <HAL_Delay>
}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000004 	.word	0x20000004
 8000dd8:	20000008 	.word	0x20000008

08000ddc <setTTY>:
	// writes a 7Bit ASCII to CCITT-2
	int out = (int) c;
	TTY_WRITE(out);
}

void setTTY(int state){			// TTY @ A3
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	if (state != 0) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d007      	beq.n	8000dfa <setTTY+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000dea:	2390      	movs	r3, #144	@ 0x90
 8000dec:	05db      	lsls	r3, r3, #23
 8000dee:	2201      	movs	r2, #1
 8000df0:	2110      	movs	r1, #16
 8000df2:	0018      	movs	r0, r3
 8000df4:	f000 faf2 	bl	80013dc <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
	}
}
 8000df8:	e006      	b.n	8000e08 <setTTY+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000dfa:	2390      	movs	r3, #144	@ 0x90
 8000dfc:	05db      	lsls	r3, r3, #23
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2110      	movs	r1, #16
 8000e02:	0018      	movs	r0, r3
 8000e04:	f000 faea 	bl	80013dc <HAL_GPIO_WritePin>
}
 8000e08:	46c0      	nop			@ (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b002      	add	sp, #8
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e10:	4813      	ldr	r0, [pc, #76]	@ (8000e60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e12:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e14:	f7ff ff90 	bl	8000d38 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000e18:	4812      	ldr	r0, [pc, #72]	@ (8000e64 <LoopForever+0x6>)
    LDR R1, [R0]
 8000e1a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000e1c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000e1e:	4a12      	ldr	r2, [pc, #72]	@ (8000e68 <LoopForever+0xa>)
    CMP R1, R2
 8000e20:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000e22:	d105      	bne.n	8000e30 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000e24:	4811      	ldr	r0, [pc, #68]	@ (8000e6c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000e26:	4912      	ldr	r1, [pc, #72]	@ (8000e70 <LoopForever+0x12>)
    STR R1, [R0]
 8000e28:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000e2a:	4812      	ldr	r0, [pc, #72]	@ (8000e74 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000e2c:	4912      	ldr	r1, [pc, #72]	@ (8000e78 <LoopForever+0x1a>)
    STR R1, [R0]
 8000e2e:	6001      	str	r1, [r0, #0]

08000e30 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	4812      	ldr	r0, [pc, #72]	@ (8000e7c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000e32:	4913      	ldr	r1, [pc, #76]	@ (8000e80 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000e34:	4a13      	ldr	r2, [pc, #76]	@ (8000e84 <LoopForever+0x26>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a10      	ldr	r2, [pc, #64]	@ (8000e88 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000e48:	4c10      	ldr	r4, [pc, #64]	@ (8000e8c <LoopForever+0x2e>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e56:	f001 fd5f 	bl	8002918 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e5a:	f7ff fd3d 	bl	80008d8 <main>

08000e5e <LoopForever>:

LoopForever:
    b LoopForever
 8000e5e:	e7fe      	b.n	8000e5e <LoopForever>
  ldr   r0, =_estack
 8000e60:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000e64:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000e68:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000e6c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000e70:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000e74:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000e78:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000e84:	080029bc 	.word	0x080029bc
  ldr r2, =_sbss
 8000e88:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000e8c:	200002e8 	.word	0x200002e8

08000e90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC1_IRQHandler>
	...

08000e94 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b07      	ldr	r3, [pc, #28]	@ (8000eb8 <HAL_Init+0x24>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <HAL_Init+0x24>)
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f000 f809 	bl	8000ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eaa:	f7ff fe47 	bl	8000b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			@ (mov r8, r8)
 8000eb8:	40022000 	.word	0x40022000

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec4:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <HAL_InitTick+0x5c>)
 8000ec6:	681c      	ldr	r4, [r3, #0]
 8000ec8:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <HAL_InitTick+0x60>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	0019      	movs	r1, r3
 8000ece:	23fa      	movs	r3, #250	@ 0xfa
 8000ed0:	0098      	lsls	r0, r3, #2
 8000ed2:	f7ff f919 	bl	8000108 <__udivsi3>
 8000ed6:	0003      	movs	r3, r0
 8000ed8:	0019      	movs	r1, r3
 8000eda:	0020      	movs	r0, r4
 8000edc:	f7ff f914 	bl	8000108 <__udivsi3>
 8000ee0:	0003      	movs	r3, r0
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f000 f905 	bl	80010f2 <HAL_SYSTICK_Config>
 8000ee8:	1e03      	subs	r3, r0, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e00f      	b.n	8000f10 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	d80b      	bhi.n	8000f0e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	425b      	negs	r3, r3
 8000efc:	2200      	movs	r2, #0
 8000efe:	0018      	movs	r0, r3
 8000f00:	f000 f8e2 	bl	80010c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_InitTick+0x64>)
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	0018      	movs	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b003      	add	sp, #12
 8000f16:	bd90      	pop	{r4, r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000010 	.word	0x20000010
 8000f20:	2000000c 	.word	0x2000000c

08000f24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <HAL_IncTick+0x1c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <HAL_IncTick+0x20>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	18d2      	adds	r2, r2, r3
 8000f34:	4b03      	ldr	r3, [pc, #12]	@ (8000f44 <HAL_IncTick+0x20>)
 8000f36:	601a      	str	r2, [r3, #0]
}
 8000f38:	46c0      	nop			@ (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			@ (mov r8, r8)
 8000f40:	20000010 	.word	0x20000010
 8000f44:	2000019c 	.word	0x2000019c

08000f48 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b02      	ldr	r3, [pc, #8]	@ (8000f58 <HAL_GetTick+0x10>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	0018      	movs	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			@ (mov r8, r8)
 8000f58:	2000019c 	.word	0x2000019c

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff fff0 	bl	8000f48 <HAL_GetTick>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	3301      	adds	r3, #1
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	001a      	movs	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	189b      	adds	r3, r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f82:	46c0      	nop			@ (mov r8, r8)
 8000f84:	f7ff ffe0 	bl	8000f48 <HAL_GetTick>
 8000f88:	0002      	movs	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	46c0      	nop			@ (mov r8, r8)
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b004      	add	sp, #16
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			@ (mov r8, r8)
 8000fa0:	20000010 	.word	0x20000010

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	0002      	movs	r2, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fb2:	1dfb      	adds	r3, r7, #7
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fb8:	d828      	bhi.n	800100c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fba:	4a2f      	ldr	r2, [pc, #188]	@ (8001078 <__NVIC_SetPriority+0xd4>)
 8000fbc:	1dfb      	adds	r3, r7, #7
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	089b      	lsrs	r3, r3, #2
 8000fc4:	33c0      	adds	r3, #192	@ 0xc0
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	589b      	ldr	r3, [r3, r2]
 8000fca:	1dfa      	adds	r2, r7, #7
 8000fcc:	7812      	ldrb	r2, [r2, #0]
 8000fce:	0011      	movs	r1, r2
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	400a      	ands	r2, r1
 8000fd4:	00d2      	lsls	r2, r2, #3
 8000fd6:	21ff      	movs	r1, #255	@ 0xff
 8000fd8:	4091      	lsls	r1, r2
 8000fda:	000a      	movs	r2, r1
 8000fdc:	43d2      	mvns	r2, r2
 8000fde:	401a      	ands	r2, r3
 8000fe0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	019b      	lsls	r3, r3, #6
 8000fe6:	22ff      	movs	r2, #255	@ 0xff
 8000fe8:	401a      	ands	r2, r3
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	0018      	movs	r0, r3
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	4003      	ands	r3, r0
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff8:	481f      	ldr	r0, [pc, #124]	@ (8001078 <__NVIC_SetPriority+0xd4>)
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b25b      	sxtb	r3, r3
 8001000:	089b      	lsrs	r3, r3, #2
 8001002:	430a      	orrs	r2, r1
 8001004:	33c0      	adds	r3, #192	@ 0xc0
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800100a:	e031      	b.n	8001070 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800100c:	4a1b      	ldr	r2, [pc, #108]	@ (800107c <__NVIC_SetPriority+0xd8>)
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	0019      	movs	r1, r3
 8001014:	230f      	movs	r3, #15
 8001016:	400b      	ands	r3, r1
 8001018:	3b08      	subs	r3, #8
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3306      	adds	r3, #6
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	18d3      	adds	r3, r2, r3
 8001022:	3304      	adds	r3, #4
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	1dfa      	adds	r2, r7, #7
 8001028:	7812      	ldrb	r2, [r2, #0]
 800102a:	0011      	movs	r1, r2
 800102c:	2203      	movs	r2, #3
 800102e:	400a      	ands	r2, r1
 8001030:	00d2      	lsls	r2, r2, #3
 8001032:	21ff      	movs	r1, #255	@ 0xff
 8001034:	4091      	lsls	r1, r2
 8001036:	000a      	movs	r2, r1
 8001038:	43d2      	mvns	r2, r2
 800103a:	401a      	ands	r2, r3
 800103c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	019b      	lsls	r3, r3, #6
 8001042:	22ff      	movs	r2, #255	@ 0xff
 8001044:	401a      	ands	r2, r3
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	0018      	movs	r0, r3
 800104c:	2303      	movs	r3, #3
 800104e:	4003      	ands	r3, r0
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001054:	4809      	ldr	r0, [pc, #36]	@ (800107c <__NVIC_SetPriority+0xd8>)
 8001056:	1dfb      	adds	r3, r7, #7
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	001c      	movs	r4, r3
 800105c:	230f      	movs	r3, #15
 800105e:	4023      	ands	r3, r4
 8001060:	3b08      	subs	r3, #8
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	430a      	orrs	r2, r1
 8001066:	3306      	adds	r3, #6
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	18c3      	adds	r3, r0, r3
 800106c:	3304      	adds	r3, #4
 800106e:	601a      	str	r2, [r3, #0]
}
 8001070:	46c0      	nop			@ (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	b003      	add	sp, #12
 8001076:	bd90      	pop	{r4, r7, pc}
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	1e5a      	subs	r2, r3, #1
 800108c:	2380      	movs	r3, #128	@ 0x80
 800108e:	045b      	lsls	r3, r3, #17
 8001090:	429a      	cmp	r2, r3
 8001092:	d301      	bcc.n	8001098 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001094:	2301      	movs	r3, #1
 8001096:	e010      	b.n	80010ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001098:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <SysTick_Config+0x44>)
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	3a01      	subs	r2, #1
 800109e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a0:	2301      	movs	r3, #1
 80010a2:	425b      	negs	r3, r3
 80010a4:	2103      	movs	r1, #3
 80010a6:	0018      	movs	r0, r3
 80010a8:	f7ff ff7c 	bl	8000fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <SysTick_Config+0x44>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <SysTick_Config+0x44>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	0018      	movs	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	b002      	add	sp, #8
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	210f      	movs	r1, #15
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	1c02      	adds	r2, r0, #0
 80010d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	0011      	movs	r1, r2
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff ff5d 	bl	8000fa4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80010ea:	46c0      	nop			@ (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b004      	add	sp, #16
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	0018      	movs	r0, r3
 80010fe:	f7ff ffbf 	bl	8001080 <SysTick_Config>
 8001102:	0003      	movs	r3, r0
}
 8001104:	0018      	movs	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	b002      	add	sp, #8
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111a:	e149      	b.n	80013b0 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2101      	movs	r1, #1
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4091      	lsls	r1, r2
 8001126:	000a      	movs	r2, r1
 8001128:	4013      	ands	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d100      	bne.n	8001134 <HAL_GPIO_Init+0x28>
 8001132:	e13a      	b.n	80013aa <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2203      	movs	r2, #3
 800113a:	4013      	ands	r3, r2
 800113c:	2b01      	cmp	r3, #1
 800113e:	d005      	beq.n	800114c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2203      	movs	r2, #3
 8001146:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001148:	2b02      	cmp	r3, #2
 800114a:	d130      	bne.n	80011ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	409a      	lsls	r2, r3
 800115a:	0013      	movs	r3, r2
 800115c:	43da      	mvns	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	409a      	lsls	r2, r3
 800116e:	0013      	movs	r3, r2
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001182:	2201      	movs	r2, #1
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
 8001188:	0013      	movs	r3, r2
 800118a:	43da      	mvns	r2, r3
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	2201      	movs	r2, #1
 800119a:	401a      	ands	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	409a      	lsls	r2, r3
 80011a0:	0013      	movs	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2203      	movs	r2, #3
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d017      	beq.n	80011ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	409a      	lsls	r2, r3
 80011c8:	0013      	movs	r3, r2
 80011ca:	43da      	mvns	r2, r3
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2203      	movs	r2, #3
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d123      	bne.n	800123e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	08da      	lsrs	r2, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3208      	adds	r2, #8
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	58d3      	ldr	r3, [r2, r3]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	2207      	movs	r2, #7
 8001208:	4013      	ands	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	220f      	movs	r2, #15
 800120e:	409a      	lsls	r2, r3
 8001210:	0013      	movs	r3, r2
 8001212:	43da      	mvns	r2, r3
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	691a      	ldr	r2, [r3, #16]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2107      	movs	r1, #7
 8001222:	400b      	ands	r3, r1
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	409a      	lsls	r2, r3
 8001228:	0013      	movs	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	08da      	lsrs	r2, r3, #3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3208      	adds	r2, #8
 8001238:	0092      	lsls	r2, r2, #2
 800123a:	6939      	ldr	r1, [r7, #16]
 800123c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	409a      	lsls	r2, r3
 800124c:	0013      	movs	r3, r2
 800124e:	43da      	mvns	r2, r3
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2203      	movs	r2, #3
 800125c:	401a      	ands	r2, r3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	23c0      	movs	r3, #192	@ 0xc0
 8001278:	029b      	lsls	r3, r3, #10
 800127a:	4013      	ands	r3, r2
 800127c:	d100      	bne.n	8001280 <HAL_GPIO_Init+0x174>
 800127e:	e094      	b.n	80013aa <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001280:	4b51      	ldr	r3, [pc, #324]	@ (80013c8 <HAL_GPIO_Init+0x2bc>)
 8001282:	699a      	ldr	r2, [r3, #24]
 8001284:	4b50      	ldr	r3, [pc, #320]	@ (80013c8 <HAL_GPIO_Init+0x2bc>)
 8001286:	2101      	movs	r1, #1
 8001288:	430a      	orrs	r2, r1
 800128a:	619a      	str	r2, [r3, #24]
 800128c:	4b4e      	ldr	r3, [pc, #312]	@ (80013c8 <HAL_GPIO_Init+0x2bc>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	2201      	movs	r2, #1
 8001292:	4013      	ands	r3, r2
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001298:	4a4c      	ldr	r2, [pc, #304]	@ (80013cc <HAL_GPIO_Init+0x2c0>)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	589b      	ldr	r3, [r3, r2]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	2203      	movs	r2, #3
 80012aa:	4013      	ands	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	220f      	movs	r2, #15
 80012b0:	409a      	lsls	r2, r3
 80012b2:	0013      	movs	r3, r2
 80012b4:	43da      	mvns	r2, r3
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	2390      	movs	r3, #144	@ 0x90
 80012c0:	05db      	lsls	r3, r3, #23
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d00d      	beq.n	80012e2 <HAL_GPIO_Init+0x1d6>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a41      	ldr	r2, [pc, #260]	@ (80013d0 <HAL_GPIO_Init+0x2c4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d007      	beq.n	80012de <HAL_GPIO_Init+0x1d2>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a40      	ldr	r2, [pc, #256]	@ (80013d4 <HAL_GPIO_Init+0x2c8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d101      	bne.n	80012da <HAL_GPIO_Init+0x1ce>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e004      	b.n	80012e4 <HAL_GPIO_Init+0x1d8>
 80012da:	2305      	movs	r3, #5
 80012dc:	e002      	b.n	80012e4 <HAL_GPIO_Init+0x1d8>
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <HAL_GPIO_Init+0x1d8>
 80012e2:	2300      	movs	r3, #0
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	2103      	movs	r1, #3
 80012e8:	400a      	ands	r2, r1
 80012ea:	0092      	lsls	r2, r2, #2
 80012ec:	4093      	lsls	r3, r2
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012f4:	4935      	ldr	r1, [pc, #212]	@ (80013cc <HAL_GPIO_Init+0x2c0>)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	3302      	adds	r3, #2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001302:	4b35      	ldr	r3, [pc, #212]	@ (80013d8 <HAL_GPIO_Init+0x2cc>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	43da      	mvns	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	2380      	movs	r3, #128	@ 0x80
 8001318:	035b      	lsls	r3, r3, #13
 800131a:	4013      	ands	r3, r2
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001326:	4b2c      	ldr	r3, [pc, #176]	@ (80013d8 <HAL_GPIO_Init+0x2cc>)
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800132c:	4b2a      	ldr	r3, [pc, #168]	@ (80013d8 <HAL_GPIO_Init+0x2cc>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	43da      	mvns	r2, r3
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	2380      	movs	r3, #128	@ 0x80
 8001342:	039b      	lsls	r3, r3, #14
 8001344:	4013      	ands	r3, r2
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001350:	4b21      	ldr	r3, [pc, #132]	@ (80013d8 <HAL_GPIO_Init+0x2cc>)
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001356:	4b20      	ldr	r3, [pc, #128]	@ (80013d8 <HAL_GPIO_Init+0x2cc>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43da      	mvns	r2, r3
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	2380      	movs	r3, #128	@ 0x80
 800136c:	029b      	lsls	r3, r3, #10
 800136e:	4013      	ands	r3, r2
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800137a:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <HAL_GPIO_Init+0x2cc>)
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001380:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <HAL_GPIO_Init+0x2cc>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	43da      	mvns	r2, r3
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	2380      	movs	r3, #128	@ 0x80
 8001396:	025b      	lsls	r3, r3, #9
 8001398:	4013      	ands	r3, r2
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <HAL_GPIO_Init+0x2cc>)
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3301      	adds	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	40da      	lsrs	r2, r3
 80013b8:	1e13      	subs	r3, r2, #0
 80013ba:	d000      	beq.n	80013be <HAL_GPIO_Init+0x2b2>
 80013bc:	e6ae      	b.n	800111c <HAL_GPIO_Init+0x10>
  } 
}
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	46c0      	nop			@ (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b006      	add	sp, #24
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40010000 	.word	0x40010000
 80013d0:	48000400 	.word	0x48000400
 80013d4:	48000800 	.word	0x48000800
 80013d8:	40010400 	.word	0x40010400

080013dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	0008      	movs	r0, r1
 80013e6:	0011      	movs	r1, r2
 80013e8:	1cbb      	adds	r3, r7, #2
 80013ea:	1c02      	adds	r2, r0, #0
 80013ec:	801a      	strh	r2, [r3, #0]
 80013ee:	1c7b      	adds	r3, r7, #1
 80013f0:	1c0a      	adds	r2, r1, #0
 80013f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013f4:	1c7b      	adds	r3, r7, #1
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d004      	beq.n	8001406 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013fc:	1cbb      	adds	r3, r7, #2
 80013fe:	881a      	ldrh	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001404:	e003      	b.n	800140e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001406:	1cbb      	adds	r3, r7, #2
 8001408:	881a      	ldrh	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800140e:	46c0      	nop			@ (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	b002      	add	sp, #8
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d102      	bne.n	800142c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	f000 fb76 	bl	8001b18 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2201      	movs	r2, #1
 8001432:	4013      	ands	r3, r2
 8001434:	d100      	bne.n	8001438 <HAL_RCC_OscConfig+0x20>
 8001436:	e08e      	b.n	8001556 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001438:	4bc5      	ldr	r3, [pc, #788]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	220c      	movs	r2, #12
 800143e:	4013      	ands	r3, r2
 8001440:	2b04      	cmp	r3, #4
 8001442:	d00e      	beq.n	8001462 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001444:	4bc2      	ldr	r3, [pc, #776]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	220c      	movs	r2, #12
 800144a:	4013      	ands	r3, r2
 800144c:	2b08      	cmp	r3, #8
 800144e:	d117      	bne.n	8001480 <HAL_RCC_OscConfig+0x68>
 8001450:	4bbf      	ldr	r3, [pc, #764]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	23c0      	movs	r3, #192	@ 0xc0
 8001456:	025b      	lsls	r3, r3, #9
 8001458:	401a      	ands	r2, r3
 800145a:	2380      	movs	r3, #128	@ 0x80
 800145c:	025b      	lsls	r3, r3, #9
 800145e:	429a      	cmp	r2, r3
 8001460:	d10e      	bne.n	8001480 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001462:	4bbb      	ldr	r3, [pc, #748]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	2380      	movs	r3, #128	@ 0x80
 8001468:	029b      	lsls	r3, r3, #10
 800146a:	4013      	ands	r3, r2
 800146c:	d100      	bne.n	8001470 <HAL_RCC_OscConfig+0x58>
 800146e:	e071      	b.n	8001554 <HAL_RCC_OscConfig+0x13c>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d000      	beq.n	800147a <HAL_RCC_OscConfig+0x62>
 8001478:	e06c      	b.n	8001554 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	f000 fb4c 	bl	8001b18 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d107      	bne.n	8001498 <HAL_RCC_OscConfig+0x80>
 8001488:	4bb1      	ldr	r3, [pc, #708]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4bb0      	ldr	r3, [pc, #704]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 800148e:	2180      	movs	r1, #128	@ 0x80
 8001490:	0249      	lsls	r1, r1, #9
 8001492:	430a      	orrs	r2, r1
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e02f      	b.n	80014f8 <HAL_RCC_OscConfig+0xe0>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d10c      	bne.n	80014ba <HAL_RCC_OscConfig+0xa2>
 80014a0:	4bab      	ldr	r3, [pc, #684]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4baa      	ldr	r3, [pc, #680]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80014a6:	49ab      	ldr	r1, [pc, #684]	@ (8001754 <HAL_RCC_OscConfig+0x33c>)
 80014a8:	400a      	ands	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	4ba8      	ldr	r3, [pc, #672]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4ba7      	ldr	r3, [pc, #668]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80014b2:	49a9      	ldr	r1, [pc, #676]	@ (8001758 <HAL_RCC_OscConfig+0x340>)
 80014b4:	400a      	ands	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	e01e      	b.n	80014f8 <HAL_RCC_OscConfig+0xe0>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d10e      	bne.n	80014e0 <HAL_RCC_OscConfig+0xc8>
 80014c2:	4ba3      	ldr	r3, [pc, #652]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4ba2      	ldr	r3, [pc, #648]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80014c8:	2180      	movs	r1, #128	@ 0x80
 80014ca:	02c9      	lsls	r1, r1, #11
 80014cc:	430a      	orrs	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	4b9f      	ldr	r3, [pc, #636]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b9e      	ldr	r3, [pc, #632]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80014d6:	2180      	movs	r1, #128	@ 0x80
 80014d8:	0249      	lsls	r1, r1, #9
 80014da:	430a      	orrs	r2, r1
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	e00b      	b.n	80014f8 <HAL_RCC_OscConfig+0xe0>
 80014e0:	4b9b      	ldr	r3, [pc, #620]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b9a      	ldr	r3, [pc, #616]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80014e6:	499b      	ldr	r1, [pc, #620]	@ (8001754 <HAL_RCC_OscConfig+0x33c>)
 80014e8:	400a      	ands	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	4b98      	ldr	r3, [pc, #608]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b97      	ldr	r3, [pc, #604]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80014f2:	4999      	ldr	r1, [pc, #612]	@ (8001758 <HAL_RCC_OscConfig+0x340>)
 80014f4:	400a      	ands	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d014      	beq.n	800152a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fd22 	bl	8000f48 <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800150a:	f7ff fd1d 	bl	8000f48 <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b64      	cmp	r3, #100	@ 0x64
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e2fd      	b.n	8001b18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151c:	4b8c      	ldr	r3, [pc, #560]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	2380      	movs	r3, #128	@ 0x80
 8001522:	029b      	lsls	r3, r3, #10
 8001524:	4013      	ands	r3, r2
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0xf2>
 8001528:	e015      	b.n	8001556 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152a:	f7ff fd0d 	bl	8000f48 <HAL_GetTick>
 800152e:	0003      	movs	r3, r0
 8001530:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fd08 	bl	8000f48 <HAL_GetTick>
 8001538:	0002      	movs	r2, r0
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	@ 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e2e8      	b.n	8001b18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001546:	4b82      	ldr	r3, [pc, #520]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	2380      	movs	r3, #128	@ 0x80
 800154c:	029b      	lsls	r3, r3, #10
 800154e:	4013      	ands	r3, r2
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x11c>
 8001552:	e000      	b.n	8001556 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001554:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2202      	movs	r2, #2
 800155c:	4013      	ands	r3, r2
 800155e:	d100      	bne.n	8001562 <HAL_RCC_OscConfig+0x14a>
 8001560:	e06c      	b.n	800163c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001562:	4b7b      	ldr	r3, [pc, #492]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	220c      	movs	r2, #12
 8001568:	4013      	ands	r3, r2
 800156a:	d00e      	beq.n	800158a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800156c:	4b78      	ldr	r3, [pc, #480]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	220c      	movs	r2, #12
 8001572:	4013      	ands	r3, r2
 8001574:	2b08      	cmp	r3, #8
 8001576:	d11f      	bne.n	80015b8 <HAL_RCC_OscConfig+0x1a0>
 8001578:	4b75      	ldr	r3, [pc, #468]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	23c0      	movs	r3, #192	@ 0xc0
 800157e:	025b      	lsls	r3, r3, #9
 8001580:	401a      	ands	r2, r3
 8001582:	2380      	movs	r3, #128	@ 0x80
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	429a      	cmp	r2, r3
 8001588:	d116      	bne.n	80015b8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158a:	4b71      	ldr	r3, [pc, #452]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2202      	movs	r2, #2
 8001590:	4013      	ands	r3, r2
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_OscConfig+0x188>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e2bb      	b.n	8001b18 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b6b      	ldr	r3, [pc, #428]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	22f8      	movs	r2, #248	@ 0xf8
 80015a6:	4393      	bics	r3, r2
 80015a8:	0019      	movs	r1, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	00da      	lsls	r2, r3, #3
 80015b0:	4b67      	ldr	r3, [pc, #412]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80015b2:	430a      	orrs	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b6:	e041      	b.n	800163c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d024      	beq.n	800160a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c0:	4b63      	ldr	r3, [pc, #396]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b62      	ldr	r3, [pc, #392]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80015c6:	2101      	movs	r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fcbc 	bl	8000f48 <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d6:	f7ff fcb7 	bl	8000f48 <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e297      	b.n	8001b18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e8:	4b59      	ldr	r3, [pc, #356]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2202      	movs	r2, #2
 80015ee:	4013      	ands	r3, r2
 80015f0:	d0f1      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f2:	4b57      	ldr	r3, [pc, #348]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	22f8      	movs	r2, #248	@ 0xf8
 80015f8:	4393      	bics	r3, r2
 80015fa:	0019      	movs	r1, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	00da      	lsls	r2, r3, #3
 8001602:	4b53      	ldr	r3, [pc, #332]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 8001604:	430a      	orrs	r2, r1
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	e018      	b.n	800163c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800160a:	4b51      	ldr	r3, [pc, #324]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b50      	ldr	r3, [pc, #320]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 8001610:	2101      	movs	r1, #1
 8001612:	438a      	bics	r2, r1
 8001614:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff fc97 	bl	8000f48 <HAL_GetTick>
 800161a:	0003      	movs	r3, r0
 800161c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001620:	f7ff fc92 	bl	8000f48 <HAL_GetTick>
 8001624:	0002      	movs	r2, r0
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e272      	b.n	8001b18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001632:	4b47      	ldr	r3, [pc, #284]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2202      	movs	r2, #2
 8001638:	4013      	ands	r3, r2
 800163a:	d1f1      	bne.n	8001620 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2208      	movs	r2, #8
 8001642:	4013      	ands	r3, r2
 8001644:	d036      	beq.n	80016b4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d019      	beq.n	8001682 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164e:	4b40      	ldr	r3, [pc, #256]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 8001650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001652:	4b3f      	ldr	r3, [pc, #252]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 8001654:	2101      	movs	r1, #1
 8001656:	430a      	orrs	r2, r1
 8001658:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165a:	f7ff fc75 	bl	8000f48 <HAL_GetTick>
 800165e:	0003      	movs	r3, r0
 8001660:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001664:	f7ff fc70 	bl	8000f48 <HAL_GetTick>
 8001668:	0002      	movs	r2, r0
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e250      	b.n	8001b18 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001676:	4b36      	ldr	r3, [pc, #216]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 8001678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167a:	2202      	movs	r2, #2
 800167c:	4013      	ands	r3, r2
 800167e:	d0f1      	beq.n	8001664 <HAL_RCC_OscConfig+0x24c>
 8001680:	e018      	b.n	80016b4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001682:	4b33      	ldr	r3, [pc, #204]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 8001684:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001686:	4b32      	ldr	r3, [pc, #200]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 8001688:	2101      	movs	r1, #1
 800168a:	438a      	bics	r2, r1
 800168c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168e:	f7ff fc5b 	bl	8000f48 <HAL_GetTick>
 8001692:	0003      	movs	r3, r0
 8001694:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001698:	f7ff fc56 	bl	8000f48 <HAL_GetTick>
 800169c:	0002      	movs	r2, r0
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e236      	b.n	8001b18 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016aa:	4b29      	ldr	r3, [pc, #164]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80016ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ae:	2202      	movs	r2, #2
 80016b0:	4013      	ands	r3, r2
 80016b2:	d1f1      	bne.n	8001698 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2204      	movs	r2, #4
 80016ba:	4013      	ands	r3, r2
 80016bc:	d100      	bne.n	80016c0 <HAL_RCC_OscConfig+0x2a8>
 80016be:	e0b5      	b.n	800182c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c0:	201f      	movs	r0, #31
 80016c2:	183b      	adds	r3, r7, r0
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c8:	4b21      	ldr	r3, [pc, #132]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80016ca:	69da      	ldr	r2, [r3, #28]
 80016cc:	2380      	movs	r3, #128	@ 0x80
 80016ce:	055b      	lsls	r3, r3, #21
 80016d0:	4013      	ands	r3, r2
 80016d2:	d110      	bne.n	80016f6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80016d6:	69da      	ldr	r2, [r3, #28]
 80016d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80016da:	2180      	movs	r1, #128	@ 0x80
 80016dc:	0549      	lsls	r1, r1, #21
 80016de:	430a      	orrs	r2, r1
 80016e0:	61da      	str	r2, [r3, #28]
 80016e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 80016e4:	69da      	ldr	r2, [r3, #28]
 80016e6:	2380      	movs	r3, #128	@ 0x80
 80016e8:	055b      	lsls	r3, r3, #21
 80016ea:	4013      	ands	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016f0:	183b      	adds	r3, r7, r0
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f6:	4b19      	ldr	r3, [pc, #100]	@ (800175c <HAL_RCC_OscConfig+0x344>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	2380      	movs	r3, #128	@ 0x80
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4013      	ands	r3, r2
 8001700:	d11a      	bne.n	8001738 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001702:	4b16      	ldr	r3, [pc, #88]	@ (800175c <HAL_RCC_OscConfig+0x344>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <HAL_RCC_OscConfig+0x344>)
 8001708:	2180      	movs	r1, #128	@ 0x80
 800170a:	0049      	lsls	r1, r1, #1
 800170c:	430a      	orrs	r2, r1
 800170e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001710:	f7ff fc1a 	bl	8000f48 <HAL_GetTick>
 8001714:	0003      	movs	r3, r0
 8001716:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171a:	f7ff fc15 	bl	8000f48 <HAL_GetTick>
 800171e:	0002      	movs	r2, r0
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b64      	cmp	r3, #100	@ 0x64
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e1f5      	b.n	8001b18 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172c:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <HAL_RCC_OscConfig+0x344>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	2380      	movs	r3, #128	@ 0x80
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4013      	ands	r3, r2
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d10f      	bne.n	8001760 <HAL_RCC_OscConfig+0x348>
 8001740:	4b03      	ldr	r3, [pc, #12]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 8001742:	6a1a      	ldr	r2, [r3, #32]
 8001744:	4b02      	ldr	r3, [pc, #8]	@ (8001750 <HAL_RCC_OscConfig+0x338>)
 8001746:	2101      	movs	r1, #1
 8001748:	430a      	orrs	r2, r1
 800174a:	621a      	str	r2, [r3, #32]
 800174c:	e036      	b.n	80017bc <HAL_RCC_OscConfig+0x3a4>
 800174e:	46c0      	nop			@ (mov r8, r8)
 8001750:	40021000 	.word	0x40021000
 8001754:	fffeffff 	.word	0xfffeffff
 8001758:	fffbffff 	.word	0xfffbffff
 800175c:	40007000 	.word	0x40007000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10c      	bne.n	8001782 <HAL_RCC_OscConfig+0x36a>
 8001768:	4bca      	ldr	r3, [pc, #808]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 800176a:	6a1a      	ldr	r2, [r3, #32]
 800176c:	4bc9      	ldr	r3, [pc, #804]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 800176e:	2101      	movs	r1, #1
 8001770:	438a      	bics	r2, r1
 8001772:	621a      	str	r2, [r3, #32]
 8001774:	4bc7      	ldr	r3, [pc, #796]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001776:	6a1a      	ldr	r2, [r3, #32]
 8001778:	4bc6      	ldr	r3, [pc, #792]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 800177a:	2104      	movs	r1, #4
 800177c:	438a      	bics	r2, r1
 800177e:	621a      	str	r2, [r3, #32]
 8001780:	e01c      	b.n	80017bc <HAL_RCC_OscConfig+0x3a4>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2b05      	cmp	r3, #5
 8001788:	d10c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x38c>
 800178a:	4bc2      	ldr	r3, [pc, #776]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 800178c:	6a1a      	ldr	r2, [r3, #32]
 800178e:	4bc1      	ldr	r3, [pc, #772]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001790:	2104      	movs	r1, #4
 8001792:	430a      	orrs	r2, r1
 8001794:	621a      	str	r2, [r3, #32]
 8001796:	4bbf      	ldr	r3, [pc, #764]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001798:	6a1a      	ldr	r2, [r3, #32]
 800179a:	4bbe      	ldr	r3, [pc, #760]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 800179c:	2101      	movs	r1, #1
 800179e:	430a      	orrs	r2, r1
 80017a0:	621a      	str	r2, [r3, #32]
 80017a2:	e00b      	b.n	80017bc <HAL_RCC_OscConfig+0x3a4>
 80017a4:	4bbb      	ldr	r3, [pc, #748]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 80017a6:	6a1a      	ldr	r2, [r3, #32]
 80017a8:	4bba      	ldr	r3, [pc, #744]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 80017aa:	2101      	movs	r1, #1
 80017ac:	438a      	bics	r2, r1
 80017ae:	621a      	str	r2, [r3, #32]
 80017b0:	4bb8      	ldr	r3, [pc, #736]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 80017b2:	6a1a      	ldr	r2, [r3, #32]
 80017b4:	4bb7      	ldr	r3, [pc, #732]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 80017b6:	2104      	movs	r1, #4
 80017b8:	438a      	bics	r2, r1
 80017ba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d014      	beq.n	80017ee <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c4:	f7ff fbc0 	bl	8000f48 <HAL_GetTick>
 80017c8:	0003      	movs	r3, r0
 80017ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017cc:	e009      	b.n	80017e2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7ff fbbb 	bl	8000f48 <HAL_GetTick>
 80017d2:	0002      	movs	r2, r0
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	4aaf      	ldr	r2, [pc, #700]	@ (8001a98 <HAL_RCC_OscConfig+0x680>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e19a      	b.n	8001b18 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e2:	4bac      	ldr	r3, [pc, #688]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	2202      	movs	r2, #2
 80017e8:	4013      	ands	r3, r2
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x3b6>
 80017ec:	e013      	b.n	8001816 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ee:	f7ff fbab 	bl	8000f48 <HAL_GetTick>
 80017f2:	0003      	movs	r3, r0
 80017f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f6:	e009      	b.n	800180c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f8:	f7ff fba6 	bl	8000f48 <HAL_GetTick>
 80017fc:	0002      	movs	r2, r0
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	4aa5      	ldr	r2, [pc, #660]	@ (8001a98 <HAL_RCC_OscConfig+0x680>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e185      	b.n	8001b18 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180c:	4ba1      	ldr	r3, [pc, #644]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	2202      	movs	r2, #2
 8001812:	4013      	ands	r3, r2
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001816:	231f      	movs	r3, #31
 8001818:	18fb      	adds	r3, r7, r3
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d105      	bne.n	800182c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001820:	4b9c      	ldr	r3, [pc, #624]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001822:	69da      	ldr	r2, [r3, #28]
 8001824:	4b9b      	ldr	r3, [pc, #620]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001826:	499d      	ldr	r1, [pc, #628]	@ (8001a9c <HAL_RCC_OscConfig+0x684>)
 8001828:	400a      	ands	r2, r1
 800182a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2210      	movs	r2, #16
 8001832:	4013      	ands	r3, r2
 8001834:	d063      	beq.n	80018fe <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d12a      	bne.n	8001894 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800183e:	4b95      	ldr	r3, [pc, #596]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001840:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001842:	4b94      	ldr	r3, [pc, #592]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001844:	2104      	movs	r1, #4
 8001846:	430a      	orrs	r2, r1
 8001848:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800184a:	4b92      	ldr	r3, [pc, #584]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 800184c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800184e:	4b91      	ldr	r3, [pc, #580]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001850:	2101      	movs	r1, #1
 8001852:	430a      	orrs	r2, r1
 8001854:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001856:	f7ff fb77 	bl	8000f48 <HAL_GetTick>
 800185a:	0003      	movs	r3, r0
 800185c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001860:	f7ff fb72 	bl	8000f48 <HAL_GetTick>
 8001864:	0002      	movs	r2, r0
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e152      	b.n	8001b18 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001872:	4b88      	ldr	r3, [pc, #544]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001876:	2202      	movs	r2, #2
 8001878:	4013      	ands	r3, r2
 800187a:	d0f1      	beq.n	8001860 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800187c:	4b85      	ldr	r3, [pc, #532]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 800187e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001880:	22f8      	movs	r2, #248	@ 0xf8
 8001882:	4393      	bics	r3, r2
 8001884:	0019      	movs	r1, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	00da      	lsls	r2, r3, #3
 800188c:	4b81      	ldr	r3, [pc, #516]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 800188e:	430a      	orrs	r2, r1
 8001890:	635a      	str	r2, [r3, #52]	@ 0x34
 8001892:	e034      	b.n	80018fe <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	3305      	adds	r3, #5
 800189a:	d111      	bne.n	80018c0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800189c:	4b7d      	ldr	r3, [pc, #500]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 800189e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018a0:	4b7c      	ldr	r3, [pc, #496]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 80018a2:	2104      	movs	r1, #4
 80018a4:	438a      	bics	r2, r1
 80018a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018a8:	4b7a      	ldr	r3, [pc, #488]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 80018aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018ac:	22f8      	movs	r2, #248	@ 0xf8
 80018ae:	4393      	bics	r3, r2
 80018b0:	0019      	movs	r1, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	00da      	lsls	r2, r3, #3
 80018b8:	4b76      	ldr	r3, [pc, #472]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 80018ba:	430a      	orrs	r2, r1
 80018bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80018be:	e01e      	b.n	80018fe <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018c0:	4b74      	ldr	r3, [pc, #464]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 80018c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018c4:	4b73      	ldr	r3, [pc, #460]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 80018c6:	2104      	movs	r1, #4
 80018c8:	430a      	orrs	r2, r1
 80018ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80018cc:	4b71      	ldr	r3, [pc, #452]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 80018ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018d0:	4b70      	ldr	r3, [pc, #448]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 80018d2:	2101      	movs	r1, #1
 80018d4:	438a      	bics	r2, r1
 80018d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d8:	f7ff fb36 	bl	8000f48 <HAL_GetTick>
 80018dc:	0003      	movs	r3, r0
 80018de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018e2:	f7ff fb31 	bl	8000f48 <HAL_GetTick>
 80018e6:	0002      	movs	r2, r0
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e111      	b.n	8001b18 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018f4:	4b67      	ldr	r3, [pc, #412]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 80018f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018f8:	2202      	movs	r2, #2
 80018fa:	4013      	ands	r3, r2
 80018fc:	d1f1      	bne.n	80018e2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2220      	movs	r2, #32
 8001904:	4013      	ands	r3, r2
 8001906:	d05c      	beq.n	80019c2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001908:	4b62      	ldr	r3, [pc, #392]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	220c      	movs	r2, #12
 800190e:	4013      	ands	r3, r2
 8001910:	2b0c      	cmp	r3, #12
 8001912:	d00e      	beq.n	8001932 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001914:	4b5f      	ldr	r3, [pc, #380]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	220c      	movs	r2, #12
 800191a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800191c:	2b08      	cmp	r3, #8
 800191e:	d114      	bne.n	800194a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001920:	4b5c      	ldr	r3, [pc, #368]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	23c0      	movs	r3, #192	@ 0xc0
 8001926:	025b      	lsls	r3, r3, #9
 8001928:	401a      	ands	r2, r3
 800192a:	23c0      	movs	r3, #192	@ 0xc0
 800192c:	025b      	lsls	r3, r3, #9
 800192e:	429a      	cmp	r2, r3
 8001930:	d10b      	bne.n	800194a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001932:	4b58      	ldr	r3, [pc, #352]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001936:	2380      	movs	r3, #128	@ 0x80
 8001938:	029b      	lsls	r3, r3, #10
 800193a:	4013      	ands	r3, r2
 800193c:	d040      	beq.n	80019c0 <HAL_RCC_OscConfig+0x5a8>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d03c      	beq.n	80019c0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e0e6      	b.n	8001b18 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d01b      	beq.n	800198a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001952:	4b50      	ldr	r3, [pc, #320]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001956:	4b4f      	ldr	r3, [pc, #316]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001958:	2180      	movs	r1, #128	@ 0x80
 800195a:	0249      	lsls	r1, r1, #9
 800195c:	430a      	orrs	r2, r1
 800195e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff faf2 	bl	8000f48 <HAL_GetTick>
 8001964:	0003      	movs	r3, r0
 8001966:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800196a:	f7ff faed 	bl	8000f48 <HAL_GetTick>
 800196e:	0002      	movs	r2, r0
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e0cd      	b.n	8001b18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800197c:	4b45      	ldr	r3, [pc, #276]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 800197e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001980:	2380      	movs	r3, #128	@ 0x80
 8001982:	029b      	lsls	r3, r3, #10
 8001984:	4013      	ands	r3, r2
 8001986:	d0f0      	beq.n	800196a <HAL_RCC_OscConfig+0x552>
 8001988:	e01b      	b.n	80019c2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800198a:	4b42      	ldr	r3, [pc, #264]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 800198c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800198e:	4b41      	ldr	r3, [pc, #260]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001990:	4943      	ldr	r1, [pc, #268]	@ (8001aa0 <HAL_RCC_OscConfig+0x688>)
 8001992:	400a      	ands	r2, r1
 8001994:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff fad7 	bl	8000f48 <HAL_GetTick>
 800199a:	0003      	movs	r3, r0
 800199c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019a0:	f7ff fad2 	bl	8000f48 <HAL_GetTick>
 80019a4:	0002      	movs	r2, r0
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e0b2      	b.n	8001b18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019b2:	4b38      	ldr	r3, [pc, #224]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 80019b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019b6:	2380      	movs	r3, #128	@ 0x80
 80019b8:	029b      	lsls	r3, r3, #10
 80019ba:	4013      	ands	r3, r2
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x588>
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80019c0:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d100      	bne.n	80019cc <HAL_RCC_OscConfig+0x5b4>
 80019ca:	e0a4      	b.n	8001b16 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019cc:	4b31      	ldr	r3, [pc, #196]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	220c      	movs	r2, #12
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d100      	bne.n	80019da <HAL_RCC_OscConfig+0x5c2>
 80019d8:	e078      	b.n	8001acc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d14c      	bne.n	8001a7c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 80019e8:	492e      	ldr	r1, [pc, #184]	@ (8001aa4 <HAL_RCC_OscConfig+0x68c>)
 80019ea:	400a      	ands	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ee:	f7ff faab 	bl	8000f48 <HAL_GetTick>
 80019f2:	0003      	movs	r3, r0
 80019f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f8:	f7ff faa6 	bl	8000f48 <HAL_GetTick>
 80019fc:	0002      	movs	r2, r0
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e086      	b.n	8001b18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a0a:	4b22      	ldr	r3, [pc, #136]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	2380      	movs	r3, #128	@ 0x80
 8001a10:	049b      	lsls	r3, r3, #18
 8001a12:	4013      	ands	r3, r2
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a16:	4b1f      	ldr	r3, [pc, #124]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1a:	220f      	movs	r2, #15
 8001a1c:	4393      	bics	r3, r2
 8001a1e:	0019      	movs	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a24:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001a26:	430a      	orrs	r2, r1
 8001a28:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001aa8 <HAL_RCC_OscConfig+0x690>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	0019      	movs	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001a40:	430a      	orrs	r2, r1
 8001a42:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a44:	4b13      	ldr	r3, [pc, #76]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001a4a:	2180      	movs	r1, #128	@ 0x80
 8001a4c:	0449      	lsls	r1, r1, #17
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a52:	f7ff fa79 	bl	8000f48 <HAL_GetTick>
 8001a56:	0003      	movs	r3, r0
 8001a58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7ff fa74 	bl	8000f48 <HAL_GetTick>
 8001a60:	0002      	movs	r2, r0
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e054      	b.n	8001b18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	2380      	movs	r3, #128	@ 0x80
 8001a74:	049b      	lsls	r3, r3, #18
 8001a76:	4013      	ands	r3, r2
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x644>
 8001a7a:	e04c      	b.n	8001b16 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b04      	ldr	r3, [pc, #16]	@ (8001a94 <HAL_RCC_OscConfig+0x67c>)
 8001a82:	4908      	ldr	r1, [pc, #32]	@ (8001aa4 <HAL_RCC_OscConfig+0x68c>)
 8001a84:	400a      	ands	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7ff fa5e 	bl	8000f48 <HAL_GetTick>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a90:	e015      	b.n	8001abe <HAL_RCC_OscConfig+0x6a6>
 8001a92:	46c0      	nop			@ (mov r8, r8)
 8001a94:	40021000 	.word	0x40021000
 8001a98:	00001388 	.word	0x00001388
 8001a9c:	efffffff 	.word	0xefffffff
 8001aa0:	fffeffff 	.word	0xfffeffff
 8001aa4:	feffffff 	.word	0xfeffffff
 8001aa8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aac:	f7ff fa4c 	bl	8000f48 <HAL_GetTick>
 8001ab0:	0002      	movs	r2, r0
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e02c      	b.n	8001b18 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001abe:	4b18      	ldr	r3, [pc, #96]	@ (8001b20 <HAL_RCC_OscConfig+0x708>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	2380      	movs	r3, #128	@ 0x80
 8001ac4:	049b      	lsls	r3, r3, #18
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x694>
 8001aca:	e024      	b.n	8001b16 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e01f      	b.n	8001b18 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <HAL_RCC_OscConfig+0x708>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ade:	4b10      	ldr	r3, [pc, #64]	@ (8001b20 <HAL_RCC_OscConfig+0x708>)
 8001ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	23c0      	movs	r3, #192	@ 0xc0
 8001ae8:	025b      	lsls	r3, r3, #9
 8001aea:	401a      	ands	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d10e      	bne.n	8001b12 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	220f      	movs	r2, #15
 8001af8:	401a      	ands	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	23f0      	movs	r3, #240	@ 0xf0
 8001b06:	039b      	lsls	r3, r3, #14
 8001b08:	401a      	ands	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d001      	beq.n	8001b16 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	0018      	movs	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b008      	add	sp, #32
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40021000 	.word	0x40021000

08001b24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0bf      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b38:	4b61      	ldr	r3, [pc, #388]	@ (8001cc0 <HAL_RCC_ClockConfig+0x19c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4013      	ands	r3, r2
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d911      	bls.n	8001b6a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b46:	4b5e      	ldr	r3, [pc, #376]	@ (8001cc0 <HAL_RCC_ClockConfig+0x19c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4393      	bics	r3, r2
 8001b4e:	0019      	movs	r1, r3
 8001b50:	4b5b      	ldr	r3, [pc, #364]	@ (8001cc0 <HAL_RCC_ClockConfig+0x19c>)
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b58:	4b59      	ldr	r3, [pc, #356]	@ (8001cc0 <HAL_RCC_ClockConfig+0x19c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	4013      	ands	r3, r2
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d001      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e0a6      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	4013      	ands	r3, r2
 8001b72:	d015      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2204      	movs	r2, #4
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d006      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b7e:	4b51      	ldr	r3, [pc, #324]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1a0>)
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	4b50      	ldr	r3, [pc, #320]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1a0>)
 8001b84:	21e0      	movs	r1, #224	@ 0xe0
 8001b86:	00c9      	lsls	r1, r1, #3
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b8c:	4b4d      	ldr	r3, [pc, #308]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1a0>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	22f0      	movs	r2, #240	@ 0xf0
 8001b92:	4393      	bics	r3, r2
 8001b94:	0019      	movs	r1, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1a0>)
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d04c      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	4b44      	ldr	r3, [pc, #272]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1a0>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	2380      	movs	r3, #128	@ 0x80
 8001bb8:	029b      	lsls	r3, r3, #10
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d120      	bne.n	8001c00 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e07a      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d107      	bne.n	8001bda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bca:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1a0>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	2380      	movs	r3, #128	@ 0x80
 8001bd0:	049b      	lsls	r3, r3, #18
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d114      	bne.n	8001c00 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e06e      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d107      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001be2:	4b38      	ldr	r3, [pc, #224]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1a0>)
 8001be4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001be6:	2380      	movs	r3, #128	@ 0x80
 8001be8:	029b      	lsls	r3, r3, #10
 8001bea:	4013      	ands	r3, r2
 8001bec:	d108      	bne.n	8001c00 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e062      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf2:	4b34      	ldr	r3, [pc, #208]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1a0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e05b      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c00:	4b30      	ldr	r3, [pc, #192]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2203      	movs	r2, #3
 8001c06:	4393      	bics	r3, r2
 8001c08:	0019      	movs	r1, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c10:	430a      	orrs	r2, r1
 8001c12:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c14:	f7ff f998 	bl	8000f48 <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1c:	e009      	b.n	8001c32 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1e:	f7ff f993 	bl	8000f48 <HAL_GetTick>
 8001c22:	0002      	movs	r2, r0
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	4a27      	ldr	r2, [pc, #156]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1a4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e042      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	4b24      	ldr	r3, [pc, #144]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	220c      	movs	r2, #12
 8001c38:	401a      	ands	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d1ec      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c44:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc0 <HAL_RCC_ClockConfig+0x19c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d211      	bcs.n	8001c76 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c52:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc0 <HAL_RCC_ClockConfig+0x19c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2201      	movs	r2, #1
 8001c58:	4393      	bics	r3, r2
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	4b18      	ldr	r3, [pc, #96]	@ (8001cc0 <HAL_RCC_ClockConfig+0x19c>)
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c64:	4b16      	ldr	r3, [pc, #88]	@ (8001cc0 <HAL_RCC_ClockConfig+0x19c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d001      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e020      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d009      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c80:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	4a11      	ldr	r2, [pc, #68]	@ (8001ccc <HAL_RCC_ClockConfig+0x1a8>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	0019      	movs	r1, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c90:	430a      	orrs	r2, r1
 8001c92:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c94:	f000 f820 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 8001c98:	0001      	movs	r1, r0
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1a0>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	091b      	lsrs	r3, r3, #4
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1ac>)
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	000a      	movs	r2, r1
 8001caa:	40da      	lsrs	r2, r3
 8001cac:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1b0>)
 8001cae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f7ff f903 	bl	8000ebc <HAL_InitTick>
  
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	0018      	movs	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b004      	add	sp, #16
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40022000 	.word	0x40022000
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	00001388 	.word	0x00001388
 8001ccc:	fffff8ff 	.word	0xfffff8ff
 8001cd0:	0800297c 	.word	0x0800297c
 8001cd4:	20000000 	.word	0x20000000

08001cd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b0c      	cmp	r3, #12
 8001d00:	d046      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0xb8>
 8001d02:	d848      	bhi.n	8001d96 <HAL_RCC_GetSysClockFreq+0xbe>
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d002      	beq.n	8001d0e <HAL_RCC_GetSysClockFreq+0x36>
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d003      	beq.n	8001d14 <HAL_RCC_GetSysClockFreq+0x3c>
 8001d0c:	e043      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d0e:	4b27      	ldr	r3, [pc, #156]	@ (8001dac <HAL_RCC_GetSysClockFreq+0xd4>)
 8001d10:	613b      	str	r3, [r7, #16]
      break;
 8001d12:	e043      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	0c9b      	lsrs	r3, r3, #18
 8001d18:	220f      	movs	r2, #15
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	4a24      	ldr	r2, [pc, #144]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001d1e:	5cd3      	ldrb	r3, [r2, r3]
 8001d20:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d22:	4b21      	ldr	r3, [pc, #132]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d26:	220f      	movs	r2, #15
 8001d28:	4013      	ands	r3, r2
 8001d2a:	4a22      	ldr	r2, [pc, #136]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001d2c:	5cd3      	ldrb	r3, [r2, r3]
 8001d2e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	23c0      	movs	r3, #192	@ 0xc0
 8001d34:	025b      	lsls	r3, r3, #9
 8001d36:	401a      	ands	r2, r3
 8001d38:	2380      	movs	r3, #128	@ 0x80
 8001d3a:	025b      	lsls	r3, r3, #9
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d109      	bne.n	8001d54 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	481a      	ldr	r0, [pc, #104]	@ (8001dac <HAL_RCC_GetSysClockFreq+0xd4>)
 8001d44:	f7fe f9e0 	bl	8000108 <__udivsi3>
 8001d48:	0003      	movs	r3, r0
 8001d4a:	001a      	movs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4353      	muls	r3, r2
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	e01a      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	23c0      	movs	r3, #192	@ 0xc0
 8001d58:	025b      	lsls	r3, r3, #9
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	23c0      	movs	r3, #192	@ 0xc0
 8001d5e:	025b      	lsls	r3, r3, #9
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d109      	bne.n	8001d78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	4814      	ldr	r0, [pc, #80]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001d68:	f7fe f9ce 	bl	8000108 <__udivsi3>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	001a      	movs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4353      	muls	r3, r2
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	480c      	ldr	r0, [pc, #48]	@ (8001dac <HAL_RCC_GetSysClockFreq+0xd4>)
 8001d7c:	f7fe f9c4 	bl	8000108 <__udivsi3>
 8001d80:	0003      	movs	r3, r0
 8001d82:	001a      	movs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4353      	muls	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	613b      	str	r3, [r7, #16]
      break;
 8001d8e:	e005      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001d92:	613b      	str	r3, [r7, #16]
      break;
 8001d94:	e002      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d96:	4b05      	ldr	r3, [pc, #20]	@ (8001dac <HAL_RCC_GetSysClockFreq+0xd4>)
 8001d98:	613b      	str	r3, [r7, #16]
      break;
 8001d9a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d9c:	693b      	ldr	r3, [r7, #16]
}
 8001d9e:	0018      	movs	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b006      	add	sp, #24
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	40021000 	.word	0x40021000
 8001dac:	007a1200 	.word	0x007a1200
 8001db0:	08002994 	.word	0x08002994
 8001db4:	080029a4 	.word	0x080029a4
 8001db8:	02dc6c00 	.word	0x02dc6c00

08001dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc0:	4b02      	ldr	r3, [pc, #8]	@ (8001dcc <HAL_RCC_GetHCLKFreq+0x10>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	46c0      	nop			@ (mov r8, r8)
 8001dcc:	20000000 	.word	0x20000000

08001dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001dd4:	f7ff fff2 	bl	8001dbc <HAL_RCC_GetHCLKFreq>
 8001dd8:	0001      	movs	r1, r0
 8001dda:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	0a1b      	lsrs	r3, r3, #8
 8001de0:	2207      	movs	r2, #7
 8001de2:	4013      	ands	r3, r2
 8001de4:	4a04      	ldr	r2, [pc, #16]	@ (8001df8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001de6:	5cd3      	ldrb	r3, [r2, r3]
 8001de8:	40d9      	lsrs	r1, r3
 8001dea:	000b      	movs	r3, r1
}    
 8001dec:	0018      	movs	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	46c0      	nop			@ (mov r8, r8)
 8001df4:	40021000 	.word	0x40021000
 8001df8:	0800298c 	.word	0x0800298c

08001dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2380      	movs	r3, #128	@ 0x80
 8001e12:	025b      	lsls	r3, r3, #9
 8001e14:	4013      	ands	r3, r2
 8001e16:	d100      	bne.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e18:	e08e      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e1a:	2017      	movs	r0, #23
 8001e1c:	183b      	adds	r3, r7, r0
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e22:	4b67      	ldr	r3, [pc, #412]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e24:	69da      	ldr	r2, [r3, #28]
 8001e26:	2380      	movs	r3, #128	@ 0x80
 8001e28:	055b      	lsls	r3, r3, #21
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d110      	bne.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	4b64      	ldr	r3, [pc, #400]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e30:	69da      	ldr	r2, [r3, #28]
 8001e32:	4b63      	ldr	r3, [pc, #396]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e34:	2180      	movs	r1, #128	@ 0x80
 8001e36:	0549      	lsls	r1, r1, #21
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	61da      	str	r2, [r3, #28]
 8001e3c:	4b60      	ldr	r3, [pc, #384]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e3e:	69da      	ldr	r2, [r3, #28]
 8001e40:	2380      	movs	r3, #128	@ 0x80
 8001e42:	055b      	lsls	r3, r3, #21
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e4a:	183b      	adds	r3, r7, r0
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	4b5c      	ldr	r3, [pc, #368]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2380      	movs	r3, #128	@ 0x80
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d11a      	bne.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e5c:	4b59      	ldr	r3, [pc, #356]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b58      	ldr	r3, [pc, #352]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001e62:	2180      	movs	r1, #128	@ 0x80
 8001e64:	0049      	lsls	r1, r1, #1
 8001e66:	430a      	orrs	r2, r1
 8001e68:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6a:	f7ff f86d 	bl	8000f48 <HAL_GetTick>
 8001e6e:	0003      	movs	r3, r0
 8001e70:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e72:	e008      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e74:	f7ff f868 	bl	8000f48 <HAL_GetTick>
 8001e78:	0002      	movs	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	@ 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e097      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e86:	4b4f      	ldr	r3, [pc, #316]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	2380      	movs	r3, #128	@ 0x80
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e92:	4b4b      	ldr	r3, [pc, #300]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e94:	6a1a      	ldr	r2, [r3, #32]
 8001e96:	23c0      	movs	r3, #192	@ 0xc0
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d034      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	23c0      	movs	r3, #192	@ 0xc0
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4013      	ands	r3, r2
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d02c      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001eb4:	4b42      	ldr	r3, [pc, #264]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	4a43      	ldr	r2, [pc, #268]	@ (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ebe:	4b40      	ldr	r3, [pc, #256]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ec0:	6a1a      	ldr	r2, [r3, #32]
 8001ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ec4:	2180      	movs	r1, #128	@ 0x80
 8001ec6:	0249      	lsls	r1, r1, #9
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ecc:	4b3c      	ldr	r3, [pc, #240]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ece:	6a1a      	ldr	r2, [r3, #32]
 8001ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ed2:	493e      	ldr	r1, [pc, #248]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed4:	400a      	ands	r2, r1
 8001ed6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ed8:	4b39      	ldr	r3, [pc, #228]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7ff f82f 	bl	8000f48 <HAL_GetTick>
 8001eea:	0003      	movs	r3, r0
 8001eec:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eee:	e009      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef0:	f7ff f82a 	bl	8000f48 <HAL_GetTick>
 8001ef4:	0002      	movs	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	4a35      	ldr	r2, [pc, #212]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e058      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f04:	4b2e      	ldr	r3, [pc, #184]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	4a2d      	ldr	r2, [pc, #180]	@ (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	0019      	movs	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	4b28      	ldr	r3, [pc, #160]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f22:	2317      	movs	r3, #23
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d105      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f2c:	4b24      	ldr	r3, [pc, #144]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f2e:	69da      	ldr	r2, [r3, #28]
 8001f30:	4b23      	ldr	r3, [pc, #140]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f32:	4928      	ldr	r1, [pc, #160]	@ (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f34:	400a      	ands	r2, r1
 8001f36:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d009      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f42:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	2203      	movs	r2, #3
 8001f48:	4393      	bics	r3, r2
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f52:	430a      	orrs	r2, r1
 8001f54:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d009      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f60:	4b17      	ldr	r3, [pc, #92]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f64:	2210      	movs	r2, #16
 8001f66:	4393      	bics	r3, r2
 8001f68:	0019      	movs	r1, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	4b14      	ldr	r3, [pc, #80]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f70:	430a      	orrs	r2, r1
 8001f72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2380      	movs	r3, #128	@ 0x80
 8001f7a:	029b      	lsls	r3, r3, #10
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d009      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f80:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f84:	2280      	movs	r2, #128	@ 0x80
 8001f86:	4393      	bics	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f90:	430a      	orrs	r2, r1
 8001f92:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	2380      	movs	r3, #128	@ 0x80
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d009      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fa0:	4b07      	ldr	r3, [pc, #28]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa4:	2240      	movs	r2, #64	@ 0x40
 8001fa6:	4393      	bics	r3, r2
 8001fa8:	0019      	movs	r1, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691a      	ldr	r2, [r3, #16]
 8001fae:	4b04      	ldr	r3, [pc, #16]	@ (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	b006      	add	sp, #24
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	46c0      	nop			@ (mov r8, r8)
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40007000 	.word	0x40007000
 8001fc8:	fffffcff 	.word	0xfffffcff
 8001fcc:	fffeffff 	.word	0xfffeffff
 8001fd0:	00001388 	.word	0x00001388
 8001fd4:	efffffff 	.word	0xefffffff

08001fd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e044      	b.n	8002074 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d107      	bne.n	8002002 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2278      	movs	r2, #120	@ 0x78
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f7fe fdc1 	bl	8000b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2224      	movs	r2, #36	@ 0x24
 8002006:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2101      	movs	r1, #1
 8002014:	438a      	bics	r2, r1
 8002016:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	0018      	movs	r0, r3
 8002024:	f000 f96c 	bl	8002300 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	0018      	movs	r0, r3
 800202c:	f000 f828 	bl	8002080 <UART_SetConfig>
 8002030:	0003      	movs	r3, r0
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e01c      	b.n	8002074 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	490d      	ldr	r1, [pc, #52]	@ (800207c <HAL_UART_Init+0xa4>)
 8002046:	400a      	ands	r2, r1
 8002048:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	212a      	movs	r1, #42	@ 0x2a
 8002056:	438a      	bics	r2, r1
 8002058:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2101      	movs	r1, #1
 8002066:	430a      	orrs	r2, r1
 8002068:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	0018      	movs	r0, r3
 800206e:	f000 f9fb 	bl	8002468 <UART_CheckIdleState>
 8002072:	0003      	movs	r3, r0
}
 8002074:	0018      	movs	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	b002      	add	sp, #8
 800207a:	bd80      	pop	{r7, pc}
 800207c:	ffffb7ff 	.word	0xffffb7ff

08002080 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002088:	231e      	movs	r3, #30
 800208a:	18fb      	adds	r3, r7, r3
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a8d      	ldr	r2, [pc, #564]	@ (80022e4 <UART_SetConfig+0x264>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	0019      	movs	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4a88      	ldr	r2, [pc, #544]	@ (80022e8 <UART_SetConfig+0x268>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	0019      	movs	r1, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	4a7f      	ldr	r2, [pc, #508]	@ (80022ec <UART_SetConfig+0x26c>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a7b      	ldr	r2, [pc, #492]	@ (80022f0 <UART_SetConfig+0x270>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d127      	bne.n	8002156 <UART_SetConfig+0xd6>
 8002106:	4b7b      	ldr	r3, [pc, #492]	@ (80022f4 <UART_SetConfig+0x274>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	2203      	movs	r2, #3
 800210c:	4013      	ands	r3, r2
 800210e:	2b03      	cmp	r3, #3
 8002110:	d00d      	beq.n	800212e <UART_SetConfig+0xae>
 8002112:	d81b      	bhi.n	800214c <UART_SetConfig+0xcc>
 8002114:	2b02      	cmp	r3, #2
 8002116:	d014      	beq.n	8002142 <UART_SetConfig+0xc2>
 8002118:	d818      	bhi.n	800214c <UART_SetConfig+0xcc>
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <UART_SetConfig+0xa4>
 800211e:	2b01      	cmp	r3, #1
 8002120:	d00a      	beq.n	8002138 <UART_SetConfig+0xb8>
 8002122:	e013      	b.n	800214c <UART_SetConfig+0xcc>
 8002124:	231f      	movs	r3, #31
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
 800212c:	e021      	b.n	8002172 <UART_SetConfig+0xf2>
 800212e:	231f      	movs	r3, #31
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	2202      	movs	r2, #2
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	e01c      	b.n	8002172 <UART_SetConfig+0xf2>
 8002138:	231f      	movs	r3, #31
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	2204      	movs	r2, #4
 800213e:	701a      	strb	r2, [r3, #0]
 8002140:	e017      	b.n	8002172 <UART_SetConfig+0xf2>
 8002142:	231f      	movs	r3, #31
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	2208      	movs	r2, #8
 8002148:	701a      	strb	r2, [r3, #0]
 800214a:	e012      	b.n	8002172 <UART_SetConfig+0xf2>
 800214c:	231f      	movs	r3, #31
 800214e:	18fb      	adds	r3, r7, r3
 8002150:	2210      	movs	r2, #16
 8002152:	701a      	strb	r2, [r3, #0]
 8002154:	e00d      	b.n	8002172 <UART_SetConfig+0xf2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a67      	ldr	r2, [pc, #412]	@ (80022f8 <UART_SetConfig+0x278>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d104      	bne.n	800216a <UART_SetConfig+0xea>
 8002160:	231f      	movs	r3, #31
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
 8002168:	e003      	b.n	8002172 <UART_SetConfig+0xf2>
 800216a:	231f      	movs	r3, #31
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	2210      	movs	r2, #16
 8002170:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69da      	ldr	r2, [r3, #28]
 8002176:	2380      	movs	r3, #128	@ 0x80
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	429a      	cmp	r2, r3
 800217c:	d15c      	bne.n	8002238 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800217e:	231f      	movs	r3, #31
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b08      	cmp	r3, #8
 8002186:	d015      	beq.n	80021b4 <UART_SetConfig+0x134>
 8002188:	dc18      	bgt.n	80021bc <UART_SetConfig+0x13c>
 800218a:	2b04      	cmp	r3, #4
 800218c:	d00d      	beq.n	80021aa <UART_SetConfig+0x12a>
 800218e:	dc15      	bgt.n	80021bc <UART_SetConfig+0x13c>
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <UART_SetConfig+0x11a>
 8002194:	2b02      	cmp	r3, #2
 8002196:	d005      	beq.n	80021a4 <UART_SetConfig+0x124>
 8002198:	e010      	b.n	80021bc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800219a:	f7ff fe19 	bl	8001dd0 <HAL_RCC_GetPCLK1Freq>
 800219e:	0003      	movs	r3, r0
 80021a0:	61bb      	str	r3, [r7, #24]
        break;
 80021a2:	e012      	b.n	80021ca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80021a4:	4b55      	ldr	r3, [pc, #340]	@ (80022fc <UART_SetConfig+0x27c>)
 80021a6:	61bb      	str	r3, [r7, #24]
        break;
 80021a8:	e00f      	b.n	80021ca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021aa:	f7ff fd95 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 80021ae:	0003      	movs	r3, r0
 80021b0:	61bb      	str	r3, [r7, #24]
        break;
 80021b2:	e00a      	b.n	80021ca <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021b4:	2380      	movs	r3, #128	@ 0x80
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	61bb      	str	r3, [r7, #24]
        break;
 80021ba:	e006      	b.n	80021ca <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80021c0:	231e      	movs	r3, #30
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	2201      	movs	r2, #1
 80021c6:	701a      	strb	r2, [r3, #0]
        break;
 80021c8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d100      	bne.n	80021d2 <UART_SetConfig+0x152>
 80021d0:	e07a      	b.n	80022c8 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	005a      	lsls	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	085b      	lsrs	r3, r3, #1
 80021dc:	18d2      	adds	r2, r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	0019      	movs	r1, r3
 80021e4:	0010      	movs	r0, r2
 80021e6:	f7fd ff8f 	bl	8000108 <__udivsi3>
 80021ea:	0003      	movs	r3, r0
 80021ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	2b0f      	cmp	r3, #15
 80021f2:	d91c      	bls.n	800222e <UART_SetConfig+0x1ae>
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	2380      	movs	r3, #128	@ 0x80
 80021f8:	025b      	lsls	r3, r3, #9
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d217      	bcs.n	800222e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	b29a      	uxth	r2, r3
 8002202:	200e      	movs	r0, #14
 8002204:	183b      	adds	r3, r7, r0
 8002206:	210f      	movs	r1, #15
 8002208:	438a      	bics	r2, r1
 800220a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	085b      	lsrs	r3, r3, #1
 8002210:	b29b      	uxth	r3, r3
 8002212:	2207      	movs	r2, #7
 8002214:	4013      	ands	r3, r2
 8002216:	b299      	uxth	r1, r3
 8002218:	183b      	adds	r3, r7, r0
 800221a:	183a      	adds	r2, r7, r0
 800221c:	8812      	ldrh	r2, [r2, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	183a      	adds	r2, r7, r0
 8002228:	8812      	ldrh	r2, [r2, #0]
 800222a:	60da      	str	r2, [r3, #12]
 800222c:	e04c      	b.n	80022c8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800222e:	231e      	movs	r3, #30
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	2201      	movs	r2, #1
 8002234:	701a      	strb	r2, [r3, #0]
 8002236:	e047      	b.n	80022c8 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002238:	231f      	movs	r3, #31
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b08      	cmp	r3, #8
 8002240:	d015      	beq.n	800226e <UART_SetConfig+0x1ee>
 8002242:	dc18      	bgt.n	8002276 <UART_SetConfig+0x1f6>
 8002244:	2b04      	cmp	r3, #4
 8002246:	d00d      	beq.n	8002264 <UART_SetConfig+0x1e4>
 8002248:	dc15      	bgt.n	8002276 <UART_SetConfig+0x1f6>
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <UART_SetConfig+0x1d4>
 800224e:	2b02      	cmp	r3, #2
 8002250:	d005      	beq.n	800225e <UART_SetConfig+0x1de>
 8002252:	e010      	b.n	8002276 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002254:	f7ff fdbc 	bl	8001dd0 <HAL_RCC_GetPCLK1Freq>
 8002258:	0003      	movs	r3, r0
 800225a:	61bb      	str	r3, [r7, #24]
        break;
 800225c:	e012      	b.n	8002284 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800225e:	4b27      	ldr	r3, [pc, #156]	@ (80022fc <UART_SetConfig+0x27c>)
 8002260:	61bb      	str	r3, [r7, #24]
        break;
 8002262:	e00f      	b.n	8002284 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002264:	f7ff fd38 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 8002268:	0003      	movs	r3, r0
 800226a:	61bb      	str	r3, [r7, #24]
        break;
 800226c:	e00a      	b.n	8002284 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800226e:	2380      	movs	r3, #128	@ 0x80
 8002270:	021b      	lsls	r3, r3, #8
 8002272:	61bb      	str	r3, [r7, #24]
        break;
 8002274:	e006      	b.n	8002284 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800227a:	231e      	movs	r3, #30
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	2201      	movs	r2, #1
 8002280:	701a      	strb	r2, [r3, #0]
        break;
 8002282:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d01e      	beq.n	80022c8 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	085a      	lsrs	r2, r3, #1
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	18d2      	adds	r2, r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	0019      	movs	r1, r3
 800229a:	0010      	movs	r0, r2
 800229c:	f7fd ff34 	bl	8000108 <__udivsi3>
 80022a0:	0003      	movs	r3, r0
 80022a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	2b0f      	cmp	r3, #15
 80022a8:	d90a      	bls.n	80022c0 <UART_SetConfig+0x240>
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	2380      	movs	r3, #128	@ 0x80
 80022ae:	025b      	lsls	r3, r3, #9
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d205      	bcs.n	80022c0 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	e003      	b.n	80022c8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80022c0:	231e      	movs	r3, #30
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	2201      	movs	r2, #1
 80022c6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80022d4:	231e      	movs	r3, #30
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	781b      	ldrb	r3, [r3, #0]
}
 80022da:	0018      	movs	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	b008      	add	sp, #32
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			@ (mov r8, r8)
 80022e4:	efff69f3 	.word	0xefff69f3
 80022e8:	ffffcfff 	.word	0xffffcfff
 80022ec:	fffff4ff 	.word	0xfffff4ff
 80022f0:	40013800 	.word	0x40013800
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40004400 	.word	0x40004400
 80022fc:	007a1200 	.word	0x007a1200

08002300 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	2208      	movs	r2, #8
 800230e:	4013      	ands	r3, r2
 8002310:	d00b      	beq.n	800232a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	4a4a      	ldr	r2, [pc, #296]	@ (8002444 <UART_AdvFeatureConfig+0x144>)
 800231a:	4013      	ands	r3, r2
 800231c:	0019      	movs	r1, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232e:	2201      	movs	r2, #1
 8002330:	4013      	ands	r3, r2
 8002332:	d00b      	beq.n	800234c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4a43      	ldr	r2, [pc, #268]	@ (8002448 <UART_AdvFeatureConfig+0x148>)
 800233c:	4013      	ands	r3, r2
 800233e:	0019      	movs	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002350:	2202      	movs	r2, #2
 8002352:	4013      	ands	r3, r2
 8002354:	d00b      	beq.n	800236e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	4a3b      	ldr	r2, [pc, #236]	@ (800244c <UART_AdvFeatureConfig+0x14c>)
 800235e:	4013      	ands	r3, r2
 8002360:	0019      	movs	r1, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	2204      	movs	r2, #4
 8002374:	4013      	ands	r3, r2
 8002376:	d00b      	beq.n	8002390 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	4a34      	ldr	r2, [pc, #208]	@ (8002450 <UART_AdvFeatureConfig+0x150>)
 8002380:	4013      	ands	r3, r2
 8002382:	0019      	movs	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002394:	2210      	movs	r2, #16
 8002396:	4013      	ands	r3, r2
 8002398:	d00b      	beq.n	80023b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002454 <UART_AdvFeatureConfig+0x154>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	0019      	movs	r1, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b6:	2220      	movs	r2, #32
 80023b8:	4013      	ands	r3, r2
 80023ba:	d00b      	beq.n	80023d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	4a25      	ldr	r2, [pc, #148]	@ (8002458 <UART_AdvFeatureConfig+0x158>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	0019      	movs	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d8:	2240      	movs	r2, #64	@ 0x40
 80023da:	4013      	ands	r3, r2
 80023dc:	d01d      	beq.n	800241a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4a1d      	ldr	r2, [pc, #116]	@ (800245c <UART_AdvFeatureConfig+0x15c>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	0019      	movs	r1, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023fa:	2380      	movs	r3, #128	@ 0x80
 80023fc:	035b      	lsls	r3, r3, #13
 80023fe:	429a      	cmp	r2, r3
 8002400:	d10b      	bne.n	800241a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	4a15      	ldr	r2, [pc, #84]	@ (8002460 <UART_AdvFeatureConfig+0x160>)
 800240a:	4013      	ands	r3, r2
 800240c:	0019      	movs	r1, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241e:	2280      	movs	r2, #128	@ 0x80
 8002420:	4013      	ands	r3, r2
 8002422:	d00b      	beq.n	800243c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4a0e      	ldr	r2, [pc, #56]	@ (8002464 <UART_AdvFeatureConfig+0x164>)
 800242c:	4013      	ands	r3, r2
 800242e:	0019      	movs	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	605a      	str	r2, [r3, #4]
  }
}
 800243c:	46c0      	nop			@ (mov r8, r8)
 800243e:	46bd      	mov	sp, r7
 8002440:	b002      	add	sp, #8
 8002442:	bd80      	pop	{r7, pc}
 8002444:	ffff7fff 	.word	0xffff7fff
 8002448:	fffdffff 	.word	0xfffdffff
 800244c:	fffeffff 	.word	0xfffeffff
 8002450:	fffbffff 	.word	0xfffbffff
 8002454:	ffffefff 	.word	0xffffefff
 8002458:	ffffdfff 	.word	0xffffdfff
 800245c:	ffefffff 	.word	0xffefffff
 8002460:	ff9fffff 	.word	0xff9fffff
 8002464:	fff7ffff 	.word	0xfff7ffff

08002468 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b092      	sub	sp, #72	@ 0x48
 800246c:	af02      	add	r7, sp, #8
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2284      	movs	r2, #132	@ 0x84
 8002474:	2100      	movs	r1, #0
 8002476:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002478:	f7fe fd66 	bl	8000f48 <HAL_GetTick>
 800247c:	0003      	movs	r3, r0
 800247e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2208      	movs	r2, #8
 8002488:	4013      	ands	r3, r2
 800248a:	2b08      	cmp	r3, #8
 800248c:	d12c      	bne.n	80024e8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800248e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002490:	2280      	movs	r2, #128	@ 0x80
 8002492:	0391      	lsls	r1, r2, #14
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	4a46      	ldr	r2, [pc, #280]	@ (80025b0 <UART_CheckIdleState+0x148>)
 8002498:	9200      	str	r2, [sp, #0]
 800249a:	2200      	movs	r2, #0
 800249c:	f000 f88c 	bl	80025b8 <UART_WaitOnFlagUntilTimeout>
 80024a0:	1e03      	subs	r3, r0, #0
 80024a2:	d021      	beq.n	80024e8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024a4:	f3ef 8310 	mrs	r3, PRIMASK
 80024a8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80024aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80024ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024ae:	2301      	movs	r3, #1
 80024b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b4:	f383 8810 	msr	PRIMASK, r3
}
 80024b8:	46c0      	nop			@ (mov r8, r8)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2180      	movs	r1, #128	@ 0x80
 80024c6:	438a      	bics	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d0:	f383 8810 	msr	PRIMASK, r3
}
 80024d4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2220      	movs	r2, #32
 80024da:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2278      	movs	r2, #120	@ 0x78
 80024e0:	2100      	movs	r1, #0
 80024e2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e05f      	b.n	80025a8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2204      	movs	r2, #4
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d146      	bne.n	8002584 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f8:	2280      	movs	r2, #128	@ 0x80
 80024fa:	03d1      	lsls	r1, r2, #15
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	4a2c      	ldr	r2, [pc, #176]	@ (80025b0 <UART_CheckIdleState+0x148>)
 8002500:	9200      	str	r2, [sp, #0]
 8002502:	2200      	movs	r2, #0
 8002504:	f000 f858 	bl	80025b8 <UART_WaitOnFlagUntilTimeout>
 8002508:	1e03      	subs	r3, r0, #0
 800250a:	d03b      	beq.n	8002584 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800250c:	f3ef 8310 	mrs	r3, PRIMASK
 8002510:	60fb      	str	r3, [r7, #12]
  return(result);
 8002512:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002514:	637b      	str	r3, [r7, #52]	@ 0x34
 8002516:	2301      	movs	r3, #1
 8002518:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f383 8810 	msr	PRIMASK, r3
}
 8002520:	46c0      	nop			@ (mov r8, r8)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4921      	ldr	r1, [pc, #132]	@ (80025b4 <UART_CheckIdleState+0x14c>)
 800252e:	400a      	ands	r2, r1
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002534:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f383 8810 	msr	PRIMASK, r3
}
 800253c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800253e:	f3ef 8310 	mrs	r3, PRIMASK
 8002542:	61bb      	str	r3, [r7, #24]
  return(result);
 8002544:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002546:	633b      	str	r3, [r7, #48]	@ 0x30
 8002548:	2301      	movs	r3, #1
 800254a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f383 8810 	msr	PRIMASK, r3
}
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2101      	movs	r1, #1
 8002560:	438a      	bics	r2, r1
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002566:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	f383 8810 	msr	PRIMASK, r3
}
 800256e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2280      	movs	r2, #128	@ 0x80
 8002574:	2120      	movs	r1, #32
 8002576:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2278      	movs	r2, #120	@ 0x78
 800257c:	2100      	movs	r1, #0
 800257e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e011      	b.n	80025a8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2220      	movs	r2, #32
 8002588:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2280      	movs	r2, #128	@ 0x80
 800258e:	2120      	movs	r1, #32
 8002590:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2278      	movs	r2, #120	@ 0x78
 80025a2:	2100      	movs	r1, #0
 80025a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	0018      	movs	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b010      	add	sp, #64	@ 0x40
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	01ffffff 	.word	0x01ffffff
 80025b4:	fffffedf 	.word	0xfffffedf

080025b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	1dfb      	adds	r3, r7, #7
 80025c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025c8:	e051      	b.n	800266e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	3301      	adds	r3, #1
 80025ce:	d04e      	beq.n	800266e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d0:	f7fe fcba 	bl	8000f48 <HAL_GetTick>
 80025d4:	0002      	movs	r2, r0
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d302      	bcc.n	80025e6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e051      	b.n	800268e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2204      	movs	r2, #4
 80025f2:	4013      	ands	r3, r2
 80025f4:	d03b      	beq.n	800266e <UART_WaitOnFlagUntilTimeout+0xb6>
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b80      	cmp	r3, #128	@ 0x80
 80025fa:	d038      	beq.n	800266e <UART_WaitOnFlagUntilTimeout+0xb6>
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b40      	cmp	r3, #64	@ 0x40
 8002600:	d035      	beq.n	800266e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	2208      	movs	r2, #8
 800260a:	4013      	ands	r3, r2
 800260c:	2b08      	cmp	r3, #8
 800260e:	d111      	bne.n	8002634 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2208      	movs	r2, #8
 8002616:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	0018      	movs	r0, r3
 800261c:	f000 f83c 	bl	8002698 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2284      	movs	r2, #132	@ 0x84
 8002624:	2108      	movs	r1, #8
 8002626:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2278      	movs	r2, #120	@ 0x78
 800262c:	2100      	movs	r1, #0
 800262e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e02c      	b.n	800268e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	69da      	ldr	r2, [r3, #28]
 800263a:	2380      	movs	r3, #128	@ 0x80
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	401a      	ands	r2, r3
 8002640:	2380      	movs	r3, #128	@ 0x80
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	429a      	cmp	r2, r3
 8002646:	d112      	bne.n	800266e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2280      	movs	r2, #128	@ 0x80
 800264e:	0112      	lsls	r2, r2, #4
 8002650:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	0018      	movs	r0, r3
 8002656:	f000 f81f 	bl	8002698 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2284      	movs	r2, #132	@ 0x84
 800265e:	2120      	movs	r1, #32
 8002660:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2278      	movs	r2, #120	@ 0x78
 8002666:	2100      	movs	r1, #0
 8002668:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e00f      	b.n	800268e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	4013      	ands	r3, r2
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	425a      	negs	r2, r3
 800267e:	4153      	adcs	r3, r2
 8002680:	b2db      	uxtb	r3, r3
 8002682:	001a      	movs	r2, r3
 8002684:	1dfb      	adds	r3, r7, #7
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d09e      	beq.n	80025ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	0018      	movs	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	b004      	add	sp, #16
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08e      	sub	sp, #56	@ 0x38
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026a0:	f3ef 8310 	mrs	r3, PRIMASK
 80026a4:	617b      	str	r3, [r7, #20]
  return(result);
 80026a6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80026aa:	2301      	movs	r3, #1
 80026ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	f383 8810 	msr	PRIMASK, r3
}
 80026b4:	46c0      	nop			@ (mov r8, r8)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4926      	ldr	r1, [pc, #152]	@ (800275c <UART_EndRxTransfer+0xc4>)
 80026c2:	400a      	ands	r2, r1
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	f383 8810 	msr	PRIMASK, r3
}
 80026d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026d2:	f3ef 8310 	mrs	r3, PRIMASK
 80026d6:	623b      	str	r3, [r7, #32]
  return(result);
 80026d8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026da:	633b      	str	r3, [r7, #48]	@ 0x30
 80026dc:	2301      	movs	r3, #1
 80026de:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e2:	f383 8810 	msr	PRIMASK, r3
}
 80026e6:	46c0      	nop			@ (mov r8, r8)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2101      	movs	r1, #1
 80026f4:	438a      	bics	r2, r1
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fe:	f383 8810 	msr	PRIMASK, r3
}
 8002702:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002708:	2b01      	cmp	r3, #1
 800270a:	d118      	bne.n	800273e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800270c:	f3ef 8310 	mrs	r3, PRIMASK
 8002710:	60bb      	str	r3, [r7, #8]
  return(result);
 8002712:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002714:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002716:	2301      	movs	r3, #1
 8002718:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f383 8810 	msr	PRIMASK, r3
}
 8002720:	46c0      	nop			@ (mov r8, r8)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2110      	movs	r1, #16
 800272e:	438a      	bics	r2, r1
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002734:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	f383 8810 	msr	PRIMASK, r3
}
 800273c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2280      	movs	r2, #128	@ 0x80
 8002742:	2120      	movs	r1, #32
 8002744:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002752:	46c0      	nop			@ (mov r8, r8)
 8002754:	46bd      	mov	sp, r7
 8002756:	b00e      	add	sp, #56	@ 0x38
 8002758:	bd80      	pop	{r7, pc}
 800275a:	46c0      	nop			@ (mov r8, r8)
 800275c:	fffffedf 	.word	0xfffffedf

08002760 <malloc>:
 8002760:	b510      	push	{r4, lr}
 8002762:	4b03      	ldr	r3, [pc, #12]	@ (8002770 <malloc+0x10>)
 8002764:	0001      	movs	r1, r0
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	f000 f826 	bl	80027b8 <_malloc_r>
 800276c:	bd10      	pop	{r4, pc}
 800276e:	46c0      	nop			@ (mov r8, r8)
 8002770:	20000014 	.word	0x20000014

08002774 <sbrk_aligned>:
 8002774:	b570      	push	{r4, r5, r6, lr}
 8002776:	4e0f      	ldr	r6, [pc, #60]	@ (80027b4 <sbrk_aligned+0x40>)
 8002778:	000d      	movs	r5, r1
 800277a:	6831      	ldr	r1, [r6, #0]
 800277c:	0004      	movs	r4, r0
 800277e:	2900      	cmp	r1, #0
 8002780:	d102      	bne.n	8002788 <sbrk_aligned+0x14>
 8002782:	f000 f8b1 	bl	80028e8 <_sbrk_r>
 8002786:	6030      	str	r0, [r6, #0]
 8002788:	0029      	movs	r1, r5
 800278a:	0020      	movs	r0, r4
 800278c:	f000 f8ac 	bl	80028e8 <_sbrk_r>
 8002790:	1c43      	adds	r3, r0, #1
 8002792:	d103      	bne.n	800279c <sbrk_aligned+0x28>
 8002794:	2501      	movs	r5, #1
 8002796:	426d      	negs	r5, r5
 8002798:	0028      	movs	r0, r5
 800279a:	bd70      	pop	{r4, r5, r6, pc}
 800279c:	2303      	movs	r3, #3
 800279e:	1cc5      	adds	r5, r0, #3
 80027a0:	439d      	bics	r5, r3
 80027a2:	42a8      	cmp	r0, r5
 80027a4:	d0f8      	beq.n	8002798 <sbrk_aligned+0x24>
 80027a6:	1a29      	subs	r1, r5, r0
 80027a8:	0020      	movs	r0, r4
 80027aa:	f000 f89d 	bl	80028e8 <_sbrk_r>
 80027ae:	3001      	adds	r0, #1
 80027b0:	d1f2      	bne.n	8002798 <sbrk_aligned+0x24>
 80027b2:	e7ef      	b.n	8002794 <sbrk_aligned+0x20>
 80027b4:	200001a0 	.word	0x200001a0

080027b8 <_malloc_r>:
 80027b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027ba:	2203      	movs	r2, #3
 80027bc:	1ccb      	adds	r3, r1, #3
 80027be:	4393      	bics	r3, r2
 80027c0:	3308      	adds	r3, #8
 80027c2:	0005      	movs	r5, r0
 80027c4:	001f      	movs	r7, r3
 80027c6:	2b0c      	cmp	r3, #12
 80027c8:	d234      	bcs.n	8002834 <_malloc_r+0x7c>
 80027ca:	270c      	movs	r7, #12
 80027cc:	42b9      	cmp	r1, r7
 80027ce:	d833      	bhi.n	8002838 <_malloc_r+0x80>
 80027d0:	0028      	movs	r0, r5
 80027d2:	f000 f871 	bl	80028b8 <__malloc_lock>
 80027d6:	4e37      	ldr	r6, [pc, #220]	@ (80028b4 <_malloc_r+0xfc>)
 80027d8:	6833      	ldr	r3, [r6, #0]
 80027da:	001c      	movs	r4, r3
 80027dc:	2c00      	cmp	r4, #0
 80027de:	d12f      	bne.n	8002840 <_malloc_r+0x88>
 80027e0:	0039      	movs	r1, r7
 80027e2:	0028      	movs	r0, r5
 80027e4:	f7ff ffc6 	bl	8002774 <sbrk_aligned>
 80027e8:	0004      	movs	r4, r0
 80027ea:	1c43      	adds	r3, r0, #1
 80027ec:	d15f      	bne.n	80028ae <_malloc_r+0xf6>
 80027ee:	6834      	ldr	r4, [r6, #0]
 80027f0:	9400      	str	r4, [sp, #0]
 80027f2:	9b00      	ldr	r3, [sp, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d14a      	bne.n	800288e <_malloc_r+0xd6>
 80027f8:	2c00      	cmp	r4, #0
 80027fa:	d052      	beq.n	80028a2 <_malloc_r+0xea>
 80027fc:	6823      	ldr	r3, [r4, #0]
 80027fe:	0028      	movs	r0, r5
 8002800:	18e3      	adds	r3, r4, r3
 8002802:	9900      	ldr	r1, [sp, #0]
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	f000 f86f 	bl	80028e8 <_sbrk_r>
 800280a:	9b01      	ldr	r3, [sp, #4]
 800280c:	4283      	cmp	r3, r0
 800280e:	d148      	bne.n	80028a2 <_malloc_r+0xea>
 8002810:	6823      	ldr	r3, [r4, #0]
 8002812:	0028      	movs	r0, r5
 8002814:	1aff      	subs	r7, r7, r3
 8002816:	0039      	movs	r1, r7
 8002818:	f7ff ffac 	bl	8002774 <sbrk_aligned>
 800281c:	3001      	adds	r0, #1
 800281e:	d040      	beq.n	80028a2 <_malloc_r+0xea>
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	19db      	adds	r3, r3, r7
 8002824:	6023      	str	r3, [r4, #0]
 8002826:	6833      	ldr	r3, [r6, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	2a00      	cmp	r2, #0
 800282c:	d133      	bne.n	8002896 <_malloc_r+0xde>
 800282e:	9b00      	ldr	r3, [sp, #0]
 8002830:	6033      	str	r3, [r6, #0]
 8002832:	e019      	b.n	8002868 <_malloc_r+0xb0>
 8002834:	2b00      	cmp	r3, #0
 8002836:	dac9      	bge.n	80027cc <_malloc_r+0x14>
 8002838:	230c      	movs	r3, #12
 800283a:	602b      	str	r3, [r5, #0]
 800283c:	2000      	movs	r0, #0
 800283e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002840:	6821      	ldr	r1, [r4, #0]
 8002842:	1bc9      	subs	r1, r1, r7
 8002844:	d420      	bmi.n	8002888 <_malloc_r+0xd0>
 8002846:	290b      	cmp	r1, #11
 8002848:	d90a      	bls.n	8002860 <_malloc_r+0xa8>
 800284a:	19e2      	adds	r2, r4, r7
 800284c:	6027      	str	r7, [r4, #0]
 800284e:	42a3      	cmp	r3, r4
 8002850:	d104      	bne.n	800285c <_malloc_r+0xa4>
 8002852:	6032      	str	r2, [r6, #0]
 8002854:	6863      	ldr	r3, [r4, #4]
 8002856:	6011      	str	r1, [r2, #0]
 8002858:	6053      	str	r3, [r2, #4]
 800285a:	e005      	b.n	8002868 <_malloc_r+0xb0>
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	e7f9      	b.n	8002854 <_malloc_r+0x9c>
 8002860:	6862      	ldr	r2, [r4, #4]
 8002862:	42a3      	cmp	r3, r4
 8002864:	d10e      	bne.n	8002884 <_malloc_r+0xcc>
 8002866:	6032      	str	r2, [r6, #0]
 8002868:	0028      	movs	r0, r5
 800286a:	f000 f82d 	bl	80028c8 <__malloc_unlock>
 800286e:	0020      	movs	r0, r4
 8002870:	2207      	movs	r2, #7
 8002872:	300b      	adds	r0, #11
 8002874:	1d23      	adds	r3, r4, #4
 8002876:	4390      	bics	r0, r2
 8002878:	1ac2      	subs	r2, r0, r3
 800287a:	4298      	cmp	r0, r3
 800287c:	d0df      	beq.n	800283e <_malloc_r+0x86>
 800287e:	1a1b      	subs	r3, r3, r0
 8002880:	50a3      	str	r3, [r4, r2]
 8002882:	e7dc      	b.n	800283e <_malloc_r+0x86>
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	e7ef      	b.n	8002868 <_malloc_r+0xb0>
 8002888:	0023      	movs	r3, r4
 800288a:	6864      	ldr	r4, [r4, #4]
 800288c:	e7a6      	b.n	80027dc <_malloc_r+0x24>
 800288e:	9c00      	ldr	r4, [sp, #0]
 8002890:	6863      	ldr	r3, [r4, #4]
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	e7ad      	b.n	80027f2 <_malloc_r+0x3a>
 8002896:	001a      	movs	r2, r3
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	42a3      	cmp	r3, r4
 800289c:	d1fb      	bne.n	8002896 <_malloc_r+0xde>
 800289e:	2300      	movs	r3, #0
 80028a0:	e7da      	b.n	8002858 <_malloc_r+0xa0>
 80028a2:	230c      	movs	r3, #12
 80028a4:	0028      	movs	r0, r5
 80028a6:	602b      	str	r3, [r5, #0]
 80028a8:	f000 f80e 	bl	80028c8 <__malloc_unlock>
 80028ac:	e7c6      	b.n	800283c <_malloc_r+0x84>
 80028ae:	6007      	str	r7, [r0, #0]
 80028b0:	e7da      	b.n	8002868 <_malloc_r+0xb0>
 80028b2:	46c0      	nop			@ (mov r8, r8)
 80028b4:	200001a4 	.word	0x200001a4

080028b8 <__malloc_lock>:
 80028b8:	b510      	push	{r4, lr}
 80028ba:	4802      	ldr	r0, [pc, #8]	@ (80028c4 <__malloc_lock+0xc>)
 80028bc:	f000 f850 	bl	8002960 <__retarget_lock_acquire_recursive>
 80028c0:	bd10      	pop	{r4, pc}
 80028c2:	46c0      	nop			@ (mov r8, r8)
 80028c4:	200002e4 	.word	0x200002e4

080028c8 <__malloc_unlock>:
 80028c8:	b510      	push	{r4, lr}
 80028ca:	4802      	ldr	r0, [pc, #8]	@ (80028d4 <__malloc_unlock+0xc>)
 80028cc:	f000 f849 	bl	8002962 <__retarget_lock_release_recursive>
 80028d0:	bd10      	pop	{r4, pc}
 80028d2:	46c0      	nop			@ (mov r8, r8)
 80028d4:	200002e4 	.word	0x200002e4

080028d8 <memset>:
 80028d8:	0003      	movs	r3, r0
 80028da:	1882      	adds	r2, r0, r2
 80028dc:	4293      	cmp	r3, r2
 80028de:	d100      	bne.n	80028e2 <memset+0xa>
 80028e0:	4770      	bx	lr
 80028e2:	7019      	strb	r1, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	e7f9      	b.n	80028dc <memset+0x4>

080028e8 <_sbrk_r>:
 80028e8:	2300      	movs	r3, #0
 80028ea:	b570      	push	{r4, r5, r6, lr}
 80028ec:	4d06      	ldr	r5, [pc, #24]	@ (8002908 <_sbrk_r+0x20>)
 80028ee:	0004      	movs	r4, r0
 80028f0:	0008      	movs	r0, r1
 80028f2:	602b      	str	r3, [r5, #0]
 80028f4:	f7fe f9ea 	bl	8000ccc <_sbrk>
 80028f8:	1c43      	adds	r3, r0, #1
 80028fa:	d103      	bne.n	8002904 <_sbrk_r+0x1c>
 80028fc:	682b      	ldr	r3, [r5, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d000      	beq.n	8002904 <_sbrk_r+0x1c>
 8002902:	6023      	str	r3, [r4, #0]
 8002904:	bd70      	pop	{r4, r5, r6, pc}
 8002906:	46c0      	nop			@ (mov r8, r8)
 8002908:	200002e0 	.word	0x200002e0

0800290c <__errno>:
 800290c:	4b01      	ldr	r3, [pc, #4]	@ (8002914 <__errno+0x8>)
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	4770      	bx	lr
 8002912:	46c0      	nop			@ (mov r8, r8)
 8002914:	20000014 	.word	0x20000014

08002918 <__libc_init_array>:
 8002918:	b570      	push	{r4, r5, r6, lr}
 800291a:	2600      	movs	r6, #0
 800291c:	4c0c      	ldr	r4, [pc, #48]	@ (8002950 <__libc_init_array+0x38>)
 800291e:	4d0d      	ldr	r5, [pc, #52]	@ (8002954 <__libc_init_array+0x3c>)
 8002920:	1b64      	subs	r4, r4, r5
 8002922:	10a4      	asrs	r4, r4, #2
 8002924:	42a6      	cmp	r6, r4
 8002926:	d109      	bne.n	800293c <__libc_init_array+0x24>
 8002928:	2600      	movs	r6, #0
 800292a:	f000 f81b 	bl	8002964 <_init>
 800292e:	4c0a      	ldr	r4, [pc, #40]	@ (8002958 <__libc_init_array+0x40>)
 8002930:	4d0a      	ldr	r5, [pc, #40]	@ (800295c <__libc_init_array+0x44>)
 8002932:	1b64      	subs	r4, r4, r5
 8002934:	10a4      	asrs	r4, r4, #2
 8002936:	42a6      	cmp	r6, r4
 8002938:	d105      	bne.n	8002946 <__libc_init_array+0x2e>
 800293a:	bd70      	pop	{r4, r5, r6, pc}
 800293c:	00b3      	lsls	r3, r6, #2
 800293e:	58eb      	ldr	r3, [r5, r3]
 8002940:	4798      	blx	r3
 8002942:	3601      	adds	r6, #1
 8002944:	e7ee      	b.n	8002924 <__libc_init_array+0xc>
 8002946:	00b3      	lsls	r3, r6, #2
 8002948:	58eb      	ldr	r3, [r5, r3]
 800294a:	4798      	blx	r3
 800294c:	3601      	adds	r6, #1
 800294e:	e7f2      	b.n	8002936 <__libc_init_array+0x1e>
 8002950:	080029b4 	.word	0x080029b4
 8002954:	080029b4 	.word	0x080029b4
 8002958:	080029b8 	.word	0x080029b8
 800295c:	080029b4 	.word	0x080029b4

08002960 <__retarget_lock_acquire_recursive>:
 8002960:	4770      	bx	lr

08002962 <__retarget_lock_release_recursive>:
 8002962:	4770      	bx	lr

08002964 <_init>:
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	46c0      	nop			@ (mov r8, r8)
 8002968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296a:	bc08      	pop	{r3}
 800296c:	469e      	mov	lr, r3
 800296e:	4770      	bx	lr

08002970 <_fini>:
 8002970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002972:	46c0      	nop			@ (mov r8, r8)
 8002974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002976:	bc08      	pop	{r3}
 8002978:	469e      	mov	lr, r3
 800297a:	4770      	bx	lr
