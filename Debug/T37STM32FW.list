
T37STM32FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003018  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080030d8  080030d8  000040d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031d0  080031d0  00005098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080031d0  080031d0  00005098  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080031d0  080031d0  00005098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031d0  080031d0  000041d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031d4  080031d4  000041d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  080031d8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000098  08003270  00005098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08003270  00005328  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000845a  00000000  00000000  000050c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000191b  00000000  00000000  0000d51a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0000ee38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005d6  00000000  00000000  0000f5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001bd9  00000000  00000000  0000fbb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000095df  00000000  00000000  0001178f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000899d6  00000000  00000000  0001ad6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a4744  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001db8  00000000  00000000  000a4788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000a6540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000098 	.word	0x20000098
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080030c0 	.word	0x080030c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000009c 	.word	0x2000009c
 8000104:	080030c0 	.word	0x080030c0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_fmul>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	464f      	mov	r7, r9
 80003f8:	4646      	mov	r6, r8
 80003fa:	46d6      	mov	lr, sl
 80003fc:	0044      	lsls	r4, r0, #1
 80003fe:	b5c0      	push	{r6, r7, lr}
 8000400:	0246      	lsls	r6, r0, #9
 8000402:	1c0f      	adds	r7, r1, #0
 8000404:	0a76      	lsrs	r6, r6, #9
 8000406:	0e24      	lsrs	r4, r4, #24
 8000408:	0fc5      	lsrs	r5, r0, #31
 800040a:	2c00      	cmp	r4, #0
 800040c:	d100      	bne.n	8000410 <__aeabi_fmul+0x1c>
 800040e:	e0da      	b.n	80005c6 <__aeabi_fmul+0x1d2>
 8000410:	2cff      	cmp	r4, #255	@ 0xff
 8000412:	d074      	beq.n	80004fe <__aeabi_fmul+0x10a>
 8000414:	2380      	movs	r3, #128	@ 0x80
 8000416:	00f6      	lsls	r6, r6, #3
 8000418:	04db      	lsls	r3, r3, #19
 800041a:	431e      	orrs	r6, r3
 800041c:	2300      	movs	r3, #0
 800041e:	4699      	mov	r9, r3
 8000420:	469a      	mov	sl, r3
 8000422:	3c7f      	subs	r4, #127	@ 0x7f
 8000424:	027b      	lsls	r3, r7, #9
 8000426:	0a5b      	lsrs	r3, r3, #9
 8000428:	4698      	mov	r8, r3
 800042a:	007b      	lsls	r3, r7, #1
 800042c:	0e1b      	lsrs	r3, r3, #24
 800042e:	0fff      	lsrs	r7, r7, #31
 8000430:	2b00      	cmp	r3, #0
 8000432:	d074      	beq.n	800051e <__aeabi_fmul+0x12a>
 8000434:	2bff      	cmp	r3, #255	@ 0xff
 8000436:	d100      	bne.n	800043a <__aeabi_fmul+0x46>
 8000438:	e08e      	b.n	8000558 <__aeabi_fmul+0x164>
 800043a:	4642      	mov	r2, r8
 800043c:	2180      	movs	r1, #128	@ 0x80
 800043e:	00d2      	lsls	r2, r2, #3
 8000440:	04c9      	lsls	r1, r1, #19
 8000442:	4311      	orrs	r1, r2
 8000444:	3b7f      	subs	r3, #127	@ 0x7f
 8000446:	002a      	movs	r2, r5
 8000448:	18e4      	adds	r4, r4, r3
 800044a:	464b      	mov	r3, r9
 800044c:	407a      	eors	r2, r7
 800044e:	4688      	mov	r8, r1
 8000450:	b2d2      	uxtb	r2, r2
 8000452:	2b0a      	cmp	r3, #10
 8000454:	dc75      	bgt.n	8000542 <__aeabi_fmul+0x14e>
 8000456:	464b      	mov	r3, r9
 8000458:	2000      	movs	r0, #0
 800045a:	2b02      	cmp	r3, #2
 800045c:	dd0f      	ble.n	800047e <__aeabi_fmul+0x8a>
 800045e:	4649      	mov	r1, r9
 8000460:	2301      	movs	r3, #1
 8000462:	408b      	lsls	r3, r1
 8000464:	21a6      	movs	r1, #166	@ 0xa6
 8000466:	00c9      	lsls	r1, r1, #3
 8000468:	420b      	tst	r3, r1
 800046a:	d169      	bne.n	8000540 <__aeabi_fmul+0x14c>
 800046c:	2190      	movs	r1, #144	@ 0x90
 800046e:	0089      	lsls	r1, r1, #2
 8000470:	420b      	tst	r3, r1
 8000472:	d000      	beq.n	8000476 <__aeabi_fmul+0x82>
 8000474:	e100      	b.n	8000678 <__aeabi_fmul+0x284>
 8000476:	2188      	movs	r1, #136	@ 0x88
 8000478:	4219      	tst	r1, r3
 800047a:	d000      	beq.n	800047e <__aeabi_fmul+0x8a>
 800047c:	e0f5      	b.n	800066a <__aeabi_fmul+0x276>
 800047e:	4641      	mov	r1, r8
 8000480:	0409      	lsls	r1, r1, #16
 8000482:	0c09      	lsrs	r1, r1, #16
 8000484:	4643      	mov	r3, r8
 8000486:	0008      	movs	r0, r1
 8000488:	0c35      	lsrs	r5, r6, #16
 800048a:	0436      	lsls	r6, r6, #16
 800048c:	0c1b      	lsrs	r3, r3, #16
 800048e:	0c36      	lsrs	r6, r6, #16
 8000490:	4370      	muls	r0, r6
 8000492:	4369      	muls	r1, r5
 8000494:	435e      	muls	r6, r3
 8000496:	435d      	muls	r5, r3
 8000498:	1876      	adds	r6, r6, r1
 800049a:	0c03      	lsrs	r3, r0, #16
 800049c:	199b      	adds	r3, r3, r6
 800049e:	4299      	cmp	r1, r3
 80004a0:	d903      	bls.n	80004aa <__aeabi_fmul+0xb6>
 80004a2:	2180      	movs	r1, #128	@ 0x80
 80004a4:	0249      	lsls	r1, r1, #9
 80004a6:	468c      	mov	ip, r1
 80004a8:	4465      	add	r5, ip
 80004aa:	0400      	lsls	r0, r0, #16
 80004ac:	0419      	lsls	r1, r3, #16
 80004ae:	0c00      	lsrs	r0, r0, #16
 80004b0:	1809      	adds	r1, r1, r0
 80004b2:	018e      	lsls	r6, r1, #6
 80004b4:	1e70      	subs	r0, r6, #1
 80004b6:	4186      	sbcs	r6, r0
 80004b8:	0c1b      	lsrs	r3, r3, #16
 80004ba:	0e89      	lsrs	r1, r1, #26
 80004bc:	195b      	adds	r3, r3, r5
 80004be:	430e      	orrs	r6, r1
 80004c0:	019b      	lsls	r3, r3, #6
 80004c2:	431e      	orrs	r6, r3
 80004c4:	011b      	lsls	r3, r3, #4
 80004c6:	d46c      	bmi.n	80005a2 <__aeabi_fmul+0x1ae>
 80004c8:	0023      	movs	r3, r4
 80004ca:	337f      	adds	r3, #127	@ 0x7f
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	dc00      	bgt.n	80004d2 <__aeabi_fmul+0xde>
 80004d0:	e0b1      	b.n	8000636 <__aeabi_fmul+0x242>
 80004d2:	0015      	movs	r5, r2
 80004d4:	0771      	lsls	r1, r6, #29
 80004d6:	d00b      	beq.n	80004f0 <__aeabi_fmul+0xfc>
 80004d8:	200f      	movs	r0, #15
 80004da:	0021      	movs	r1, r4
 80004dc:	4030      	ands	r0, r6
 80004de:	2804      	cmp	r0, #4
 80004e0:	d006      	beq.n	80004f0 <__aeabi_fmul+0xfc>
 80004e2:	3604      	adds	r6, #4
 80004e4:	0132      	lsls	r2, r6, #4
 80004e6:	d503      	bpl.n	80004f0 <__aeabi_fmul+0xfc>
 80004e8:	4b6e      	ldr	r3, [pc, #440]	@ (80006a4 <__aeabi_fmul+0x2b0>)
 80004ea:	401e      	ands	r6, r3
 80004ec:	000b      	movs	r3, r1
 80004ee:	3380      	adds	r3, #128	@ 0x80
 80004f0:	2bfe      	cmp	r3, #254	@ 0xfe
 80004f2:	dd00      	ble.n	80004f6 <__aeabi_fmul+0x102>
 80004f4:	e0bd      	b.n	8000672 <__aeabi_fmul+0x27e>
 80004f6:	01b2      	lsls	r2, r6, #6
 80004f8:	0a52      	lsrs	r2, r2, #9
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	e048      	b.n	8000590 <__aeabi_fmul+0x19c>
 80004fe:	2e00      	cmp	r6, #0
 8000500:	d000      	beq.n	8000504 <__aeabi_fmul+0x110>
 8000502:	e092      	b.n	800062a <__aeabi_fmul+0x236>
 8000504:	2308      	movs	r3, #8
 8000506:	4699      	mov	r9, r3
 8000508:	3b06      	subs	r3, #6
 800050a:	469a      	mov	sl, r3
 800050c:	027b      	lsls	r3, r7, #9
 800050e:	0a5b      	lsrs	r3, r3, #9
 8000510:	4698      	mov	r8, r3
 8000512:	007b      	lsls	r3, r7, #1
 8000514:	24ff      	movs	r4, #255	@ 0xff
 8000516:	0e1b      	lsrs	r3, r3, #24
 8000518:	0fff      	lsrs	r7, r7, #31
 800051a:	2b00      	cmp	r3, #0
 800051c:	d18a      	bne.n	8000434 <__aeabi_fmul+0x40>
 800051e:	4642      	mov	r2, r8
 8000520:	2a00      	cmp	r2, #0
 8000522:	d164      	bne.n	80005ee <__aeabi_fmul+0x1fa>
 8000524:	4649      	mov	r1, r9
 8000526:	3201      	adds	r2, #1
 8000528:	4311      	orrs	r1, r2
 800052a:	4689      	mov	r9, r1
 800052c:	290a      	cmp	r1, #10
 800052e:	dc08      	bgt.n	8000542 <__aeabi_fmul+0x14e>
 8000530:	407d      	eors	r5, r7
 8000532:	2001      	movs	r0, #1
 8000534:	b2ea      	uxtb	r2, r5
 8000536:	2902      	cmp	r1, #2
 8000538:	dc91      	bgt.n	800045e <__aeabi_fmul+0x6a>
 800053a:	0015      	movs	r5, r2
 800053c:	2200      	movs	r2, #0
 800053e:	e027      	b.n	8000590 <__aeabi_fmul+0x19c>
 8000540:	0015      	movs	r5, r2
 8000542:	4653      	mov	r3, sl
 8000544:	2b02      	cmp	r3, #2
 8000546:	d100      	bne.n	800054a <__aeabi_fmul+0x156>
 8000548:	e093      	b.n	8000672 <__aeabi_fmul+0x27e>
 800054a:	2b03      	cmp	r3, #3
 800054c:	d01a      	beq.n	8000584 <__aeabi_fmul+0x190>
 800054e:	2b01      	cmp	r3, #1
 8000550:	d12c      	bne.n	80005ac <__aeabi_fmul+0x1b8>
 8000552:	2300      	movs	r3, #0
 8000554:	2200      	movs	r2, #0
 8000556:	e01b      	b.n	8000590 <__aeabi_fmul+0x19c>
 8000558:	4643      	mov	r3, r8
 800055a:	34ff      	adds	r4, #255	@ 0xff
 800055c:	2b00      	cmp	r3, #0
 800055e:	d055      	beq.n	800060c <__aeabi_fmul+0x218>
 8000560:	2103      	movs	r1, #3
 8000562:	464b      	mov	r3, r9
 8000564:	430b      	orrs	r3, r1
 8000566:	0019      	movs	r1, r3
 8000568:	2b0a      	cmp	r3, #10
 800056a:	dc00      	bgt.n	800056e <__aeabi_fmul+0x17a>
 800056c:	e092      	b.n	8000694 <__aeabi_fmul+0x2a0>
 800056e:	2b0f      	cmp	r3, #15
 8000570:	d000      	beq.n	8000574 <__aeabi_fmul+0x180>
 8000572:	e08c      	b.n	800068e <__aeabi_fmul+0x29a>
 8000574:	2280      	movs	r2, #128	@ 0x80
 8000576:	03d2      	lsls	r2, r2, #15
 8000578:	4216      	tst	r6, r2
 800057a:	d003      	beq.n	8000584 <__aeabi_fmul+0x190>
 800057c:	4643      	mov	r3, r8
 800057e:	4213      	tst	r3, r2
 8000580:	d100      	bne.n	8000584 <__aeabi_fmul+0x190>
 8000582:	e07d      	b.n	8000680 <__aeabi_fmul+0x28c>
 8000584:	2280      	movs	r2, #128	@ 0x80
 8000586:	03d2      	lsls	r2, r2, #15
 8000588:	4332      	orrs	r2, r6
 800058a:	0252      	lsls	r2, r2, #9
 800058c:	0a52      	lsrs	r2, r2, #9
 800058e:	23ff      	movs	r3, #255	@ 0xff
 8000590:	05d8      	lsls	r0, r3, #23
 8000592:	07ed      	lsls	r5, r5, #31
 8000594:	4310      	orrs	r0, r2
 8000596:	4328      	orrs	r0, r5
 8000598:	bce0      	pop	{r5, r6, r7}
 800059a:	46ba      	mov	sl, r7
 800059c:	46b1      	mov	r9, r6
 800059e:	46a8      	mov	r8, r5
 80005a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a2:	2301      	movs	r3, #1
 80005a4:	0015      	movs	r5, r2
 80005a6:	0871      	lsrs	r1, r6, #1
 80005a8:	401e      	ands	r6, r3
 80005aa:	430e      	orrs	r6, r1
 80005ac:	0023      	movs	r3, r4
 80005ae:	3380      	adds	r3, #128	@ 0x80
 80005b0:	1c61      	adds	r1, r4, #1
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dd41      	ble.n	800063a <__aeabi_fmul+0x246>
 80005b6:	0772      	lsls	r2, r6, #29
 80005b8:	d094      	beq.n	80004e4 <__aeabi_fmul+0xf0>
 80005ba:	220f      	movs	r2, #15
 80005bc:	4032      	ands	r2, r6
 80005be:	2a04      	cmp	r2, #4
 80005c0:	d000      	beq.n	80005c4 <__aeabi_fmul+0x1d0>
 80005c2:	e78e      	b.n	80004e2 <__aeabi_fmul+0xee>
 80005c4:	e78e      	b.n	80004e4 <__aeabi_fmul+0xf0>
 80005c6:	2e00      	cmp	r6, #0
 80005c8:	d105      	bne.n	80005d6 <__aeabi_fmul+0x1e2>
 80005ca:	2304      	movs	r3, #4
 80005cc:	4699      	mov	r9, r3
 80005ce:	3b03      	subs	r3, #3
 80005d0:	2400      	movs	r4, #0
 80005d2:	469a      	mov	sl, r3
 80005d4:	e726      	b.n	8000424 <__aeabi_fmul+0x30>
 80005d6:	0030      	movs	r0, r6
 80005d8:	f000 f8d6 	bl	8000788 <__clzsi2>
 80005dc:	2476      	movs	r4, #118	@ 0x76
 80005de:	1f43      	subs	r3, r0, #5
 80005e0:	409e      	lsls	r6, r3
 80005e2:	2300      	movs	r3, #0
 80005e4:	4264      	negs	r4, r4
 80005e6:	4699      	mov	r9, r3
 80005e8:	469a      	mov	sl, r3
 80005ea:	1a24      	subs	r4, r4, r0
 80005ec:	e71a      	b.n	8000424 <__aeabi_fmul+0x30>
 80005ee:	4640      	mov	r0, r8
 80005f0:	f000 f8ca 	bl	8000788 <__clzsi2>
 80005f4:	464b      	mov	r3, r9
 80005f6:	1a24      	subs	r4, r4, r0
 80005f8:	3c76      	subs	r4, #118	@ 0x76
 80005fa:	2b0a      	cmp	r3, #10
 80005fc:	dca1      	bgt.n	8000542 <__aeabi_fmul+0x14e>
 80005fe:	4643      	mov	r3, r8
 8000600:	3805      	subs	r0, #5
 8000602:	4083      	lsls	r3, r0
 8000604:	407d      	eors	r5, r7
 8000606:	4698      	mov	r8, r3
 8000608:	b2ea      	uxtb	r2, r5
 800060a:	e724      	b.n	8000456 <__aeabi_fmul+0x62>
 800060c:	464a      	mov	r2, r9
 800060e:	3302      	adds	r3, #2
 8000610:	4313      	orrs	r3, r2
 8000612:	002a      	movs	r2, r5
 8000614:	407a      	eors	r2, r7
 8000616:	b2d2      	uxtb	r2, r2
 8000618:	2b0a      	cmp	r3, #10
 800061a:	dc92      	bgt.n	8000542 <__aeabi_fmul+0x14e>
 800061c:	4649      	mov	r1, r9
 800061e:	0015      	movs	r5, r2
 8000620:	2900      	cmp	r1, #0
 8000622:	d026      	beq.n	8000672 <__aeabi_fmul+0x27e>
 8000624:	4699      	mov	r9, r3
 8000626:	2002      	movs	r0, #2
 8000628:	e719      	b.n	800045e <__aeabi_fmul+0x6a>
 800062a:	230c      	movs	r3, #12
 800062c:	4699      	mov	r9, r3
 800062e:	3b09      	subs	r3, #9
 8000630:	24ff      	movs	r4, #255	@ 0xff
 8000632:	469a      	mov	sl, r3
 8000634:	e6f6      	b.n	8000424 <__aeabi_fmul+0x30>
 8000636:	0015      	movs	r5, r2
 8000638:	0021      	movs	r1, r4
 800063a:	2201      	movs	r2, #1
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	2b1b      	cmp	r3, #27
 8000640:	dd00      	ble.n	8000644 <__aeabi_fmul+0x250>
 8000642:	e786      	b.n	8000552 <__aeabi_fmul+0x15e>
 8000644:	319e      	adds	r1, #158	@ 0x9e
 8000646:	0032      	movs	r2, r6
 8000648:	408e      	lsls	r6, r1
 800064a:	40da      	lsrs	r2, r3
 800064c:	1e73      	subs	r3, r6, #1
 800064e:	419e      	sbcs	r6, r3
 8000650:	4332      	orrs	r2, r6
 8000652:	0753      	lsls	r3, r2, #29
 8000654:	d004      	beq.n	8000660 <__aeabi_fmul+0x26c>
 8000656:	230f      	movs	r3, #15
 8000658:	4013      	ands	r3, r2
 800065a:	2b04      	cmp	r3, #4
 800065c:	d000      	beq.n	8000660 <__aeabi_fmul+0x26c>
 800065e:	3204      	adds	r2, #4
 8000660:	0153      	lsls	r3, r2, #5
 8000662:	d510      	bpl.n	8000686 <__aeabi_fmul+0x292>
 8000664:	2301      	movs	r3, #1
 8000666:	2200      	movs	r2, #0
 8000668:	e792      	b.n	8000590 <__aeabi_fmul+0x19c>
 800066a:	003d      	movs	r5, r7
 800066c:	4646      	mov	r6, r8
 800066e:	4682      	mov	sl, r0
 8000670:	e767      	b.n	8000542 <__aeabi_fmul+0x14e>
 8000672:	23ff      	movs	r3, #255	@ 0xff
 8000674:	2200      	movs	r2, #0
 8000676:	e78b      	b.n	8000590 <__aeabi_fmul+0x19c>
 8000678:	2280      	movs	r2, #128	@ 0x80
 800067a:	2500      	movs	r5, #0
 800067c:	03d2      	lsls	r2, r2, #15
 800067e:	e786      	b.n	800058e <__aeabi_fmul+0x19a>
 8000680:	003d      	movs	r5, r7
 8000682:	431a      	orrs	r2, r3
 8000684:	e783      	b.n	800058e <__aeabi_fmul+0x19a>
 8000686:	0192      	lsls	r2, r2, #6
 8000688:	2300      	movs	r3, #0
 800068a:	0a52      	lsrs	r2, r2, #9
 800068c:	e780      	b.n	8000590 <__aeabi_fmul+0x19c>
 800068e:	003d      	movs	r5, r7
 8000690:	4646      	mov	r6, r8
 8000692:	e777      	b.n	8000584 <__aeabi_fmul+0x190>
 8000694:	002a      	movs	r2, r5
 8000696:	2301      	movs	r3, #1
 8000698:	407a      	eors	r2, r7
 800069a:	408b      	lsls	r3, r1
 800069c:	2003      	movs	r0, #3
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	e6e9      	b.n	8000476 <__aeabi_fmul+0x82>
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	f7ffffff 	.word	0xf7ffffff

080006a8 <__aeabi_f2iz>:
 80006a8:	0241      	lsls	r1, r0, #9
 80006aa:	0042      	lsls	r2, r0, #1
 80006ac:	0fc3      	lsrs	r3, r0, #31
 80006ae:	0a49      	lsrs	r1, r1, #9
 80006b0:	2000      	movs	r0, #0
 80006b2:	0e12      	lsrs	r2, r2, #24
 80006b4:	2a7e      	cmp	r2, #126	@ 0x7e
 80006b6:	dd03      	ble.n	80006c0 <__aeabi_f2iz+0x18>
 80006b8:	2a9d      	cmp	r2, #157	@ 0x9d
 80006ba:	dd02      	ble.n	80006c2 <__aeabi_f2iz+0x1a>
 80006bc:	4a09      	ldr	r2, [pc, #36]	@ (80006e4 <__aeabi_f2iz+0x3c>)
 80006be:	1898      	adds	r0, r3, r2
 80006c0:	4770      	bx	lr
 80006c2:	2080      	movs	r0, #128	@ 0x80
 80006c4:	0400      	lsls	r0, r0, #16
 80006c6:	4301      	orrs	r1, r0
 80006c8:	2a95      	cmp	r2, #149	@ 0x95
 80006ca:	dc07      	bgt.n	80006dc <__aeabi_f2iz+0x34>
 80006cc:	2096      	movs	r0, #150	@ 0x96
 80006ce:	1a82      	subs	r2, r0, r2
 80006d0:	40d1      	lsrs	r1, r2
 80006d2:	4248      	negs	r0, r1
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1f3      	bne.n	80006c0 <__aeabi_f2iz+0x18>
 80006d8:	0008      	movs	r0, r1
 80006da:	e7f1      	b.n	80006c0 <__aeabi_f2iz+0x18>
 80006dc:	3a96      	subs	r2, #150	@ 0x96
 80006de:	4091      	lsls	r1, r2
 80006e0:	e7f7      	b.n	80006d2 <__aeabi_f2iz+0x2a>
 80006e2:	46c0      	nop			@ (mov r8, r8)
 80006e4:	7fffffff 	.word	0x7fffffff

080006e8 <__aeabi_i2f>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	2800      	cmp	r0, #0
 80006ec:	d012      	beq.n	8000714 <__aeabi_i2f+0x2c>
 80006ee:	17c3      	asrs	r3, r0, #31
 80006f0:	18c5      	adds	r5, r0, r3
 80006f2:	405d      	eors	r5, r3
 80006f4:	0fc4      	lsrs	r4, r0, #31
 80006f6:	0028      	movs	r0, r5
 80006f8:	f000 f846 	bl	8000788 <__clzsi2>
 80006fc:	239e      	movs	r3, #158	@ 0x9e
 80006fe:	1a1b      	subs	r3, r3, r0
 8000700:	2b96      	cmp	r3, #150	@ 0x96
 8000702:	dc0f      	bgt.n	8000724 <__aeabi_i2f+0x3c>
 8000704:	2808      	cmp	r0, #8
 8000706:	d038      	beq.n	800077a <__aeabi_i2f+0x92>
 8000708:	3808      	subs	r0, #8
 800070a:	4085      	lsls	r5, r0
 800070c:	026d      	lsls	r5, r5, #9
 800070e:	0a6d      	lsrs	r5, r5, #9
 8000710:	b2d8      	uxtb	r0, r3
 8000712:	e002      	b.n	800071a <__aeabi_i2f+0x32>
 8000714:	2400      	movs	r4, #0
 8000716:	2000      	movs	r0, #0
 8000718:	2500      	movs	r5, #0
 800071a:	05c0      	lsls	r0, r0, #23
 800071c:	4328      	orrs	r0, r5
 800071e:	07e4      	lsls	r4, r4, #31
 8000720:	4320      	orrs	r0, r4
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	2b99      	cmp	r3, #153	@ 0x99
 8000726:	dc14      	bgt.n	8000752 <__aeabi_i2f+0x6a>
 8000728:	1f42      	subs	r2, r0, #5
 800072a:	4095      	lsls	r5, r2
 800072c:	002a      	movs	r2, r5
 800072e:	4915      	ldr	r1, [pc, #84]	@ (8000784 <__aeabi_i2f+0x9c>)
 8000730:	4011      	ands	r1, r2
 8000732:	0755      	lsls	r5, r2, #29
 8000734:	d01c      	beq.n	8000770 <__aeabi_i2f+0x88>
 8000736:	250f      	movs	r5, #15
 8000738:	402a      	ands	r2, r5
 800073a:	2a04      	cmp	r2, #4
 800073c:	d018      	beq.n	8000770 <__aeabi_i2f+0x88>
 800073e:	3104      	adds	r1, #4
 8000740:	08ca      	lsrs	r2, r1, #3
 8000742:	0149      	lsls	r1, r1, #5
 8000744:	d515      	bpl.n	8000772 <__aeabi_i2f+0x8a>
 8000746:	239f      	movs	r3, #159	@ 0x9f
 8000748:	0252      	lsls	r2, r2, #9
 800074a:	1a18      	subs	r0, r3, r0
 800074c:	0a55      	lsrs	r5, r2, #9
 800074e:	b2c0      	uxtb	r0, r0
 8000750:	e7e3      	b.n	800071a <__aeabi_i2f+0x32>
 8000752:	2205      	movs	r2, #5
 8000754:	0029      	movs	r1, r5
 8000756:	1a12      	subs	r2, r2, r0
 8000758:	40d1      	lsrs	r1, r2
 800075a:	0002      	movs	r2, r0
 800075c:	321b      	adds	r2, #27
 800075e:	4095      	lsls	r5, r2
 8000760:	002a      	movs	r2, r5
 8000762:	1e55      	subs	r5, r2, #1
 8000764:	41aa      	sbcs	r2, r5
 8000766:	430a      	orrs	r2, r1
 8000768:	4906      	ldr	r1, [pc, #24]	@ (8000784 <__aeabi_i2f+0x9c>)
 800076a:	4011      	ands	r1, r2
 800076c:	0755      	lsls	r5, r2, #29
 800076e:	d1e2      	bne.n	8000736 <__aeabi_i2f+0x4e>
 8000770:	08ca      	lsrs	r2, r1, #3
 8000772:	0252      	lsls	r2, r2, #9
 8000774:	0a55      	lsrs	r5, r2, #9
 8000776:	b2d8      	uxtb	r0, r3
 8000778:	e7cf      	b.n	800071a <__aeabi_i2f+0x32>
 800077a:	026d      	lsls	r5, r5, #9
 800077c:	0a6d      	lsrs	r5, r5, #9
 800077e:	308e      	adds	r0, #142	@ 0x8e
 8000780:	e7cb      	b.n	800071a <__aeabi_i2f+0x32>
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	fbffffff 	.word	0xfbffffff

08000788 <__clzsi2>:
 8000788:	211c      	movs	r1, #28
 800078a:	2301      	movs	r3, #1
 800078c:	041b      	lsls	r3, r3, #16
 800078e:	4298      	cmp	r0, r3
 8000790:	d301      	bcc.n	8000796 <__clzsi2+0xe>
 8000792:	0c00      	lsrs	r0, r0, #16
 8000794:	3910      	subs	r1, #16
 8000796:	0a1b      	lsrs	r3, r3, #8
 8000798:	4298      	cmp	r0, r3
 800079a:	d301      	bcc.n	80007a0 <__clzsi2+0x18>
 800079c:	0a00      	lsrs	r0, r0, #8
 800079e:	3908      	subs	r1, #8
 80007a0:	091b      	lsrs	r3, r3, #4
 80007a2:	4298      	cmp	r0, r3
 80007a4:	d301      	bcc.n	80007aa <__clzsi2+0x22>
 80007a6:	0900      	lsrs	r0, r0, #4
 80007a8:	3904      	subs	r1, #4
 80007aa:	a202      	add	r2, pc, #8	@ (adr r2, 80007b4 <__clzsi2+0x2c>)
 80007ac:	5c10      	ldrb	r0, [r2, r0]
 80007ae:	1840      	adds	r0, r0, r1
 80007b0:	4770      	bx	lr
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	02020304 	.word	0x02020304
 80007b8:	01010101 	.word	0x01010101
	...

080007c4 <setLED_MLOCAL>:

// -----------------------------------------------------------------


// ---I/O SECTION---------------------------------------------------
void setLED_MLOCAL(int state){	// LED @ A0
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	if (state != 0) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d007      	beq.n	80007e2 <setLED_MLOCAL+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80007d2:	2390      	movs	r3, #144	@ 0x90
 80007d4:	05db      	lsls	r3, r3, #23
 80007d6:	2201      	movs	r2, #1
 80007d8:	2101      	movs	r1, #1
 80007da:	0018      	movs	r0, r3
 80007dc:	f001 f933 	bl	8001a46 <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 80007e0:	e006      	b.n	80007f0 <setLED_MLOCAL+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80007e2:	2390      	movs	r3, #144	@ 0x90
 80007e4:	05db      	lsls	r3, r3, #23
 80007e6:	2200      	movs	r2, #0
 80007e8:	2101      	movs	r1, #1
 80007ea:	0018      	movs	r0, r3
 80007ec:	f001 f92b 	bl	8001a46 <HAL_GPIO_WritePin>
}
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b002      	add	sp, #8
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <setLED_MSERIAL>:

void setLED_MSERIAL(int state){ // LED @ A1
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	if (state != 0) {
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d007      	beq.n	8000816 <setLED_MSERIAL+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000806:	2390      	movs	r3, #144	@ 0x90
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	2201      	movs	r2, #1
 800080c:	2102      	movs	r1, #2
 800080e:	0018      	movs	r0, r3
 8000810:	f001 f919 	bl	8001a46 <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
	}
}
 8000814:	e006      	b.n	8000824 <setLED_MSERIAL+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000816:	2390      	movs	r3, #144	@ 0x90
 8000818:	05db      	lsls	r3, r3, #23
 800081a:	2200      	movs	r2, #0
 800081c:	2102      	movs	r1, #2
 800081e:	0018      	movs	r0, r3
 8000820:	f001 f911 	bl	8001a46 <HAL_GPIO_WritePin>
}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b002      	add	sp, #8
 800082a:	bd80      	pop	{r7, pc}

0800082c <setLED_BSY>:

void setLED_BSY(int state){		// LED @ A2
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	if (state != 0) {
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d007      	beq.n	800084a <setLED_BSY+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800083a:	2390      	movs	r3, #144	@ 0x90
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	2201      	movs	r2, #1
 8000840:	2108      	movs	r1, #8
 8000842:	0018      	movs	r0, r3
 8000844:	f001 f8ff 	bl	8001a46 <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
	}
}
 8000848:	e006      	b.n	8000858 <setLED_BSY+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800084a:	2390      	movs	r3, #144	@ 0x90
 800084c:	05db      	lsls	r3, r3, #23
 800084e:	2200      	movs	r2, #0
 8000850:	2108      	movs	r1, #8
 8000852:	0018      	movs	r0, r3
 8000854:	f001 f8f7 	bl	8001a46 <HAL_GPIO_WritePin>
}
 8000858:	46c0      	nop			@ (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	b002      	add	sp, #8
 800085e:	bd80      	pop	{r7, pc}

08000860 <debugger>:

void sanityCheck(){
	// very desperate debug entry point
}

int debugger(){
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
	int sym = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
	setLoopback(0);
 800086a:	2000      	movs	r0, #0
 800086c:	f000 fdda 	bl	8001424 <setLoopback>
	while(1){
		char key = TTY_READKEY();
 8000870:	1cfc      	adds	r4, r7, #3
 8000872:	f000 fc81 	bl	8001178 <TTY_READKEY>
 8000876:	0003      	movs	r3, r0
 8000878:	7023      	strb	r3, [r4, #0]
		if (key == 'f')
 800087a:	1cfb      	adds	r3, r7, #3
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b66      	cmp	r3, #102	@ 0x66
 8000880:	d102      	bne.n	8000888 <debugger+0x28>
			TTY_FOX();
 8000882:	f000 fba3 	bl	8000fcc <TTY_FOX>
 8000886:	e7f3      	b.n	8000870 <debugger+0x10>
		else
			TTY_WRITEKEY(key);
 8000888:	1cfb      	adds	r3, r7, #3
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	0018      	movs	r0, r3
 800088e:	f000 fba9 	bl	8000fe4 <TTY_WRITEKEY>
	while(1){
 8000892:	e7ed      	b.n	8000870 <debugger+0x10>

08000894 <init>:
	tty_symbols = TTY_WRITEBUFFER(tty_symbols);
	tty_symbols = booTYshell(tty_symbols);
	tty_symbols = TTY_WRITEBUFFER(tty_symbols);
}

void init(){
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	// scary ST-Stuff
    HAL_Init();
 8000898:	f000 fe14 	bl	80014c4 <HAL_Init>

    SystemClock_Config();
 800089c:	f000 f830 	bl	8000900 <SystemClock_Config>

    MX_GPIO_Init();
 80008a0:	f000 f8e8 	bl	8000a74 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80008a4:	f000 f8b6 	bl	8000a14 <MX_USART2_UART_Init>
    MX_USART1_UART_Init();
 80008a8:	f000 f882 	bl	80009b0 <MX_USART1_UART_Init>
    //TODO: init ESP8266 uart
    // -------------------------------------------------------------

    // init vars
    writeBuffer = malloc(0);
 80008ac:	2000      	movs	r0, #0
 80008ae:	f002 fab1 	bl	8002e14 <malloc>
 80008b2:	0003      	movs	r3, r0
 80008b4:	001a      	movs	r2, r3
 80008b6:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <init+0x58>)
 80008b8:	601a      	str	r2, [r3, #0]
    tty_symbols = malloc(0);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f002 faaa 	bl	8002e14 <malloc>
 80008c0:	0003      	movs	r3, r0
 80008c2:	001a      	movs	r2, r3
 80008c4:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <init+0x5c>)
 80008c6:	601a      	str	r2, [r3, #0]

    // init i/o stuff
    setLED_BSY(1);
 80008c8:	2001      	movs	r0, #1
 80008ca:	f7ff ffaf 	bl	800082c <setLED_BSY>
    setLED_MLOCAL(0);
 80008ce:	2000      	movs	r0, #0
 80008d0:	f7ff ff78 	bl	80007c4 <setLED_MLOCAL>
    setLED_MSERIAL(0);
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff ff8f 	bl	80007f8 <setLED_MSERIAL>
	// now we can do some UI-Stuff, like ask for bd-rate,
	// esp-summary, termminal-width, etc.
    //booTY();	// Boot TTY

    // -------------------------------------------------------------
    debugger();
 80008da:	f7ff ffc1 	bl	8000860 <debugger>
    setLED_BSY(0);		// When init is done, we can SIGRDY
 80008de:	2000      	movs	r0, #0
 80008e0:	f7ff ffa4 	bl	800082c <setLED_BSY>
}
 80008e4:	46c0      	nop			@ (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	200001c4 	.word	0x200001c4
 80008f0:	200001c8 	.word	0x200001c8

080008f4 <main>:

int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	init();
 80008f8:	f7ff ffcc 	bl	8000894 <init>
    while(1){
 80008fc:	46c0      	nop			@ (mov r8, r8)
 80008fe:	e7fd      	b.n	80008fc <main+0x8>

08000900 <SystemClock_Config>:
}


// ---SCARY ST STUFF :C---------------------------------------------
void SystemClock_Config(void)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b099      	sub	sp, #100	@ 0x64
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	242c      	movs	r4, #44	@ 0x2c
 8000908:	193b      	adds	r3, r7, r4
 800090a:	0018      	movs	r0, r3
 800090c:	2334      	movs	r3, #52	@ 0x34
 800090e:	001a      	movs	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	f002 fb45 	bl	8002fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000916:	231c      	movs	r3, #28
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	0018      	movs	r0, r3
 800091c:	2310      	movs	r3, #16
 800091e:	001a      	movs	r2, r3
 8000920:	2100      	movs	r1, #0
 8000922:	f002 fb3d 	bl	8002fa0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	0018      	movs	r0, r3
 800092a:	2318      	movs	r3, #24
 800092c:	001a      	movs	r2, r3
 800092e:	2100      	movs	r1, #0
 8000930:	f002 fb36 	bl	8002fa0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000934:	0021      	movs	r1, r4
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2202      	movs	r2, #2
 800093a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2201      	movs	r2, #1
 8000940:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2210      	movs	r2, #16
 8000946:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094e:	187b      	adds	r3, r7, r1
 8000950:	0018      	movs	r0, r3
 8000952:	f001 f8bb 	bl	8001acc <HAL_RCC_OscConfig>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800095a:	f000 f917 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095e:	211c      	movs	r1, #28
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2207      	movs	r2, #7
 8000964:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2100      	movs	r1, #0
 800097c:	0018      	movs	r0, r3
 800097e:	f001 fc2b 	bl	80021d8 <HAL_RCC_ClockConfig>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000986:	f000 f901 	bl	8000b8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2201      	movs	r2, #1
 800098e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	0018      	movs	r0, r3
 800099a:	f001 fd89 	bl	80024b0 <HAL_RCCEx_PeriphCLKConfig>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009a2:	f000 f8f3 	bl	8000b8c <Error_Handler>
  }
}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b019      	add	sp, #100	@ 0x64
 80009ac:	bd90      	pop	{r4, r7, pc}
	...

080009b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b4:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <MX_USART1_UART_Init+0x5c>)
 80009b6:	4a16      	ldr	r2, [pc, #88]	@ (8000a10 <MX_USART1_UART_Init+0x60>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_USART1_UART_Init+0x5c>)
 80009bc:	2296      	movs	r2, #150	@ 0x96
 80009be:	0192      	lsls	r2, r2, #6
 80009c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <MX_USART1_UART_Init+0x5c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <MX_USART1_UART_Init+0x5c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80009ce:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_USART1_UART_Init+0x5c>)
 80009d0:	2280      	movs	r2, #128	@ 0x80
 80009d2:	00d2      	lsls	r2, r2, #3
 80009d4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <MX_USART1_UART_Init+0x5c>)
 80009d8:	220c      	movs	r2, #12
 80009da:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009dc:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <MX_USART1_UART_Init+0x5c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <MX_USART1_UART_Init+0x5c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e8:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <MX_USART1_UART_Init+0x5c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ee:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <MX_USART1_UART_Init+0x5c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <MX_USART1_UART_Init+0x5c>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f001 fe48 	bl	800268c <HAL_UART_Init>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d001      	beq.n	8000a04 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000a00:	f000 f8c4 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a04:	46c0      	nop			@ (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	200000b4 	.word	0x200000b4
 8000a10:	40013800 	.word	0x40013800

08000a14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a1a:	4a15      	ldr	r2, [pc, #84]	@ (8000a70 <MX_USART2_UART_Init+0x5c>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a20:	2296      	movs	r2, #150	@ 0x96
 8000a22:	0212      	lsls	r2, r2, #8
 8000a24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a56:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <MX_USART2_UART_Init+0x58>)
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f001 fe17 	bl	800268c <HAL_UART_Init>
 8000a5e:	1e03      	subs	r3, r0, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a62:	f000 f893 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	2000013c 	.word	0x2000013c
 8000a70:	40004400 	.word	0x40004400

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b089      	sub	sp, #36	@ 0x24
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	240c      	movs	r4, #12
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	0018      	movs	r0, r3
 8000a80:	2314      	movs	r3, #20
 8000a82:	001a      	movs	r2, r3
 8000a84:	2100      	movs	r1, #0
 8000a86:	f002 fa8b 	bl	8002fa0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b84 <MX_GPIO_Init+0x110>)
 8000a8c:	695a      	ldr	r2, [r3, #20]
 8000a8e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b84 <MX_GPIO_Init+0x110>)
 8000a90:	2180      	movs	r1, #128	@ 0x80
 8000a92:	03c9      	lsls	r1, r1, #15
 8000a94:	430a      	orrs	r2, r1
 8000a96:	615a      	str	r2, [r3, #20]
 8000a98:	4b3a      	ldr	r3, [pc, #232]	@ (8000b84 <MX_GPIO_Init+0x110>)
 8000a9a:	695a      	ldr	r2, [r3, #20]
 8000a9c:	2380      	movs	r3, #128	@ 0x80
 8000a9e:	03db      	lsls	r3, r3, #15
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b37      	ldr	r3, [pc, #220]	@ (8000b84 <MX_GPIO_Init+0x110>)
 8000aa8:	695a      	ldr	r2, [r3, #20]
 8000aaa:	4b36      	ldr	r3, [pc, #216]	@ (8000b84 <MX_GPIO_Init+0x110>)
 8000aac:	2180      	movs	r1, #128	@ 0x80
 8000aae:	0289      	lsls	r1, r1, #10
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	615a      	str	r2, [r3, #20]
 8000ab4:	4b33      	ldr	r3, [pc, #204]	@ (8000b84 <MX_GPIO_Init+0x110>)
 8000ab6:	695a      	ldr	r2, [r3, #20]
 8000ab8:	2380      	movs	r3, #128	@ 0x80
 8000aba:	029b      	lsls	r3, r3, #10
 8000abc:	4013      	ands	r3, r2
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	4b30      	ldr	r3, [pc, #192]	@ (8000b84 <MX_GPIO_Init+0x110>)
 8000ac4:	695a      	ldr	r2, [r3, #20]
 8000ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8000b84 <MX_GPIO_Init+0x110>)
 8000ac8:	2180      	movs	r1, #128	@ 0x80
 8000aca:	02c9      	lsls	r1, r1, #11
 8000acc:	430a      	orrs	r2, r1
 8000ace:	615a      	str	r2, [r3, #20]
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b84 <MX_GPIO_Init+0x110>)
 8000ad2:	695a      	ldr	r2, [r3, #20]
 8000ad4:	2380      	movs	r3, #128	@ 0x80
 8000ad6:	02db      	lsls	r3, r3, #11
 8000ad8:	4013      	ands	r3, r2
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_MLOCAL_Pin|LED_MSERIAL_Pin|LED_BSY_Pin|TTY_SEND_Pin|TTY_READERR_Pin, GPIO_PIN_RESET);
 8000ade:	2390      	movs	r3, #144	@ 0x90
 8000ae0:	05db      	lsls	r3, r3, #23
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	213b      	movs	r1, #59	@ 0x3b
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f000 ffad 	bl	8001a46 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_MLOCAL_Pin LED_MSERIAL_Pin LED_BSY_Pin */
  GPIO_InitStruct.Pin = LED_MLOCAL_Pin|LED_MSERIAL_Pin|LED_BSY_Pin|TTY_READERR_Pin;
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	222b      	movs	r2, #43	@ 0x2b
 8000af0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	2201      	movs	r2, #1
 8000af6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	193a      	adds	r2, r7, r4
 8000b06:	2390      	movs	r3, #144	@ 0x90
 8000b08:	05db      	lsls	r3, r3, #23
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f000 fe15 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : TTY_SEND_Pin */
  GPIO_InitStruct.Pin = TTY_SEND_Pin;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	2210      	movs	r2, #16
 8000b16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	2203      	movs	r2, #3
 8000b28:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TTY_SEND_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	193a      	adds	r2, r7, r4
 8000b2c:	2390      	movs	r3, #144	@ 0x90
 8000b2e:	05db      	lsls	r3, r3, #23
 8000b30:	0011      	movs	r1, r2
 8000b32:	0018      	movs	r0, r3
 8000b34:	f000 fe02 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : TTY_RECV_Pin */
  GPIO_InitStruct.Pin = TTY_RECV_Pin;
 8000b38:	193b      	adds	r3, r7, r4
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	2200      	movs	r2, #0
 8000b42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TTY_RECV_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	4a0e      	ldr	r2, [pc, #56]	@ (8000b88 <MX_GPIO_Init+0x114>)
 8000b4e:	0019      	movs	r1, r3
 8000b50:	0010      	movs	r0, r2
 8000b52:	f000 fdf3 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_MODE_Pin */
  GPIO_InitStruct.Pin = BT_MODE_Pin;
 8000b56:	0021      	movs	r1, r4
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2280      	movs	r2, #128	@ 0x80
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2200      	movs	r2, #0
 8000b64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2202      	movs	r2, #2
 8000b6a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BT_MODE_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	187a      	adds	r2, r7, r1
 8000b6e:	2390      	movs	r3, #144	@ 0x90
 8000b70:	05db      	lsls	r3, r3, #23
 8000b72:	0011      	movs	r1, r2
 8000b74:	0018      	movs	r0, r3
 8000b76:	f000 fde1 	bl	800173c <HAL_GPIO_Init>


  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b009      	add	sp, #36	@ 0x24
 8000b80:	bd90      	pop	{r4, r7, pc}
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	40021000 	.word	0x40021000
 8000b88:	48000400 	.word	0x48000400

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000b94:	46c0      	nop			@ (mov r8, r8)
 8000b96:	e7fd      	b.n	8000b94 <Error_Handler+0x8>

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <HAL_MspInit+0x44>)
 8000ba0:	699a      	ldr	r2, [r3, #24]
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <HAL_MspInit+0x44>)
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	619a      	str	r2, [r3, #24]
 8000baa:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <HAL_MspInit+0x44>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <HAL_MspInit+0x44>)
 8000bb8:	69da      	ldr	r2, [r3, #28]
 8000bba:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <HAL_MspInit+0x44>)
 8000bbc:	2180      	movs	r1, #128	@ 0x80
 8000bbe:	0549      	lsls	r1, r1, #21
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	61da      	str	r2, [r3, #28]
 8000bc4:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <HAL_MspInit+0x44>)
 8000bc6:	69da      	ldr	r2, [r3, #28]
 8000bc8:	2380      	movs	r3, #128	@ 0x80
 8000bca:	055b      	lsls	r3, r3, #21
 8000bcc:	4013      	ands	r3, r2
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd2:	46c0      	nop			@ (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b002      	add	sp, #8
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	40021000 	.word	0x40021000

08000be0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b08d      	sub	sp, #52	@ 0x34
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	241c      	movs	r4, #28
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	0018      	movs	r0, r3
 8000bee:	2314      	movs	r3, #20
 8000bf0:	001a      	movs	r2, r3
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	f002 f9d4 	bl	8002fa0 <memset>
  if(huart->Instance==USART1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a39      	ldr	r2, [pc, #228]	@ (8000ce4 <HAL_UART_MspInit+0x104>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d134      	bne.n	8000c6c <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c02:	4b39      	ldr	r3, [pc, #228]	@ (8000ce8 <HAL_UART_MspInit+0x108>)
 8000c04:	699a      	ldr	r2, [r3, #24]
 8000c06:	4b38      	ldr	r3, [pc, #224]	@ (8000ce8 <HAL_UART_MspInit+0x108>)
 8000c08:	2180      	movs	r1, #128	@ 0x80
 8000c0a:	01c9      	lsls	r1, r1, #7
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	619a      	str	r2, [r3, #24]
 8000c10:	4b35      	ldr	r3, [pc, #212]	@ (8000ce8 <HAL_UART_MspInit+0x108>)
 8000c12:	699a      	ldr	r2, [r3, #24]
 8000c14:	2380      	movs	r3, #128	@ 0x80
 8000c16:	01db      	lsls	r3, r3, #7
 8000c18:	4013      	ands	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
 8000c1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b32      	ldr	r3, [pc, #200]	@ (8000ce8 <HAL_UART_MspInit+0x108>)
 8000c20:	695a      	ldr	r2, [r3, #20]
 8000c22:	4b31      	ldr	r3, [pc, #196]	@ (8000ce8 <HAL_UART_MspInit+0x108>)
 8000c24:	2180      	movs	r1, #128	@ 0x80
 8000c26:	0289      	lsls	r1, r1, #10
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	615a      	str	r2, [r3, #20]
 8000c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce8 <HAL_UART_MspInit+0x108>)
 8000c2e:	695a      	ldr	r2, [r3, #20]
 8000c30:	2380      	movs	r3, #128	@ 0x80
 8000c32:	029b      	lsls	r3, r3, #10
 8000c34:	4013      	ands	r3, r2
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	22c0      	movs	r2, #192	@ 0xc0
 8000c3e:	00d2      	lsls	r2, r2, #3
 8000c40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	0021      	movs	r1, r4
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2202      	movs	r2, #2
 8000c48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2203      	movs	r2, #3
 8000c54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2201      	movs	r2, #1
 8000c5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	187a      	adds	r2, r7, r1
 8000c5e:	2390      	movs	r3, #144	@ 0x90
 8000c60:	05db      	lsls	r3, r3, #23
 8000c62:	0011      	movs	r1, r2
 8000c64:	0018      	movs	r0, r3
 8000c66:	f000 fd69 	bl	800173c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c6a:	e037      	b.n	8000cdc <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a1e      	ldr	r2, [pc, #120]	@ (8000cec <HAL_UART_MspInit+0x10c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d132      	bne.n	8000cdc <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <HAL_UART_MspInit+0x108>)
 8000c78:	69da      	ldr	r2, [r3, #28]
 8000c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce8 <HAL_UART_MspInit+0x108>)
 8000c7c:	2180      	movs	r1, #128	@ 0x80
 8000c7e:	0289      	lsls	r1, r1, #10
 8000c80:	430a      	orrs	r2, r1
 8000c82:	61da      	str	r2, [r3, #28]
 8000c84:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <HAL_UART_MspInit+0x108>)
 8000c86:	69da      	ldr	r2, [r3, #28]
 8000c88:	2380      	movs	r3, #128	@ 0x80
 8000c8a:	029b      	lsls	r3, r3, #10
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <HAL_UART_MspInit+0x108>)
 8000c94:	695a      	ldr	r2, [r3, #20]
 8000c96:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <HAL_UART_MspInit+0x108>)
 8000c98:	2180      	movs	r1, #128	@ 0x80
 8000c9a:	0289      	lsls	r1, r1, #10
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	615a      	str	r2, [r3, #20]
 8000ca0:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <HAL_UART_MspInit+0x108>)
 8000ca2:	695a      	ldr	r2, [r3, #20]
 8000ca4:	2380      	movs	r3, #128	@ 0x80
 8000ca6:	029b      	lsls	r3, r3, #10
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000cae:	211c      	movs	r1, #28
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf0 <HAL_UART_MspInit+0x110>)
 8000cb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	2202      	movs	r2, #2
 8000cba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2201      	movs	r2, #1
 8000ccc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	187a      	adds	r2, r7, r1
 8000cd0:	2390      	movs	r3, #144	@ 0x90
 8000cd2:	05db      	lsls	r3, r3, #23
 8000cd4:	0011      	movs	r1, r2
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f000 fd30 	bl	800173c <HAL_GPIO_Init>
}
 8000cdc:	46c0      	nop			@ (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b00d      	add	sp, #52	@ 0x34
 8000ce2:	bd90      	pop	{r4, r7, pc}
 8000ce4:	40013800 	.word	0x40013800
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40004400 	.word	0x40004400
 8000cf0:	00008004 	.word	0x00008004

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf8:	46c0      	nop			@ (mov r8, r8)
 8000cfa:	e7fd      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d00:	46c0      	nop			@ (mov r8, r8)
 8000d02:	e7fd      	b.n	8000d00 <HardFault_Handler+0x4>

08000d04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d08:	46c0      	nop			@ (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1c:	f000 fc1a 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d20:	46c0      	nop			@ (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TTY_RECV_Pin);
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f000 fea8 	bl	8001a80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000d30:	46c0      	nop			@ (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d40:	4a14      	ldr	r2, [pc, #80]	@ (8000d94 <_sbrk+0x5c>)
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <_sbrk+0x60>)
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <_sbrk+0x64>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <_sbrk+0x68>)
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	18d3      	adds	r3, r2, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d207      	bcs.n	8000d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d68:	f002 f934 	bl	8002fd4 <__errno>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	220c      	movs	r2, #12
 8000d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d72:	2301      	movs	r3, #1
 8000d74:	425b      	negs	r3, r3
 8000d76:	e009      	b.n	8000d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	@ (8000d9c <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	18d2      	adds	r2, r2, r3
 8000d86:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <_sbrk+0x64>)
 8000d88:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b006      	add	sp, #24
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20001800 	.word	0x20001800
 8000d98:	00000400 	.word	0x00000400
 8000d9c:	200001cc 	.word	0x200001cc
 8000da0:	20000328 	.word	0x20000328

08000da4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000da8:	46c0      	nop			@ (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <toSymbol>:
    .ltrs = 31,   // 0b11111
    .figs = 27,   // 0b11011
    .null = 0     // 0b00000
};

int toSymbol(char c) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	0002      	movs	r2, r0
 8000db8:	1dfb      	adds	r3, r7, #7
 8000dba:	701a      	strb	r2, [r3, #0]
        ['X']  = 29, ['x'] = 29,
        ['Y']  = 21, ['y'] = 21,
        ['Z']  = 17, ['z'] = 17,
        ['+']  = 17,
    };
    if ((unsigned char)c < 128)
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db04      	blt.n	8000dd0 <toSymbol+0x20>
        return lut[(unsigned char)c];
 8000dc6:	1dfb      	adds	r3, r7, #7
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <toSymbol+0x2c>)
 8000dcc:	5cd3      	ldrb	r3, [r2, r3]
 8000dce:	e000      	b.n	8000dd2 <toSymbol+0x22>
    return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	080030f0 	.word	0x080030f0

08000de0 <toCharLTRS>:

char toCharLTRS(int sym){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
        [29] = 'x',   // X
        [30] = 'v',   // V
        // |ltrs_to_char| = 15
    };
    
    if (sym < 0 || sym > 31) return '\0';
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	db02      	blt.n	8000df4 <toCharLTRS+0x14>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b1f      	cmp	r3, #31
 8000df2:	dd01      	ble.n	8000df8 <toCharLTRS+0x18>
 8000df4:	2300      	movs	r3, #0
 8000df6:	e003      	b.n	8000e00 <toCharLTRS+0x20>
    return ltrs_to_char[sym];
 8000df8:	4a03      	ldr	r2, [pc, #12]	@ (8000e08 <toCharLTRS+0x28>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	18d3      	adds	r3, r2, r3
 8000dfe:	781b      	ldrb	r3, [r3, #0]
}
 8000e00:	0018      	movs	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b002      	add	sp, #8
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	08003170 	.word	0x08003170

08000e0c <toCharFIGS>:

char toCharFIGS(int sym){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
        [28] = '.',   // . (M in LTRS)
        [29] = '/',   // / (X in LTRS)
        [30] = '=',   // = (V in LTRS)
    }; // |figs_to_char| = 22

    if (sym < 0 || sym > 31) return '\0';
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	db02      	blt.n	8000e20 <toCharFIGS+0x14>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b1f      	cmp	r3, #31
 8000e1e:	dd01      	ble.n	8000e24 <toCharFIGS+0x18>
 8000e20:	2300      	movs	r3, #0
 8000e22:	e003      	b.n	8000e2c <toCharFIGS+0x20>
    return figs_to_char[sym];
 8000e24:	4a03      	ldr	r2, [pc, #12]	@ (8000e34 <toCharFIGS+0x28>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	18d3      	adds	r3, r2, r3
 8000e2a:	781b      	ldrb	r3, [r3, #0]
}
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b002      	add	sp, #8
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	08003190 	.word	0x08003190

08000e38 <toChar>:

// ---CHARACTER CONVERSION-------------------
char toChar(int _symbol){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

	if (_symbol == symbol.space)
 8000e40:	2204      	movs	r2, #4
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d101      	bne.n	8000e4c <toChar+0x14>
		return ' ';
 8000e48:	2320      	movs	r3, #32
 8000e4a:	e00e      	b.n	8000e6a <toChar+0x32>

	if (tty_mode == TTY_MODE_LETTERS){
 8000e4c:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <toChar+0x3c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d105      	bne.n	8000e60 <toChar+0x28>
		return toCharLTRS(_symbol);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	0018      	movs	r0, r3
 8000e58:	f7ff ffc2 	bl	8000de0 <toCharLTRS>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	e004      	b.n	8000e6a <toChar+0x32>
	}
	else {
		return toCharFIGS(_symbol);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff ffd2 	bl	8000e0c <toCharFIGS>
 8000e68:	0003      	movs	r3, r0
	}
}
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			@ (mov r8, r8)
 8000e74:	200001d0 	.word	0x200001d0

08000e78 <appendSymbol>:

// ---BUFFER MANIPULATION-------------------------------------------
int* appendSymbol(int* head, int sym){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
	// Handle NULL head pointer
	if (head == NULL) {
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d113      	bne.n	8000eb0 <appendSymbol+0x38>
		int* out = (int*)malloc(2);
 8000e88:	2002      	movs	r0, #2
 8000e8a:	f001 ffc3 	bl	8002e14 <malloc>
 8000e8e:	0003      	movs	r3, r0
 8000e90:	60bb      	str	r3, [r7, #8]
		if (out == NULL) return NULL;  // malloc failed, 2nd Try
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d101      	bne.n	8000e9c <appendSymbol+0x24>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	e043      	b.n	8000f24 <appendSymbol+0xac>
		out[0] = sym;
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	601a      	str	r2, [r3, #0]
		out[1] = -1;
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4252      	negs	r2, r2
 8000eaa:	601a      	str	r2, [r3, #0]
		return out;
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	e039      	b.n	8000f24 <appendSymbol+0xac>
	}
	
	int length = getBufferLength(head);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f000 f86e 	bl	8000f94 <getBufferLength>
 8000eb8:	0003      	movs	r3, r0
 8000eba:	613b      	str	r3, [r7, #16]
	// length + Symbol + Terminator
	int* out = (int*)malloc((length + 2) * sizeof(int));
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f001 ffa6 	bl	8002e14 <malloc>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	60fb      	str	r3, [r7, #12]
	if (out == NULL) {
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d101      	bne.n	8000ed6 <appendSymbol+0x5e>
		// malloc failed - don't free head, return NULL
		return NULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e026      	b.n	8000f24 <appendSymbol+0xac>
	}
	
	// Copy existing elements...
	for (int i = 0; i < length; i++) {
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	e00c      	b.n	8000ef6 <appendSymbol+0x7e>
		out[i] = head[i];
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	18d2      	adds	r2, r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	68f9      	ldr	r1, [r7, #12]
 8000eea:	18cb      	adds	r3, r1, r3
 8000eec:	6812      	ldr	r2, [r2, #0]
 8000eee:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	dbee      	blt.n	8000edc <appendSymbol+0x64>
	}
	out[length] = sym;        // Add symbol at correct position
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	18d3      	adds	r3, r2, r3
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	601a      	str	r2, [r3, #0]
	out[length + 1] = -1;     // Add terminator
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	18d3      	adds	r3, r2, r3
 8000f14:	2201      	movs	r2, #1
 8000f16:	4252      	negs	r2, r2
 8000f18:	601a      	str	r2, [r3, #0]

	free(head);	// the old head can be removed
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f001 ff83 	bl	8002e28 <free>
	return out;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	0018      	movs	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b006      	add	sp, #24
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <appendChar>:

int* appendChar(int* head, char c){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	000a      	movs	r2, r1
 8000f36:	1cfb      	adds	r3, r7, #3
 8000f38:	701a      	strb	r2, [r3, #0]
    int sym = toSymbol(c);
 8000f3a:	1cfb      	adds	r3, r7, #3
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f7ff ff36 	bl	8000db0 <toSymbol>
 8000f44:	0003      	movs	r3, r0
 8000f46:	60fb      	str	r3, [r7, #12]

    // if line width is reached:
    if (getBufferLength(head) < width){
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 f822 	bl	8000f94 <getBufferLength>
 8000f50:	0002      	movs	r2, r0
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <appendChar+0x64>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	da0f      	bge.n	8000f7a <appendChar+0x4e>
    	head = appendSymbol(head, symbol.cr);
 8000f5a:	2208      	movs	r2, #8
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	0011      	movs	r1, r2
 8000f60:	0018      	movs	r0, r3
 8000f62:	f7ff ff89 	bl	8000e78 <appendSymbol>
 8000f66:	0003      	movs	r3, r0
 8000f68:	607b      	str	r3, [r7, #4]
    	head = appendSymbol(head, symbol.lf);
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	0011      	movs	r1, r2
 8000f70:	0018      	movs	r0, r3
 8000f72:	f7ff ff81 	bl	8000e78 <appendSymbol>
 8000f76:	0003      	movs	r3, r0
 8000f78:	607b      	str	r3, [r7, #4]
    }

    // need to check for line termination and term-width
    // when "crlf" or "cr" or "lf" or "nl" always -> "cr" + "lf""
    return appendSymbol(head, sym);
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	0011      	movs	r1, r2
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff ff79 	bl	8000e78 <appendSymbol>
 8000f86:	0003      	movs	r3, r0
}
 8000f88:	0018      	movs	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b004      	add	sp, #16
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000008 	.word	0x20000008

08000f94 <getBufferLength>:

int getBufferLength(int* head){	// returns without Terminator!
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	if (head == NULL) return 0;  // Safety check
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <getBufferLength+0x12>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e00d      	b.n	8000fc2 <getBufferLength+0x2e>
	
	int i = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
	while (head[i] != -1){
 8000faa:	e002      	b.n	8000fb2 <getBufferLength+0x1e>
		i++;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
	while (head[i] != -1){
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	18d3      	adds	r3, r2, r3
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	d1f5      	bne.n	8000fac <getBufferLength+0x18>
	}
	return i;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
}
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b004      	add	sp, #16
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <TTY_FOX>:

// -----------------------------------------------------------------
// TODO: void TTY_printMemoryError(void)
// Debug function prints a brown fox
void TTY_FOX(void){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	TTY_WRITESTRING(FOX);
 8000fd0:	4b03      	ldr	r3, [pc, #12]	@ (8000fe0 <TTY_FOX+0x14>)
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f000 f828 	bl	8001028 <TTY_WRITESTRING>
}
 8000fd8:	46c0      	nop			@ (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	20000010 	.word	0x20000010

08000fe4 <TTY_WRITEKEY>:


// ---TTY-FUNCTIONS-------------------------------------------------
void TTY_WRITEKEY(char key){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	0002      	movs	r2, r0
 8000fec:	1dfb      	adds	r3, r7, #7
 8000fee:	701a      	strb	r2, [r3, #0]
    int* writebuffer = malloc(0);
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f001 ff0f 	bl	8002e14 <malloc>
 8000ff6:	0003      	movs	r3, r0
 8000ff8:	60fb      	str	r3, [r7, #12]
    writebuffer = appendChar(writebuffer, key);
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	781a      	ldrb	r2, [r3, #0]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	0011      	movs	r1, r2
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff ff92 	bl	8000f2c <appendChar>
 8001008:	0003      	movs	r3, r0
 800100a:	60fb      	str	r3, [r7, #12]
    writebuffer = TTY_WRITEBUFFER(writebuffer);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	0018      	movs	r0, r3
 8001010:	f000 f838 	bl	8001084 <TTY_WRITEBUFFER>
 8001014:	0003      	movs	r3, r0
 8001016:	60fb      	str	r3, [r7, #12]
    free(writebuffer);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	0018      	movs	r0, r3
 800101c:	f001 ff04 	bl	8002e28 <free>
}
 8001020:	46c0      	nop			@ (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	b004      	add	sp, #16
 8001026:	bd80      	pop	{r7, pc}

08001028 <TTY_WRITESTRING>:


void TTY_WRITESTRING(char* str){
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    // MAIN WRITE FUNCTION
    // only works with \0-terminated strings!!!
    int* writebuffer = malloc(0);
 8001030:	2000      	movs	r0, #0
 8001032:	f001 feef 	bl	8002e14 <malloc>
 8001036:	0003      	movs	r3, r0
 8001038:	60fb      	str	r3, [r7, #12]
    for (int i = 0; str[i] != '\0'; i++)
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	e00d      	b.n	800105c <TTY_WRITESTRING+0x34>
    {
        writebuffer = appendChar(writebuffer, str[i]);
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	18d3      	adds	r3, r2, r3
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	0011      	movs	r1, r2
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff ff6d 	bl	8000f2c <appendChar>
 8001052:	0003      	movs	r3, r0
 8001054:	60fb      	str	r3, [r7, #12]
    for (int i = 0; str[i] != '\0'; i++)
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	3301      	adds	r3, #1
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	18d3      	adds	r3, r2, r3
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1eb      	bne.n	8001040 <TTY_WRITESTRING+0x18>
    }

    writebuffer = TTY_WRITEBUFFER(writebuffer);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	0018      	movs	r0, r3
 800106c:	f000 f80a 	bl	8001084 <TTY_WRITEBUFFER>
 8001070:	0003      	movs	r3, r0
 8001072:	60fb      	str	r3, [r7, #12]

    free(writebuffer);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	0018      	movs	r0, r3
 8001078:	f001 fed6 	bl	8002e28 <free>
}
 800107c:	46c0      	nop			@ (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	b004      	add	sp, #16
 8001082:	bd80      	pop	{r7, pc}

08001084 <TTY_WRITEBUFFER>:

int* TTY_WRITEBUFFER(int* buffer){
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    
    // Write all symbols in buffer
    for (int i = 0; buffer[i] != -1; i++) {
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	e00a      	b.n	80010a8 <TTY_WRITEBUFFER+0x24>
        TTY_WRITE(buffer[i]);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	18d3      	adds	r3, r2, r3
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	0018      	movs	r0, r3
 800109e:	f000 f821 	bl	80010e4 <TTY_WRITE>
    for (int i = 0; buffer[i] != -1; i++) {
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	3301      	adds	r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	18d3      	adds	r3, r2, r3
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	d1ed      	bne.n	8001092 <TTY_WRITEBUFFER+0xe>
    }
    
    // Free the input buffer
    free(buffer);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	0018      	movs	r0, r3
 80010ba:	f001 feb5 	bl	8002e28 <free>
    
    // Create new empty buffer
    int* out = (int*)malloc(sizeof(int));
 80010be:	2004      	movs	r0, #4
 80010c0:	f001 fea8 	bl	8002e14 <malloc>
 80010c4:	0003      	movs	r3, r0
 80010c6:	60bb      	str	r3, [r7, #8]
    if (out == NULL) {
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <TTY_WRITEBUFFER+0x4e>
        return NULL;  // malloc failed - caller must handle this!
 80010ce:	2300      	movs	r3, #0
 80010d0:	e004      	b.n	80010dc <TTY_WRITEBUFFER+0x58>
    }
    out[0] = -1;  // Null-terminate
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2201      	movs	r2, #1
 80010d6:	4252      	negs	r2, r2
 80010d8:	601a      	str	r2, [r3, #0]
    return out;
 80010da:	68bb      	ldr	r3, [r7, #8]
}
 80010dc:	0018      	movs	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	b004      	add	sp, #16
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <TTY_WRITE>:

void TTY_WRITE(int _sym){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

	if (_sym == -1) return;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3301      	adds	r3, #1
 80010f0:	d039      	beq.n	8001166 <TTY_WRITE+0x82>

	// Skip redundant ltrs/figs commands
	if (_sym == TTY_MODE_FIGURES || _sym == TTY_MODE_LETTERS)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d002      	beq.n	80010fe <TTY_WRITE+0x1a>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d102      	bne.n	8001104 <TTY_WRITE+0x20>
		tty_mode = TTY_MODE_FIGURES ?
 80010fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001170 <TTY_WRITE+0x8c>)
 8001100:	2201      	movs	r2, #1
 8001102:	601a      	str	r2, [r3, #0]
				TTY_MODE_FIGURES : TTY_MODE_LETTERS;

	// if we want to use a "ltrs"|"figs" as audio-visual thingie
	// then we set this self-resetting flag
	if (send_mode != 0){
 8001104:	4b1b      	ldr	r3, [pc, #108]	@ (8001174 <TTY_WRITE+0x90>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00b      	beq.n	8001124 <TTY_WRITE+0x40>
		if (tty_mode == TTY_MODE_FIGURES) _sym = symbol.figs;
 800110c:	4b18      	ldr	r3, [pc, #96]	@ (8001170 <TTY_WRITE+0x8c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d102      	bne.n	800111a <TTY_WRITE+0x36>
 8001114:	231b      	movs	r3, #27
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	e001      	b.n	800111e <TTY_WRITE+0x3a>
		else _sym = symbol.ltrs;
 800111a:	231f      	movs	r3, #31
 800111c:	607b      	str	r3, [r7, #4]
		send_mode = 0;			// Remove Flag
 800111e:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <TTY_WRITE+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
	}
    // ---TRANSMIT--------------------------------------------------
	TTY_Startbit();
 8001124:	f000 f948 	bl	80013b8 <TTY_Startbit>

	// LSB FIRST!
    for (int i = 0; i < 5; i++) {
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	e015      	b.n	800115a <TTY_WRITE+0x76>
        int bit = ((_sym >> i) & 0x01) ^ 1;
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	411a      	asrs	r2, r3
 8001134:	0013      	movs	r3, r2
 8001136:	2201      	movs	r2, #1
 8001138:	4013      	ands	r3, r2
 800113a:	425a      	negs	r2, r3
 800113c:	4153      	adcs	r3, r2
 800113e:	b2db      	uxtb	r3, r3
 8001140:	60bb      	str	r3, [r7, #8]
        setTTY(bit);
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	0018      	movs	r0, r3
 8001146:	f000 f8fb 	bl	8001340 <setTTY>
        TTY_DELAY(1);
 800114a:	23fe      	movs	r3, #254	@ 0xfe
 800114c:	059b      	lsls	r3, r3, #22
 800114e:	1c18      	adds	r0, r3, #0
 8001150:	f000 f910 	bl	8001374 <TTY_DELAY>
    for (int i = 0; i < 5; i++) {
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3301      	adds	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2b04      	cmp	r3, #4
 800115e:	dde6      	ble.n	800112e <TTY_WRITE+0x4a>
    }
	// send those 5 bits
	TTY_Stopbit();
 8001160:	f000 f938 	bl	80013d4 <TTY_Stopbit>
 8001164:	e000      	b.n	8001168 <TTY_WRITE+0x84>
	if (_sym == -1) return;
 8001166:	46c0      	nop			@ (mov r8, r8)
}
 8001168:	46bd      	mov	sp, r7
 800116a:	b004      	add	sp, #16
 800116c:	bd80      	pop	{r7, pc}
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	200001d0 	.word	0x200001d0
 8001174:	200001d4 	.word	0x200001d4

08001178 <TTY_READKEY>:
 * is quite necessary for a stable "API" like infrastructure.
 *
 *	- TTY_READKEY() is the main function, this reads a single Symbol
 *				    and converts it into a char
 */
char TTY_READKEY(){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
	int sym0 = readSymbol();
 800117e:	f000 f80b 	bl	8001198 <readSymbol>
 8001182:	0003      	movs	r3, r0
 8001184:	607b      	str	r3, [r7, #4]
    return toChar(sym0);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	0018      	movs	r0, r3
 800118a:	f7ff fe55 	bl	8000e38 <toChar>
 800118e:	0003      	movs	r3, r0
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	b002      	add	sp, #8
 8001196:	bd80      	pop	{r7, pc}

08001198 <readSymbol>:

int readSymbol() {
 8001198:	b580      	push	{r7, lr}
 800119a:	b094      	sub	sp, #80	@ 0x50
 800119c:	af00      	add	r7, sp, #0
	// wait for Symbol-Trigger
	while(1){
		if (readTTY() == 0) HAL_Delay(2);
 800119e:	f000 f8b1 	bl	8001304 <readTTY>
 80011a2:	1e03      	subs	r3, r0, #0
 80011a4:	d103      	bne.n	80011ae <readSymbol+0x16>
 80011a6:	2002      	movs	r0, #2
 80011a8:	f000 f9f0 	bl	800158c <HAL_Delay>
 80011ac:	e7f7      	b.n	800119e <readSymbol+0x6>
		else break;
 80011ae:	46c0      	nop			@ (mov r8, r8)

	*/
	// read start-bit
	// pattern: 20ms startbit, 5x20ms Databit, 1.n stopbits
	// STARTBIT is 20ms HIGH
	HAL_Delay(9);	// Wait 10ms
 80011b0:	2009      	movs	r0, #9
 80011b2:	f000 f9eb 	bl	800158c <HAL_Delay>
	int beg = readTTY();
 80011b6:	f000 f8a5 	bl	8001304 <readTTY>
 80011ba:	0003      	movs	r3, r0
 80011bc:	647b      	str	r3, [r7, #68]	@ 0x44
	HAL_Delay(14);	// Wait 5 + 10ms
 80011be:	200e      	movs	r0, #14
 80011c0:	f000 f9e4 	bl	800158c <HAL_Delay>
	// NOTE: the additional delay (above) is the SAMPLING OFFSET!

	Databit databit[5];
	for (int i = 0; i < 5; i++){
 80011c4:	2300      	movs	r3, #0
 80011c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80011c8:	e02a      	b.n	8001220 <readSymbol+0x88>
		databit[i].s1 = readTTY();
 80011ca:	f000 f89b 	bl	8001304 <readTTY>
 80011ce:	1d39      	adds	r1, r7, #4
 80011d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80011d2:	0013      	movs	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	189b      	adds	r3, r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	5058      	str	r0, [r3, r1]
		HAL_Delay(4); // 5ms Delay
 80011dc:	2004      	movs	r0, #4
 80011de:	f000 f9d5 	bl	800158c <HAL_Delay>
		databit[i].s2 = readTTY();
 80011e2:	f000 f88f 	bl	8001304 <readTTY>
 80011e6:	1d39      	adds	r1, r7, #4
 80011e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80011ea:	0013      	movs	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	189b      	adds	r3, r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	18cb      	adds	r3, r1, r3
 80011f4:	3304      	adds	r3, #4
 80011f6:	6018      	str	r0, [r3, #0]
		HAL_Delay(4); // 5ms Delay
 80011f8:	2004      	movs	r0, #4
 80011fa:	f000 f9c7 	bl	800158c <HAL_Delay>
		databit[i].s3 = readTTY();
 80011fe:	f000 f881 	bl	8001304 <readTTY>
 8001202:	1d39      	adds	r1, r7, #4
 8001204:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001206:	0013      	movs	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	189b      	adds	r3, r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	18cb      	adds	r3, r1, r3
 8001210:	3308      	adds	r3, #8
 8001212:	6018      	str	r0, [r3, #0]
		HAL_Delay(9); // 10ms delay
 8001214:	2009      	movs	r0, #9
 8001216:	f000 f9b9 	bl	800158c <HAL_Delay>
	for (int i = 0; i < 5; i++){
 800121a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800121c:	3301      	adds	r3, #1
 800121e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001222:	2b04      	cmp	r3, #4
 8001224:	ddd1      	ble.n	80011ca <readSymbol+0x32>
	}

	// END Bit low for 1.5|1 sub-symbols
	// Should be 20-30ms
	// we use 5ms to determine whether or not a stopbit exists
	HAL_Delay(5);	// get some air for calculations
 8001226:	2005      	movs	r0, #5
 8001228:	f000 f9b0 	bl	800158c <HAL_Delay>
	// Loopback: after an ltrs, an additional ltrs got detected/send.
	// Assumption: all calculations should be done after 2ms.
	// Solution: just before we return the value we wait the entire
	//           Stopbit / "Pausenschritt" as Siemens calls it :3

	int end = readTTY();
 800122c:	f000 f86a 	bl	8001304 <readTTY>
 8001230:	0003      	movs	r3, r0
 8001232:	643b      	str	r3, [r7, #64]	@ 0x40

	// Eval Bits
	if (beg == 0 || end != 0){
 8001234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <readSymbol+0xa8>
 800123a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800123c:	2b00      	cmp	r3, #0
 800123e:	d004      	beq.n	800124a <readSymbol+0xb2>
		setReadError();
 8001240:	f000 f8d8 	bl	80013f4 <setReadError>
		return -1;
 8001244:	2301      	movs	r3, #1
 8001246:	425b      	negs	r3, r3
 8001248:	e03e      	b.n	80012c8 <readSymbol+0x130>
	}

	// BUG: Dauerfeuer von y funktioniert, r's werden immernoch falsch erkannt!
    // Konnte den BUG nicht mehr reproduzieren...

    int out = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	64bb      	str	r3, [r7, #72]	@ 0x48

    // Weird bug with bit concatenation ig.
    if (majority(databit[0]) == 0) out += 1;
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	6818      	ldr	r0, [r3, #0]
 8001252:	6859      	ldr	r1, [r3, #4]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	f000 f83b 	bl	80012d0 <majority>
 800125a:	1e03      	subs	r3, r0, #0
 800125c:	d102      	bne.n	8001264 <readSymbol+0xcc>
 800125e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001260:	3301      	adds	r3, #1
 8001262:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (majority(databit[1]) == 0) out += 2;
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	68d8      	ldr	r0, [r3, #12]
 8001268:	6919      	ldr	r1, [r3, #16]
 800126a:	695a      	ldr	r2, [r3, #20]
 800126c:	f000 f830 	bl	80012d0 <majority>
 8001270:	1e03      	subs	r3, r0, #0
 8001272:	d102      	bne.n	800127a <readSymbol+0xe2>
 8001274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001276:	3302      	adds	r3, #2
 8001278:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (majority(databit[2]) == 0) out += 4;
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	6998      	ldr	r0, [r3, #24]
 800127e:	69d9      	ldr	r1, [r3, #28]
 8001280:	6a1a      	ldr	r2, [r3, #32]
 8001282:	f000 f825 	bl	80012d0 <majority>
 8001286:	1e03      	subs	r3, r0, #0
 8001288:	d102      	bne.n	8001290 <readSymbol+0xf8>
 800128a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800128c:	3304      	adds	r3, #4
 800128e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (majority(databit[3]) == 0) out += 8;
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001294:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001298:	f000 f81a 	bl	80012d0 <majority>
 800129c:	1e03      	subs	r3, r0, #0
 800129e:	d102      	bne.n	80012a6 <readSymbol+0x10e>
 80012a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012a2:	3308      	adds	r3, #8
 80012a4:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (majority(databit[4]) == 0) out += 16;
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80012aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012ae:	f000 f80f 	bl	80012d0 <majority>
 80012b2:	1e03      	subs	r3, r0, #0
 80012b4:	d102      	bne.n	80012bc <readSymbol+0x124>
 80012b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012b8:	3310      	adds	r3, #16
 80012ba:	64bb      	str	r3, [r7, #72]	@ 0x48

    clearReadError();
 80012bc:	f000 f8a6 	bl	800140c <clearReadError>

    HAL_Delay(10);	// Stobbit should be <20ms
 80012c0:	200a      	movs	r0, #10
 80012c2:	f000 f963 	bl	800158c <HAL_Delay>
    return out;
 80012c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80012c8:	0018      	movs	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b014      	add	sp, #80	@ 0x50
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <majority>:

int majority(Databit d) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	6018      	str	r0, [r3, #0]
 80012da:	6059      	str	r1, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
    return (d.s1 + d.s2 + d.s3) >= 2 ? 1 : 0;
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	18d2      	adds	r2, r2, r3
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	18d3      	adds	r3, r2, r3
 80012ee:	2201      	movs	r2, #1
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	dc01      	bgt.n	80012f8 <majority+0x28>
 80012f4:	2300      	movs	r3, #0
 80012f6:	1c1a      	adds	r2, r3, #0
 80012f8:	b2d3      	uxtb	r3, r2
}
 80012fa:	0018      	movs	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b004      	add	sp, #16
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <readTTY>:

// --- Hardware Interfaces -----------------------------------------
int readTTY(){
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
	int out = -1;
 800130a:	2301      	movs	r3, #1
 800130c:	425b      	negs	r3, r3
 800130e:	607b      	str	r3, [r7, #4]
	out = HAL_GPIO_ReadPin(GPIOB, TTY_RECV_Pin);
 8001310:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <readTTY+0x34>)
 8001312:	2101      	movs	r1, #1
 8001314:	0018      	movs	r0, r3
 8001316:	f000 fb79 	bl	8001a0c <HAL_GPIO_ReadPin>
 800131a:	0003      	movs	r3, r0
 800131c:	607b      	str	r3, [r7, #4]
	if (loopback != 0) setTTY(out);
 800131e:	4b07      	ldr	r3, [pc, #28]	@ (800133c <readTTY+0x38>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <readTTY+0x2a>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	0018      	movs	r0, r3
 800132a:	f000 f809 	bl	8001340 <setTTY>
	return out;
 800132e:	687b      	ldr	r3, [r7, #4]
}
 8001330:	0018      	movs	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	b002      	add	sp, #8
 8001336:	bd80      	pop	{r7, pc}
 8001338:	48000400 	.word	0x48000400
 800133c:	200001d8 	.word	0x200001d8

08001340 <setTTY>:

void setTTY(int state){			// TTY @ A3
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	if (state != 0) {
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d007      	beq.n	800135e <setTTY+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800134e:	2390      	movs	r3, #144	@ 0x90
 8001350:	05db      	lsls	r3, r3, #23
 8001352:	2201      	movs	r2, #1
 8001354:	2110      	movs	r1, #16
 8001356:	0018      	movs	r0, r3
 8001358:	f000 fb75 	bl	8001a46 <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
	}
}
 800135c:	e006      	b.n	800136c <setTTY+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800135e:	2390      	movs	r3, #144	@ 0x90
 8001360:	05db      	lsls	r3, r3, #23
 8001362:	2200      	movs	r2, #0
 8001364:	2110      	movs	r1, #16
 8001366:	0018      	movs	r0, r3
 8001368:	f000 fb6d 	bl	8001a46 <HAL_GPIO_WritePin>
}
 800136c:	46c0      	nop			@ (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b002      	add	sp, #8
 8001372:	bd80      	pop	{r7, pc}

08001374 <TTY_DELAY>:

void TTY_DELAY(float cycles){
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	HAL_Delay((int)(cycles * ( 1000 / baud)));
 800137c:	4b0d      	ldr	r3, [pc, #52]	@ (80013b4 <TTY_DELAY+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	0019      	movs	r1, r3
 8001382:	23fa      	movs	r3, #250	@ 0xfa
 8001384:	0098      	lsls	r0, r3, #2
 8001386:	f7fe ff49 	bl	800021c <__divsi3>
 800138a:	0003      	movs	r3, r0
 800138c:	0018      	movs	r0, r3
 800138e:	f7ff f9ab 	bl	80006e8 <__aeabi_i2f>
 8001392:	1c03      	adds	r3, r0, #0
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	1c18      	adds	r0, r3, #0
 8001398:	f7ff f82c 	bl	80003f4 <__aeabi_fmul>
 800139c:	1c03      	adds	r3, r0, #0
 800139e:	1c18      	adds	r0, r3, #0
 80013a0:	f7ff f982 	bl	80006a8 <__aeabi_f2iz>
 80013a4:	0003      	movs	r3, r0
 80013a6:	0018      	movs	r0, r3
 80013a8:	f000 f8f0 	bl	800158c <HAL_Delay>
}
 80013ac:	46c0      	nop			@ (mov r8, r8)
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b002      	add	sp, #8
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000004 	.word	0x20000004

080013b8 <TTY_Startbit>:
	 * 3. Hope for the best
	 */
	NVIC_SystemReset();	// REBOOT CPU
}

void TTY_Startbit(){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	setTTY(1);
 80013bc:	2001      	movs	r0, #1
 80013be:	f7ff ffbf 	bl	8001340 <setTTY>
	TTY_DELAY(1.0);
 80013c2:	23fe      	movs	r3, #254	@ 0xfe
 80013c4:	059b      	lsls	r3, r3, #22
 80013c6:	1c18      	adds	r0, r3, #0
 80013c8:	f7ff ffd4 	bl	8001374 <TTY_DELAY>
}
 80013cc:	46c0      	nop			@ (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <TTY_Stopbit>:

void TTY_Stopbit(){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	setTTY(0);
 80013d8:	2000      	movs	r0, #0
 80013da:	f7ff ffb1 	bl	8001340 <setTTY>
	TTY_DELAY(stopbit_cnt);
 80013de:	4b04      	ldr	r3, [pc, #16]	@ (80013f0 <TTY_Stopbit+0x1c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	1c18      	adds	r0, r3, #0
 80013e4:	f7ff ffc6 	bl	8001374 <TTY_DELAY>
}
 80013e8:	46c0      	nop			@ (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	2000000c 	.word	0x2000000c

080013f4 <setReadError>:

void setReadError(){ HAL_GPIO_WritePin(GPIOA, TTY_READERR_Pin, 1); }
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	2390      	movs	r3, #144	@ 0x90
 80013fa:	05db      	lsls	r3, r3, #23
 80013fc:	2201      	movs	r2, #1
 80013fe:	2120      	movs	r1, #32
 8001400:	0018      	movs	r0, r3
 8001402:	f000 fb20 	bl	8001a46 <HAL_GPIO_WritePin>
 8001406:	46c0      	nop			@ (mov r8, r8)
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <clearReadError>:
void clearReadError(){ HAL_GPIO_WritePin(GPIOA, TTY_READERR_Pin, 0); }
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
 8001410:	2390      	movs	r3, #144	@ 0x90
 8001412:	05db      	lsls	r3, r3, #23
 8001414:	2200      	movs	r2, #0
 8001416:	2120      	movs	r1, #32
 8001418:	0018      	movs	r0, r3
 800141a:	f000 fb14 	bl	8001a46 <HAL_GPIO_WritePin>
 800141e:	46c0      	nop			@ (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <setLoopback>:

// --- System Properties -------------------------------------------
void setLoopback(int _loopback) {loopback = _loopback;}
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	4b03      	ldr	r3, [pc, #12]	@ (800143c <setLoopback+0x18>)
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	46c0      	nop			@ (mov r8, r8)
 8001434:	46bd      	mov	sp, r7
 8001436:	b002      	add	sp, #8
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	200001d8 	.word	0x200001d8

08001440 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001440:	4813      	ldr	r0, [pc, #76]	@ (8001490 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001442:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001444:	f7ff fcae 	bl	8000da4 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001448:	4812      	ldr	r0, [pc, #72]	@ (8001494 <LoopForever+0x6>)
    LDR R1, [R0]
 800144a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800144c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800144e:	4a12      	ldr	r2, [pc, #72]	@ (8001498 <LoopForever+0xa>)
    CMP R1, R2
 8001450:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001452:	d105      	bne.n	8001460 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001454:	4811      	ldr	r0, [pc, #68]	@ (800149c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001456:	4912      	ldr	r1, [pc, #72]	@ (80014a0 <LoopForever+0x12>)
    STR R1, [R0]
 8001458:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800145a:	4812      	ldr	r0, [pc, #72]	@ (80014a4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800145c:	4912      	ldr	r1, [pc, #72]	@ (80014a8 <LoopForever+0x1a>)
    STR R1, [R0]
 800145e:	6001      	str	r1, [r0, #0]

08001460 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001460:	4812      	ldr	r0, [pc, #72]	@ (80014ac <LoopForever+0x1e>)
  ldr r1, =_edata
 8001462:	4913      	ldr	r1, [pc, #76]	@ (80014b0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001464:	4a13      	ldr	r2, [pc, #76]	@ (80014b4 <LoopForever+0x26>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001468:	e002      	b.n	8001470 <LoopCopyDataInit>

0800146a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800146c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146e:	3304      	adds	r3, #4

08001470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001474:	d3f9      	bcc.n	800146a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001476:	4a10      	ldr	r2, [pc, #64]	@ (80014b8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001478:	4c10      	ldr	r4, [pc, #64]	@ (80014bc <LoopForever+0x2e>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800147c:	e001      	b.n	8001482 <LoopFillZerobss>

0800147e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001480:	3204      	adds	r2, #4

08001482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001484:	d3fb      	bcc.n	800147e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001486:	f001 fdab 	bl	8002fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800148a:	f7ff fa33 	bl	80008f4 <main>

0800148e <LoopForever>:

LoopForever:
    b LoopForever
 800148e:	e7fe      	b.n	800148e <LoopForever>
  ldr   r0, =_estack
 8001490:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001494:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001498:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800149c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80014a0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80014a4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80014a8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80014ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80014b4:	080031d8 	.word	0x080031d8
  ldr r2, =_sbss
 80014b8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80014bc:	20000328 	.word	0x20000328

080014c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC1_IRQHandler>
	...

080014c4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c8:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <HAL_Init+0x24>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_Init+0x24>)
 80014ce:	2110      	movs	r1, #16
 80014d0:	430a      	orrs	r2, r1
 80014d2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80014d4:	2000      	movs	r0, #0
 80014d6:	f000 f809 	bl	80014ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014da:	f7ff fb5d 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	0018      	movs	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	46c0      	nop			@ (mov r8, r8)
 80014e8:	40022000 	.word	0x40022000

080014ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f4:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <HAL_InitTick+0x5c>)
 80014f6:	681c      	ldr	r4, [r3, #0]
 80014f8:	4b14      	ldr	r3, [pc, #80]	@ (800154c <HAL_InitTick+0x60>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	0019      	movs	r1, r3
 80014fe:	23fa      	movs	r3, #250	@ 0xfa
 8001500:	0098      	lsls	r0, r3, #2
 8001502:	f7fe fe01 	bl	8000108 <__udivsi3>
 8001506:	0003      	movs	r3, r0
 8001508:	0019      	movs	r1, r3
 800150a:	0020      	movs	r0, r4
 800150c:	f7fe fdfc 	bl	8000108 <__udivsi3>
 8001510:	0003      	movs	r3, r0
 8001512:	0018      	movs	r0, r3
 8001514:	f000 f905 	bl	8001722 <HAL_SYSTICK_Config>
 8001518:	1e03      	subs	r3, r0, #0
 800151a:	d001      	beq.n	8001520 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e00f      	b.n	8001540 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b03      	cmp	r3, #3
 8001524:	d80b      	bhi.n	800153e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	2301      	movs	r3, #1
 800152a:	425b      	negs	r3, r3
 800152c:	2200      	movs	r2, #0
 800152e:	0018      	movs	r0, r3
 8001530:	f000 f8e2 	bl	80016f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <HAL_InitTick+0x64>)
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	0018      	movs	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	b003      	add	sp, #12
 8001546:	bd90      	pop	{r4, r7, pc}
 8001548:	20000000 	.word	0x20000000
 800154c:	20000044 	.word	0x20000044
 8001550:	20000040 	.word	0x20000040

08001554 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001558:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <HAL_IncTick+0x1c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	001a      	movs	r2, r3
 800155e:	4b05      	ldr	r3, [pc, #20]	@ (8001574 <HAL_IncTick+0x20>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	18d2      	adds	r2, r2, r3
 8001564:	4b03      	ldr	r3, [pc, #12]	@ (8001574 <HAL_IncTick+0x20>)
 8001566:	601a      	str	r2, [r3, #0]
}
 8001568:	46c0      	nop			@ (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	46c0      	nop			@ (mov r8, r8)
 8001570:	20000044 	.word	0x20000044
 8001574:	200001dc 	.word	0x200001dc

08001578 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  return uwTick;
 800157c:	4b02      	ldr	r3, [pc, #8]	@ (8001588 <HAL_GetTick+0x10>)
 800157e:	681b      	ldr	r3, [r3, #0]
}
 8001580:	0018      	movs	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			@ (mov r8, r8)
 8001588:	200001dc 	.word	0x200001dc

0800158c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001594:	f7ff fff0 	bl	8001578 <HAL_GetTick>
 8001598:	0003      	movs	r3, r0
 800159a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3301      	adds	r3, #1
 80015a4:	d005      	beq.n	80015b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a6:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <HAL_Delay+0x44>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	001a      	movs	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	189b      	adds	r3, r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015b2:	46c0      	nop			@ (mov r8, r8)
 80015b4:	f7ff ffe0 	bl	8001578 <HAL_GetTick>
 80015b8:	0002      	movs	r2, r0
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d8f7      	bhi.n	80015b4 <HAL_Delay+0x28>
  {
  }
}
 80015c4:	46c0      	nop			@ (mov r8, r8)
 80015c6:	46c0      	nop			@ (mov r8, r8)
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b004      	add	sp, #16
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	46c0      	nop			@ (mov r8, r8)
 80015d0:	20000044 	.word	0x20000044

080015d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	0002      	movs	r2, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	1dfb      	adds	r3, r7, #7
 80015e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015e2:	1dfb      	adds	r3, r7, #7
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80015e8:	d828      	bhi.n	800163c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ea:	4a2f      	ldr	r2, [pc, #188]	@ (80016a8 <__NVIC_SetPriority+0xd4>)
 80015ec:	1dfb      	adds	r3, r7, #7
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	33c0      	adds	r3, #192	@ 0xc0
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	589b      	ldr	r3, [r3, r2]
 80015fa:	1dfa      	adds	r2, r7, #7
 80015fc:	7812      	ldrb	r2, [r2, #0]
 80015fe:	0011      	movs	r1, r2
 8001600:	2203      	movs	r2, #3
 8001602:	400a      	ands	r2, r1
 8001604:	00d2      	lsls	r2, r2, #3
 8001606:	21ff      	movs	r1, #255	@ 0xff
 8001608:	4091      	lsls	r1, r2
 800160a:	000a      	movs	r2, r1
 800160c:	43d2      	mvns	r2, r2
 800160e:	401a      	ands	r2, r3
 8001610:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	019b      	lsls	r3, r3, #6
 8001616:	22ff      	movs	r2, #255	@ 0xff
 8001618:	401a      	ands	r2, r3
 800161a:	1dfb      	adds	r3, r7, #7
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	0018      	movs	r0, r3
 8001620:	2303      	movs	r3, #3
 8001622:	4003      	ands	r3, r0
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001628:	481f      	ldr	r0, [pc, #124]	@ (80016a8 <__NVIC_SetPriority+0xd4>)
 800162a:	1dfb      	adds	r3, r7, #7
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	b25b      	sxtb	r3, r3
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	430a      	orrs	r2, r1
 8001634:	33c0      	adds	r3, #192	@ 0xc0
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800163a:	e031      	b.n	80016a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800163c:	4a1b      	ldr	r2, [pc, #108]	@ (80016ac <__NVIC_SetPriority+0xd8>)
 800163e:	1dfb      	adds	r3, r7, #7
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	0019      	movs	r1, r3
 8001644:	230f      	movs	r3, #15
 8001646:	400b      	ands	r3, r1
 8001648:	3b08      	subs	r3, #8
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	3306      	adds	r3, #6
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	18d3      	adds	r3, r2, r3
 8001652:	3304      	adds	r3, #4
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	1dfa      	adds	r2, r7, #7
 8001658:	7812      	ldrb	r2, [r2, #0]
 800165a:	0011      	movs	r1, r2
 800165c:	2203      	movs	r2, #3
 800165e:	400a      	ands	r2, r1
 8001660:	00d2      	lsls	r2, r2, #3
 8001662:	21ff      	movs	r1, #255	@ 0xff
 8001664:	4091      	lsls	r1, r2
 8001666:	000a      	movs	r2, r1
 8001668:	43d2      	mvns	r2, r2
 800166a:	401a      	ands	r2, r3
 800166c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	019b      	lsls	r3, r3, #6
 8001672:	22ff      	movs	r2, #255	@ 0xff
 8001674:	401a      	ands	r2, r3
 8001676:	1dfb      	adds	r3, r7, #7
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	0018      	movs	r0, r3
 800167c:	2303      	movs	r3, #3
 800167e:	4003      	ands	r3, r0
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001684:	4809      	ldr	r0, [pc, #36]	@ (80016ac <__NVIC_SetPriority+0xd8>)
 8001686:	1dfb      	adds	r3, r7, #7
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	001c      	movs	r4, r3
 800168c:	230f      	movs	r3, #15
 800168e:	4023      	ands	r3, r4
 8001690:	3b08      	subs	r3, #8
 8001692:	089b      	lsrs	r3, r3, #2
 8001694:	430a      	orrs	r2, r1
 8001696:	3306      	adds	r3, #6
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	18c3      	adds	r3, r0, r3
 800169c:	3304      	adds	r3, #4
 800169e:	601a      	str	r2, [r3, #0]
}
 80016a0:	46c0      	nop			@ (mov r8, r8)
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b003      	add	sp, #12
 80016a6:	bd90      	pop	{r4, r7, pc}
 80016a8:	e000e100 	.word	0xe000e100
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	1e5a      	subs	r2, r3, #1
 80016bc:	2380      	movs	r3, #128	@ 0x80
 80016be:	045b      	lsls	r3, r3, #17
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d301      	bcc.n	80016c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c4:	2301      	movs	r3, #1
 80016c6:	e010      	b.n	80016ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c8:	4b0a      	ldr	r3, [pc, #40]	@ (80016f4 <SysTick_Config+0x44>)
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	3a01      	subs	r2, #1
 80016ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d0:	2301      	movs	r3, #1
 80016d2:	425b      	negs	r3, r3
 80016d4:	2103      	movs	r1, #3
 80016d6:	0018      	movs	r0, r3
 80016d8:	f7ff ff7c 	bl	80015d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <SysTick_Config+0x44>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <SysTick_Config+0x44>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	0018      	movs	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	b002      	add	sp, #8
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	46c0      	nop			@ (mov r8, r8)
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	210f      	movs	r1, #15
 8001704:	187b      	adds	r3, r7, r1
 8001706:	1c02      	adds	r2, r0, #0
 8001708:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	187b      	adds	r3, r7, r1
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	b25b      	sxtb	r3, r3
 8001712:	0011      	movs	r1, r2
 8001714:	0018      	movs	r0, r3
 8001716:	f7ff ff5d 	bl	80015d4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800171a:	46c0      	nop			@ (mov r8, r8)
 800171c:	46bd      	mov	sp, r7
 800171e:	b004      	add	sp, #16
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	0018      	movs	r0, r3
 800172e:	f7ff ffbf 	bl	80016b0 <SysTick_Config>
 8001732:	0003      	movs	r3, r0
}
 8001734:	0018      	movs	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	b002      	add	sp, #8
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174a:	e149      	b.n	80019e0 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2101      	movs	r1, #1
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	4091      	lsls	r1, r2
 8001756:	000a      	movs	r2, r1
 8001758:	4013      	ands	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d100      	bne.n	8001764 <HAL_GPIO_Init+0x28>
 8001762:	e13a      	b.n	80019da <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2203      	movs	r2, #3
 800176a:	4013      	ands	r3, r2
 800176c:	2b01      	cmp	r3, #1
 800176e:	d005      	beq.n	800177c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2203      	movs	r2, #3
 8001776:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001778:	2b02      	cmp	r3, #2
 800177a:	d130      	bne.n	80017de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	409a      	lsls	r2, r3
 800178a:	0013      	movs	r3, r2
 800178c:	43da      	mvns	r2, r3
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	409a      	lsls	r2, r3
 800179e:	0013      	movs	r3, r2
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b2:	2201      	movs	r2, #1
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
 80017b8:	0013      	movs	r3, r2
 80017ba:	43da      	mvns	r2, r3
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	2201      	movs	r2, #1
 80017ca:	401a      	ands	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	409a      	lsls	r2, r3
 80017d0:	0013      	movs	r3, r2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2203      	movs	r2, #3
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d017      	beq.n	800181a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	409a      	lsls	r2, r3
 80017f8:	0013      	movs	r3, r2
 80017fa:	43da      	mvns	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	409a      	lsls	r2, r3
 800180c:	0013      	movs	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2203      	movs	r2, #3
 8001820:	4013      	ands	r3, r2
 8001822:	2b02      	cmp	r3, #2
 8001824:	d123      	bne.n	800186e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	08da      	lsrs	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3208      	adds	r2, #8
 800182e:	0092      	lsls	r2, r2, #2
 8001830:	58d3      	ldr	r3, [r2, r3]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	2207      	movs	r2, #7
 8001838:	4013      	ands	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	220f      	movs	r2, #15
 800183e:	409a      	lsls	r2, r3
 8001840:	0013      	movs	r3, r2
 8001842:	43da      	mvns	r2, r3
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	2107      	movs	r1, #7
 8001852:	400b      	ands	r3, r1
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	409a      	lsls	r2, r3
 8001858:	0013      	movs	r3, r2
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3208      	adds	r2, #8
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	6939      	ldr	r1, [r7, #16]
 800186c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	2203      	movs	r2, #3
 800187a:	409a      	lsls	r2, r3
 800187c:	0013      	movs	r3, r2
 800187e:	43da      	mvns	r2, r3
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2203      	movs	r2, #3
 800188c:	401a      	ands	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	409a      	lsls	r2, r3
 8001894:	0013      	movs	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	23c0      	movs	r3, #192	@ 0xc0
 80018a8:	029b      	lsls	r3, r3, #10
 80018aa:	4013      	ands	r3, r2
 80018ac:	d100      	bne.n	80018b0 <HAL_GPIO_Init+0x174>
 80018ae:	e094      	b.n	80019da <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b0:	4b51      	ldr	r3, [pc, #324]	@ (80019f8 <HAL_GPIO_Init+0x2bc>)
 80018b2:	699a      	ldr	r2, [r3, #24]
 80018b4:	4b50      	ldr	r3, [pc, #320]	@ (80019f8 <HAL_GPIO_Init+0x2bc>)
 80018b6:	2101      	movs	r1, #1
 80018b8:	430a      	orrs	r2, r1
 80018ba:	619a      	str	r2, [r3, #24]
 80018bc:	4b4e      	ldr	r3, [pc, #312]	@ (80019f8 <HAL_GPIO_Init+0x2bc>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	2201      	movs	r2, #1
 80018c2:	4013      	ands	r3, r2
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018c8:	4a4c      	ldr	r2, [pc, #304]	@ (80019fc <HAL_GPIO_Init+0x2c0>)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	3302      	adds	r3, #2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	589b      	ldr	r3, [r3, r2]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	2203      	movs	r2, #3
 80018da:	4013      	ands	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	220f      	movs	r2, #15
 80018e0:	409a      	lsls	r2, r3
 80018e2:	0013      	movs	r3, r2
 80018e4:	43da      	mvns	r2, r3
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	2390      	movs	r3, #144	@ 0x90
 80018f0:	05db      	lsls	r3, r3, #23
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d00d      	beq.n	8001912 <HAL_GPIO_Init+0x1d6>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a41      	ldr	r2, [pc, #260]	@ (8001a00 <HAL_GPIO_Init+0x2c4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d007      	beq.n	800190e <HAL_GPIO_Init+0x1d2>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a40      	ldr	r2, [pc, #256]	@ (8001a04 <HAL_GPIO_Init+0x2c8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d101      	bne.n	800190a <HAL_GPIO_Init+0x1ce>
 8001906:	2302      	movs	r3, #2
 8001908:	e004      	b.n	8001914 <HAL_GPIO_Init+0x1d8>
 800190a:	2305      	movs	r3, #5
 800190c:	e002      	b.n	8001914 <HAL_GPIO_Init+0x1d8>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_GPIO_Init+0x1d8>
 8001912:	2300      	movs	r3, #0
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	2103      	movs	r1, #3
 8001918:	400a      	ands	r2, r1
 800191a:	0092      	lsls	r2, r2, #2
 800191c:	4093      	lsls	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001924:	4935      	ldr	r1, [pc, #212]	@ (80019fc <HAL_GPIO_Init+0x2c0>)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	089b      	lsrs	r3, r3, #2
 800192a:	3302      	adds	r3, #2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001932:	4b35      	ldr	r3, [pc, #212]	@ (8001a08 <HAL_GPIO_Init+0x2cc>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	43da      	mvns	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	2380      	movs	r3, #128	@ 0x80
 8001948:	035b      	lsls	r3, r3, #13
 800194a:	4013      	ands	r3, r2
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001956:	4b2c      	ldr	r3, [pc, #176]	@ (8001a08 <HAL_GPIO_Init+0x2cc>)
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800195c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <HAL_GPIO_Init+0x2cc>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	43da      	mvns	r2, r3
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	2380      	movs	r3, #128	@ 0x80
 8001972:	039b      	lsls	r3, r3, #14
 8001974:	4013      	ands	r3, r2
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001980:	4b21      	ldr	r3, [pc, #132]	@ (8001a08 <HAL_GPIO_Init+0x2cc>)
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001986:	4b20      	ldr	r3, [pc, #128]	@ (8001a08 <HAL_GPIO_Init+0x2cc>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	43da      	mvns	r2, r3
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	2380      	movs	r3, #128	@ 0x80
 800199c:	029b      	lsls	r3, r3, #10
 800199e:	4013      	ands	r3, r2
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019aa:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <HAL_GPIO_Init+0x2cc>)
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80019b0:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <HAL_GPIO_Init+0x2cc>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	43da      	mvns	r2, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	2380      	movs	r3, #128	@ 0x80
 80019c6:	025b      	lsls	r3, r3, #9
 80019c8:	4013      	ands	r3, r2
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <HAL_GPIO_Init+0x2cc>)
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3301      	adds	r3, #1
 80019de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	40da      	lsrs	r2, r3
 80019e8:	1e13      	subs	r3, r2, #0
 80019ea:	d000      	beq.n	80019ee <HAL_GPIO_Init+0x2b2>
 80019ec:	e6ae      	b.n	800174c <HAL_GPIO_Init+0x10>
  } 
}
 80019ee:	46c0      	nop			@ (mov r8, r8)
 80019f0:	46c0      	nop			@ (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b006      	add	sp, #24
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010000 	.word	0x40010000
 8001a00:	48000400 	.word	0x48000400
 8001a04:	48000800 	.word	0x48000800
 8001a08:	40010400 	.word	0x40010400

08001a0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	000a      	movs	r2, r1
 8001a16:	1cbb      	adds	r3, r7, #2
 8001a18:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	1cba      	adds	r2, r7, #2
 8001a20:	8812      	ldrh	r2, [r2, #0]
 8001a22:	4013      	ands	r3, r2
 8001a24:	d004      	beq.n	8001a30 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001a26:	230f      	movs	r3, #15
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
 8001a2e:	e003      	b.n	8001a38 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a30:	230f      	movs	r3, #15
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001a38:	230f      	movs	r3, #15
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	781b      	ldrb	r3, [r3, #0]
  }
 8001a3e:	0018      	movs	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b004      	add	sp, #16
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	0008      	movs	r0, r1
 8001a50:	0011      	movs	r1, r2
 8001a52:	1cbb      	adds	r3, r7, #2
 8001a54:	1c02      	adds	r2, r0, #0
 8001a56:	801a      	strh	r2, [r3, #0]
 8001a58:	1c7b      	adds	r3, r7, #1
 8001a5a:	1c0a      	adds	r2, r1, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a5e:	1c7b      	adds	r3, r7, #1
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d004      	beq.n	8001a70 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a66:	1cbb      	adds	r3, r7, #2
 8001a68:	881a      	ldrh	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a6e:	e003      	b.n	8001a78 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a70:	1cbb      	adds	r3, r7, #2
 8001a72:	881a      	ldrh	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a78:	46c0      	nop			@ (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b002      	add	sp, #8
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	0002      	movs	r2, r0
 8001a88:	1dbb      	adds	r3, r7, #6
 8001a8a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a8c:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	1dba      	adds	r2, r7, #6
 8001a92:	8812      	ldrh	r2, [r2, #0]
 8001a94:	4013      	ands	r3, r2
 8001a96:	d008      	beq.n	8001aaa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001a9a:	1dba      	adds	r2, r7, #6
 8001a9c:	8812      	ldrh	r2, [r2, #0]
 8001a9e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aa0:	1dbb      	adds	r3, r7, #6
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f000 f807 	bl	8001ab8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001aaa:	46c0      	nop			@ (mov r8, r8)
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b002      	add	sp, #8
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	46c0      	nop			@ (mov r8, r8)
 8001ab4:	40010400 	.word	0x40010400

08001ab8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	0002      	movs	r2, r0
 8001ac0:	1dbb      	adds	r3, r7, #6
 8001ac2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001ac4:	46c0      	nop			@ (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b002      	add	sp, #8
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d102      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	f000 fb76 	bl	80021cc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d100      	bne.n	8001aec <HAL_RCC_OscConfig+0x20>
 8001aea:	e08e      	b.n	8001c0a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001aec:	4bc5      	ldr	r3, [pc, #788]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	220c      	movs	r2, #12
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d00e      	beq.n	8001b16 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001af8:	4bc2      	ldr	r3, [pc, #776]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	220c      	movs	r2, #12
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d117      	bne.n	8001b34 <HAL_RCC_OscConfig+0x68>
 8001b04:	4bbf      	ldr	r3, [pc, #764]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	23c0      	movs	r3, #192	@ 0xc0
 8001b0a:	025b      	lsls	r3, r3, #9
 8001b0c:	401a      	ands	r2, r3
 8001b0e:	2380      	movs	r3, #128	@ 0x80
 8001b10:	025b      	lsls	r3, r3, #9
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d10e      	bne.n	8001b34 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b16:	4bbb      	ldr	r3, [pc, #748]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	2380      	movs	r3, #128	@ 0x80
 8001b1c:	029b      	lsls	r3, r3, #10
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d100      	bne.n	8001b24 <HAL_RCC_OscConfig+0x58>
 8001b22:	e071      	b.n	8001c08 <HAL_RCC_OscConfig+0x13c>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d000      	beq.n	8001b2e <HAL_RCC_OscConfig+0x62>
 8001b2c:	e06c      	b.n	8001c08 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	f000 fb4c 	bl	80021cc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d107      	bne.n	8001b4c <HAL_RCC_OscConfig+0x80>
 8001b3c:	4bb1      	ldr	r3, [pc, #708]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4bb0      	ldr	r3, [pc, #704]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001b42:	2180      	movs	r1, #128	@ 0x80
 8001b44:	0249      	lsls	r1, r1, #9
 8001b46:	430a      	orrs	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e02f      	b.n	8001bac <HAL_RCC_OscConfig+0xe0>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10c      	bne.n	8001b6e <HAL_RCC_OscConfig+0xa2>
 8001b54:	4bab      	ldr	r3, [pc, #684]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4baa      	ldr	r3, [pc, #680]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001b5a:	49ab      	ldr	r1, [pc, #684]	@ (8001e08 <HAL_RCC_OscConfig+0x33c>)
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	4ba8      	ldr	r3, [pc, #672]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4ba7      	ldr	r3, [pc, #668]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001b66:	49a9      	ldr	r1, [pc, #676]	@ (8001e0c <HAL_RCC_OscConfig+0x340>)
 8001b68:	400a      	ands	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	e01e      	b.n	8001bac <HAL_RCC_OscConfig+0xe0>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b05      	cmp	r3, #5
 8001b74:	d10e      	bne.n	8001b94 <HAL_RCC_OscConfig+0xc8>
 8001b76:	4ba3      	ldr	r3, [pc, #652]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4ba2      	ldr	r3, [pc, #648]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001b7c:	2180      	movs	r1, #128	@ 0x80
 8001b7e:	02c9      	lsls	r1, r1, #11
 8001b80:	430a      	orrs	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	4b9f      	ldr	r3, [pc, #636]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b9e      	ldr	r3, [pc, #632]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001b8a:	2180      	movs	r1, #128	@ 0x80
 8001b8c:	0249      	lsls	r1, r1, #9
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e00b      	b.n	8001bac <HAL_RCC_OscConfig+0xe0>
 8001b94:	4b9b      	ldr	r3, [pc, #620]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b9a      	ldr	r3, [pc, #616]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001b9a:	499b      	ldr	r1, [pc, #620]	@ (8001e08 <HAL_RCC_OscConfig+0x33c>)
 8001b9c:	400a      	ands	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	4b98      	ldr	r3, [pc, #608]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b97      	ldr	r3, [pc, #604]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001ba6:	4999      	ldr	r1, [pc, #612]	@ (8001e0c <HAL_RCC_OscConfig+0x340>)
 8001ba8:	400a      	ands	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d014      	beq.n	8001bde <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fce0 	bl	8001578 <HAL_GetTick>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bbe:	f7ff fcdb 	bl	8001578 <HAL_GetTick>
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b64      	cmp	r3, #100	@ 0x64
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e2fd      	b.n	80021cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd0:	4b8c      	ldr	r3, [pc, #560]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	2380      	movs	r3, #128	@ 0x80
 8001bd6:	029b      	lsls	r3, r3, #10
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0xf2>
 8001bdc:	e015      	b.n	8001c0a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7ff fccb 	bl	8001578 <HAL_GetTick>
 8001be2:	0003      	movs	r3, r0
 8001be4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff fcc6 	bl	8001578 <HAL_GetTick>
 8001bec:	0002      	movs	r2, r0
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	@ 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e2e8      	b.n	80021cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfa:	4b82      	ldr	r3, [pc, #520]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	2380      	movs	r3, #128	@ 0x80
 8001c00:	029b      	lsls	r3, r3, #10
 8001c02:	4013      	ands	r3, r2
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x11c>
 8001c06:	e000      	b.n	8001c0a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	4013      	ands	r3, r2
 8001c12:	d100      	bne.n	8001c16 <HAL_RCC_OscConfig+0x14a>
 8001c14:	e06c      	b.n	8001cf0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c16:	4b7b      	ldr	r3, [pc, #492]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d00e      	beq.n	8001c3e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c20:	4b78      	ldr	r3, [pc, #480]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	220c      	movs	r2, #12
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d11f      	bne.n	8001c6c <HAL_RCC_OscConfig+0x1a0>
 8001c2c:	4b75      	ldr	r3, [pc, #468]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	23c0      	movs	r3, #192	@ 0xc0
 8001c32:	025b      	lsls	r3, r3, #9
 8001c34:	401a      	ands	r2, r3
 8001c36:	2380      	movs	r3, #128	@ 0x80
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d116      	bne.n	8001c6c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3e:	4b71      	ldr	r3, [pc, #452]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2202      	movs	r2, #2
 8001c44:	4013      	ands	r3, r2
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_OscConfig+0x188>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d001      	beq.n	8001c54 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e2bb      	b.n	80021cc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c54:	4b6b      	ldr	r3, [pc, #428]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	22f8      	movs	r2, #248	@ 0xf8
 8001c5a:	4393      	bics	r3, r2
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	00da      	lsls	r2, r3, #3
 8001c64:	4b67      	ldr	r3, [pc, #412]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001c66:	430a      	orrs	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6a:	e041      	b.n	8001cf0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d024      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c74:	4b63      	ldr	r3, [pc, #396]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b62      	ldr	r3, [pc, #392]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fc7a 	bl	8001578 <HAL_GetTick>
 8001c84:	0003      	movs	r3, r0
 8001c86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c8a:	f7ff fc75 	bl	8001578 <HAL_GetTick>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e297      	b.n	80021cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9c:	4b59      	ldr	r3, [pc, #356]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d0f1      	beq.n	8001c8a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca6:	4b57      	ldr	r3, [pc, #348]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	22f8      	movs	r2, #248	@ 0xf8
 8001cac:	4393      	bics	r3, r2
 8001cae:	0019      	movs	r1, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	00da      	lsls	r2, r3, #3
 8001cb6:	4b53      	ldr	r3, [pc, #332]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	e018      	b.n	8001cf0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cbe:	4b51      	ldr	r3, [pc, #324]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	4b50      	ldr	r3, [pc, #320]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	438a      	bics	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cca:	f7ff fc55 	bl	8001578 <HAL_GetTick>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd4:	f7ff fc50 	bl	8001578 <HAL_GetTick>
 8001cd8:	0002      	movs	r2, r0
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e272      	b.n	80021cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce6:	4b47      	ldr	r3, [pc, #284]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2202      	movs	r2, #2
 8001cec:	4013      	ands	r3, r2
 8001cee:	d1f1      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2208      	movs	r2, #8
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d036      	beq.n	8001d68 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d019      	beq.n	8001d36 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d02:	4b40      	ldr	r3, [pc, #256]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001d04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d06:	4b3f      	ldr	r3, [pc, #252]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001d08:	2101      	movs	r1, #1
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0e:	f7ff fc33 	bl	8001578 <HAL_GetTick>
 8001d12:	0003      	movs	r3, r0
 8001d14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d18:	f7ff fc2e 	bl	8001578 <HAL_GetTick>
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e250      	b.n	80021cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2a:	4b36      	ldr	r3, [pc, #216]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2e:	2202      	movs	r2, #2
 8001d30:	4013      	ands	r3, r2
 8001d32:	d0f1      	beq.n	8001d18 <HAL_RCC_OscConfig+0x24c>
 8001d34:	e018      	b.n	8001d68 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d36:	4b33      	ldr	r3, [pc, #204]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001d38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d3a:	4b32      	ldr	r3, [pc, #200]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	438a      	bics	r2, r1
 8001d40:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d42:	f7ff fc19 	bl	8001578 <HAL_GetTick>
 8001d46:	0003      	movs	r3, r0
 8001d48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d4c:	f7ff fc14 	bl	8001578 <HAL_GetTick>
 8001d50:	0002      	movs	r2, r0
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e236      	b.n	80021cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5e:	4b29      	ldr	r3, [pc, #164]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d62:	2202      	movs	r2, #2
 8001d64:	4013      	ands	r3, r2
 8001d66:	d1f1      	bne.n	8001d4c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d100      	bne.n	8001d74 <HAL_RCC_OscConfig+0x2a8>
 8001d72:	e0b5      	b.n	8001ee0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d74:	201f      	movs	r0, #31
 8001d76:	183b      	adds	r3, r7, r0
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7c:	4b21      	ldr	r3, [pc, #132]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001d7e:	69da      	ldr	r2, [r3, #28]
 8001d80:	2380      	movs	r3, #128	@ 0x80
 8001d82:	055b      	lsls	r3, r3, #21
 8001d84:	4013      	ands	r3, r2
 8001d86:	d110      	bne.n	8001daa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d88:	4b1e      	ldr	r3, [pc, #120]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001d8a:	69da      	ldr	r2, [r3, #28]
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001d8e:	2180      	movs	r1, #128	@ 0x80
 8001d90:	0549      	lsls	r1, r1, #21
 8001d92:	430a      	orrs	r2, r1
 8001d94:	61da      	str	r2, [r3, #28]
 8001d96:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001d98:	69da      	ldr	r2, [r3, #28]
 8001d9a:	2380      	movs	r3, #128	@ 0x80
 8001d9c:	055b      	lsls	r3, r3, #21
 8001d9e:	4013      	ands	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001da4:	183b      	adds	r3, r7, r0
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001daa:	4b19      	ldr	r3, [pc, #100]	@ (8001e10 <HAL_RCC_OscConfig+0x344>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	2380      	movs	r3, #128	@ 0x80
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4013      	ands	r3, r2
 8001db4:	d11a      	bne.n	8001dec <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db6:	4b16      	ldr	r3, [pc, #88]	@ (8001e10 <HAL_RCC_OscConfig+0x344>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <HAL_RCC_OscConfig+0x344>)
 8001dbc:	2180      	movs	r1, #128	@ 0x80
 8001dbe:	0049      	lsls	r1, r1, #1
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc4:	f7ff fbd8 	bl	8001578 <HAL_GetTick>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dce:	f7ff fbd3 	bl	8001578 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b64      	cmp	r3, #100	@ 0x64
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e1f5      	b.n	80021cc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <HAL_RCC_OscConfig+0x344>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2380      	movs	r3, #128	@ 0x80
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4013      	ands	r3, r2
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d10f      	bne.n	8001e14 <HAL_RCC_OscConfig+0x348>
 8001df4:	4b03      	ldr	r3, [pc, #12]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001df6:	6a1a      	ldr	r2, [r3, #32]
 8001df8:	4b02      	ldr	r3, [pc, #8]	@ (8001e04 <HAL_RCC_OscConfig+0x338>)
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	621a      	str	r2, [r3, #32]
 8001e00:	e036      	b.n	8001e70 <HAL_RCC_OscConfig+0x3a4>
 8001e02:	46c0      	nop			@ (mov r8, r8)
 8001e04:	40021000 	.word	0x40021000
 8001e08:	fffeffff 	.word	0xfffeffff
 8001e0c:	fffbffff 	.word	0xfffbffff
 8001e10:	40007000 	.word	0x40007000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10c      	bne.n	8001e36 <HAL_RCC_OscConfig+0x36a>
 8001e1c:	4bca      	ldr	r3, [pc, #808]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001e1e:	6a1a      	ldr	r2, [r3, #32]
 8001e20:	4bc9      	ldr	r3, [pc, #804]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001e22:	2101      	movs	r1, #1
 8001e24:	438a      	bics	r2, r1
 8001e26:	621a      	str	r2, [r3, #32]
 8001e28:	4bc7      	ldr	r3, [pc, #796]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001e2a:	6a1a      	ldr	r2, [r3, #32]
 8001e2c:	4bc6      	ldr	r3, [pc, #792]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001e2e:	2104      	movs	r1, #4
 8001e30:	438a      	bics	r2, r1
 8001e32:	621a      	str	r2, [r3, #32]
 8001e34:	e01c      	b.n	8001e70 <HAL_RCC_OscConfig+0x3a4>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b05      	cmp	r3, #5
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x38c>
 8001e3e:	4bc2      	ldr	r3, [pc, #776]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001e40:	6a1a      	ldr	r2, [r3, #32]
 8001e42:	4bc1      	ldr	r3, [pc, #772]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001e44:	2104      	movs	r1, #4
 8001e46:	430a      	orrs	r2, r1
 8001e48:	621a      	str	r2, [r3, #32]
 8001e4a:	4bbf      	ldr	r3, [pc, #764]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001e4c:	6a1a      	ldr	r2, [r3, #32]
 8001e4e:	4bbe      	ldr	r3, [pc, #760]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001e50:	2101      	movs	r1, #1
 8001e52:	430a      	orrs	r2, r1
 8001e54:	621a      	str	r2, [r3, #32]
 8001e56:	e00b      	b.n	8001e70 <HAL_RCC_OscConfig+0x3a4>
 8001e58:	4bbb      	ldr	r3, [pc, #748]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001e5a:	6a1a      	ldr	r2, [r3, #32]
 8001e5c:	4bba      	ldr	r3, [pc, #744]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001e5e:	2101      	movs	r1, #1
 8001e60:	438a      	bics	r2, r1
 8001e62:	621a      	str	r2, [r3, #32]
 8001e64:	4bb8      	ldr	r3, [pc, #736]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001e66:	6a1a      	ldr	r2, [r3, #32]
 8001e68:	4bb7      	ldr	r3, [pc, #732]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001e6a:	2104      	movs	r1, #4
 8001e6c:	438a      	bics	r2, r1
 8001e6e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d014      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e78:	f7ff fb7e 	bl	8001578 <HAL_GetTick>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e80:	e009      	b.n	8001e96 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e82:	f7ff fb79 	bl	8001578 <HAL_GetTick>
 8001e86:	0002      	movs	r2, r0
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	4aaf      	ldr	r2, [pc, #700]	@ (800214c <HAL_RCC_OscConfig+0x680>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e19a      	b.n	80021cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e96:	4bac      	ldr	r3, [pc, #688]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x3b6>
 8001ea0:	e013      	b.n	8001eca <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff fb69 	bl	8001578 <HAL_GetTick>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eaa:	e009      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eac:	f7ff fb64 	bl	8001578 <HAL_GetTick>
 8001eb0:	0002      	movs	r2, r0
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	4aa5      	ldr	r2, [pc, #660]	@ (800214c <HAL_RCC_OscConfig+0x680>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e185      	b.n	80021cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec0:	4ba1      	ldr	r3, [pc, #644]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001eca:	231f      	movs	r3, #31
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d105      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed4:	4b9c      	ldr	r3, [pc, #624]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001ed6:	69da      	ldr	r2, [r3, #28]
 8001ed8:	4b9b      	ldr	r3, [pc, #620]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001eda:	499d      	ldr	r1, [pc, #628]	@ (8002150 <HAL_RCC_OscConfig+0x684>)
 8001edc:	400a      	ands	r2, r1
 8001ede:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2210      	movs	r2, #16
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d063      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d12a      	bne.n	8001f48 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ef2:	4b95      	ldr	r3, [pc, #596]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001ef4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ef6:	4b94      	ldr	r3, [pc, #592]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001ef8:	2104      	movs	r1, #4
 8001efa:	430a      	orrs	r2, r1
 8001efc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001efe:	4b92      	ldr	r3, [pc, #584]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001f00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f02:	4b91      	ldr	r3, [pc, #580]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001f04:	2101      	movs	r1, #1
 8001f06:	430a      	orrs	r2, r1
 8001f08:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0a:	f7ff fb35 	bl	8001578 <HAL_GetTick>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f14:	f7ff fb30 	bl	8001578 <HAL_GetTick>
 8001f18:	0002      	movs	r2, r0
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e152      	b.n	80021cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f26:	4b88      	ldr	r3, [pc, #544]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d0f1      	beq.n	8001f14 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f30:	4b85      	ldr	r3, [pc, #532]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f34:	22f8      	movs	r2, #248	@ 0xf8
 8001f36:	4393      	bics	r3, r2
 8001f38:	0019      	movs	r1, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	00da      	lsls	r2, r3, #3
 8001f40:	4b81      	ldr	r3, [pc, #516]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001f42:	430a      	orrs	r2, r1
 8001f44:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f46:	e034      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	3305      	adds	r3, #5
 8001f4e:	d111      	bne.n	8001f74 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001f50:	4b7d      	ldr	r3, [pc, #500]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001f52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f54:	4b7c      	ldr	r3, [pc, #496]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001f56:	2104      	movs	r1, #4
 8001f58:	438a      	bics	r2, r1
 8001f5a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f5c:	4b7a      	ldr	r3, [pc, #488]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f60:	22f8      	movs	r2, #248	@ 0xf8
 8001f62:	4393      	bics	r3, r2
 8001f64:	0019      	movs	r1, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	00da      	lsls	r2, r3, #3
 8001f6c:	4b76      	ldr	r3, [pc, #472]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f72:	e01e      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f74:	4b74      	ldr	r3, [pc, #464]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001f76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f78:	4b73      	ldr	r3, [pc, #460]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001f7a:	2104      	movs	r1, #4
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001f80:	4b71      	ldr	r3, [pc, #452]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001f82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f84:	4b70      	ldr	r3, [pc, #448]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001f86:	2101      	movs	r1, #1
 8001f88:	438a      	bics	r2, r1
 8001f8a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8c:	f7ff faf4 	bl	8001578 <HAL_GetTick>
 8001f90:	0003      	movs	r3, r0
 8001f92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f96:	f7ff faef 	bl	8001578 <HAL_GetTick>
 8001f9a:	0002      	movs	r2, r0
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e111      	b.n	80021cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001fa8:	4b67      	ldr	r3, [pc, #412]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fac:	2202      	movs	r2, #2
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d1f1      	bne.n	8001f96 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d05c      	beq.n	8002076 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001fbc:	4b62      	ldr	r3, [pc, #392]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	220c      	movs	r2, #12
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b0c      	cmp	r3, #12
 8001fc6:	d00e      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001fc8:	4b5f      	ldr	r3, [pc, #380]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	220c      	movs	r2, #12
 8001fce:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d114      	bne.n	8001ffe <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001fd4:	4b5c      	ldr	r3, [pc, #368]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	23c0      	movs	r3, #192	@ 0xc0
 8001fda:	025b      	lsls	r3, r3, #9
 8001fdc:	401a      	ands	r2, r3
 8001fde:	23c0      	movs	r3, #192	@ 0xc0
 8001fe0:	025b      	lsls	r3, r3, #9
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d10b      	bne.n	8001ffe <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001fe6:	4b58      	ldr	r3, [pc, #352]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8001fe8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fea:	2380      	movs	r3, #128	@ 0x80
 8001fec:	029b      	lsls	r3, r3, #10
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d040      	beq.n	8002074 <HAL_RCC_OscConfig+0x5a8>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d03c      	beq.n	8002074 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e0e6      	b.n	80021cc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d01b      	beq.n	800203e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002006:	4b50      	ldr	r3, [pc, #320]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8002008:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800200a:	4b4f      	ldr	r3, [pc, #316]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 800200c:	2180      	movs	r1, #128	@ 0x80
 800200e:	0249      	lsls	r1, r1, #9
 8002010:	430a      	orrs	r2, r1
 8002012:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7ff fab0 	bl	8001578 <HAL_GetTick>
 8002018:	0003      	movs	r3, r0
 800201a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800201e:	f7ff faab 	bl	8001578 <HAL_GetTick>
 8002022:	0002      	movs	r2, r0
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e0cd      	b.n	80021cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002030:	4b45      	ldr	r3, [pc, #276]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8002032:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002034:	2380      	movs	r3, #128	@ 0x80
 8002036:	029b      	lsls	r3, r3, #10
 8002038:	4013      	ands	r3, r2
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x552>
 800203c:	e01b      	b.n	8002076 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800203e:	4b42      	ldr	r3, [pc, #264]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8002040:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002042:	4b41      	ldr	r3, [pc, #260]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8002044:	4943      	ldr	r1, [pc, #268]	@ (8002154 <HAL_RCC_OscConfig+0x688>)
 8002046:	400a      	ands	r2, r1
 8002048:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7ff fa95 	bl	8001578 <HAL_GetTick>
 800204e:	0003      	movs	r3, r0
 8002050:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002054:	f7ff fa90 	bl	8001578 <HAL_GetTick>
 8002058:	0002      	movs	r2, r0
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e0b2      	b.n	80021cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002066:	4b38      	ldr	r3, [pc, #224]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8002068:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800206a:	2380      	movs	r3, #128	@ 0x80
 800206c:	029b      	lsls	r3, r3, #10
 800206e:	4013      	ands	r3, r2
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x588>
 8002072:	e000      	b.n	8002076 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002074:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <HAL_RCC_OscConfig+0x5b4>
 800207e:	e0a4      	b.n	80021ca <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002080:	4b31      	ldr	r3, [pc, #196]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	220c      	movs	r2, #12
 8002086:	4013      	ands	r3, r2
 8002088:	2b08      	cmp	r3, #8
 800208a:	d100      	bne.n	800208e <HAL_RCC_OscConfig+0x5c2>
 800208c:	e078      	b.n	8002180 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002092:	2b02      	cmp	r3, #2
 8002094:	d14c      	bne.n	8002130 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002096:	4b2c      	ldr	r3, [pc, #176]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4b2b      	ldr	r3, [pc, #172]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 800209c:	492e      	ldr	r1, [pc, #184]	@ (8002158 <HAL_RCC_OscConfig+0x68c>)
 800209e:	400a      	ands	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7ff fa69 	bl	8001578 <HAL_GetTick>
 80020a6:	0003      	movs	r3, r0
 80020a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ac:	f7ff fa64 	bl	8001578 <HAL_GetTick>
 80020b0:	0002      	movs	r2, r0
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e086      	b.n	80021cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020be:	4b22      	ldr	r3, [pc, #136]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	2380      	movs	r3, #128	@ 0x80
 80020c4:	049b      	lsls	r3, r3, #18
 80020c6:	4013      	ands	r3, r2
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 80020cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ce:	220f      	movs	r2, #15
 80020d0:	4393      	bics	r3, r2
 80020d2:	0019      	movs	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 80020da:	430a      	orrs	r2, r1
 80020dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020de:	4b1a      	ldr	r3, [pc, #104]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4a1e      	ldr	r2, [pc, #120]	@ (800215c <HAL_RCC_OscConfig+0x690>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	0019      	movs	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f0:	431a      	orrs	r2, r3
 80020f2:	4b15      	ldr	r3, [pc, #84]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 80020f4:	430a      	orrs	r2, r1
 80020f6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f8:	4b13      	ldr	r3, [pc, #76]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b12      	ldr	r3, [pc, #72]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 80020fe:	2180      	movs	r1, #128	@ 0x80
 8002100:	0449      	lsls	r1, r1, #17
 8002102:	430a      	orrs	r2, r1
 8002104:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7ff fa37 	bl	8001578 <HAL_GetTick>
 800210a:	0003      	movs	r3, r0
 800210c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002110:	f7ff fa32 	bl	8001578 <HAL_GetTick>
 8002114:	0002      	movs	r2, r0
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e054      	b.n	80021cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002122:	4b09      	ldr	r3, [pc, #36]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	2380      	movs	r3, #128	@ 0x80
 8002128:	049b      	lsls	r3, r3, #18
 800212a:	4013      	ands	r3, r2
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x644>
 800212e:	e04c      	b.n	80021ca <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002130:	4b05      	ldr	r3, [pc, #20]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b04      	ldr	r3, [pc, #16]	@ (8002148 <HAL_RCC_OscConfig+0x67c>)
 8002136:	4908      	ldr	r1, [pc, #32]	@ (8002158 <HAL_RCC_OscConfig+0x68c>)
 8002138:	400a      	ands	r2, r1
 800213a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7ff fa1c 	bl	8001578 <HAL_GetTick>
 8002140:	0003      	movs	r3, r0
 8002142:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002144:	e015      	b.n	8002172 <HAL_RCC_OscConfig+0x6a6>
 8002146:	46c0      	nop			@ (mov r8, r8)
 8002148:	40021000 	.word	0x40021000
 800214c:	00001388 	.word	0x00001388
 8002150:	efffffff 	.word	0xefffffff
 8002154:	fffeffff 	.word	0xfffeffff
 8002158:	feffffff 	.word	0xfeffffff
 800215c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002160:	f7ff fa0a 	bl	8001578 <HAL_GetTick>
 8002164:	0002      	movs	r2, r0
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e02c      	b.n	80021cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002172:	4b18      	ldr	r3, [pc, #96]	@ (80021d4 <HAL_RCC_OscConfig+0x708>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	2380      	movs	r3, #128	@ 0x80
 8002178:	049b      	lsls	r3, r3, #18
 800217a:	4013      	ands	r3, r2
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x694>
 800217e:	e024      	b.n	80021ca <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e01f      	b.n	80021cc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800218c:	4b11      	ldr	r3, [pc, #68]	@ (80021d4 <HAL_RCC_OscConfig+0x708>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002192:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <HAL_RCC_OscConfig+0x708>)
 8002194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002196:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	23c0      	movs	r3, #192	@ 0xc0
 800219c:	025b      	lsls	r3, r3, #9
 800219e:	401a      	ands	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d10e      	bne.n	80021c6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	220f      	movs	r2, #15
 80021ac:	401a      	ands	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	23f0      	movs	r3, #240	@ 0xf0
 80021ba:	039b      	lsls	r3, r3, #14
 80021bc:	401a      	ands	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d001      	beq.n	80021ca <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	0018      	movs	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b008      	add	sp, #32
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000

080021d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0bf      	b.n	800236c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021ec:	4b61      	ldr	r3, [pc, #388]	@ (8002374 <HAL_RCC_ClockConfig+0x19c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2201      	movs	r2, #1
 80021f2:	4013      	ands	r3, r2
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d911      	bls.n	800221e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b5e      	ldr	r3, [pc, #376]	@ (8002374 <HAL_RCC_ClockConfig+0x19c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2201      	movs	r2, #1
 8002200:	4393      	bics	r3, r2
 8002202:	0019      	movs	r1, r3
 8002204:	4b5b      	ldr	r3, [pc, #364]	@ (8002374 <HAL_RCC_ClockConfig+0x19c>)
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220c:	4b59      	ldr	r3, [pc, #356]	@ (8002374 <HAL_RCC_ClockConfig+0x19c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2201      	movs	r2, #1
 8002212:	4013      	ands	r3, r2
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d001      	beq.n	800221e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e0a6      	b.n	800236c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2202      	movs	r2, #2
 8002224:	4013      	ands	r3, r2
 8002226:	d015      	beq.n	8002254 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2204      	movs	r2, #4
 800222e:	4013      	ands	r3, r2
 8002230:	d006      	beq.n	8002240 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002232:	4b51      	ldr	r3, [pc, #324]	@ (8002378 <HAL_RCC_ClockConfig+0x1a0>)
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	4b50      	ldr	r3, [pc, #320]	@ (8002378 <HAL_RCC_ClockConfig+0x1a0>)
 8002238:	21e0      	movs	r1, #224	@ 0xe0
 800223a:	00c9      	lsls	r1, r1, #3
 800223c:	430a      	orrs	r2, r1
 800223e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002240:	4b4d      	ldr	r3, [pc, #308]	@ (8002378 <HAL_RCC_ClockConfig+0x1a0>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	22f0      	movs	r2, #240	@ 0xf0
 8002246:	4393      	bics	r3, r2
 8002248:	0019      	movs	r1, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	4b4a      	ldr	r3, [pc, #296]	@ (8002378 <HAL_RCC_ClockConfig+0x1a0>)
 8002250:	430a      	orrs	r2, r1
 8002252:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2201      	movs	r2, #1
 800225a:	4013      	ands	r3, r2
 800225c:	d04c      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d107      	bne.n	8002276 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	4b44      	ldr	r3, [pc, #272]	@ (8002378 <HAL_RCC_ClockConfig+0x1a0>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	2380      	movs	r3, #128	@ 0x80
 800226c:	029b      	lsls	r3, r3, #10
 800226e:	4013      	ands	r3, r2
 8002270:	d120      	bne.n	80022b4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e07a      	b.n	800236c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d107      	bne.n	800228e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227e:	4b3e      	ldr	r3, [pc, #248]	@ (8002378 <HAL_RCC_ClockConfig+0x1a0>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	2380      	movs	r3, #128	@ 0x80
 8002284:	049b      	lsls	r3, r3, #18
 8002286:	4013      	ands	r3, r2
 8002288:	d114      	bne.n	80022b4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e06e      	b.n	800236c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b03      	cmp	r3, #3
 8002294:	d107      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002296:	4b38      	ldr	r3, [pc, #224]	@ (8002378 <HAL_RCC_ClockConfig+0x1a0>)
 8002298:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800229a:	2380      	movs	r3, #128	@ 0x80
 800229c:	029b      	lsls	r3, r3, #10
 800229e:	4013      	ands	r3, r2
 80022a0:	d108      	bne.n	80022b4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e062      	b.n	800236c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a6:	4b34      	ldr	r3, [pc, #208]	@ (8002378 <HAL_RCC_ClockConfig+0x1a0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2202      	movs	r2, #2
 80022ac:	4013      	ands	r3, r2
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e05b      	b.n	800236c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b4:	4b30      	ldr	r3, [pc, #192]	@ (8002378 <HAL_RCC_ClockConfig+0x1a0>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2203      	movs	r2, #3
 80022ba:	4393      	bics	r3, r2
 80022bc:	0019      	movs	r1, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002378 <HAL_RCC_ClockConfig+0x1a0>)
 80022c4:	430a      	orrs	r2, r1
 80022c6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c8:	f7ff f956 	bl	8001578 <HAL_GetTick>
 80022cc:	0003      	movs	r3, r0
 80022ce:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d0:	e009      	b.n	80022e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d2:	f7ff f951 	bl	8001578 <HAL_GetTick>
 80022d6:	0002      	movs	r2, r0
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	4a27      	ldr	r2, [pc, #156]	@ (800237c <HAL_RCC_ClockConfig+0x1a4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e042      	b.n	800236c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	4b24      	ldr	r3, [pc, #144]	@ (8002378 <HAL_RCC_ClockConfig+0x1a0>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	220c      	movs	r2, #12
 80022ec:	401a      	ands	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d1ec      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002374 <HAL_RCC_ClockConfig+0x19c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2201      	movs	r2, #1
 80022fe:	4013      	ands	r3, r2
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d211      	bcs.n	800232a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <HAL_RCC_ClockConfig+0x19c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2201      	movs	r2, #1
 800230c:	4393      	bics	r3, r2
 800230e:	0019      	movs	r1, r3
 8002310:	4b18      	ldr	r3, [pc, #96]	@ (8002374 <HAL_RCC_ClockConfig+0x19c>)
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002318:	4b16      	ldr	r3, [pc, #88]	@ (8002374 <HAL_RCC_ClockConfig+0x19c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2201      	movs	r2, #1
 800231e:	4013      	ands	r3, r2
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d001      	beq.n	800232a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e020      	b.n	800236c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2204      	movs	r2, #4
 8002330:	4013      	ands	r3, r2
 8002332:	d009      	beq.n	8002348 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002334:	4b10      	ldr	r3, [pc, #64]	@ (8002378 <HAL_RCC_ClockConfig+0x1a0>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4a11      	ldr	r2, [pc, #68]	@ (8002380 <HAL_RCC_ClockConfig+0x1a8>)
 800233a:	4013      	ands	r3, r2
 800233c:	0019      	movs	r1, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	4b0d      	ldr	r3, [pc, #52]	@ (8002378 <HAL_RCC_ClockConfig+0x1a0>)
 8002344:	430a      	orrs	r2, r1
 8002346:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002348:	f000 f820 	bl	800238c <HAL_RCC_GetSysClockFreq>
 800234c:	0001      	movs	r1, r0
 800234e:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <HAL_RCC_ClockConfig+0x1a0>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	091b      	lsrs	r3, r3, #4
 8002354:	220f      	movs	r2, #15
 8002356:	4013      	ands	r3, r2
 8002358:	4a0a      	ldr	r2, [pc, #40]	@ (8002384 <HAL_RCC_ClockConfig+0x1ac>)
 800235a:	5cd3      	ldrb	r3, [r2, r3]
 800235c:	000a      	movs	r2, r1
 800235e:	40da      	lsrs	r2, r3
 8002360:	4b09      	ldr	r3, [pc, #36]	@ (8002388 <HAL_RCC_ClockConfig+0x1b0>)
 8002362:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002364:	2000      	movs	r0, #0
 8002366:	f7ff f8c1 	bl	80014ec <HAL_InitTick>
  
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	b004      	add	sp, #16
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40022000 	.word	0x40022000
 8002378:	40021000 	.word	0x40021000
 800237c:	00001388 	.word	0x00001388
 8002380:	fffff8ff 	.word	0xfffff8ff
 8002384:	080030d8 	.word	0x080030d8
 8002388:	20000000 	.word	0x20000000

0800238c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80023a6:	4b2d      	ldr	r3, [pc, #180]	@ (800245c <HAL_RCC_GetSysClockFreq+0xd0>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	220c      	movs	r2, #12
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b0c      	cmp	r3, #12
 80023b4:	d046      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0xb8>
 80023b6:	d848      	bhi.n	800244a <HAL_RCC_GetSysClockFreq+0xbe>
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d002      	beq.n	80023c2 <HAL_RCC_GetSysClockFreq+0x36>
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d003      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0x3c>
 80023c0:	e043      	b.n	800244a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023c2:	4b27      	ldr	r3, [pc, #156]	@ (8002460 <HAL_RCC_GetSysClockFreq+0xd4>)
 80023c4:	613b      	str	r3, [r7, #16]
      break;
 80023c6:	e043      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	0c9b      	lsrs	r3, r3, #18
 80023cc:	220f      	movs	r2, #15
 80023ce:	4013      	ands	r3, r2
 80023d0:	4a24      	ldr	r2, [pc, #144]	@ (8002464 <HAL_RCC_GetSysClockFreq+0xd8>)
 80023d2:	5cd3      	ldrb	r3, [r2, r3]
 80023d4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80023d6:	4b21      	ldr	r3, [pc, #132]	@ (800245c <HAL_RCC_GetSysClockFreq+0xd0>)
 80023d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023da:	220f      	movs	r2, #15
 80023dc:	4013      	ands	r3, r2
 80023de:	4a22      	ldr	r2, [pc, #136]	@ (8002468 <HAL_RCC_GetSysClockFreq+0xdc>)
 80023e0:	5cd3      	ldrb	r3, [r2, r3]
 80023e2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	23c0      	movs	r3, #192	@ 0xc0
 80023e8:	025b      	lsls	r3, r3, #9
 80023ea:	401a      	ands	r2, r3
 80023ec:	2380      	movs	r3, #128	@ 0x80
 80023ee:	025b      	lsls	r3, r3, #9
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d109      	bne.n	8002408 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	481a      	ldr	r0, [pc, #104]	@ (8002460 <HAL_RCC_GetSysClockFreq+0xd4>)
 80023f8:	f7fd fe86 	bl	8000108 <__udivsi3>
 80023fc:	0003      	movs	r3, r0
 80023fe:	001a      	movs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4353      	muls	r3, r2
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	e01a      	b.n	800243e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	23c0      	movs	r3, #192	@ 0xc0
 800240c:	025b      	lsls	r3, r3, #9
 800240e:	401a      	ands	r2, r3
 8002410:	23c0      	movs	r3, #192	@ 0xc0
 8002412:	025b      	lsls	r3, r3, #9
 8002414:	429a      	cmp	r2, r3
 8002416:	d109      	bne.n	800242c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	4814      	ldr	r0, [pc, #80]	@ (800246c <HAL_RCC_GetSysClockFreq+0xe0>)
 800241c:	f7fd fe74 	bl	8000108 <__udivsi3>
 8002420:	0003      	movs	r3, r0
 8002422:	001a      	movs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4353      	muls	r3, r2
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	e008      	b.n	800243e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	480c      	ldr	r0, [pc, #48]	@ (8002460 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002430:	f7fd fe6a 	bl	8000108 <__udivsi3>
 8002434:	0003      	movs	r3, r0
 8002436:	001a      	movs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4353      	muls	r3, r2
 800243c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	613b      	str	r3, [r7, #16]
      break;
 8002442:	e005      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002444:	4b09      	ldr	r3, [pc, #36]	@ (800246c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002446:	613b      	str	r3, [r7, #16]
      break;
 8002448:	e002      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800244a:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <HAL_RCC_GetSysClockFreq+0xd4>)
 800244c:	613b      	str	r3, [r7, #16]
      break;
 800244e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002450:	693b      	ldr	r3, [r7, #16]
}
 8002452:	0018      	movs	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	b006      	add	sp, #24
 8002458:	bd80      	pop	{r7, pc}
 800245a:	46c0      	nop			@ (mov r8, r8)
 800245c:	40021000 	.word	0x40021000
 8002460:	007a1200 	.word	0x007a1200
 8002464:	080031b0 	.word	0x080031b0
 8002468:	080031c0 	.word	0x080031c0
 800246c:	02dc6c00 	.word	0x02dc6c00

08002470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002474:	4b02      	ldr	r3, [pc, #8]	@ (8002480 <HAL_RCC_GetHCLKFreq+0x10>)
 8002476:	681b      	ldr	r3, [r3, #0]
}
 8002478:	0018      	movs	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			@ (mov r8, r8)
 8002480:	20000000 	.word	0x20000000

08002484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002488:	f7ff fff2 	bl	8002470 <HAL_RCC_GetHCLKFreq>
 800248c:	0001      	movs	r1, r0
 800248e:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	0a1b      	lsrs	r3, r3, #8
 8002494:	2207      	movs	r2, #7
 8002496:	4013      	ands	r3, r2
 8002498:	4a04      	ldr	r2, [pc, #16]	@ (80024ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800249a:	5cd3      	ldrb	r3, [r2, r3]
 800249c:	40d9      	lsrs	r1, r3
 800249e:	000b      	movs	r3, r1
}    
 80024a0:	0018      	movs	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	46c0      	nop			@ (mov r8, r8)
 80024a8:	40021000 	.word	0x40021000
 80024ac:	080030e8 	.word	0x080030e8

080024b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	2380      	movs	r3, #128	@ 0x80
 80024c6:	025b      	lsls	r3, r3, #9
 80024c8:	4013      	ands	r3, r2
 80024ca:	d100      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80024cc:	e08e      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80024ce:	2017      	movs	r0, #23
 80024d0:	183b      	adds	r3, r7, r0
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d6:	4b67      	ldr	r3, [pc, #412]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024d8:	69da      	ldr	r2, [r3, #28]
 80024da:	2380      	movs	r3, #128	@ 0x80
 80024dc:	055b      	lsls	r3, r3, #21
 80024de:	4013      	ands	r3, r2
 80024e0:	d110      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024e2:	4b64      	ldr	r3, [pc, #400]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024e4:	69da      	ldr	r2, [r3, #28]
 80024e6:	4b63      	ldr	r3, [pc, #396]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024e8:	2180      	movs	r1, #128	@ 0x80
 80024ea:	0549      	lsls	r1, r1, #21
 80024ec:	430a      	orrs	r2, r1
 80024ee:	61da      	str	r2, [r3, #28]
 80024f0:	4b60      	ldr	r3, [pc, #384]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024f2:	69da      	ldr	r2, [r3, #28]
 80024f4:	2380      	movs	r3, #128	@ 0x80
 80024f6:	055b      	lsls	r3, r3, #21
 80024f8:	4013      	ands	r3, r2
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fe:	183b      	adds	r3, r7, r0
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002504:	4b5c      	ldr	r3, [pc, #368]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	2380      	movs	r3, #128	@ 0x80
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4013      	ands	r3, r2
 800250e:	d11a      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002510:	4b59      	ldr	r3, [pc, #356]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b58      	ldr	r3, [pc, #352]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002516:	2180      	movs	r1, #128	@ 0x80
 8002518:	0049      	lsls	r1, r1, #1
 800251a:	430a      	orrs	r2, r1
 800251c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800251e:	f7ff f82b 	bl	8001578 <HAL_GetTick>
 8002522:	0003      	movs	r3, r0
 8002524:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002526:	e008      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002528:	f7ff f826 	bl	8001578 <HAL_GetTick>
 800252c:	0002      	movs	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	@ 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e097      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253a:	4b4f      	ldr	r3, [pc, #316]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	2380      	movs	r3, #128	@ 0x80
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4013      	ands	r3, r2
 8002544:	d0f0      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002546:	4b4b      	ldr	r3, [pc, #300]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002548:	6a1a      	ldr	r2, [r3, #32]
 800254a:	23c0      	movs	r3, #192	@ 0xc0
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4013      	ands	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d034      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	23c0      	movs	r3, #192	@ 0xc0
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4013      	ands	r3, r2
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	429a      	cmp	r2, r3
 8002566:	d02c      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002568:	4b42      	ldr	r3, [pc, #264]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4a43      	ldr	r2, [pc, #268]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800256e:	4013      	ands	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002572:	4b40      	ldr	r3, [pc, #256]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002574:	6a1a      	ldr	r2, [r3, #32]
 8002576:	4b3f      	ldr	r3, [pc, #252]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002578:	2180      	movs	r1, #128	@ 0x80
 800257a:	0249      	lsls	r1, r1, #9
 800257c:	430a      	orrs	r2, r1
 800257e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002580:	4b3c      	ldr	r3, [pc, #240]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002582:	6a1a      	ldr	r2, [r3, #32]
 8002584:	4b3b      	ldr	r3, [pc, #236]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002586:	493e      	ldr	r1, [pc, #248]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002588:	400a      	ands	r2, r1
 800258a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800258c:	4b39      	ldr	r3, [pc, #228]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2201      	movs	r2, #1
 8002596:	4013      	ands	r3, r2
 8002598:	d013      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7fe ffed 	bl	8001578 <HAL_GetTick>
 800259e:	0003      	movs	r3, r0
 80025a0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a2:	e009      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a4:	f7fe ffe8 	bl	8001578 <HAL_GetTick>
 80025a8:	0002      	movs	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	4a35      	ldr	r2, [pc, #212]	@ (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e058      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	2202      	movs	r2, #2
 80025be:	4013      	ands	r3, r2
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	4a2d      	ldr	r2, [pc, #180]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	0019      	movs	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	4b28      	ldr	r3, [pc, #160]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80025d2:	430a      	orrs	r2, r1
 80025d4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025d6:	2317      	movs	r3, #23
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d105      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e0:	4b24      	ldr	r3, [pc, #144]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80025e2:	69da      	ldr	r2, [r3, #28]
 80025e4:	4b23      	ldr	r3, [pc, #140]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80025e6:	4928      	ldr	r1, [pc, #160]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025e8:	400a      	ands	r2, r1
 80025ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2201      	movs	r2, #1
 80025f2:	4013      	ands	r3, r2
 80025f4:	d009      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fa:	2203      	movs	r2, #3
 80025fc:	4393      	bics	r3, r2
 80025fe:	0019      	movs	r1, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	4b1b      	ldr	r3, [pc, #108]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002606:	430a      	orrs	r2, r1
 8002608:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2220      	movs	r2, #32
 8002610:	4013      	ands	r3, r2
 8002612:	d009      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002614:	4b17      	ldr	r3, [pc, #92]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002618:	2210      	movs	r2, #16
 800261a:	4393      	bics	r3, r2
 800261c:	0019      	movs	r1, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	4b14      	ldr	r3, [pc, #80]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002624:	430a      	orrs	r2, r1
 8002626:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2380      	movs	r3, #128	@ 0x80
 800262e:	029b      	lsls	r3, r3, #10
 8002630:	4013      	ands	r3, r2
 8002632:	d009      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002634:	4b0f      	ldr	r3, [pc, #60]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002638:	2280      	movs	r2, #128	@ 0x80
 800263a:	4393      	bics	r3, r2
 800263c:	0019      	movs	r1, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	4b0c      	ldr	r3, [pc, #48]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002644:	430a      	orrs	r2, r1
 8002646:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	2380      	movs	r3, #128	@ 0x80
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4013      	ands	r3, r2
 8002652:	d009      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002654:	4b07      	ldr	r3, [pc, #28]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002658:	2240      	movs	r2, #64	@ 0x40
 800265a:	4393      	bics	r3, r2
 800265c:	0019      	movs	r1, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	4b04      	ldr	r3, [pc, #16]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002664:	430a      	orrs	r2, r1
 8002666:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	0018      	movs	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	b006      	add	sp, #24
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			@ (mov r8, r8)
 8002674:	40021000 	.word	0x40021000
 8002678:	40007000 	.word	0x40007000
 800267c:	fffffcff 	.word	0xfffffcff
 8002680:	fffeffff 	.word	0xfffeffff
 8002684:	00001388 	.word	0x00001388
 8002688:	efffffff 	.word	0xefffffff

0800268c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e044      	b.n	8002728 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d107      	bne.n	80026b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2278      	movs	r2, #120	@ 0x78
 80026aa:	2100      	movs	r1, #0
 80026ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	0018      	movs	r0, r3
 80026b2:	f7fe fa95 	bl	8000be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2224      	movs	r2, #36	@ 0x24
 80026ba:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2101      	movs	r1, #1
 80026c8:	438a      	bics	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 f96c 	bl	80029b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	0018      	movs	r0, r3
 80026e0:	f000 f828 	bl	8002734 <UART_SetConfig>
 80026e4:	0003      	movs	r3, r0
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d101      	bne.n	80026ee <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e01c      	b.n	8002728 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	490d      	ldr	r1, [pc, #52]	@ (8002730 <HAL_UART_Init+0xa4>)
 80026fa:	400a      	ands	r2, r1
 80026fc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	212a      	movs	r1, #42	@ 0x2a
 800270a:	438a      	bics	r2, r1
 800270c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2101      	movs	r1, #1
 800271a:	430a      	orrs	r2, r1
 800271c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	0018      	movs	r0, r3
 8002722:	f000 f9fb 	bl	8002b1c <UART_CheckIdleState>
 8002726:	0003      	movs	r3, r0
}
 8002728:	0018      	movs	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	b002      	add	sp, #8
 800272e:	bd80      	pop	{r7, pc}
 8002730:	ffffb7ff 	.word	0xffffb7ff

08002734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800273c:	231e      	movs	r3, #30
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	4313      	orrs	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a8d      	ldr	r2, [pc, #564]	@ (8002998 <UART_SetConfig+0x264>)
 8002764:	4013      	ands	r3, r2
 8002766:	0019      	movs	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	430a      	orrs	r2, r1
 8002770:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4a88      	ldr	r2, [pc, #544]	@ (800299c <UART_SetConfig+0x268>)
 800277a:	4013      	ands	r3, r2
 800277c:	0019      	movs	r1, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	4313      	orrs	r3, r2
 8002798:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4a7f      	ldr	r2, [pc, #508]	@ (80029a0 <UART_SetConfig+0x26c>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	0019      	movs	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a7b      	ldr	r2, [pc, #492]	@ (80029a4 <UART_SetConfig+0x270>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d127      	bne.n	800280a <UART_SetConfig+0xd6>
 80027ba:	4b7b      	ldr	r3, [pc, #492]	@ (80029a8 <UART_SetConfig+0x274>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	2203      	movs	r2, #3
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d00d      	beq.n	80027e2 <UART_SetConfig+0xae>
 80027c6:	d81b      	bhi.n	8002800 <UART_SetConfig+0xcc>
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d014      	beq.n	80027f6 <UART_SetConfig+0xc2>
 80027cc:	d818      	bhi.n	8002800 <UART_SetConfig+0xcc>
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <UART_SetConfig+0xa4>
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d00a      	beq.n	80027ec <UART_SetConfig+0xb8>
 80027d6:	e013      	b.n	8002800 <UART_SetConfig+0xcc>
 80027d8:	231f      	movs	r3, #31
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	e021      	b.n	8002826 <UART_SetConfig+0xf2>
 80027e2:	231f      	movs	r3, #31
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	2202      	movs	r2, #2
 80027e8:	701a      	strb	r2, [r3, #0]
 80027ea:	e01c      	b.n	8002826 <UART_SetConfig+0xf2>
 80027ec:	231f      	movs	r3, #31
 80027ee:	18fb      	adds	r3, r7, r3
 80027f0:	2204      	movs	r2, #4
 80027f2:	701a      	strb	r2, [r3, #0]
 80027f4:	e017      	b.n	8002826 <UART_SetConfig+0xf2>
 80027f6:	231f      	movs	r3, #31
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	2208      	movs	r2, #8
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	e012      	b.n	8002826 <UART_SetConfig+0xf2>
 8002800:	231f      	movs	r3, #31
 8002802:	18fb      	adds	r3, r7, r3
 8002804:	2210      	movs	r2, #16
 8002806:	701a      	strb	r2, [r3, #0]
 8002808:	e00d      	b.n	8002826 <UART_SetConfig+0xf2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a67      	ldr	r2, [pc, #412]	@ (80029ac <UART_SetConfig+0x278>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d104      	bne.n	800281e <UART_SetConfig+0xea>
 8002814:	231f      	movs	r3, #31
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
 800281c:	e003      	b.n	8002826 <UART_SetConfig+0xf2>
 800281e:	231f      	movs	r3, #31
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	2210      	movs	r2, #16
 8002824:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69da      	ldr	r2, [r3, #28]
 800282a:	2380      	movs	r3, #128	@ 0x80
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	429a      	cmp	r2, r3
 8002830:	d15c      	bne.n	80028ec <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002832:	231f      	movs	r3, #31
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b08      	cmp	r3, #8
 800283a:	d015      	beq.n	8002868 <UART_SetConfig+0x134>
 800283c:	dc18      	bgt.n	8002870 <UART_SetConfig+0x13c>
 800283e:	2b04      	cmp	r3, #4
 8002840:	d00d      	beq.n	800285e <UART_SetConfig+0x12a>
 8002842:	dc15      	bgt.n	8002870 <UART_SetConfig+0x13c>
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <UART_SetConfig+0x11a>
 8002848:	2b02      	cmp	r3, #2
 800284a:	d005      	beq.n	8002858 <UART_SetConfig+0x124>
 800284c:	e010      	b.n	8002870 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800284e:	f7ff fe19 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 8002852:	0003      	movs	r3, r0
 8002854:	61bb      	str	r3, [r7, #24]
        break;
 8002856:	e012      	b.n	800287e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002858:	4b55      	ldr	r3, [pc, #340]	@ (80029b0 <UART_SetConfig+0x27c>)
 800285a:	61bb      	str	r3, [r7, #24]
        break;
 800285c:	e00f      	b.n	800287e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800285e:	f7ff fd95 	bl	800238c <HAL_RCC_GetSysClockFreq>
 8002862:	0003      	movs	r3, r0
 8002864:	61bb      	str	r3, [r7, #24]
        break;
 8002866:	e00a      	b.n	800287e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002868:	2380      	movs	r3, #128	@ 0x80
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	61bb      	str	r3, [r7, #24]
        break;
 800286e:	e006      	b.n	800287e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002874:	231e      	movs	r3, #30
 8002876:	18fb      	adds	r3, r7, r3
 8002878:	2201      	movs	r2, #1
 800287a:	701a      	strb	r2, [r3, #0]
        break;
 800287c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d100      	bne.n	8002886 <UART_SetConfig+0x152>
 8002884:	e07a      	b.n	800297c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	005a      	lsls	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	085b      	lsrs	r3, r3, #1
 8002890:	18d2      	adds	r2, r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	0019      	movs	r1, r3
 8002898:	0010      	movs	r0, r2
 800289a:	f7fd fc35 	bl	8000108 <__udivsi3>
 800289e:	0003      	movs	r3, r0
 80028a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2b0f      	cmp	r3, #15
 80028a6:	d91c      	bls.n	80028e2 <UART_SetConfig+0x1ae>
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	2380      	movs	r3, #128	@ 0x80
 80028ac:	025b      	lsls	r3, r3, #9
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d217      	bcs.n	80028e2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	200e      	movs	r0, #14
 80028b8:	183b      	adds	r3, r7, r0
 80028ba:	210f      	movs	r1, #15
 80028bc:	438a      	bics	r2, r1
 80028be:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	085b      	lsrs	r3, r3, #1
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2207      	movs	r2, #7
 80028c8:	4013      	ands	r3, r2
 80028ca:	b299      	uxth	r1, r3
 80028cc:	183b      	adds	r3, r7, r0
 80028ce:	183a      	adds	r2, r7, r0
 80028d0:	8812      	ldrh	r2, [r2, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	183a      	adds	r2, r7, r0
 80028dc:	8812      	ldrh	r2, [r2, #0]
 80028de:	60da      	str	r2, [r3, #12]
 80028e0:	e04c      	b.n	800297c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80028e2:	231e      	movs	r3, #30
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	e047      	b.n	800297c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028ec:	231f      	movs	r3, #31
 80028ee:	18fb      	adds	r3, r7, r3
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d015      	beq.n	8002922 <UART_SetConfig+0x1ee>
 80028f6:	dc18      	bgt.n	800292a <UART_SetConfig+0x1f6>
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d00d      	beq.n	8002918 <UART_SetConfig+0x1e4>
 80028fc:	dc15      	bgt.n	800292a <UART_SetConfig+0x1f6>
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <UART_SetConfig+0x1d4>
 8002902:	2b02      	cmp	r3, #2
 8002904:	d005      	beq.n	8002912 <UART_SetConfig+0x1de>
 8002906:	e010      	b.n	800292a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002908:	f7ff fdbc 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 800290c:	0003      	movs	r3, r0
 800290e:	61bb      	str	r3, [r7, #24]
        break;
 8002910:	e012      	b.n	8002938 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002912:	4b27      	ldr	r3, [pc, #156]	@ (80029b0 <UART_SetConfig+0x27c>)
 8002914:	61bb      	str	r3, [r7, #24]
        break;
 8002916:	e00f      	b.n	8002938 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002918:	f7ff fd38 	bl	800238c <HAL_RCC_GetSysClockFreq>
 800291c:	0003      	movs	r3, r0
 800291e:	61bb      	str	r3, [r7, #24]
        break;
 8002920:	e00a      	b.n	8002938 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002922:	2380      	movs	r3, #128	@ 0x80
 8002924:	021b      	lsls	r3, r3, #8
 8002926:	61bb      	str	r3, [r7, #24]
        break;
 8002928:	e006      	b.n	8002938 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800292e:	231e      	movs	r3, #30
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	2201      	movs	r2, #1
 8002934:	701a      	strb	r2, [r3, #0]
        break;
 8002936:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d01e      	beq.n	800297c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	085a      	lsrs	r2, r3, #1
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	18d2      	adds	r2, r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	0019      	movs	r1, r3
 800294e:	0010      	movs	r0, r2
 8002950:	f7fd fbda 	bl	8000108 <__udivsi3>
 8002954:	0003      	movs	r3, r0
 8002956:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	2b0f      	cmp	r3, #15
 800295c:	d90a      	bls.n	8002974 <UART_SetConfig+0x240>
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	2380      	movs	r3, #128	@ 0x80
 8002962:	025b      	lsls	r3, r3, #9
 8002964:	429a      	cmp	r2, r3
 8002966:	d205      	bcs.n	8002974 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	b29a      	uxth	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	e003      	b.n	800297c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002974:	231e      	movs	r3, #30
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	2201      	movs	r2, #1
 800297a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002988:	231e      	movs	r3, #30
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	781b      	ldrb	r3, [r3, #0]
}
 800298e:	0018      	movs	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	b008      	add	sp, #32
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			@ (mov r8, r8)
 8002998:	efff69f3 	.word	0xefff69f3
 800299c:	ffffcfff 	.word	0xffffcfff
 80029a0:	fffff4ff 	.word	0xfffff4ff
 80029a4:	40013800 	.word	0x40013800
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40004400 	.word	0x40004400
 80029b0:	007a1200 	.word	0x007a1200

080029b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	2208      	movs	r2, #8
 80029c2:	4013      	ands	r3, r2
 80029c4:	d00b      	beq.n	80029de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4a4a      	ldr	r2, [pc, #296]	@ (8002af8 <UART_AdvFeatureConfig+0x144>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	0019      	movs	r1, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e2:	2201      	movs	r2, #1
 80029e4:	4013      	ands	r3, r2
 80029e6:	d00b      	beq.n	8002a00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4a43      	ldr	r2, [pc, #268]	@ (8002afc <UART_AdvFeatureConfig+0x148>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	0019      	movs	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	2202      	movs	r2, #2
 8002a06:	4013      	ands	r3, r2
 8002a08:	d00b      	beq.n	8002a22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4a3b      	ldr	r2, [pc, #236]	@ (8002b00 <UART_AdvFeatureConfig+0x14c>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	0019      	movs	r1, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a26:	2204      	movs	r2, #4
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d00b      	beq.n	8002a44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4a34      	ldr	r2, [pc, #208]	@ (8002b04 <UART_AdvFeatureConfig+0x150>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a48:	2210      	movs	r2, #16
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d00b      	beq.n	8002a66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	4a2c      	ldr	r2, [pc, #176]	@ (8002b08 <UART_AdvFeatureConfig+0x154>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	0019      	movs	r1, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d00b      	beq.n	8002a88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	4a25      	ldr	r2, [pc, #148]	@ (8002b0c <UART_AdvFeatureConfig+0x158>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8c:	2240      	movs	r2, #64	@ 0x40
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d01d      	beq.n	8002ace <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4a1d      	ldr	r2, [pc, #116]	@ (8002b10 <UART_AdvFeatureConfig+0x15c>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	0019      	movs	r1, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002aae:	2380      	movs	r3, #128	@ 0x80
 8002ab0:	035b      	lsls	r3, r3, #13
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d10b      	bne.n	8002ace <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	4a15      	ldr	r2, [pc, #84]	@ (8002b14 <UART_AdvFeatureConfig+0x160>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	0019      	movs	r1, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad2:	2280      	movs	r2, #128	@ 0x80
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d00b      	beq.n	8002af0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4a0e      	ldr	r2, [pc, #56]	@ (8002b18 <UART_AdvFeatureConfig+0x164>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	0019      	movs	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	605a      	str	r2, [r3, #4]
  }
}
 8002af0:	46c0      	nop			@ (mov r8, r8)
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b002      	add	sp, #8
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	ffff7fff 	.word	0xffff7fff
 8002afc:	fffdffff 	.word	0xfffdffff
 8002b00:	fffeffff 	.word	0xfffeffff
 8002b04:	fffbffff 	.word	0xfffbffff
 8002b08:	ffffefff 	.word	0xffffefff
 8002b0c:	ffffdfff 	.word	0xffffdfff
 8002b10:	ffefffff 	.word	0xffefffff
 8002b14:	ff9fffff 	.word	0xff9fffff
 8002b18:	fff7ffff 	.word	0xfff7ffff

08002b1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b092      	sub	sp, #72	@ 0x48
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2284      	movs	r2, #132	@ 0x84
 8002b28:	2100      	movs	r1, #0
 8002b2a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b2c:	f7fe fd24 	bl	8001578 <HAL_GetTick>
 8002b30:	0003      	movs	r3, r0
 8002b32:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2208      	movs	r2, #8
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d12c      	bne.n	8002b9c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b44:	2280      	movs	r2, #128	@ 0x80
 8002b46:	0391      	lsls	r1, r2, #14
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	4a46      	ldr	r2, [pc, #280]	@ (8002c64 <UART_CheckIdleState+0x148>)
 8002b4c:	9200      	str	r2, [sp, #0]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f000 f88c 	bl	8002c6c <UART_WaitOnFlagUntilTimeout>
 8002b54:	1e03      	subs	r3, r0, #0
 8002b56:	d021      	beq.n	8002b9c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b58:	f3ef 8310 	mrs	r3, PRIMASK
 8002b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002b60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b62:	2301      	movs	r3, #1
 8002b64:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b68:	f383 8810 	msr	PRIMASK, r3
}
 8002b6c:	46c0      	nop			@ (mov r8, r8)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2180      	movs	r1, #128	@ 0x80
 8002b7a:	438a      	bics	r2, r1
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b84:	f383 8810 	msr	PRIMASK, r3
}
 8002b88:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2278      	movs	r2, #120	@ 0x78
 8002b94:	2100      	movs	r1, #0
 8002b96:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e05f      	b.n	8002c5c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d146      	bne.n	8002c38 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bac:	2280      	movs	r2, #128	@ 0x80
 8002bae:	03d1      	lsls	r1, r2, #15
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8002c64 <UART_CheckIdleState+0x148>)
 8002bb4:	9200      	str	r2, [sp, #0]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f000 f858 	bl	8002c6c <UART_WaitOnFlagUntilTimeout>
 8002bbc:	1e03      	subs	r3, r0, #0
 8002bbe:	d03b      	beq.n	8002c38 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8002bc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bca:	2301      	movs	r3, #1
 8002bcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f383 8810 	msr	PRIMASK, r3
}
 8002bd4:	46c0      	nop			@ (mov r8, r8)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4921      	ldr	r1, [pc, #132]	@ (8002c68 <UART_CheckIdleState+0x14c>)
 8002be2:	400a      	ands	r2, r1
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002be8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f383 8810 	msr	PRIMASK, r3
}
 8002bf0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002bf8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bfa:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f383 8810 	msr	PRIMASK, r3
}
 8002c06:	46c0      	nop			@ (mov r8, r8)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2101      	movs	r1, #1
 8002c14:	438a      	bics	r2, r1
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	f383 8810 	msr	PRIMASK, r3
}
 8002c22:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2280      	movs	r2, #128	@ 0x80
 8002c28:	2120      	movs	r1, #32
 8002c2a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2278      	movs	r2, #120	@ 0x78
 8002c30:	2100      	movs	r1, #0
 8002c32:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e011      	b.n	8002c5c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2280      	movs	r2, #128	@ 0x80
 8002c42:	2120      	movs	r1, #32
 8002c44:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2278      	movs	r2, #120	@ 0x78
 8002c56:	2100      	movs	r1, #0
 8002c58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b010      	add	sp, #64	@ 0x40
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	01ffffff 	.word	0x01ffffff
 8002c68:	fffffedf 	.word	0xfffffedf

08002c6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	1dfb      	adds	r3, r7, #7
 8002c7a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c7c:	e051      	b.n	8002d22 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	3301      	adds	r3, #1
 8002c82:	d04e      	beq.n	8002d22 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c84:	f7fe fc78 	bl	8001578 <HAL_GetTick>
 8002c88:	0002      	movs	r2, r0
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d302      	bcc.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e051      	b.n	8002d42 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d03b      	beq.n	8002d22 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b80      	cmp	r3, #128	@ 0x80
 8002cae:	d038      	beq.n	8002d22 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b40      	cmp	r3, #64	@ 0x40
 8002cb4:	d035      	beq.n	8002d22 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d111      	bne.n	8002ce8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2208      	movs	r2, #8
 8002cca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f000 f83c 	bl	8002d4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2284      	movs	r2, #132	@ 0x84
 8002cd8:	2108      	movs	r1, #8
 8002cda:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2278      	movs	r2, #120	@ 0x78
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e02c      	b.n	8002d42 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69da      	ldr	r2, [r3, #28]
 8002cee:	2380      	movs	r3, #128	@ 0x80
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	2380      	movs	r3, #128	@ 0x80
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d112      	bne.n	8002d22 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2280      	movs	r2, #128	@ 0x80
 8002d02:	0112      	lsls	r2, r2, #4
 8002d04:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f000 f81f 	bl	8002d4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2284      	movs	r2, #132	@ 0x84
 8002d12:	2120      	movs	r1, #32
 8002d14:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2278      	movs	r2, #120	@ 0x78
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e00f      	b.n	8002d42 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	425a      	negs	r2, r3
 8002d32:	4153      	adcs	r3, r2
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	001a      	movs	r2, r3
 8002d38:	1dfb      	adds	r3, r7, #7
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d09e      	beq.n	8002c7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	0018      	movs	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b004      	add	sp, #16
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08e      	sub	sp, #56	@ 0x38
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d54:	f3ef 8310 	mrs	r3, PRIMASK
 8002d58:	617b      	str	r3, [r7, #20]
  return(result);
 8002d5a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d5e:	2301      	movs	r3, #1
 8002d60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	f383 8810 	msr	PRIMASK, r3
}
 8002d68:	46c0      	nop			@ (mov r8, r8)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4926      	ldr	r1, [pc, #152]	@ (8002e10 <UART_EndRxTransfer+0xc4>)
 8002d76:	400a      	ands	r2, r1
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f383 8810 	msr	PRIMASK, r3
}
 8002d84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d86:	f3ef 8310 	mrs	r3, PRIMASK
 8002d8a:	623b      	str	r3, [r7, #32]
  return(result);
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d90:	2301      	movs	r3, #1
 8002d92:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d96:	f383 8810 	msr	PRIMASK, r3
}
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2101      	movs	r1, #1
 8002da8:	438a      	bics	r2, r1
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db2:	f383 8810 	msr	PRIMASK, r3
}
 8002db6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d118      	bne.n	8002df2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8002dc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dc6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dca:	2301      	movs	r3, #1
 8002dcc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f383 8810 	msr	PRIMASK, r3
}
 8002dd4:	46c0      	nop			@ (mov r8, r8)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2110      	movs	r1, #16
 8002de2:	438a      	bics	r2, r1
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f383 8810 	msr	PRIMASK, r3
}
 8002df0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2280      	movs	r2, #128	@ 0x80
 8002df6:	2120      	movs	r1, #32
 8002df8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002e06:	46c0      	nop			@ (mov r8, r8)
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	b00e      	add	sp, #56	@ 0x38
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	46c0      	nop			@ (mov r8, r8)
 8002e10:	fffffedf 	.word	0xfffffedf

08002e14 <malloc>:
 8002e14:	b510      	push	{r4, lr}
 8002e16:	4b03      	ldr	r3, [pc, #12]	@ (8002e24 <malloc+0x10>)
 8002e18:	0001      	movs	r1, r0
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	f000 f830 	bl	8002e80 <_malloc_r>
 8002e20:	bd10      	pop	{r4, pc}
 8002e22:	46c0      	nop			@ (mov r8, r8)
 8002e24:	20000048 	.word	0x20000048

08002e28 <free>:
 8002e28:	b510      	push	{r4, lr}
 8002e2a:	4b03      	ldr	r3, [pc, #12]	@ (8002e38 <free+0x10>)
 8002e2c:	0001      	movs	r1, r0
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	f000 f8fc 	bl	800302c <_free_r>
 8002e34:	bd10      	pop	{r4, pc}
 8002e36:	46c0      	nop			@ (mov r8, r8)
 8002e38:	20000048 	.word	0x20000048

08002e3c <sbrk_aligned>:
 8002e3c:	b570      	push	{r4, r5, r6, lr}
 8002e3e:	4e0f      	ldr	r6, [pc, #60]	@ (8002e7c <sbrk_aligned+0x40>)
 8002e40:	000d      	movs	r5, r1
 8002e42:	6831      	ldr	r1, [r6, #0]
 8002e44:	0004      	movs	r4, r0
 8002e46:	2900      	cmp	r1, #0
 8002e48:	d102      	bne.n	8002e50 <sbrk_aligned+0x14>
 8002e4a:	f000 f8b1 	bl	8002fb0 <_sbrk_r>
 8002e4e:	6030      	str	r0, [r6, #0]
 8002e50:	0029      	movs	r1, r5
 8002e52:	0020      	movs	r0, r4
 8002e54:	f000 f8ac 	bl	8002fb0 <_sbrk_r>
 8002e58:	1c43      	adds	r3, r0, #1
 8002e5a:	d103      	bne.n	8002e64 <sbrk_aligned+0x28>
 8002e5c:	2501      	movs	r5, #1
 8002e5e:	426d      	negs	r5, r5
 8002e60:	0028      	movs	r0, r5
 8002e62:	bd70      	pop	{r4, r5, r6, pc}
 8002e64:	2303      	movs	r3, #3
 8002e66:	1cc5      	adds	r5, r0, #3
 8002e68:	439d      	bics	r5, r3
 8002e6a:	42a8      	cmp	r0, r5
 8002e6c:	d0f8      	beq.n	8002e60 <sbrk_aligned+0x24>
 8002e6e:	1a29      	subs	r1, r5, r0
 8002e70:	0020      	movs	r0, r4
 8002e72:	f000 f89d 	bl	8002fb0 <_sbrk_r>
 8002e76:	3001      	adds	r0, #1
 8002e78:	d1f2      	bne.n	8002e60 <sbrk_aligned+0x24>
 8002e7a:	e7ef      	b.n	8002e5c <sbrk_aligned+0x20>
 8002e7c:	200001e0 	.word	0x200001e0

08002e80 <_malloc_r>:
 8002e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e82:	2203      	movs	r2, #3
 8002e84:	1ccb      	adds	r3, r1, #3
 8002e86:	4393      	bics	r3, r2
 8002e88:	3308      	adds	r3, #8
 8002e8a:	0005      	movs	r5, r0
 8002e8c:	001f      	movs	r7, r3
 8002e8e:	2b0c      	cmp	r3, #12
 8002e90:	d234      	bcs.n	8002efc <_malloc_r+0x7c>
 8002e92:	270c      	movs	r7, #12
 8002e94:	42b9      	cmp	r1, r7
 8002e96:	d833      	bhi.n	8002f00 <_malloc_r+0x80>
 8002e98:	0028      	movs	r0, r5
 8002e9a:	f000 f871 	bl	8002f80 <__malloc_lock>
 8002e9e:	4e37      	ldr	r6, [pc, #220]	@ (8002f7c <_malloc_r+0xfc>)
 8002ea0:	6833      	ldr	r3, [r6, #0]
 8002ea2:	001c      	movs	r4, r3
 8002ea4:	2c00      	cmp	r4, #0
 8002ea6:	d12f      	bne.n	8002f08 <_malloc_r+0x88>
 8002ea8:	0039      	movs	r1, r7
 8002eaa:	0028      	movs	r0, r5
 8002eac:	f7ff ffc6 	bl	8002e3c <sbrk_aligned>
 8002eb0:	0004      	movs	r4, r0
 8002eb2:	1c43      	adds	r3, r0, #1
 8002eb4:	d15f      	bne.n	8002f76 <_malloc_r+0xf6>
 8002eb6:	6834      	ldr	r4, [r6, #0]
 8002eb8:	9400      	str	r4, [sp, #0]
 8002eba:	9b00      	ldr	r3, [sp, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d14a      	bne.n	8002f56 <_malloc_r+0xd6>
 8002ec0:	2c00      	cmp	r4, #0
 8002ec2:	d052      	beq.n	8002f6a <_malloc_r+0xea>
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	0028      	movs	r0, r5
 8002ec8:	18e3      	adds	r3, r4, r3
 8002eca:	9900      	ldr	r1, [sp, #0]
 8002ecc:	9301      	str	r3, [sp, #4]
 8002ece:	f000 f86f 	bl	8002fb0 <_sbrk_r>
 8002ed2:	9b01      	ldr	r3, [sp, #4]
 8002ed4:	4283      	cmp	r3, r0
 8002ed6:	d148      	bne.n	8002f6a <_malloc_r+0xea>
 8002ed8:	6823      	ldr	r3, [r4, #0]
 8002eda:	0028      	movs	r0, r5
 8002edc:	1aff      	subs	r7, r7, r3
 8002ede:	0039      	movs	r1, r7
 8002ee0:	f7ff ffac 	bl	8002e3c <sbrk_aligned>
 8002ee4:	3001      	adds	r0, #1
 8002ee6:	d040      	beq.n	8002f6a <_malloc_r+0xea>
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	19db      	adds	r3, r3, r7
 8002eec:	6023      	str	r3, [r4, #0]
 8002eee:	6833      	ldr	r3, [r6, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	2a00      	cmp	r2, #0
 8002ef4:	d133      	bne.n	8002f5e <_malloc_r+0xde>
 8002ef6:	9b00      	ldr	r3, [sp, #0]
 8002ef8:	6033      	str	r3, [r6, #0]
 8002efa:	e019      	b.n	8002f30 <_malloc_r+0xb0>
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	dac9      	bge.n	8002e94 <_malloc_r+0x14>
 8002f00:	230c      	movs	r3, #12
 8002f02:	602b      	str	r3, [r5, #0]
 8002f04:	2000      	movs	r0, #0
 8002f06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f08:	6821      	ldr	r1, [r4, #0]
 8002f0a:	1bc9      	subs	r1, r1, r7
 8002f0c:	d420      	bmi.n	8002f50 <_malloc_r+0xd0>
 8002f0e:	290b      	cmp	r1, #11
 8002f10:	d90a      	bls.n	8002f28 <_malloc_r+0xa8>
 8002f12:	19e2      	adds	r2, r4, r7
 8002f14:	6027      	str	r7, [r4, #0]
 8002f16:	42a3      	cmp	r3, r4
 8002f18:	d104      	bne.n	8002f24 <_malloc_r+0xa4>
 8002f1a:	6032      	str	r2, [r6, #0]
 8002f1c:	6863      	ldr	r3, [r4, #4]
 8002f1e:	6011      	str	r1, [r2, #0]
 8002f20:	6053      	str	r3, [r2, #4]
 8002f22:	e005      	b.n	8002f30 <_malloc_r+0xb0>
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	e7f9      	b.n	8002f1c <_malloc_r+0x9c>
 8002f28:	6862      	ldr	r2, [r4, #4]
 8002f2a:	42a3      	cmp	r3, r4
 8002f2c:	d10e      	bne.n	8002f4c <_malloc_r+0xcc>
 8002f2e:	6032      	str	r2, [r6, #0]
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 f82d 	bl	8002f90 <__malloc_unlock>
 8002f36:	0020      	movs	r0, r4
 8002f38:	2207      	movs	r2, #7
 8002f3a:	300b      	adds	r0, #11
 8002f3c:	1d23      	adds	r3, r4, #4
 8002f3e:	4390      	bics	r0, r2
 8002f40:	1ac2      	subs	r2, r0, r3
 8002f42:	4298      	cmp	r0, r3
 8002f44:	d0df      	beq.n	8002f06 <_malloc_r+0x86>
 8002f46:	1a1b      	subs	r3, r3, r0
 8002f48:	50a3      	str	r3, [r4, r2]
 8002f4a:	e7dc      	b.n	8002f06 <_malloc_r+0x86>
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	e7ef      	b.n	8002f30 <_malloc_r+0xb0>
 8002f50:	0023      	movs	r3, r4
 8002f52:	6864      	ldr	r4, [r4, #4]
 8002f54:	e7a6      	b.n	8002ea4 <_malloc_r+0x24>
 8002f56:	9c00      	ldr	r4, [sp, #0]
 8002f58:	6863      	ldr	r3, [r4, #4]
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	e7ad      	b.n	8002eba <_malloc_r+0x3a>
 8002f5e:	001a      	movs	r2, r3
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	42a3      	cmp	r3, r4
 8002f64:	d1fb      	bne.n	8002f5e <_malloc_r+0xde>
 8002f66:	2300      	movs	r3, #0
 8002f68:	e7da      	b.n	8002f20 <_malloc_r+0xa0>
 8002f6a:	230c      	movs	r3, #12
 8002f6c:	0028      	movs	r0, r5
 8002f6e:	602b      	str	r3, [r5, #0]
 8002f70:	f000 f80e 	bl	8002f90 <__malloc_unlock>
 8002f74:	e7c6      	b.n	8002f04 <_malloc_r+0x84>
 8002f76:	6007      	str	r7, [r0, #0]
 8002f78:	e7da      	b.n	8002f30 <_malloc_r+0xb0>
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	200001e4 	.word	0x200001e4

08002f80 <__malloc_lock>:
 8002f80:	b510      	push	{r4, lr}
 8002f82:	4802      	ldr	r0, [pc, #8]	@ (8002f8c <__malloc_lock+0xc>)
 8002f84:	f000 f850 	bl	8003028 <__retarget_lock_acquire_recursive>
 8002f88:	bd10      	pop	{r4, pc}
 8002f8a:	46c0      	nop			@ (mov r8, r8)
 8002f8c:	20000324 	.word	0x20000324

08002f90 <__malloc_unlock>:
 8002f90:	b510      	push	{r4, lr}
 8002f92:	4802      	ldr	r0, [pc, #8]	@ (8002f9c <__malloc_unlock+0xc>)
 8002f94:	f000 f849 	bl	800302a <__retarget_lock_release_recursive>
 8002f98:	bd10      	pop	{r4, pc}
 8002f9a:	46c0      	nop			@ (mov r8, r8)
 8002f9c:	20000324 	.word	0x20000324

08002fa0 <memset>:
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	1882      	adds	r2, r0, r2
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d100      	bne.n	8002faa <memset+0xa>
 8002fa8:	4770      	bx	lr
 8002faa:	7019      	strb	r1, [r3, #0]
 8002fac:	3301      	adds	r3, #1
 8002fae:	e7f9      	b.n	8002fa4 <memset+0x4>

08002fb0 <_sbrk_r>:
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	b570      	push	{r4, r5, r6, lr}
 8002fb4:	4d06      	ldr	r5, [pc, #24]	@ (8002fd0 <_sbrk_r+0x20>)
 8002fb6:	0004      	movs	r4, r0
 8002fb8:	0008      	movs	r0, r1
 8002fba:	602b      	str	r3, [r5, #0]
 8002fbc:	f7fd febc 	bl	8000d38 <_sbrk>
 8002fc0:	1c43      	adds	r3, r0, #1
 8002fc2:	d103      	bne.n	8002fcc <_sbrk_r+0x1c>
 8002fc4:	682b      	ldr	r3, [r5, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d000      	beq.n	8002fcc <_sbrk_r+0x1c>
 8002fca:	6023      	str	r3, [r4, #0]
 8002fcc:	bd70      	pop	{r4, r5, r6, pc}
 8002fce:	46c0      	nop			@ (mov r8, r8)
 8002fd0:	20000320 	.word	0x20000320

08002fd4 <__errno>:
 8002fd4:	4b01      	ldr	r3, [pc, #4]	@ (8002fdc <__errno+0x8>)
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	4770      	bx	lr
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	20000048 	.word	0x20000048

08002fe0 <__libc_init_array>:
 8002fe0:	b570      	push	{r4, r5, r6, lr}
 8002fe2:	2600      	movs	r6, #0
 8002fe4:	4c0c      	ldr	r4, [pc, #48]	@ (8003018 <__libc_init_array+0x38>)
 8002fe6:	4d0d      	ldr	r5, [pc, #52]	@ (800301c <__libc_init_array+0x3c>)
 8002fe8:	1b64      	subs	r4, r4, r5
 8002fea:	10a4      	asrs	r4, r4, #2
 8002fec:	42a6      	cmp	r6, r4
 8002fee:	d109      	bne.n	8003004 <__libc_init_array+0x24>
 8002ff0:	2600      	movs	r6, #0
 8002ff2:	f000 f865 	bl	80030c0 <_init>
 8002ff6:	4c0a      	ldr	r4, [pc, #40]	@ (8003020 <__libc_init_array+0x40>)
 8002ff8:	4d0a      	ldr	r5, [pc, #40]	@ (8003024 <__libc_init_array+0x44>)
 8002ffa:	1b64      	subs	r4, r4, r5
 8002ffc:	10a4      	asrs	r4, r4, #2
 8002ffe:	42a6      	cmp	r6, r4
 8003000:	d105      	bne.n	800300e <__libc_init_array+0x2e>
 8003002:	bd70      	pop	{r4, r5, r6, pc}
 8003004:	00b3      	lsls	r3, r6, #2
 8003006:	58eb      	ldr	r3, [r5, r3]
 8003008:	4798      	blx	r3
 800300a:	3601      	adds	r6, #1
 800300c:	e7ee      	b.n	8002fec <__libc_init_array+0xc>
 800300e:	00b3      	lsls	r3, r6, #2
 8003010:	58eb      	ldr	r3, [r5, r3]
 8003012:	4798      	blx	r3
 8003014:	3601      	adds	r6, #1
 8003016:	e7f2      	b.n	8002ffe <__libc_init_array+0x1e>
 8003018:	080031d0 	.word	0x080031d0
 800301c:	080031d0 	.word	0x080031d0
 8003020:	080031d4 	.word	0x080031d4
 8003024:	080031d0 	.word	0x080031d0

08003028 <__retarget_lock_acquire_recursive>:
 8003028:	4770      	bx	lr

0800302a <__retarget_lock_release_recursive>:
 800302a:	4770      	bx	lr

0800302c <_free_r>:
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	0005      	movs	r5, r0
 8003030:	1e0c      	subs	r4, r1, #0
 8003032:	d010      	beq.n	8003056 <_free_r+0x2a>
 8003034:	3c04      	subs	r4, #4
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	da00      	bge.n	800303e <_free_r+0x12>
 800303c:	18e4      	adds	r4, r4, r3
 800303e:	0028      	movs	r0, r5
 8003040:	f7ff ff9e 	bl	8002f80 <__malloc_lock>
 8003044:	4a1d      	ldr	r2, [pc, #116]	@ (80030bc <_free_r+0x90>)
 8003046:	6813      	ldr	r3, [r2, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d105      	bne.n	8003058 <_free_r+0x2c>
 800304c:	6063      	str	r3, [r4, #4]
 800304e:	6014      	str	r4, [r2, #0]
 8003050:	0028      	movs	r0, r5
 8003052:	f7ff ff9d 	bl	8002f90 <__malloc_unlock>
 8003056:	bd70      	pop	{r4, r5, r6, pc}
 8003058:	42a3      	cmp	r3, r4
 800305a:	d908      	bls.n	800306e <_free_r+0x42>
 800305c:	6820      	ldr	r0, [r4, #0]
 800305e:	1821      	adds	r1, r4, r0
 8003060:	428b      	cmp	r3, r1
 8003062:	d1f3      	bne.n	800304c <_free_r+0x20>
 8003064:	6819      	ldr	r1, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	1809      	adds	r1, r1, r0
 800306a:	6021      	str	r1, [r4, #0]
 800306c:	e7ee      	b.n	800304c <_free_r+0x20>
 800306e:	001a      	movs	r2, r3
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <_free_r+0x4e>
 8003076:	42a3      	cmp	r3, r4
 8003078:	d9f9      	bls.n	800306e <_free_r+0x42>
 800307a:	6811      	ldr	r1, [r2, #0]
 800307c:	1850      	adds	r0, r2, r1
 800307e:	42a0      	cmp	r0, r4
 8003080:	d10b      	bne.n	800309a <_free_r+0x6e>
 8003082:	6820      	ldr	r0, [r4, #0]
 8003084:	1809      	adds	r1, r1, r0
 8003086:	1850      	adds	r0, r2, r1
 8003088:	6011      	str	r1, [r2, #0]
 800308a:	4283      	cmp	r3, r0
 800308c:	d1e0      	bne.n	8003050 <_free_r+0x24>
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	1841      	adds	r1, r0, r1
 8003094:	6011      	str	r1, [r2, #0]
 8003096:	6053      	str	r3, [r2, #4]
 8003098:	e7da      	b.n	8003050 <_free_r+0x24>
 800309a:	42a0      	cmp	r0, r4
 800309c:	d902      	bls.n	80030a4 <_free_r+0x78>
 800309e:	230c      	movs	r3, #12
 80030a0:	602b      	str	r3, [r5, #0]
 80030a2:	e7d5      	b.n	8003050 <_free_r+0x24>
 80030a4:	6820      	ldr	r0, [r4, #0]
 80030a6:	1821      	adds	r1, r4, r0
 80030a8:	428b      	cmp	r3, r1
 80030aa:	d103      	bne.n	80030b4 <_free_r+0x88>
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	1809      	adds	r1, r1, r0
 80030b2:	6021      	str	r1, [r4, #0]
 80030b4:	6063      	str	r3, [r4, #4]
 80030b6:	6054      	str	r4, [r2, #4]
 80030b8:	e7ca      	b.n	8003050 <_free_r+0x24>
 80030ba:	46c0      	nop			@ (mov r8, r8)
 80030bc:	200001e4 	.word	0x200001e4

080030c0 <_init>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	46c0      	nop			@ (mov r8, r8)
 80030c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c6:	bc08      	pop	{r3}
 80030c8:	469e      	mov	lr, r3
 80030ca:	4770      	bx	lr

080030cc <_fini>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	46c0      	nop			@ (mov r8, r8)
 80030d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d2:	bc08      	pop	{r3}
 80030d4:	469e      	mov	lr, r3
 80030d6:	4770      	bx	lr
