
T37STM32FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002288  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002348  08002348  00003348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002380  08002380  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002380  08002380  0000405c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002380  08002380  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002380  08002380  00003380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002384  08002384  00003384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002388  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000005c  080023e4  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  080023e4  000042e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007858  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000155a  00000000  00000000  0000b8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b0  00000000  00000000  0000ce38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000051e  00000000  00000000  0000d4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000190c  00000000  00000000  0000da06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000088d2  00000000  00000000  0000f312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008972c  00000000  00000000  00017be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a1310  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001974  00000000  00000000  000a1354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000a2cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002330 	.word	0x08002330

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08002330 	.word	0x08002330

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <setLED_MLOCAL>:

// -----------------------------------------------------------------


// ---I/O SECTION---------------------------------------------------
void setLED_MLOCAL(int state){	// LED @ A0
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	if (state != 0) {
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d007      	beq.n	800023e <setLED_MLOCAL+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800022e:	2390      	movs	r3, #144	@ 0x90
 8000230:	05db      	lsls	r3, r3, #23
 8000232:	2201      	movs	r2, #1
 8000234:	2101      	movs	r1, #1
 8000236:	0018      	movs	r0, r3
 8000238:	f000 fd90 	bl	8000d5c <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 800023c:	e006      	b.n	800024c <setLED_MLOCAL+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800023e:	2390      	movs	r3, #144	@ 0x90
 8000240:	05db      	lsls	r3, r3, #23
 8000242:	2200      	movs	r2, #0
 8000244:	2101      	movs	r1, #1
 8000246:	0018      	movs	r0, r3
 8000248:	f000 fd88 	bl	8000d5c <HAL_GPIO_WritePin>
}
 800024c:	46c0      	nop			@ (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	b002      	add	sp, #8
 8000252:	bd80      	pop	{r7, pc}

08000254 <setLED_MSERIAL>:

void setLED_MSERIAL(int state){ // LED @ A1
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	if (state != 0) {
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d007      	beq.n	8000272 <setLED_MSERIAL+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000262:	2390      	movs	r3, #144	@ 0x90
 8000264:	05db      	lsls	r3, r3, #23
 8000266:	2201      	movs	r2, #1
 8000268:	2102      	movs	r1, #2
 800026a:	0018      	movs	r0, r3
 800026c:	f000 fd76 	bl	8000d5c <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
	}
}
 8000270:	e006      	b.n	8000280 <setLED_MSERIAL+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000272:	2390      	movs	r3, #144	@ 0x90
 8000274:	05db      	lsls	r3, r3, #23
 8000276:	2200      	movs	r2, #0
 8000278:	2102      	movs	r1, #2
 800027a:	0018      	movs	r0, r3
 800027c:	f000 fd6e 	bl	8000d5c <HAL_GPIO_WritePin>
}
 8000280:	46c0      	nop			@ (mov r8, r8)
 8000282:	46bd      	mov	sp, r7
 8000284:	b002      	add	sp, #8
 8000286:	bd80      	pop	{r7, pc}

08000288 <setLED_BSY>:

void setLED_BSY(int state){		// LED @ A2
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	if (state != 0) {
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d007      	beq.n	80002a6 <setLED_BSY+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000296:	2390      	movs	r3, #144	@ 0x90
 8000298:	05db      	lsls	r3, r3, #23
 800029a:	2201      	movs	r2, #1
 800029c:	2108      	movs	r1, #8
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 fd5c 	bl	8000d5c <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
	}
}
 80002a4:	e006      	b.n	80002b4 <setLED_BSY+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80002a6:	2390      	movs	r3, #144	@ 0x90
 80002a8:	05db      	lsls	r3, r3, #23
 80002aa:	2200      	movs	r2, #0
 80002ac:	2108      	movs	r1, #8
 80002ae:	0018      	movs	r0, r3
 80002b0:	f000 fd54 	bl	8000d5c <HAL_GPIO_WritePin>
}
 80002b4:	46c0      	nop			@ (mov r8, r8)
 80002b6:	46bd      	mov	sp, r7
 80002b8:	b002      	add	sp, #8
 80002ba:	bd80      	pop	{r7, pc}

080002bc <debugger>:
		}
		else setTTY(0);
	}
}

int debugger(){
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	return 0;
 80002c0:	2300      	movs	r3, #0
}
 80002c2:	0018      	movs	r0, r3
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <init>:
	tty_symbols = TTY_WRITEBUFFER(tty_symbols);
	tty_symbols = booTYshell(tty_symbols);
	tty_symbols = TTY_WRITEBUFFER(tty_symbols);
}

void init(){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	// scary ST-Stuff
    HAL_Init();
 80002cc:	f000 fac6 	bl	800085c <HAL_Init>

    SystemClock_Config();
 80002d0:	f000 f82a 	bl	8000328 <SystemClock_Config>

    MX_GPIO_Init();
 80002d4:	f000 f8e2 	bl	800049c <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80002d8:	f000 f8b0 	bl	800043c <MX_USART2_UART_Init>
    MX_USART1_UART_Init();
 80002dc:	f000 f87c 	bl	80003d8 <MX_USART1_UART_Init>
    //TODO: init ESP8266 uart
    // -------------------------------------------------------------

    // init vars
    writeBuffer = malloc(0);
 80002e0:	2000      	movs	r0, #0
 80002e2:	f001 ff23 	bl	800212c <malloc>
 80002e6:	0003      	movs	r3, r0
 80002e8:	001a      	movs	r2, r3
 80002ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000314 <init+0x4c>)
 80002ec:	601a      	str	r2, [r3, #0]
    tty_symbols = malloc(0);
 80002ee:	2000      	movs	r0, #0
 80002f0:	f001 ff1c 	bl	800212c <malloc>
 80002f4:	0003      	movs	r3, r0
 80002f6:	001a      	movs	r2, r3
 80002f8:	4b07      	ldr	r3, [pc, #28]	@ (8000318 <init+0x50>)
 80002fa:	601a      	str	r2, [r3, #0]

    // init i/o stuff
    setLED_BSY(1);
 80002fc:	2001      	movs	r0, #1
 80002fe:	f7ff ffc3 	bl	8000288 <setLED_BSY>
    setLED_MLOCAL(0);
 8000302:	2000      	movs	r0, #0
 8000304:	f7ff ff8c 	bl	8000220 <setLED_MLOCAL>
    setLED_MSERIAL(0);
 8000308:	2000      	movs	r0, #0
 800030a:	f7ff ffa3 	bl	8000254 <setLED_MSERIAL>

	// now we can do some UI-Stuff, like ask for bd-rate,
	// esp-summary, termminal-width, etc.
    //sanityCheck();
    while (1)  debugger();
 800030e:	f7ff ffd5 	bl	80002bc <debugger>
 8000312:	e7fc      	b.n	800030e <init+0x46>
 8000314:	20000188 	.word	0x20000188
 8000318:	2000018c 	.word	0x2000018c

0800031c <main>:


}

int main(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	init();
 8000320:	f7ff ffd2 	bl	80002c8 <init>
    while(1){
 8000324:	46c0      	nop			@ (mov r8, r8)
 8000326:	e7fd      	b.n	8000324 <main+0x8>

08000328 <SystemClock_Config>:
}


// ---SCARY ST STUFF :C---------------------------------------------
void SystemClock_Config(void)
{
 8000328:	b590      	push	{r4, r7, lr}
 800032a:	b099      	sub	sp, #100	@ 0x64
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	242c      	movs	r4, #44	@ 0x2c
 8000330:	193b      	adds	r3, r7, r4
 8000332:	0018      	movs	r0, r3
 8000334:	2334      	movs	r3, #52	@ 0x34
 8000336:	001a      	movs	r2, r3
 8000338:	2100      	movs	r1, #0
 800033a:	f001 ffb3 	bl	80022a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033e:	231c      	movs	r3, #28
 8000340:	18fb      	adds	r3, r7, r3
 8000342:	0018      	movs	r0, r3
 8000344:	2310      	movs	r3, #16
 8000346:	001a      	movs	r2, r3
 8000348:	2100      	movs	r1, #0
 800034a:	f001 ffab 	bl	80022a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	0018      	movs	r0, r3
 8000352:	2318      	movs	r3, #24
 8000354:	001a      	movs	r2, r3
 8000356:	2100      	movs	r1, #0
 8000358:	f001 ffa4 	bl	80022a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800035c:	0021      	movs	r1, r4
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2202      	movs	r2, #2
 8000362:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2201      	movs	r2, #1
 8000368:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2210      	movs	r2, #16
 800036e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2200      	movs	r2, #0
 8000374:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000376:	187b      	adds	r3, r7, r1
 8000378:	0018      	movs	r0, r3
 800037a:	f000 fd33 	bl	8000de4 <HAL_RCC_OscConfig>
 800037e:	1e03      	subs	r3, r0, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000382:	f000 f917 	bl	80005b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000386:	211c      	movs	r1, #28
 8000388:	187b      	adds	r3, r7, r1
 800038a:	2207      	movs	r2, #7
 800038c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800038e:	187b      	adds	r3, r7, r1
 8000390:	2200      	movs	r2, #0
 8000392:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	187b      	adds	r3, r7, r1
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039a:	187b      	adds	r3, r7, r1
 800039c:	2200      	movs	r2, #0
 800039e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	2100      	movs	r1, #0
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 f8a3 	bl	80014f0 <HAL_RCC_ClockConfig>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80003ae:	f000 f901 	bl	80005b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2201      	movs	r2, #1
 80003b6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	0018      	movs	r0, r3
 80003c2:	f001 fa01 	bl	80017c8 <HAL_RCCEx_PeriphCLKConfig>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80003ca:	f000 f8f3 	bl	80005b4 <Error_Handler>
  }
}
 80003ce:	46c0      	nop			@ (mov r8, r8)
 80003d0:	46bd      	mov	sp, r7
 80003d2:	b019      	add	sp, #100	@ 0x64
 80003d4:	bd90      	pop	{r4, r7, pc}
	...

080003d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003dc:	4b15      	ldr	r3, [pc, #84]	@ (8000434 <MX_USART1_UART_Init+0x5c>)
 80003de:	4a16      	ldr	r2, [pc, #88]	@ (8000438 <MX_USART1_UART_Init+0x60>)
 80003e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003e2:	4b14      	ldr	r3, [pc, #80]	@ (8000434 <MX_USART1_UART_Init+0x5c>)
 80003e4:	2296      	movs	r2, #150	@ 0x96
 80003e6:	0192      	lsls	r2, r2, #6
 80003e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ea:	4b12      	ldr	r3, [pc, #72]	@ (8000434 <MX_USART1_UART_Init+0x5c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003f0:	4b10      	ldr	r3, [pc, #64]	@ (8000434 <MX_USART1_UART_Init+0x5c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80003f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000434 <MX_USART1_UART_Init+0x5c>)
 80003f8:	2280      	movs	r2, #128	@ 0x80
 80003fa:	00d2      	lsls	r2, r2, #3
 80003fc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000434 <MX_USART1_UART_Init+0x5c>)
 8000400:	220c      	movs	r2, #12
 8000402:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000404:	4b0b      	ldr	r3, [pc, #44]	@ (8000434 <MX_USART1_UART_Init+0x5c>)
 8000406:	2200      	movs	r2, #0
 8000408:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800040a:	4b0a      	ldr	r3, [pc, #40]	@ (8000434 <MX_USART1_UART_Init+0x5c>)
 800040c:	2200      	movs	r2, #0
 800040e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000410:	4b08      	ldr	r3, [pc, #32]	@ (8000434 <MX_USART1_UART_Init+0x5c>)
 8000412:	2200      	movs	r2, #0
 8000414:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000416:	4b07      	ldr	r3, [pc, #28]	@ (8000434 <MX_USART1_UART_Init+0x5c>)
 8000418:	2200      	movs	r2, #0
 800041a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800041c:	4b05      	ldr	r3, [pc, #20]	@ (8000434 <MX_USART1_UART_Init+0x5c>)
 800041e:	0018      	movs	r0, r3
 8000420:	f001 fac0 	bl	80019a4 <HAL_UART_Init>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d001      	beq.n	800042c <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000428:	f000 f8c4 	bl	80005b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800042c:	46c0      	nop			@ (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)
 8000434:	20000078 	.word	0x20000078
 8000438:	40013800 	.word	0x40013800

0800043c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000440:	4b14      	ldr	r3, [pc, #80]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 8000442:	4a15      	ldr	r2, [pc, #84]	@ (8000498 <MX_USART2_UART_Init+0x5c>)
 8000444:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000446:	4b13      	ldr	r3, [pc, #76]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 8000448:	2296      	movs	r2, #150	@ 0x96
 800044a:	0212      	lsls	r2, r2, #8
 800044c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800044e:	4b11      	ldr	r3, [pc, #68]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 8000456:	2200      	movs	r2, #0
 8000458:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800045a:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 800045c:	2200      	movs	r2, #0
 800045e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000460:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 8000462:	220c      	movs	r2, #12
 8000464:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000466:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 8000468:	2200      	movs	r2, #0
 800046a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800046c:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 800046e:	2200      	movs	r2, #0
 8000470:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000472:	4b08      	ldr	r3, [pc, #32]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000478:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 800047a:	2200      	movs	r2, #0
 800047c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800047e:	4b05      	ldr	r3, [pc, #20]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 8000480:	0018      	movs	r0, r3
 8000482:	f001 fa8f 	bl	80019a4 <HAL_UART_Init>
 8000486:	1e03      	subs	r3, r0, #0
 8000488:	d001      	beq.n	800048e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800048a:	f000 f893 	bl	80005b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000100 	.word	0x20000100
 8000498:	40004400 	.word	0x40004400

0800049c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b089      	sub	sp, #36	@ 0x24
 80004a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a2:	240c      	movs	r4, #12
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	0018      	movs	r0, r3
 80004a8:	2314      	movs	r3, #20
 80004aa:	001a      	movs	r2, r3
 80004ac:	2100      	movs	r1, #0
 80004ae:	f001 fef9 	bl	80022a4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004b2:	4b3e      	ldr	r3, [pc, #248]	@ (80005ac <MX_GPIO_Init+0x110>)
 80004b4:	695a      	ldr	r2, [r3, #20]
 80004b6:	4b3d      	ldr	r3, [pc, #244]	@ (80005ac <MX_GPIO_Init+0x110>)
 80004b8:	2180      	movs	r1, #128	@ 0x80
 80004ba:	03c9      	lsls	r1, r1, #15
 80004bc:	430a      	orrs	r2, r1
 80004be:	615a      	str	r2, [r3, #20]
 80004c0:	4b3a      	ldr	r3, [pc, #232]	@ (80005ac <MX_GPIO_Init+0x110>)
 80004c2:	695a      	ldr	r2, [r3, #20]
 80004c4:	2380      	movs	r3, #128	@ 0x80
 80004c6:	03db      	lsls	r3, r3, #15
 80004c8:	4013      	ands	r3, r2
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ce:	4b37      	ldr	r3, [pc, #220]	@ (80005ac <MX_GPIO_Init+0x110>)
 80004d0:	695a      	ldr	r2, [r3, #20]
 80004d2:	4b36      	ldr	r3, [pc, #216]	@ (80005ac <MX_GPIO_Init+0x110>)
 80004d4:	2180      	movs	r1, #128	@ 0x80
 80004d6:	0289      	lsls	r1, r1, #10
 80004d8:	430a      	orrs	r2, r1
 80004da:	615a      	str	r2, [r3, #20]
 80004dc:	4b33      	ldr	r3, [pc, #204]	@ (80005ac <MX_GPIO_Init+0x110>)
 80004de:	695a      	ldr	r2, [r3, #20]
 80004e0:	2380      	movs	r3, #128	@ 0x80
 80004e2:	029b      	lsls	r3, r3, #10
 80004e4:	4013      	ands	r3, r2
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ea:	4b30      	ldr	r3, [pc, #192]	@ (80005ac <MX_GPIO_Init+0x110>)
 80004ec:	695a      	ldr	r2, [r3, #20]
 80004ee:	4b2f      	ldr	r3, [pc, #188]	@ (80005ac <MX_GPIO_Init+0x110>)
 80004f0:	2180      	movs	r1, #128	@ 0x80
 80004f2:	02c9      	lsls	r1, r1, #11
 80004f4:	430a      	orrs	r2, r1
 80004f6:	615a      	str	r2, [r3, #20]
 80004f8:	4b2c      	ldr	r3, [pc, #176]	@ (80005ac <MX_GPIO_Init+0x110>)
 80004fa:	695a      	ldr	r2, [r3, #20]
 80004fc:	2380      	movs	r3, #128	@ 0x80
 80004fe:	02db      	lsls	r3, r3, #11
 8000500:	4013      	ands	r3, r2
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_MLOCAL_Pin|LED_MSERIAL_Pin|LED_BSY_Pin|TTY_SEND_Pin, GPIO_PIN_RESET);
 8000506:	2390      	movs	r3, #144	@ 0x90
 8000508:	05db      	lsls	r3, r3, #23
 800050a:	2200      	movs	r2, #0
 800050c:	211b      	movs	r1, #27
 800050e:	0018      	movs	r0, r3
 8000510:	f000 fc24 	bl	8000d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_MLOCAL_Pin LED_MSERIAL_Pin LED_BSY_Pin */
  GPIO_InitStruct.Pin = LED_MLOCAL_Pin|LED_MSERIAL_Pin|LED_BSY_Pin;
 8000514:	193b      	adds	r3, r7, r4
 8000516:	220b      	movs	r2, #11
 8000518:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2201      	movs	r2, #1
 800051e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	193a      	adds	r2, r7, r4
 800052e:	2390      	movs	r3, #144	@ 0x90
 8000530:	05db      	lsls	r3, r3, #23
 8000532:	0011      	movs	r1, r2
 8000534:	0018      	movs	r0, r3
 8000536:	f000 faa9 	bl	8000a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : TTY_SEND_Pin */
  GPIO_InitStruct.Pin = TTY_SEND_Pin;
 800053a:	193b      	adds	r3, r7, r4
 800053c:	2210      	movs	r2, #16
 800053e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	193b      	adds	r3, r7, r4
 8000542:	2201      	movs	r2, #1
 8000544:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	193b      	adds	r3, r7, r4
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800054c:	193b      	adds	r3, r7, r4
 800054e:	2203      	movs	r2, #3
 8000550:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TTY_SEND_GPIO_Port, &GPIO_InitStruct);
 8000552:	193a      	adds	r2, r7, r4
 8000554:	2390      	movs	r3, #144	@ 0x90
 8000556:	05db      	lsls	r3, r3, #23
 8000558:	0011      	movs	r1, r2
 800055a:	0018      	movs	r0, r3
 800055c:	f000 fa96 	bl	8000a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : TTY_RECV_Pin */
  GPIO_InitStruct.Pin = TTY_RECV_Pin;
 8000560:	193b      	adds	r3, r7, r4
 8000562:	2201      	movs	r2, #1
 8000564:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000566:	193b      	adds	r3, r7, r4
 8000568:	2200      	movs	r2, #0
 800056a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TTY_RECV_GPIO_Port, &GPIO_InitStruct);
 8000572:	193b      	adds	r3, r7, r4
 8000574:	4a0e      	ldr	r2, [pc, #56]	@ (80005b0 <MX_GPIO_Init+0x114>)
 8000576:	0019      	movs	r1, r3
 8000578:	0010      	movs	r0, r2
 800057a:	f000 fa87 	bl	8000a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_MODE_Pin */
  GPIO_InitStruct.Pin = BT_MODE_Pin;
 800057e:	0021      	movs	r1, r4
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2280      	movs	r2, #128	@ 0x80
 8000584:	0112      	lsls	r2, r2, #4
 8000586:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2202      	movs	r2, #2
 8000592:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BT_MODE_GPIO_Port, &GPIO_InitStruct);
 8000594:	187a      	adds	r2, r7, r1
 8000596:	2390      	movs	r3, #144	@ 0x90
 8000598:	05db      	lsls	r3, r3, #23
 800059a:	0011      	movs	r1, r2
 800059c:	0018      	movs	r0, r3
 800059e:	f000 fa75 	bl	8000a8c <HAL_GPIO_Init>


  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b009      	add	sp, #36	@ 0x24
 80005a8:	bd90      	pop	{r4, r7, pc}
 80005aa:	46c0      	nop			@ (mov r8, r8)
 80005ac:	40021000 	.word	0x40021000
 80005b0:	48000400 	.word	0x48000400

080005b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b8:	b672      	cpsid	i
}
 80005ba:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80005bc:	46c0      	nop			@ (mov r8, r8)
 80005be:	e7fd      	b.n	80005bc <Error_Handler+0x8>

080005c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <HAL_MspInit+0x44>)
 80005c8:	699a      	ldr	r2, [r3, #24]
 80005ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <HAL_MspInit+0x44>)
 80005cc:	2101      	movs	r1, #1
 80005ce:	430a      	orrs	r2, r1
 80005d0:	619a      	str	r2, [r3, #24]
 80005d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <HAL_MspInit+0x44>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	2201      	movs	r2, #1
 80005d8:	4013      	ands	r3, r2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005de:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <HAL_MspInit+0x44>)
 80005e0:	69da      	ldr	r2, [r3, #28]
 80005e2:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <HAL_MspInit+0x44>)
 80005e4:	2180      	movs	r1, #128	@ 0x80
 80005e6:	0549      	lsls	r1, r1, #21
 80005e8:	430a      	orrs	r2, r1
 80005ea:	61da      	str	r2, [r3, #28]
 80005ec:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <HAL_MspInit+0x44>)
 80005ee:	69da      	ldr	r2, [r3, #28]
 80005f0:	2380      	movs	r3, #128	@ 0x80
 80005f2:	055b      	lsls	r3, r3, #21
 80005f4:	4013      	ands	r3, r2
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fa:	46c0      	nop			@ (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b002      	add	sp, #8
 8000600:	bd80      	pop	{r7, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	40021000 	.word	0x40021000

08000608 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b08d      	sub	sp, #52	@ 0x34
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	241c      	movs	r4, #28
 8000612:	193b      	adds	r3, r7, r4
 8000614:	0018      	movs	r0, r3
 8000616:	2314      	movs	r3, #20
 8000618:	001a      	movs	r2, r3
 800061a:	2100      	movs	r1, #0
 800061c:	f001 fe42 	bl	80022a4 <memset>
  if(huart->Instance==USART1)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a39      	ldr	r2, [pc, #228]	@ (800070c <HAL_UART_MspInit+0x104>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d134      	bne.n	8000694 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800062a:	4b39      	ldr	r3, [pc, #228]	@ (8000710 <HAL_UART_MspInit+0x108>)
 800062c:	699a      	ldr	r2, [r3, #24]
 800062e:	4b38      	ldr	r3, [pc, #224]	@ (8000710 <HAL_UART_MspInit+0x108>)
 8000630:	2180      	movs	r1, #128	@ 0x80
 8000632:	01c9      	lsls	r1, r1, #7
 8000634:	430a      	orrs	r2, r1
 8000636:	619a      	str	r2, [r3, #24]
 8000638:	4b35      	ldr	r3, [pc, #212]	@ (8000710 <HAL_UART_MspInit+0x108>)
 800063a:	699a      	ldr	r2, [r3, #24]
 800063c:	2380      	movs	r3, #128	@ 0x80
 800063e:	01db      	lsls	r3, r3, #7
 8000640:	4013      	ands	r3, r2
 8000642:	61bb      	str	r3, [r7, #24]
 8000644:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b32      	ldr	r3, [pc, #200]	@ (8000710 <HAL_UART_MspInit+0x108>)
 8000648:	695a      	ldr	r2, [r3, #20]
 800064a:	4b31      	ldr	r3, [pc, #196]	@ (8000710 <HAL_UART_MspInit+0x108>)
 800064c:	2180      	movs	r1, #128	@ 0x80
 800064e:	0289      	lsls	r1, r1, #10
 8000650:	430a      	orrs	r2, r1
 8000652:	615a      	str	r2, [r3, #20]
 8000654:	4b2e      	ldr	r3, [pc, #184]	@ (8000710 <HAL_UART_MspInit+0x108>)
 8000656:	695a      	ldr	r2, [r3, #20]
 8000658:	2380      	movs	r3, #128	@ 0x80
 800065a:	029b      	lsls	r3, r3, #10
 800065c:	4013      	ands	r3, r2
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000662:	193b      	adds	r3, r7, r4
 8000664:	22c0      	movs	r2, #192	@ 0xc0
 8000666:	00d2      	lsls	r2, r2, #3
 8000668:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066a:	0021      	movs	r1, r4
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2202      	movs	r2, #2
 8000670:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2203      	movs	r2, #3
 800067c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2201      	movs	r2, #1
 8000682:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	187a      	adds	r2, r7, r1
 8000686:	2390      	movs	r3, #144	@ 0x90
 8000688:	05db      	lsls	r3, r3, #23
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f000 f9fd 	bl	8000a8c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000692:	e037      	b.n	8000704 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a1e      	ldr	r2, [pc, #120]	@ (8000714 <HAL_UART_MspInit+0x10c>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d132      	bne.n	8000704 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800069e:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <HAL_UART_MspInit+0x108>)
 80006a0:	69da      	ldr	r2, [r3, #28]
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <HAL_UART_MspInit+0x108>)
 80006a4:	2180      	movs	r1, #128	@ 0x80
 80006a6:	0289      	lsls	r1, r1, #10
 80006a8:	430a      	orrs	r2, r1
 80006aa:	61da      	str	r2, [r3, #28]
 80006ac:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <HAL_UART_MspInit+0x108>)
 80006ae:	69da      	ldr	r2, [r3, #28]
 80006b0:	2380      	movs	r3, #128	@ 0x80
 80006b2:	029b      	lsls	r3, r3, #10
 80006b4:	4013      	ands	r3, r2
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <HAL_UART_MspInit+0x108>)
 80006bc:	695a      	ldr	r2, [r3, #20]
 80006be:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <HAL_UART_MspInit+0x108>)
 80006c0:	2180      	movs	r1, #128	@ 0x80
 80006c2:	0289      	lsls	r1, r1, #10
 80006c4:	430a      	orrs	r2, r1
 80006c6:	615a      	str	r2, [r3, #20]
 80006c8:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <HAL_UART_MspInit+0x108>)
 80006ca:	695a      	ldr	r2, [r3, #20]
 80006cc:	2380      	movs	r3, #128	@ 0x80
 80006ce:	029b      	lsls	r3, r3, #10
 80006d0:	4013      	ands	r3, r2
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80006d6:	211c      	movs	r1, #28
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	4a0f      	ldr	r2, [pc, #60]	@ (8000718 <HAL_UART_MspInit+0x110>)
 80006dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2202      	movs	r2, #2
 80006e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2203      	movs	r2, #3
 80006ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2201      	movs	r2, #1
 80006f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	187a      	adds	r2, r7, r1
 80006f8:	2390      	movs	r3, #144	@ 0x90
 80006fa:	05db      	lsls	r3, r3, #23
 80006fc:	0011      	movs	r1, r2
 80006fe:	0018      	movs	r0, r3
 8000700:	f000 f9c4 	bl	8000a8c <HAL_GPIO_Init>
}
 8000704:	46c0      	nop			@ (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	b00d      	add	sp, #52	@ 0x34
 800070a:	bd90      	pop	{r4, r7, pc}
 800070c:	40013800 	.word	0x40013800
 8000710:	40021000 	.word	0x40021000
 8000714:	40004400 	.word	0x40004400
 8000718:	00008004 	.word	0x00008004

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000720:	46c0      	nop			@ (mov r8, r8)
 8000722:	e7fd      	b.n	8000720 <NMI_Handler+0x4>

08000724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000728:	46c0      	nop			@ (mov r8, r8)
 800072a:	e7fd      	b.n	8000728 <HardFault_Handler+0x4>

0800072c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000730:	46c0      	nop			@ (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000744:	f000 f8d2 	bl	80008ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000748:	46c0      	nop			@ (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TTY_RECV_Pin);
 8000752:	2001      	movs	r0, #1
 8000754:	f000 fb20 	bl	8000d98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000758:	46c0      	nop			@ (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000768:	4a14      	ldr	r2, [pc, #80]	@ (80007bc <_sbrk+0x5c>)
 800076a:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <_sbrk+0x60>)
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000774:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d102      	bne.n	8000782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800077c:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <_sbrk+0x64>)
 800077e:	4a12      	ldr	r2, [pc, #72]	@ (80007c8 <_sbrk+0x68>)
 8000780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000782:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <_sbrk+0x64>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	18d3      	adds	r3, r2, r3
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	429a      	cmp	r2, r3
 800078e:	d207      	bcs.n	80007a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000790:	f001 fda2 	bl	80022d8 <__errno>
 8000794:	0003      	movs	r3, r0
 8000796:	220c      	movs	r2, #12
 8000798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800079a:	2301      	movs	r3, #1
 800079c:	425b      	negs	r3, r3
 800079e:	e009      	b.n	80007b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007a0:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <_sbrk+0x64>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007a6:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <_sbrk+0x64>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	18d2      	adds	r2, r2, r3
 80007ae:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <_sbrk+0x64>)
 80007b0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007b2:	68fb      	ldr	r3, [r7, #12]
}
 80007b4:	0018      	movs	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b006      	add	sp, #24
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20001800 	.word	0x20001800
 80007c0:	00000400 	.word	0x00000400
 80007c4:	20000190 	.word	0x20000190
 80007c8:	200002e0 	.word	0x200002e0

080007cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007d0:	46c0      	nop			@ (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007d8:	4813      	ldr	r0, [pc, #76]	@ (8000828 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007da:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007dc:	f7ff fff6 	bl	80007cc <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80007e0:	4812      	ldr	r0, [pc, #72]	@ (800082c <LoopForever+0x6>)
    LDR R1, [R0]
 80007e2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80007e4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80007e6:	4a12      	ldr	r2, [pc, #72]	@ (8000830 <LoopForever+0xa>)
    CMP R1, R2
 80007e8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80007ea:	d105      	bne.n	80007f8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80007ec:	4811      	ldr	r0, [pc, #68]	@ (8000834 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80007ee:	4912      	ldr	r1, [pc, #72]	@ (8000838 <LoopForever+0x12>)
    STR R1, [R0]
 80007f0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80007f2:	4812      	ldr	r0, [pc, #72]	@ (800083c <LoopForever+0x16>)
    LDR R1,=0x00000000
 80007f4:	4912      	ldr	r1, [pc, #72]	@ (8000840 <LoopForever+0x1a>)
    STR R1, [R0]
 80007f6:	6001      	str	r1, [r0, #0]

080007f8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f8:	4812      	ldr	r0, [pc, #72]	@ (8000844 <LoopForever+0x1e>)
  ldr r1, =_edata
 80007fa:	4913      	ldr	r1, [pc, #76]	@ (8000848 <LoopForever+0x22>)
  ldr r2, =_sidata
 80007fc:	4a13      	ldr	r2, [pc, #76]	@ (800084c <LoopForever+0x26>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a10      	ldr	r2, [pc, #64]	@ (8000850 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000810:	4c10      	ldr	r4, [pc, #64]	@ (8000854 <LoopForever+0x2e>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800081e:	f001 fd61 	bl	80022e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000822:	f7ff fd7b 	bl	800031c <main>

08000826 <LoopForever>:

LoopForever:
    b LoopForever
 8000826:	e7fe      	b.n	8000826 <LoopForever>
  ldr   r0, =_estack
 8000828:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800082c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000830:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000834:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000838:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800083c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000840:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000848:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800084c:	08002388 	.word	0x08002388
  ldr r2, =_sbss
 8000850:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000854:	200002e0 	.word	0x200002e0

08000858 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC1_IRQHandler>
	...

0800085c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000860:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <HAL_Init+0x24>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <HAL_Init+0x24>)
 8000866:	2110      	movs	r1, #16
 8000868:	430a      	orrs	r2, r1
 800086a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800086c:	2000      	movs	r0, #0
 800086e:	f000 f809 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000872:	f7ff fea5 	bl	80005c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000876:	2300      	movs	r3, #0
}
 8000878:	0018      	movs	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			@ (mov r8, r8)
 8000880:	40022000 	.word	0x40022000

08000884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800088c:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <HAL_InitTick+0x5c>)
 800088e:	681c      	ldr	r4, [r3, #0]
 8000890:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <HAL_InitTick+0x60>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	0019      	movs	r1, r3
 8000896:	23fa      	movs	r3, #250	@ 0xfa
 8000898:	0098      	lsls	r0, r3, #2
 800089a:	f7ff fc35 	bl	8000108 <__udivsi3>
 800089e:	0003      	movs	r3, r0
 80008a0:	0019      	movs	r1, r3
 80008a2:	0020      	movs	r0, r4
 80008a4:	f7ff fc30 	bl	8000108 <__udivsi3>
 80008a8:	0003      	movs	r3, r0
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 f8e1 	bl	8000a72 <HAL_SYSTICK_Config>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d001      	beq.n	80008b8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008b4:	2301      	movs	r3, #1
 80008b6:	e00f      	b.n	80008d8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d80b      	bhi.n	80008d6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	2301      	movs	r3, #1
 80008c2:	425b      	negs	r3, r3
 80008c4:	2200      	movs	r2, #0
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 f8be 	bl	8000a48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <HAL_InitTick+0x64>)
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	e000      	b.n	80008d8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	0018      	movs	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	b003      	add	sp, #12
 80008de:	bd90      	pop	{r4, r7, pc}
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000004 	.word	0x20000004

080008ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f0:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <HAL_IncTick+0x1c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	001a      	movs	r2, r3
 80008f6:	4b05      	ldr	r3, [pc, #20]	@ (800090c <HAL_IncTick+0x20>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	18d2      	adds	r2, r2, r3
 80008fc:	4b03      	ldr	r3, [pc, #12]	@ (800090c <HAL_IncTick+0x20>)
 80008fe:	601a      	str	r2, [r3, #0]
}
 8000900:	46c0      	nop			@ (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	20000008 	.word	0x20000008
 800090c:	20000194 	.word	0x20000194

08000910 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;
 8000914:	4b02      	ldr	r3, [pc, #8]	@ (8000920 <HAL_GetTick+0x10>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	20000194 	.word	0x20000194

08000924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	0002      	movs	r2, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b7f      	cmp	r3, #127	@ 0x7f
 8000938:	d828      	bhi.n	800098c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800093a:	4a2f      	ldr	r2, [pc, #188]	@ (80009f8 <__NVIC_SetPriority+0xd4>)
 800093c:	1dfb      	adds	r3, r7, #7
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b25b      	sxtb	r3, r3
 8000942:	089b      	lsrs	r3, r3, #2
 8000944:	33c0      	adds	r3, #192	@ 0xc0
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	589b      	ldr	r3, [r3, r2]
 800094a:	1dfa      	adds	r2, r7, #7
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	0011      	movs	r1, r2
 8000950:	2203      	movs	r2, #3
 8000952:	400a      	ands	r2, r1
 8000954:	00d2      	lsls	r2, r2, #3
 8000956:	21ff      	movs	r1, #255	@ 0xff
 8000958:	4091      	lsls	r1, r2
 800095a:	000a      	movs	r2, r1
 800095c:	43d2      	mvns	r2, r2
 800095e:	401a      	ands	r2, r3
 8000960:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	019b      	lsls	r3, r3, #6
 8000966:	22ff      	movs	r2, #255	@ 0xff
 8000968:	401a      	ands	r2, r3
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	0018      	movs	r0, r3
 8000970:	2303      	movs	r3, #3
 8000972:	4003      	ands	r3, r0
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000978:	481f      	ldr	r0, [pc, #124]	@ (80009f8 <__NVIC_SetPriority+0xd4>)
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	b25b      	sxtb	r3, r3
 8000980:	089b      	lsrs	r3, r3, #2
 8000982:	430a      	orrs	r2, r1
 8000984:	33c0      	adds	r3, #192	@ 0xc0
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800098a:	e031      	b.n	80009f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800098c:	4a1b      	ldr	r2, [pc, #108]	@ (80009fc <__NVIC_SetPriority+0xd8>)
 800098e:	1dfb      	adds	r3, r7, #7
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	0019      	movs	r1, r3
 8000994:	230f      	movs	r3, #15
 8000996:	400b      	ands	r3, r1
 8000998:	3b08      	subs	r3, #8
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	3306      	adds	r3, #6
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	18d3      	adds	r3, r2, r3
 80009a2:	3304      	adds	r3, #4
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	1dfa      	adds	r2, r7, #7
 80009a8:	7812      	ldrb	r2, [r2, #0]
 80009aa:	0011      	movs	r1, r2
 80009ac:	2203      	movs	r2, #3
 80009ae:	400a      	ands	r2, r1
 80009b0:	00d2      	lsls	r2, r2, #3
 80009b2:	21ff      	movs	r1, #255	@ 0xff
 80009b4:	4091      	lsls	r1, r2
 80009b6:	000a      	movs	r2, r1
 80009b8:	43d2      	mvns	r2, r2
 80009ba:	401a      	ands	r2, r3
 80009bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	019b      	lsls	r3, r3, #6
 80009c2:	22ff      	movs	r2, #255	@ 0xff
 80009c4:	401a      	ands	r2, r3
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	0018      	movs	r0, r3
 80009cc:	2303      	movs	r3, #3
 80009ce:	4003      	ands	r3, r0
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d4:	4809      	ldr	r0, [pc, #36]	@ (80009fc <__NVIC_SetPriority+0xd8>)
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	001c      	movs	r4, r3
 80009dc:	230f      	movs	r3, #15
 80009de:	4023      	ands	r3, r4
 80009e0:	3b08      	subs	r3, #8
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	430a      	orrs	r2, r1
 80009e6:	3306      	adds	r3, #6
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	18c3      	adds	r3, r0, r3
 80009ec:	3304      	adds	r3, #4
 80009ee:	601a      	str	r2, [r3, #0]
}
 80009f0:	46c0      	nop			@ (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b003      	add	sp, #12
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	e000e100 	.word	0xe000e100
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	1e5a      	subs	r2, r3, #1
 8000a0c:	2380      	movs	r3, #128	@ 0x80
 8000a0e:	045b      	lsls	r3, r3, #17
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d301      	bcc.n	8000a18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a14:	2301      	movs	r3, #1
 8000a16:	e010      	b.n	8000a3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a18:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <SysTick_Config+0x44>)
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	3a01      	subs	r2, #1
 8000a1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a20:	2301      	movs	r3, #1
 8000a22:	425b      	negs	r3, r3
 8000a24:	2103      	movs	r1, #3
 8000a26:	0018      	movs	r0, r3
 8000a28:	f7ff ff7c 	bl	8000924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a2c:	4b05      	ldr	r3, [pc, #20]	@ (8000a44 <SysTick_Config+0x44>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a32:	4b04      	ldr	r3, [pc, #16]	@ (8000a44 <SysTick_Config+0x44>)
 8000a34:	2207      	movs	r2, #7
 8000a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b002      	add	sp, #8
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	e000e010 	.word	0xe000e010

08000a48 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	210f      	movs	r1, #15
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	1c02      	adds	r2, r0, #0
 8000a58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b25b      	sxtb	r3, r3
 8000a62:	0011      	movs	r1, r2
 8000a64:	0018      	movs	r0, r3
 8000a66:	f7ff ff5d 	bl	8000924 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b004      	add	sp, #16
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff ffbf 	bl	8000a00 <SysTick_Config>
 8000a82:	0003      	movs	r3, r0
}
 8000a84:	0018      	movs	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b002      	add	sp, #8
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9a:	e149      	b.n	8000d30 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	697a      	ldr	r2, [r7, #20]
 8000aa4:	4091      	lsls	r1, r2
 8000aa6:	000a      	movs	r2, r1
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d100      	bne.n	8000ab4 <HAL_GPIO_Init+0x28>
 8000ab2:	e13a      	b.n	8000d2a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	2203      	movs	r2, #3
 8000aba:	4013      	ands	r3, r2
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d005      	beq.n	8000acc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d130      	bne.n	8000b2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	409a      	lsls	r2, r3
 8000ada:	0013      	movs	r3, r2
 8000adc:	43da      	mvns	r2, r3
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	68da      	ldr	r2, [r3, #12]
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	409a      	lsls	r2, r3
 8000aee:	0013      	movs	r3, r2
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b02:	2201      	movs	r2, #1
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	409a      	lsls	r2, r3
 8000b08:	0013      	movs	r3, r2
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	091b      	lsrs	r3, r3, #4
 8000b18:	2201      	movs	r2, #1
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	409a      	lsls	r2, r3
 8000b20:	0013      	movs	r3, r2
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	2203      	movs	r2, #3
 8000b34:	4013      	ands	r3, r2
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	d017      	beq.n	8000b6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	2203      	movs	r2, #3
 8000b46:	409a      	lsls	r2, r3
 8000b48:	0013      	movs	r3, r2
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	689a      	ldr	r2, [r3, #8]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	409a      	lsls	r2, r3
 8000b5c:	0013      	movs	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	2203      	movs	r2, #3
 8000b70:	4013      	ands	r3, r2
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d123      	bne.n	8000bbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	08da      	lsrs	r2, r3, #3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3208      	adds	r2, #8
 8000b7e:	0092      	lsls	r2, r2, #2
 8000b80:	58d3      	ldr	r3, [r2, r3]
 8000b82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	2207      	movs	r2, #7
 8000b88:	4013      	ands	r3, r2
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	220f      	movs	r2, #15
 8000b8e:	409a      	lsls	r2, r3
 8000b90:	0013      	movs	r3, r2
 8000b92:	43da      	mvns	r2, r3
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	691a      	ldr	r2, [r3, #16]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	2107      	movs	r1, #7
 8000ba2:	400b      	ands	r3, r1
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	409a      	lsls	r2, r3
 8000ba8:	0013      	movs	r3, r2
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	08da      	lsrs	r2, r3, #3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3208      	adds	r2, #8
 8000bb8:	0092      	lsls	r2, r2, #2
 8000bba:	6939      	ldr	r1, [r7, #16]
 8000bbc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	2203      	movs	r2, #3
 8000bca:	409a      	lsls	r2, r3
 8000bcc:	0013      	movs	r3, r2
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2203      	movs	r2, #3
 8000bdc:	401a      	ands	r2, r3
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	409a      	lsls	r2, r3
 8000be4:	0013      	movs	r3, r2
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	23c0      	movs	r3, #192	@ 0xc0
 8000bf8:	029b      	lsls	r3, r3, #10
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	d100      	bne.n	8000c00 <HAL_GPIO_Init+0x174>
 8000bfe:	e094      	b.n	8000d2a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c00:	4b51      	ldr	r3, [pc, #324]	@ (8000d48 <HAL_GPIO_Init+0x2bc>)
 8000c02:	699a      	ldr	r2, [r3, #24]
 8000c04:	4b50      	ldr	r3, [pc, #320]	@ (8000d48 <HAL_GPIO_Init+0x2bc>)
 8000c06:	2101      	movs	r1, #1
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	619a      	str	r2, [r3, #24]
 8000c0c:	4b4e      	ldr	r3, [pc, #312]	@ (8000d48 <HAL_GPIO_Init+0x2bc>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	2201      	movs	r2, #1
 8000c12:	4013      	ands	r3, r2
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c18:	4a4c      	ldr	r2, [pc, #304]	@ (8000d4c <HAL_GPIO_Init+0x2c0>)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	089b      	lsrs	r3, r3, #2
 8000c1e:	3302      	adds	r3, #2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	589b      	ldr	r3, [r3, r2]
 8000c24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	2203      	movs	r2, #3
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	220f      	movs	r2, #15
 8000c30:	409a      	lsls	r2, r3
 8000c32:	0013      	movs	r3, r2
 8000c34:	43da      	mvns	r2, r3
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	2390      	movs	r3, #144	@ 0x90
 8000c40:	05db      	lsls	r3, r3, #23
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d00d      	beq.n	8000c62 <HAL_GPIO_Init+0x1d6>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a41      	ldr	r2, [pc, #260]	@ (8000d50 <HAL_GPIO_Init+0x2c4>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d007      	beq.n	8000c5e <HAL_GPIO_Init+0x1d2>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a40      	ldr	r2, [pc, #256]	@ (8000d54 <HAL_GPIO_Init+0x2c8>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d101      	bne.n	8000c5a <HAL_GPIO_Init+0x1ce>
 8000c56:	2302      	movs	r3, #2
 8000c58:	e004      	b.n	8000c64 <HAL_GPIO_Init+0x1d8>
 8000c5a:	2305      	movs	r3, #5
 8000c5c:	e002      	b.n	8000c64 <HAL_GPIO_Init+0x1d8>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e000      	b.n	8000c64 <HAL_GPIO_Init+0x1d8>
 8000c62:	2300      	movs	r3, #0
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	2103      	movs	r1, #3
 8000c68:	400a      	ands	r2, r1
 8000c6a:	0092      	lsls	r2, r2, #2
 8000c6c:	4093      	lsls	r3, r2
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c74:	4935      	ldr	r1, [pc, #212]	@ (8000d4c <HAL_GPIO_Init+0x2c0>)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	089b      	lsrs	r3, r3, #2
 8000c7a:	3302      	adds	r3, #2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c82:	4b35      	ldr	r3, [pc, #212]	@ (8000d58 <HAL_GPIO_Init+0x2cc>)
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685a      	ldr	r2, [r3, #4]
 8000c96:	2380      	movs	r3, #128	@ 0x80
 8000c98:	035b      	lsls	r3, r3, #13
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	d003      	beq.n	8000ca6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d58 <HAL_GPIO_Init+0x2cc>)
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000cac:	4b2a      	ldr	r3, [pc, #168]	@ (8000d58 <HAL_GPIO_Init+0x2cc>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	43da      	mvns	r2, r3
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685a      	ldr	r2, [r3, #4]
 8000cc0:	2380      	movs	r3, #128	@ 0x80
 8000cc2:	039b      	lsls	r3, r3, #14
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	d003      	beq.n	8000cd0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cd0:	4b21      	ldr	r3, [pc, #132]	@ (8000d58 <HAL_GPIO_Init+0x2cc>)
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000cd6:	4b20      	ldr	r3, [pc, #128]	@ (8000d58 <HAL_GPIO_Init+0x2cc>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	2380      	movs	r3, #128	@ 0x80
 8000cec:	029b      	lsls	r3, r3, #10
 8000cee:	4013      	ands	r3, r2
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cfa:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <HAL_GPIO_Init+0x2cc>)
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000d00:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <HAL_GPIO_Init+0x2cc>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	43da      	mvns	r2, r3
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	2380      	movs	r3, #128	@ 0x80
 8000d16:	025b      	lsls	r3, r3, #9
 8000d18:	4013      	ands	r3, r2
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <HAL_GPIO_Init+0x2cc>)
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	40da      	lsrs	r2, r3
 8000d38:	1e13      	subs	r3, r2, #0
 8000d3a:	d000      	beq.n	8000d3e <HAL_GPIO_Init+0x2b2>
 8000d3c:	e6ae      	b.n	8000a9c <HAL_GPIO_Init+0x10>
  } 
}
 8000d3e:	46c0      	nop			@ (mov r8, r8)
 8000d40:	46c0      	nop			@ (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b006      	add	sp, #24
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010000 	.word	0x40010000
 8000d50:	48000400 	.word	0x48000400
 8000d54:	48000800 	.word	0x48000800
 8000d58:	40010400 	.word	0x40010400

08000d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	0008      	movs	r0, r1
 8000d66:	0011      	movs	r1, r2
 8000d68:	1cbb      	adds	r3, r7, #2
 8000d6a:	1c02      	adds	r2, r0, #0
 8000d6c:	801a      	strh	r2, [r3, #0]
 8000d6e:	1c7b      	adds	r3, r7, #1
 8000d70:	1c0a      	adds	r2, r1, #0
 8000d72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d74:	1c7b      	adds	r3, r7, #1
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d004      	beq.n	8000d86 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d7c:	1cbb      	adds	r3, r7, #2
 8000d7e:	881a      	ldrh	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d84:	e003      	b.n	8000d8e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d86:	1cbb      	adds	r3, r7, #2
 8000d88:	881a      	ldrh	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d8e:	46c0      	nop			@ (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b002      	add	sp, #8
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	0002      	movs	r2, r0
 8000da0:	1dbb      	adds	r3, r7, #6
 8000da2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000da4:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	1dba      	adds	r2, r7, #6
 8000daa:	8812      	ldrh	r2, [r2, #0]
 8000dac:	4013      	ands	r3, r2
 8000dae:	d008      	beq.n	8000dc2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000db2:	1dba      	adds	r2, r7, #6
 8000db4:	8812      	ldrh	r2, [r2, #0]
 8000db6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000db8:	1dbb      	adds	r3, r7, #6
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f000 f807 	bl	8000dd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b002      	add	sp, #8
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	40010400 	.word	0x40010400

08000dd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	1dbb      	adds	r3, r7, #6
 8000dda:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8000ddc:	46c0      	nop			@ (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b002      	add	sp, #8
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	f000 fb76 	bl	80014e4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	4013      	ands	r3, r2
 8000e00:	d100      	bne.n	8000e04 <HAL_RCC_OscConfig+0x20>
 8000e02:	e08e      	b.n	8000f22 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e04:	4bc5      	ldr	r3, [pc, #788]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	220c      	movs	r2, #12
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	d00e      	beq.n	8000e2e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e10:	4bc2      	ldr	r3, [pc, #776]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	220c      	movs	r2, #12
 8000e16:	4013      	ands	r3, r2
 8000e18:	2b08      	cmp	r3, #8
 8000e1a:	d117      	bne.n	8000e4c <HAL_RCC_OscConfig+0x68>
 8000e1c:	4bbf      	ldr	r3, [pc, #764]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	23c0      	movs	r3, #192	@ 0xc0
 8000e22:	025b      	lsls	r3, r3, #9
 8000e24:	401a      	ands	r2, r3
 8000e26:	2380      	movs	r3, #128	@ 0x80
 8000e28:	025b      	lsls	r3, r3, #9
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d10e      	bne.n	8000e4c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e2e:	4bbb      	ldr	r3, [pc, #748]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	2380      	movs	r3, #128	@ 0x80
 8000e34:	029b      	lsls	r3, r3, #10
 8000e36:	4013      	ands	r3, r2
 8000e38:	d100      	bne.n	8000e3c <HAL_RCC_OscConfig+0x58>
 8000e3a:	e071      	b.n	8000f20 <HAL_RCC_OscConfig+0x13c>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d000      	beq.n	8000e46 <HAL_RCC_OscConfig+0x62>
 8000e44:	e06c      	b.n	8000f20 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	f000 fb4c 	bl	80014e4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d107      	bne.n	8000e64 <HAL_RCC_OscConfig+0x80>
 8000e54:	4bb1      	ldr	r3, [pc, #708]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4bb0      	ldr	r3, [pc, #704]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000e5a:	2180      	movs	r1, #128	@ 0x80
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	e02f      	b.n	8000ec4 <HAL_RCC_OscConfig+0xe0>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d10c      	bne.n	8000e86 <HAL_RCC_OscConfig+0xa2>
 8000e6c:	4bab      	ldr	r3, [pc, #684]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4baa      	ldr	r3, [pc, #680]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000e72:	49ab      	ldr	r1, [pc, #684]	@ (8001120 <HAL_RCC_OscConfig+0x33c>)
 8000e74:	400a      	ands	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	4ba8      	ldr	r3, [pc, #672]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4ba7      	ldr	r3, [pc, #668]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000e7e:	49a9      	ldr	r1, [pc, #676]	@ (8001124 <HAL_RCC_OscConfig+0x340>)
 8000e80:	400a      	ands	r2, r1
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	e01e      	b.n	8000ec4 <HAL_RCC_OscConfig+0xe0>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b05      	cmp	r3, #5
 8000e8c:	d10e      	bne.n	8000eac <HAL_RCC_OscConfig+0xc8>
 8000e8e:	4ba3      	ldr	r3, [pc, #652]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4ba2      	ldr	r3, [pc, #648]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000e94:	2180      	movs	r1, #128	@ 0x80
 8000e96:	02c9      	lsls	r1, r1, #11
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	4b9f      	ldr	r3, [pc, #636]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b9e      	ldr	r3, [pc, #632]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000ea2:	2180      	movs	r1, #128	@ 0x80
 8000ea4:	0249      	lsls	r1, r1, #9
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	e00b      	b.n	8000ec4 <HAL_RCC_OscConfig+0xe0>
 8000eac:	4b9b      	ldr	r3, [pc, #620]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b9a      	ldr	r3, [pc, #616]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000eb2:	499b      	ldr	r1, [pc, #620]	@ (8001120 <HAL_RCC_OscConfig+0x33c>)
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	4b98      	ldr	r3, [pc, #608]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b97      	ldr	r3, [pc, #604]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000ebe:	4999      	ldr	r1, [pc, #612]	@ (8001124 <HAL_RCC_OscConfig+0x340>)
 8000ec0:	400a      	ands	r2, r1
 8000ec2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d014      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fd20 	bl	8000910 <HAL_GetTick>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed4:	e008      	b.n	8000ee8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ed6:	f7ff fd1b 	bl	8000910 <HAL_GetTick>
 8000eda:	0002      	movs	r2, r0
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	2b64      	cmp	r3, #100	@ 0x64
 8000ee2:	d901      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e2fd      	b.n	80014e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee8:	4b8c      	ldr	r3, [pc, #560]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	2380      	movs	r3, #128	@ 0x80
 8000eee:	029b      	lsls	r3, r3, #10
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d0f0      	beq.n	8000ed6 <HAL_RCC_OscConfig+0xf2>
 8000ef4:	e015      	b.n	8000f22 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef6:	f7ff fd0b 	bl	8000910 <HAL_GetTick>
 8000efa:	0003      	movs	r3, r0
 8000efc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000efe:	e008      	b.n	8000f12 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f00:	f7ff fd06 	bl	8000910 <HAL_GetTick>
 8000f04:	0002      	movs	r2, r0
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2b64      	cmp	r3, #100	@ 0x64
 8000f0c:	d901      	bls.n	8000f12 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e2e8      	b.n	80014e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f12:	4b82      	ldr	r3, [pc, #520]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	2380      	movs	r3, #128	@ 0x80
 8000f18:	029b      	lsls	r3, r3, #10
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	d1f0      	bne.n	8000f00 <HAL_RCC_OscConfig+0x11c>
 8000f1e:	e000      	b.n	8000f22 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f20:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2202      	movs	r2, #2
 8000f28:	4013      	ands	r3, r2
 8000f2a:	d100      	bne.n	8000f2e <HAL_RCC_OscConfig+0x14a>
 8000f2c:	e06c      	b.n	8001008 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f2e:	4b7b      	ldr	r3, [pc, #492]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	220c      	movs	r2, #12
 8000f34:	4013      	ands	r3, r2
 8000f36:	d00e      	beq.n	8000f56 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f38:	4b78      	ldr	r3, [pc, #480]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	220c      	movs	r2, #12
 8000f3e:	4013      	ands	r3, r2
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d11f      	bne.n	8000f84 <HAL_RCC_OscConfig+0x1a0>
 8000f44:	4b75      	ldr	r3, [pc, #468]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	23c0      	movs	r3, #192	@ 0xc0
 8000f4a:	025b      	lsls	r3, r3, #9
 8000f4c:	401a      	ands	r2, r3
 8000f4e:	2380      	movs	r3, #128	@ 0x80
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d116      	bne.n	8000f84 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f56:	4b71      	ldr	r3, [pc, #452]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d005      	beq.n	8000f6c <HAL_RCC_OscConfig+0x188>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d001      	beq.n	8000f6c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e2bb      	b.n	80014e4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f6c:	4b6b      	ldr	r3, [pc, #428]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	22f8      	movs	r2, #248	@ 0xf8
 8000f72:	4393      	bics	r3, r2
 8000f74:	0019      	movs	r1, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	00da      	lsls	r2, r3, #3
 8000f7c:	4b67      	ldr	r3, [pc, #412]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f82:	e041      	b.n	8001008 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d024      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f8c:	4b63      	ldr	r3, [pc, #396]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b62      	ldr	r3, [pc, #392]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000f92:	2101      	movs	r1, #1
 8000f94:	430a      	orrs	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff fcba 	bl	8000910 <HAL_GetTick>
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fa2:	f7ff fcb5 	bl	8000910 <HAL_GetTick>
 8000fa6:	0002      	movs	r2, r0
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e297      	b.n	80014e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb4:	4b59      	ldr	r3, [pc, #356]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2202      	movs	r2, #2
 8000fba:	4013      	ands	r3, r2
 8000fbc:	d0f1      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fbe:	4b57      	ldr	r3, [pc, #348]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	22f8      	movs	r2, #248	@ 0xf8
 8000fc4:	4393      	bics	r3, r2
 8000fc6:	0019      	movs	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	00da      	lsls	r2, r3, #3
 8000fce:	4b53      	ldr	r3, [pc, #332]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	e018      	b.n	8001008 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fd6:	4b51      	ldr	r3, [pc, #324]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b50      	ldr	r3, [pc, #320]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8000fdc:	2101      	movs	r1, #1
 8000fde:	438a      	bics	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe2:	f7ff fc95 	bl	8000910 <HAL_GetTick>
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fec:	f7ff fc90 	bl	8000910 <HAL_GetTick>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e272      	b.n	80014e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ffe:	4b47      	ldr	r3, [pc, #284]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2202      	movs	r2, #2
 8001004:	4013      	ands	r3, r2
 8001006:	d1f1      	bne.n	8000fec <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2208      	movs	r2, #8
 800100e:	4013      	ands	r3, r2
 8001010:	d036      	beq.n	8001080 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d019      	beq.n	800104e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800101a:	4b40      	ldr	r3, [pc, #256]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 800101c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800101e:	4b3f      	ldr	r3, [pc, #252]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8001020:	2101      	movs	r1, #1
 8001022:	430a      	orrs	r2, r1
 8001024:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001026:	f7ff fc73 	bl	8000910 <HAL_GetTick>
 800102a:	0003      	movs	r3, r0
 800102c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001030:	f7ff fc6e 	bl	8000910 <HAL_GetTick>
 8001034:	0002      	movs	r2, r0
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e250      	b.n	80014e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001042:	4b36      	ldr	r3, [pc, #216]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8001044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001046:	2202      	movs	r2, #2
 8001048:	4013      	ands	r3, r2
 800104a:	d0f1      	beq.n	8001030 <HAL_RCC_OscConfig+0x24c>
 800104c:	e018      	b.n	8001080 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800104e:	4b33      	ldr	r3, [pc, #204]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8001050:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8001054:	2101      	movs	r1, #1
 8001056:	438a      	bics	r2, r1
 8001058:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105a:	f7ff fc59 	bl	8000910 <HAL_GetTick>
 800105e:	0003      	movs	r3, r0
 8001060:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001064:	f7ff fc54 	bl	8000910 <HAL_GetTick>
 8001068:	0002      	movs	r2, r0
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e236      	b.n	80014e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001076:	4b29      	ldr	r3, [pc, #164]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8001078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800107a:	2202      	movs	r2, #2
 800107c:	4013      	ands	r3, r2
 800107e:	d1f1      	bne.n	8001064 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2204      	movs	r2, #4
 8001086:	4013      	ands	r3, r2
 8001088:	d100      	bne.n	800108c <HAL_RCC_OscConfig+0x2a8>
 800108a:	e0b5      	b.n	80011f8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800108c:	201f      	movs	r0, #31
 800108e:	183b      	adds	r3, r7, r0
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001094:	4b21      	ldr	r3, [pc, #132]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8001096:	69da      	ldr	r2, [r3, #28]
 8001098:	2380      	movs	r3, #128	@ 0x80
 800109a:	055b      	lsls	r3, r3, #21
 800109c:	4013      	ands	r3, r2
 800109e:	d110      	bne.n	80010c2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 80010a2:	69da      	ldr	r2, [r3, #28]
 80010a4:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 80010a6:	2180      	movs	r1, #128	@ 0x80
 80010a8:	0549      	lsls	r1, r1, #21
 80010aa:	430a      	orrs	r2, r1
 80010ac:	61da      	str	r2, [r3, #28]
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 80010b0:	69da      	ldr	r2, [r3, #28]
 80010b2:	2380      	movs	r3, #128	@ 0x80
 80010b4:	055b      	lsls	r3, r3, #21
 80010b6:	4013      	ands	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010bc:	183b      	adds	r3, r7, r0
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c2:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <HAL_RCC_OscConfig+0x344>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	2380      	movs	r3, #128	@ 0x80
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4013      	ands	r3, r2
 80010cc:	d11a      	bne.n	8001104 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ce:	4b16      	ldr	r3, [pc, #88]	@ (8001128 <HAL_RCC_OscConfig+0x344>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <HAL_RCC_OscConfig+0x344>)
 80010d4:	2180      	movs	r1, #128	@ 0x80
 80010d6:	0049      	lsls	r1, r1, #1
 80010d8:	430a      	orrs	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010dc:	f7ff fc18 	bl	8000910 <HAL_GetTick>
 80010e0:	0003      	movs	r3, r0
 80010e2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010e6:	f7ff fc13 	bl	8000910 <HAL_GetTick>
 80010ea:	0002      	movs	r2, r0
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b64      	cmp	r3, #100	@ 0x64
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e1f5      	b.n	80014e4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <HAL_RCC_OscConfig+0x344>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	2380      	movs	r3, #128	@ 0x80
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4013      	ands	r3, r2
 8001102:	d0f0      	beq.n	80010e6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d10f      	bne.n	800112c <HAL_RCC_OscConfig+0x348>
 800110c:	4b03      	ldr	r3, [pc, #12]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 800110e:	6a1a      	ldr	r2, [r3, #32]
 8001110:	4b02      	ldr	r3, [pc, #8]	@ (800111c <HAL_RCC_OscConfig+0x338>)
 8001112:	2101      	movs	r1, #1
 8001114:	430a      	orrs	r2, r1
 8001116:	621a      	str	r2, [r3, #32]
 8001118:	e036      	b.n	8001188 <HAL_RCC_OscConfig+0x3a4>
 800111a:	46c0      	nop			@ (mov r8, r8)
 800111c:	40021000 	.word	0x40021000
 8001120:	fffeffff 	.word	0xfffeffff
 8001124:	fffbffff 	.word	0xfffbffff
 8001128:	40007000 	.word	0x40007000
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10c      	bne.n	800114e <HAL_RCC_OscConfig+0x36a>
 8001134:	4bca      	ldr	r3, [pc, #808]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001136:	6a1a      	ldr	r2, [r3, #32]
 8001138:	4bc9      	ldr	r3, [pc, #804]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 800113a:	2101      	movs	r1, #1
 800113c:	438a      	bics	r2, r1
 800113e:	621a      	str	r2, [r3, #32]
 8001140:	4bc7      	ldr	r3, [pc, #796]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001142:	6a1a      	ldr	r2, [r3, #32]
 8001144:	4bc6      	ldr	r3, [pc, #792]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001146:	2104      	movs	r1, #4
 8001148:	438a      	bics	r2, r1
 800114a:	621a      	str	r2, [r3, #32]
 800114c:	e01c      	b.n	8001188 <HAL_RCC_OscConfig+0x3a4>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	2b05      	cmp	r3, #5
 8001154:	d10c      	bne.n	8001170 <HAL_RCC_OscConfig+0x38c>
 8001156:	4bc2      	ldr	r3, [pc, #776]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001158:	6a1a      	ldr	r2, [r3, #32]
 800115a:	4bc1      	ldr	r3, [pc, #772]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 800115c:	2104      	movs	r1, #4
 800115e:	430a      	orrs	r2, r1
 8001160:	621a      	str	r2, [r3, #32]
 8001162:	4bbf      	ldr	r3, [pc, #764]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001164:	6a1a      	ldr	r2, [r3, #32]
 8001166:	4bbe      	ldr	r3, [pc, #760]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001168:	2101      	movs	r1, #1
 800116a:	430a      	orrs	r2, r1
 800116c:	621a      	str	r2, [r3, #32]
 800116e:	e00b      	b.n	8001188 <HAL_RCC_OscConfig+0x3a4>
 8001170:	4bbb      	ldr	r3, [pc, #748]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001172:	6a1a      	ldr	r2, [r3, #32]
 8001174:	4bba      	ldr	r3, [pc, #744]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001176:	2101      	movs	r1, #1
 8001178:	438a      	bics	r2, r1
 800117a:	621a      	str	r2, [r3, #32]
 800117c:	4bb8      	ldr	r3, [pc, #736]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 800117e:	6a1a      	ldr	r2, [r3, #32]
 8001180:	4bb7      	ldr	r3, [pc, #732]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001182:	2104      	movs	r1, #4
 8001184:	438a      	bics	r2, r1
 8001186:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d014      	beq.n	80011ba <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001190:	f7ff fbbe 	bl	8000910 <HAL_GetTick>
 8001194:	0003      	movs	r3, r0
 8001196:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001198:	e009      	b.n	80011ae <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800119a:	f7ff fbb9 	bl	8000910 <HAL_GetTick>
 800119e:	0002      	movs	r2, r0
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	4aaf      	ldr	r2, [pc, #700]	@ (8001464 <HAL_RCC_OscConfig+0x680>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e19a      	b.n	80014e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ae:	4bac      	ldr	r3, [pc, #688]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	2202      	movs	r2, #2
 80011b4:	4013      	ands	r3, r2
 80011b6:	d0f0      	beq.n	800119a <HAL_RCC_OscConfig+0x3b6>
 80011b8:	e013      	b.n	80011e2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ba:	f7ff fba9 	bl	8000910 <HAL_GetTick>
 80011be:	0003      	movs	r3, r0
 80011c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011c2:	e009      	b.n	80011d8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011c4:	f7ff fba4 	bl	8000910 <HAL_GetTick>
 80011c8:	0002      	movs	r2, r0
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	4aa5      	ldr	r2, [pc, #660]	@ (8001464 <HAL_RCC_OscConfig+0x680>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e185      	b.n	80014e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d8:	4ba1      	ldr	r3, [pc, #644]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	2202      	movs	r2, #2
 80011de:	4013      	ands	r3, r2
 80011e0:	d1f0      	bne.n	80011c4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011e2:	231f      	movs	r3, #31
 80011e4:	18fb      	adds	r3, r7, r3
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d105      	bne.n	80011f8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ec:	4b9c      	ldr	r3, [pc, #624]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 80011ee:	69da      	ldr	r2, [r3, #28]
 80011f0:	4b9b      	ldr	r3, [pc, #620]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 80011f2:	499d      	ldr	r1, [pc, #628]	@ (8001468 <HAL_RCC_OscConfig+0x684>)
 80011f4:	400a      	ands	r2, r1
 80011f6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2210      	movs	r2, #16
 80011fe:	4013      	ands	r3, r2
 8001200:	d063      	beq.n	80012ca <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d12a      	bne.n	8001260 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800120a:	4b95      	ldr	r3, [pc, #596]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 800120c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800120e:	4b94      	ldr	r3, [pc, #592]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001210:	2104      	movs	r1, #4
 8001212:	430a      	orrs	r2, r1
 8001214:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001216:	4b92      	ldr	r3, [pc, #584]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001218:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800121a:	4b91      	ldr	r3, [pc, #580]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 800121c:	2101      	movs	r1, #1
 800121e:	430a      	orrs	r2, r1
 8001220:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001222:	f7ff fb75 	bl	8000910 <HAL_GetTick>
 8001226:	0003      	movs	r3, r0
 8001228:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800122c:	f7ff fb70 	bl	8000910 <HAL_GetTick>
 8001230:	0002      	movs	r2, r0
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e152      	b.n	80014e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800123e:	4b88      	ldr	r3, [pc, #544]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001242:	2202      	movs	r2, #2
 8001244:	4013      	ands	r3, r2
 8001246:	d0f1      	beq.n	800122c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001248:	4b85      	ldr	r3, [pc, #532]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 800124a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800124c:	22f8      	movs	r2, #248	@ 0xf8
 800124e:	4393      	bics	r3, r2
 8001250:	0019      	movs	r1, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	00da      	lsls	r2, r3, #3
 8001258:	4b81      	ldr	r3, [pc, #516]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 800125a:	430a      	orrs	r2, r1
 800125c:	635a      	str	r2, [r3, #52]	@ 0x34
 800125e:	e034      	b.n	80012ca <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	3305      	adds	r3, #5
 8001266:	d111      	bne.n	800128c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001268:	4b7d      	ldr	r3, [pc, #500]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 800126a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800126c:	4b7c      	ldr	r3, [pc, #496]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 800126e:	2104      	movs	r1, #4
 8001270:	438a      	bics	r2, r1
 8001272:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001274:	4b7a      	ldr	r3, [pc, #488]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001278:	22f8      	movs	r2, #248	@ 0xf8
 800127a:	4393      	bics	r3, r2
 800127c:	0019      	movs	r1, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	00da      	lsls	r2, r3, #3
 8001284:	4b76      	ldr	r3, [pc, #472]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001286:	430a      	orrs	r2, r1
 8001288:	635a      	str	r2, [r3, #52]	@ 0x34
 800128a:	e01e      	b.n	80012ca <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800128c:	4b74      	ldr	r3, [pc, #464]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 800128e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001290:	4b73      	ldr	r3, [pc, #460]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001292:	2104      	movs	r1, #4
 8001294:	430a      	orrs	r2, r1
 8001296:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001298:	4b71      	ldr	r3, [pc, #452]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 800129a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800129c:	4b70      	ldr	r3, [pc, #448]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 800129e:	2101      	movs	r1, #1
 80012a0:	438a      	bics	r2, r1
 80012a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a4:	f7ff fb34 	bl	8000910 <HAL_GetTick>
 80012a8:	0003      	movs	r3, r0
 80012aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012ae:	f7ff fb2f 	bl	8000910 <HAL_GetTick>
 80012b2:	0002      	movs	r2, r0
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e111      	b.n	80014e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012c0:	4b67      	ldr	r3, [pc, #412]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 80012c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012c4:	2202      	movs	r2, #2
 80012c6:	4013      	ands	r3, r2
 80012c8:	d1f1      	bne.n	80012ae <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2220      	movs	r2, #32
 80012d0:	4013      	ands	r3, r2
 80012d2:	d05c      	beq.n	800138e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80012d4:	4b62      	ldr	r3, [pc, #392]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	220c      	movs	r2, #12
 80012da:	4013      	ands	r3, r2
 80012dc:	2b0c      	cmp	r3, #12
 80012de:	d00e      	beq.n	80012fe <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80012e0:	4b5f      	ldr	r3, [pc, #380]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	220c      	movs	r2, #12
 80012e6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	d114      	bne.n	8001316 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80012ec:	4b5c      	ldr	r3, [pc, #368]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	23c0      	movs	r3, #192	@ 0xc0
 80012f2:	025b      	lsls	r3, r3, #9
 80012f4:	401a      	ands	r2, r3
 80012f6:	23c0      	movs	r3, #192	@ 0xc0
 80012f8:	025b      	lsls	r3, r3, #9
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d10b      	bne.n	8001316 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80012fe:	4b58      	ldr	r3, [pc, #352]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001302:	2380      	movs	r3, #128	@ 0x80
 8001304:	029b      	lsls	r3, r3, #10
 8001306:	4013      	ands	r3, r2
 8001308:	d040      	beq.n	800138c <HAL_RCC_OscConfig+0x5a8>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d03c      	beq.n	800138c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e0e6      	b.n	80014e4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d01b      	beq.n	8001356 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800131e:	4b50      	ldr	r3, [pc, #320]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001320:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001322:	4b4f      	ldr	r3, [pc, #316]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001324:	2180      	movs	r1, #128	@ 0x80
 8001326:	0249      	lsls	r1, r1, #9
 8001328:	430a      	orrs	r2, r1
 800132a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff faf0 	bl	8000910 <HAL_GetTick>
 8001330:	0003      	movs	r3, r0
 8001332:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001336:	f7ff faeb 	bl	8000910 <HAL_GetTick>
 800133a:	0002      	movs	r2, r0
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e0cd      	b.n	80014e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001348:	4b45      	ldr	r3, [pc, #276]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 800134a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800134c:	2380      	movs	r3, #128	@ 0x80
 800134e:	029b      	lsls	r3, r3, #10
 8001350:	4013      	ands	r3, r2
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x552>
 8001354:	e01b      	b.n	800138e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001356:	4b42      	ldr	r3, [pc, #264]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001358:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800135a:	4b41      	ldr	r3, [pc, #260]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 800135c:	4943      	ldr	r1, [pc, #268]	@ (800146c <HAL_RCC_OscConfig+0x688>)
 800135e:	400a      	ands	r2, r1
 8001360:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001362:	f7ff fad5 	bl	8000910 <HAL_GetTick>
 8001366:	0003      	movs	r3, r0
 8001368:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800136c:	f7ff fad0 	bl	8000910 <HAL_GetTick>
 8001370:	0002      	movs	r2, r0
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e0b2      	b.n	80014e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800137e:	4b38      	ldr	r3, [pc, #224]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001380:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001382:	2380      	movs	r3, #128	@ 0x80
 8001384:	029b      	lsls	r3, r3, #10
 8001386:	4013      	ands	r3, r2
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0x588>
 800138a:	e000      	b.n	800138e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800138c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001392:	2b00      	cmp	r3, #0
 8001394:	d100      	bne.n	8001398 <HAL_RCC_OscConfig+0x5b4>
 8001396:	e0a4      	b.n	80014e2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001398:	4b31      	ldr	r3, [pc, #196]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	220c      	movs	r2, #12
 800139e:	4013      	ands	r3, r2
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	d100      	bne.n	80013a6 <HAL_RCC_OscConfig+0x5c2>
 80013a4:	e078      	b.n	8001498 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d14c      	bne.n	8001448 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 80013b4:	492e      	ldr	r1, [pc, #184]	@ (8001470 <HAL_RCC_OscConfig+0x68c>)
 80013b6:	400a      	ands	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ba:	f7ff faa9 	bl	8000910 <HAL_GetTick>
 80013be:	0003      	movs	r3, r0
 80013c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c4:	f7ff faa4 	bl	8000910 <HAL_GetTick>
 80013c8:	0002      	movs	r2, r0
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e086      	b.n	80014e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013d6:	4b22      	ldr	r3, [pc, #136]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	2380      	movs	r3, #128	@ 0x80
 80013dc:	049b      	lsls	r3, r3, #18
 80013de:	4013      	ands	r3, r2
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 80013e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013e6:	220f      	movs	r2, #15
 80013e8:	4393      	bics	r3, r2
 80013ea:	0019      	movs	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 80013f2:	430a      	orrs	r2, r1
 80013f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001474 <HAL_RCC_OscConfig+0x690>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	0019      	movs	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001408:	431a      	orrs	r2, r3
 800140a:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 800140c:	430a      	orrs	r2, r1
 800140e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001410:	4b13      	ldr	r3, [pc, #76]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001416:	2180      	movs	r1, #128	@ 0x80
 8001418:	0449      	lsls	r1, r1, #17
 800141a:	430a      	orrs	r2, r1
 800141c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141e:	f7ff fa77 	bl	8000910 <HAL_GetTick>
 8001422:	0003      	movs	r3, r0
 8001424:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001428:	f7ff fa72 	bl	8000910 <HAL_GetTick>
 800142c:	0002      	movs	r2, r0
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e054      	b.n	80014e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800143a:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	2380      	movs	r3, #128	@ 0x80
 8001440:	049b      	lsls	r3, r3, #18
 8001442:	4013      	ands	r3, r2
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0x644>
 8001446:	e04c      	b.n	80014e2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001448:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <HAL_RCC_OscConfig+0x67c>)
 800144e:	4908      	ldr	r1, [pc, #32]	@ (8001470 <HAL_RCC_OscConfig+0x68c>)
 8001450:	400a      	ands	r2, r1
 8001452:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fa5c 	bl	8000910 <HAL_GetTick>
 8001458:	0003      	movs	r3, r0
 800145a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800145c:	e015      	b.n	800148a <HAL_RCC_OscConfig+0x6a6>
 800145e:	46c0      	nop			@ (mov r8, r8)
 8001460:	40021000 	.word	0x40021000
 8001464:	00001388 	.word	0x00001388
 8001468:	efffffff 	.word	0xefffffff
 800146c:	fffeffff 	.word	0xfffeffff
 8001470:	feffffff 	.word	0xfeffffff
 8001474:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001478:	f7ff fa4a 	bl	8000910 <HAL_GetTick>
 800147c:	0002      	movs	r2, r0
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e02c      	b.n	80014e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148a:	4b18      	ldr	r3, [pc, #96]	@ (80014ec <HAL_RCC_OscConfig+0x708>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	2380      	movs	r3, #128	@ 0x80
 8001490:	049b      	lsls	r3, r3, #18
 8001492:	4013      	ands	r3, r2
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x694>
 8001496:	e024      	b.n	80014e2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e01f      	b.n	80014e4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014a4:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <HAL_RCC_OscConfig+0x708>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014aa:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <HAL_RCC_OscConfig+0x708>)
 80014ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ae:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	23c0      	movs	r3, #192	@ 0xc0
 80014b4:	025b      	lsls	r3, r3, #9
 80014b6:	401a      	ands	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014bc:	429a      	cmp	r2, r3
 80014be:	d10e      	bne.n	80014de <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	220f      	movs	r2, #15
 80014c4:	401a      	ands	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d107      	bne.n	80014de <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	23f0      	movs	r3, #240	@ 0xf0
 80014d2:	039b      	lsls	r3, r3, #14
 80014d4:	401a      	ands	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014da:	429a      	cmp	r2, r3
 80014dc:	d001      	beq.n	80014e2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	0018      	movs	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b008      	add	sp, #32
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40021000 	.word	0x40021000

080014f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e0bf      	b.n	8001684 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001504:	4b61      	ldr	r3, [pc, #388]	@ (800168c <HAL_RCC_ClockConfig+0x19c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2201      	movs	r2, #1
 800150a:	4013      	ands	r3, r2
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d911      	bls.n	8001536 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001512:	4b5e      	ldr	r3, [pc, #376]	@ (800168c <HAL_RCC_ClockConfig+0x19c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2201      	movs	r2, #1
 8001518:	4393      	bics	r3, r2
 800151a:	0019      	movs	r1, r3
 800151c:	4b5b      	ldr	r3, [pc, #364]	@ (800168c <HAL_RCC_ClockConfig+0x19c>)
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001524:	4b59      	ldr	r3, [pc, #356]	@ (800168c <HAL_RCC_ClockConfig+0x19c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2201      	movs	r2, #1
 800152a:	4013      	ands	r3, r2
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d001      	beq.n	8001536 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e0a6      	b.n	8001684 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2202      	movs	r2, #2
 800153c:	4013      	ands	r3, r2
 800153e:	d015      	beq.n	800156c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2204      	movs	r2, #4
 8001546:	4013      	ands	r3, r2
 8001548:	d006      	beq.n	8001558 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800154a:	4b51      	ldr	r3, [pc, #324]	@ (8001690 <HAL_RCC_ClockConfig+0x1a0>)
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	4b50      	ldr	r3, [pc, #320]	@ (8001690 <HAL_RCC_ClockConfig+0x1a0>)
 8001550:	21e0      	movs	r1, #224	@ 0xe0
 8001552:	00c9      	lsls	r1, r1, #3
 8001554:	430a      	orrs	r2, r1
 8001556:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001558:	4b4d      	ldr	r3, [pc, #308]	@ (8001690 <HAL_RCC_ClockConfig+0x1a0>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	22f0      	movs	r2, #240	@ 0xf0
 800155e:	4393      	bics	r3, r2
 8001560:	0019      	movs	r1, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	4b4a      	ldr	r3, [pc, #296]	@ (8001690 <HAL_RCC_ClockConfig+0x1a0>)
 8001568:	430a      	orrs	r2, r1
 800156a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2201      	movs	r2, #1
 8001572:	4013      	ands	r3, r2
 8001574:	d04c      	beq.n	8001610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d107      	bne.n	800158e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157e:	4b44      	ldr	r3, [pc, #272]	@ (8001690 <HAL_RCC_ClockConfig+0x1a0>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	2380      	movs	r3, #128	@ 0x80
 8001584:	029b      	lsls	r3, r3, #10
 8001586:	4013      	ands	r3, r2
 8001588:	d120      	bne.n	80015cc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e07a      	b.n	8001684 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d107      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001596:	4b3e      	ldr	r3, [pc, #248]	@ (8001690 <HAL_RCC_ClockConfig+0x1a0>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	2380      	movs	r3, #128	@ 0x80
 800159c:	049b      	lsls	r3, r3, #18
 800159e:	4013      	ands	r3, r2
 80015a0:	d114      	bne.n	80015cc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e06e      	b.n	8001684 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d107      	bne.n	80015be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015ae:	4b38      	ldr	r3, [pc, #224]	@ (8001690 <HAL_RCC_ClockConfig+0x1a0>)
 80015b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015b2:	2380      	movs	r3, #128	@ 0x80
 80015b4:	029b      	lsls	r3, r3, #10
 80015b6:	4013      	ands	r3, r2
 80015b8:	d108      	bne.n	80015cc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e062      	b.n	8001684 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015be:	4b34      	ldr	r3, [pc, #208]	@ (8001690 <HAL_RCC_ClockConfig+0x1a0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2202      	movs	r2, #2
 80015c4:	4013      	ands	r3, r2
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e05b      	b.n	8001684 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015cc:	4b30      	ldr	r3, [pc, #192]	@ (8001690 <HAL_RCC_ClockConfig+0x1a0>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2203      	movs	r2, #3
 80015d2:	4393      	bics	r3, r2
 80015d4:	0019      	movs	r1, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	4b2d      	ldr	r3, [pc, #180]	@ (8001690 <HAL_RCC_ClockConfig+0x1a0>)
 80015dc:	430a      	orrs	r2, r1
 80015de:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015e0:	f7ff f996 	bl	8000910 <HAL_GetTick>
 80015e4:	0003      	movs	r3, r0
 80015e6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e8:	e009      	b.n	80015fe <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ea:	f7ff f991 	bl	8000910 <HAL_GetTick>
 80015ee:	0002      	movs	r2, r0
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	4a27      	ldr	r2, [pc, #156]	@ (8001694 <HAL_RCC_ClockConfig+0x1a4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e042      	b.n	8001684 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fe:	4b24      	ldr	r3, [pc, #144]	@ (8001690 <HAL_RCC_ClockConfig+0x1a0>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	220c      	movs	r2, #12
 8001604:	401a      	ands	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	429a      	cmp	r2, r3
 800160e:	d1ec      	bne.n	80015ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001610:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <HAL_RCC_ClockConfig+0x19c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2201      	movs	r2, #1
 8001616:	4013      	ands	r3, r2
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d211      	bcs.n	8001642 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161e:	4b1b      	ldr	r3, [pc, #108]	@ (800168c <HAL_RCC_ClockConfig+0x19c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2201      	movs	r2, #1
 8001624:	4393      	bics	r3, r2
 8001626:	0019      	movs	r1, r3
 8001628:	4b18      	ldr	r3, [pc, #96]	@ (800168c <HAL_RCC_ClockConfig+0x19c>)
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001630:	4b16      	ldr	r3, [pc, #88]	@ (800168c <HAL_RCC_ClockConfig+0x19c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2201      	movs	r2, #1
 8001636:	4013      	ands	r3, r2
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d001      	beq.n	8001642 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e020      	b.n	8001684 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2204      	movs	r2, #4
 8001648:	4013      	ands	r3, r2
 800164a:	d009      	beq.n	8001660 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800164c:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <HAL_RCC_ClockConfig+0x1a0>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	4a11      	ldr	r2, [pc, #68]	@ (8001698 <HAL_RCC_ClockConfig+0x1a8>)
 8001652:	4013      	ands	r3, r2
 8001654:	0019      	movs	r1, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68da      	ldr	r2, [r3, #12]
 800165a:	4b0d      	ldr	r3, [pc, #52]	@ (8001690 <HAL_RCC_ClockConfig+0x1a0>)
 800165c:	430a      	orrs	r2, r1
 800165e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001660:	f000 f820 	bl	80016a4 <HAL_RCC_GetSysClockFreq>
 8001664:	0001      	movs	r1, r0
 8001666:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <HAL_RCC_ClockConfig+0x1a0>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	091b      	lsrs	r3, r3, #4
 800166c:	220f      	movs	r2, #15
 800166e:	4013      	ands	r3, r2
 8001670:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <HAL_RCC_ClockConfig+0x1ac>)
 8001672:	5cd3      	ldrb	r3, [r2, r3]
 8001674:	000a      	movs	r2, r1
 8001676:	40da      	lsrs	r2, r3
 8001678:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <HAL_RCC_ClockConfig+0x1b0>)
 800167a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800167c:	2000      	movs	r0, #0
 800167e:	f7ff f901 	bl	8000884 <HAL_InitTick>
  
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	b004      	add	sp, #16
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40022000 	.word	0x40022000
 8001690:	40021000 	.word	0x40021000
 8001694:	00001388 	.word	0x00001388
 8001698:	fffff8ff 	.word	0xfffff8ff
 800169c:	08002348 	.word	0x08002348
 80016a0:	20000000 	.word	0x20000000

080016a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80016be:	4b2d      	ldr	r3, [pc, #180]	@ (8001774 <HAL_RCC_GetSysClockFreq+0xd0>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	220c      	movs	r2, #12
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b0c      	cmp	r3, #12
 80016cc:	d046      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0xb8>
 80016ce:	d848      	bhi.n	8001762 <HAL_RCC_GetSysClockFreq+0xbe>
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d002      	beq.n	80016da <HAL_RCC_GetSysClockFreq+0x36>
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d003      	beq.n	80016e0 <HAL_RCC_GetSysClockFreq+0x3c>
 80016d8:	e043      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016da:	4b27      	ldr	r3, [pc, #156]	@ (8001778 <HAL_RCC_GetSysClockFreq+0xd4>)
 80016dc:	613b      	str	r3, [r7, #16]
      break;
 80016de:	e043      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	0c9b      	lsrs	r3, r3, #18
 80016e4:	220f      	movs	r2, #15
 80016e6:	4013      	ands	r3, r2
 80016e8:	4a24      	ldr	r2, [pc, #144]	@ (800177c <HAL_RCC_GetSysClockFreq+0xd8>)
 80016ea:	5cd3      	ldrb	r3, [r2, r3]
 80016ec:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80016ee:	4b21      	ldr	r3, [pc, #132]	@ (8001774 <HAL_RCC_GetSysClockFreq+0xd0>)
 80016f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f2:	220f      	movs	r2, #15
 80016f4:	4013      	ands	r3, r2
 80016f6:	4a22      	ldr	r2, [pc, #136]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xdc>)
 80016f8:	5cd3      	ldrb	r3, [r2, r3]
 80016fa:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	23c0      	movs	r3, #192	@ 0xc0
 8001700:	025b      	lsls	r3, r3, #9
 8001702:	401a      	ands	r2, r3
 8001704:	2380      	movs	r3, #128	@ 0x80
 8001706:	025b      	lsls	r3, r3, #9
 8001708:	429a      	cmp	r2, r3
 800170a:	d109      	bne.n	8001720 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	481a      	ldr	r0, [pc, #104]	@ (8001778 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001710:	f7fe fcfa 	bl	8000108 <__udivsi3>
 8001714:	0003      	movs	r3, r0
 8001716:	001a      	movs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4353      	muls	r3, r2
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	e01a      	b.n	8001756 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	23c0      	movs	r3, #192	@ 0xc0
 8001724:	025b      	lsls	r3, r3, #9
 8001726:	401a      	ands	r2, r3
 8001728:	23c0      	movs	r3, #192	@ 0xc0
 800172a:	025b      	lsls	r3, r3, #9
 800172c:	429a      	cmp	r2, r3
 800172e:	d109      	bne.n	8001744 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	4814      	ldr	r0, [pc, #80]	@ (8001784 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001734:	f7fe fce8 	bl	8000108 <__udivsi3>
 8001738:	0003      	movs	r3, r0
 800173a:	001a      	movs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4353      	muls	r3, r2
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	e008      	b.n	8001756 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	480c      	ldr	r0, [pc, #48]	@ (8001778 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001748:	f7fe fcde 	bl	8000108 <__udivsi3>
 800174c:	0003      	movs	r3, r0
 800174e:	001a      	movs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4353      	muls	r3, r2
 8001754:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	613b      	str	r3, [r7, #16]
      break;
 800175a:	e005      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800175c:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <HAL_RCC_GetSysClockFreq+0xe0>)
 800175e:	613b      	str	r3, [r7, #16]
      break;
 8001760:	e002      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001762:	4b05      	ldr	r3, [pc, #20]	@ (8001778 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001764:	613b      	str	r3, [r7, #16]
      break;
 8001766:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001768:	693b      	ldr	r3, [r7, #16]
}
 800176a:	0018      	movs	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	b006      	add	sp, #24
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			@ (mov r8, r8)
 8001774:	40021000 	.word	0x40021000
 8001778:	007a1200 	.word	0x007a1200
 800177c:	08002360 	.word	0x08002360
 8001780:	08002370 	.word	0x08002370
 8001784:	02dc6c00 	.word	0x02dc6c00

08001788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800178c:	4b02      	ldr	r3, [pc, #8]	@ (8001798 <HAL_RCC_GetHCLKFreq+0x10>)
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	0018      	movs	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			@ (mov r8, r8)
 8001798:	20000000 	.word	0x20000000

0800179c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80017a0:	f7ff fff2 	bl	8001788 <HAL_RCC_GetHCLKFreq>
 80017a4:	0001      	movs	r1, r0
 80017a6:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	0a1b      	lsrs	r3, r3, #8
 80017ac:	2207      	movs	r2, #7
 80017ae:	4013      	ands	r3, r2
 80017b0:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80017b2:	5cd3      	ldrb	r3, [r2, r3]
 80017b4:	40d9      	lsrs	r1, r3
 80017b6:	000b      	movs	r3, r1
}    
 80017b8:	0018      	movs	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			@ (mov r8, r8)
 80017c0:	40021000 	.word	0x40021000
 80017c4:	08002358 	.word	0x08002358

080017c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	2380      	movs	r3, #128	@ 0x80
 80017de:	025b      	lsls	r3, r3, #9
 80017e0:	4013      	ands	r3, r2
 80017e2:	d100      	bne.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80017e4:	e08e      	b.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80017e6:	2017      	movs	r0, #23
 80017e8:	183b      	adds	r3, r7, r0
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ee:	4b67      	ldr	r3, [pc, #412]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017f0:	69da      	ldr	r2, [r3, #28]
 80017f2:	2380      	movs	r3, #128	@ 0x80
 80017f4:	055b      	lsls	r3, r3, #21
 80017f6:	4013      	ands	r3, r2
 80017f8:	d110      	bne.n	800181c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b64      	ldr	r3, [pc, #400]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017fc:	69da      	ldr	r2, [r3, #28]
 80017fe:	4b63      	ldr	r3, [pc, #396]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001800:	2180      	movs	r1, #128	@ 0x80
 8001802:	0549      	lsls	r1, r1, #21
 8001804:	430a      	orrs	r2, r1
 8001806:	61da      	str	r2, [r3, #28]
 8001808:	4b60      	ldr	r3, [pc, #384]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800180a:	69da      	ldr	r2, [r3, #28]
 800180c:	2380      	movs	r3, #128	@ 0x80
 800180e:	055b      	lsls	r3, r3, #21
 8001810:	4013      	ands	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001816:	183b      	adds	r3, r7, r0
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181c:	4b5c      	ldr	r3, [pc, #368]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	2380      	movs	r3, #128	@ 0x80
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4013      	ands	r3, r2
 8001826:	d11a      	bne.n	800185e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001828:	4b59      	ldr	r3, [pc, #356]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b58      	ldr	r3, [pc, #352]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800182e:	2180      	movs	r1, #128	@ 0x80
 8001830:	0049      	lsls	r1, r1, #1
 8001832:	430a      	orrs	r2, r1
 8001834:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001836:	f7ff f86b 	bl	8000910 <HAL_GetTick>
 800183a:	0003      	movs	r3, r0
 800183c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183e:	e008      	b.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001840:	f7ff f866 	bl	8000910 <HAL_GetTick>
 8001844:	0002      	movs	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	@ 0x64
 800184c:	d901      	bls.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e097      	b.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001852:	4b4f      	ldr	r3, [pc, #316]	@ (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	2380      	movs	r3, #128	@ 0x80
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	4013      	ands	r3, r2
 800185c:	d0f0      	beq.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800185e:	4b4b      	ldr	r3, [pc, #300]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001860:	6a1a      	ldr	r2, [r3, #32]
 8001862:	23c0      	movs	r3, #192	@ 0xc0
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4013      	ands	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d034      	beq.n	80018da <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	23c0      	movs	r3, #192	@ 0xc0
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4013      	ands	r3, r2
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	429a      	cmp	r2, r3
 800187e:	d02c      	beq.n	80018da <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001880:	4b42      	ldr	r3, [pc, #264]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	4a43      	ldr	r2, [pc, #268]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001886:	4013      	ands	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800188a:	4b40      	ldr	r3, [pc, #256]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800188c:	6a1a      	ldr	r2, [r3, #32]
 800188e:	4b3f      	ldr	r3, [pc, #252]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001890:	2180      	movs	r1, #128	@ 0x80
 8001892:	0249      	lsls	r1, r1, #9
 8001894:	430a      	orrs	r2, r1
 8001896:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001898:	4b3c      	ldr	r3, [pc, #240]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800189a:	6a1a      	ldr	r2, [r3, #32]
 800189c:	4b3b      	ldr	r3, [pc, #236]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800189e:	493e      	ldr	r1, [pc, #248]	@ (8001998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018a0:	400a      	ands	r2, r1
 80018a2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80018a4:	4b39      	ldr	r3, [pc, #228]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2201      	movs	r2, #1
 80018ae:	4013      	ands	r3, r2
 80018b0:	d013      	beq.n	80018da <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7ff f82d 	bl	8000910 <HAL_GetTick>
 80018b6:	0003      	movs	r3, r0
 80018b8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ba:	e009      	b.n	80018d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018bc:	f7ff f828 	bl	8000910 <HAL_GetTick>
 80018c0:	0002      	movs	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	4a35      	ldr	r2, [pc, #212]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e058      	b.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d0:	4b2e      	ldr	r3, [pc, #184]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	2202      	movs	r2, #2
 80018d6:	4013      	ands	r3, r2
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018da:	4b2c      	ldr	r3, [pc, #176]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	4a2d      	ldr	r2, [pc, #180]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	0019      	movs	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	4b28      	ldr	r3, [pc, #160]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018ea:	430a      	orrs	r2, r1
 80018ec:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018ee:	2317      	movs	r3, #23
 80018f0:	18fb      	adds	r3, r7, r3
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d105      	bne.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f8:	4b24      	ldr	r3, [pc, #144]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018fa:	69da      	ldr	r2, [r3, #28]
 80018fc:	4b23      	ldr	r3, [pc, #140]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018fe:	4928      	ldr	r1, [pc, #160]	@ (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001900:	400a      	ands	r2, r1
 8001902:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2201      	movs	r2, #1
 800190a:	4013      	ands	r3, r2
 800190c:	d009      	beq.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800190e:	4b1f      	ldr	r3, [pc, #124]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	2203      	movs	r2, #3
 8001914:	4393      	bics	r3, r2
 8001916:	0019      	movs	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	4b1b      	ldr	r3, [pc, #108]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800191e:	430a      	orrs	r2, r1
 8001920:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2220      	movs	r2, #32
 8001928:	4013      	ands	r3, r2
 800192a:	d009      	beq.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800192c:	4b17      	ldr	r3, [pc, #92]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001930:	2210      	movs	r2, #16
 8001932:	4393      	bics	r3, r2
 8001934:	0019      	movs	r1, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	4b14      	ldr	r3, [pc, #80]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800193c:	430a      	orrs	r2, r1
 800193e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2380      	movs	r3, #128	@ 0x80
 8001946:	029b      	lsls	r3, r3, #10
 8001948:	4013      	ands	r3, r2
 800194a:	d009      	beq.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800194c:	4b0f      	ldr	r3, [pc, #60]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001950:	2280      	movs	r2, #128	@ 0x80
 8001952:	4393      	bics	r3, r2
 8001954:	0019      	movs	r1, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695a      	ldr	r2, [r3, #20]
 800195a:	4b0c      	ldr	r3, [pc, #48]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800195c:	430a      	orrs	r2, r1
 800195e:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	2380      	movs	r3, #128	@ 0x80
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	4013      	ands	r3, r2
 800196a:	d009      	beq.n	8001980 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800196c:	4b07      	ldr	r3, [pc, #28]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001970:	2240      	movs	r2, #64	@ 0x40
 8001972:	4393      	bics	r3, r2
 8001974:	0019      	movs	r1, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691a      	ldr	r2, [r3, #16]
 800197a:	4b04      	ldr	r3, [pc, #16]	@ (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800197c:	430a      	orrs	r2, r1
 800197e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	0018      	movs	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	b006      	add	sp, #24
 8001988:	bd80      	pop	{r7, pc}
 800198a:	46c0      	nop			@ (mov r8, r8)
 800198c:	40021000 	.word	0x40021000
 8001990:	40007000 	.word	0x40007000
 8001994:	fffffcff 	.word	0xfffffcff
 8001998:	fffeffff 	.word	0xfffeffff
 800199c:	00001388 	.word	0x00001388
 80019a0:	efffffff 	.word	0xefffffff

080019a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e044      	b.n	8001a40 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d107      	bne.n	80019ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2278      	movs	r2, #120	@ 0x78
 80019c2:	2100      	movs	r1, #0
 80019c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	0018      	movs	r0, r3
 80019ca:	f7fe fe1d 	bl	8000608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2224      	movs	r2, #36	@ 0x24
 80019d2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2101      	movs	r1, #1
 80019e0:	438a      	bics	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	0018      	movs	r0, r3
 80019f0:	f000 f96c 	bl	8001ccc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	0018      	movs	r0, r3
 80019f8:	f000 f828 	bl	8001a4c <UART_SetConfig>
 80019fc:	0003      	movs	r3, r0
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e01c      	b.n	8001a40 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	490d      	ldr	r1, [pc, #52]	@ (8001a48 <HAL_UART_Init+0xa4>)
 8001a12:	400a      	ands	r2, r1
 8001a14:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	212a      	movs	r1, #42	@ 0x2a
 8001a22:	438a      	bics	r2, r1
 8001a24:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2101      	movs	r1, #1
 8001a32:	430a      	orrs	r2, r1
 8001a34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f000 f9fb 	bl	8001e34 <UART_CheckIdleState>
 8001a3e:	0003      	movs	r3, r0
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b002      	add	sp, #8
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	ffffb7ff 	.word	0xffffb7ff

08001a4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a54:	231e      	movs	r3, #30
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a8d      	ldr	r2, [pc, #564]	@ (8001cb0 <UART_SetConfig+0x264>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	0019      	movs	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	4a88      	ldr	r2, [pc, #544]	@ (8001cb4 <UART_SetConfig+0x268>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	0019      	movs	r1, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4a7f      	ldr	r2, [pc, #508]	@ (8001cb8 <UART_SetConfig+0x26c>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	0019      	movs	r1, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a7b      	ldr	r2, [pc, #492]	@ (8001cbc <UART_SetConfig+0x270>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d127      	bne.n	8001b22 <UART_SetConfig+0xd6>
 8001ad2:	4b7b      	ldr	r3, [pc, #492]	@ (8001cc0 <UART_SetConfig+0x274>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d00d      	beq.n	8001afa <UART_SetConfig+0xae>
 8001ade:	d81b      	bhi.n	8001b18 <UART_SetConfig+0xcc>
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d014      	beq.n	8001b0e <UART_SetConfig+0xc2>
 8001ae4:	d818      	bhi.n	8001b18 <UART_SetConfig+0xcc>
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <UART_SetConfig+0xa4>
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d00a      	beq.n	8001b04 <UART_SetConfig+0xb8>
 8001aee:	e013      	b.n	8001b18 <UART_SetConfig+0xcc>
 8001af0:	231f      	movs	r3, #31
 8001af2:	18fb      	adds	r3, r7, r3
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
 8001af8:	e021      	b.n	8001b3e <UART_SetConfig+0xf2>
 8001afa:	231f      	movs	r3, #31
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	2202      	movs	r2, #2
 8001b00:	701a      	strb	r2, [r3, #0]
 8001b02:	e01c      	b.n	8001b3e <UART_SetConfig+0xf2>
 8001b04:	231f      	movs	r3, #31
 8001b06:	18fb      	adds	r3, r7, r3
 8001b08:	2204      	movs	r2, #4
 8001b0a:	701a      	strb	r2, [r3, #0]
 8001b0c:	e017      	b.n	8001b3e <UART_SetConfig+0xf2>
 8001b0e:	231f      	movs	r3, #31
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	2208      	movs	r2, #8
 8001b14:	701a      	strb	r2, [r3, #0]
 8001b16:	e012      	b.n	8001b3e <UART_SetConfig+0xf2>
 8001b18:	231f      	movs	r3, #31
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	701a      	strb	r2, [r3, #0]
 8001b20:	e00d      	b.n	8001b3e <UART_SetConfig+0xf2>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a67      	ldr	r2, [pc, #412]	@ (8001cc4 <UART_SetConfig+0x278>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d104      	bne.n	8001b36 <UART_SetConfig+0xea>
 8001b2c:	231f      	movs	r3, #31
 8001b2e:	18fb      	adds	r3, r7, r3
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	e003      	b.n	8001b3e <UART_SetConfig+0xf2>
 8001b36:	231f      	movs	r3, #31
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	2210      	movs	r2, #16
 8001b3c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69da      	ldr	r2, [r3, #28]
 8001b42:	2380      	movs	r3, #128	@ 0x80
 8001b44:	021b      	lsls	r3, r3, #8
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d15c      	bne.n	8001c04 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8001b4a:	231f      	movs	r3, #31
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d015      	beq.n	8001b80 <UART_SetConfig+0x134>
 8001b54:	dc18      	bgt.n	8001b88 <UART_SetConfig+0x13c>
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d00d      	beq.n	8001b76 <UART_SetConfig+0x12a>
 8001b5a:	dc15      	bgt.n	8001b88 <UART_SetConfig+0x13c>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <UART_SetConfig+0x11a>
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d005      	beq.n	8001b70 <UART_SetConfig+0x124>
 8001b64:	e010      	b.n	8001b88 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001b66:	f7ff fe19 	bl	800179c <HAL_RCC_GetPCLK1Freq>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	61bb      	str	r3, [r7, #24]
        break;
 8001b6e:	e012      	b.n	8001b96 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001b70:	4b55      	ldr	r3, [pc, #340]	@ (8001cc8 <UART_SetConfig+0x27c>)
 8001b72:	61bb      	str	r3, [r7, #24]
        break;
 8001b74:	e00f      	b.n	8001b96 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001b76:	f7ff fd95 	bl	80016a4 <HAL_RCC_GetSysClockFreq>
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	61bb      	str	r3, [r7, #24]
        break;
 8001b7e:	e00a      	b.n	8001b96 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001b80:	2380      	movs	r3, #128	@ 0x80
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	61bb      	str	r3, [r7, #24]
        break;
 8001b86:	e006      	b.n	8001b96 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001b8c:	231e      	movs	r3, #30
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	2201      	movs	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]
        break;
 8001b94:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d100      	bne.n	8001b9e <UART_SetConfig+0x152>
 8001b9c:	e07a      	b.n	8001c94 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	005a      	lsls	r2, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	085b      	lsrs	r3, r3, #1
 8001ba8:	18d2      	adds	r2, r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	0019      	movs	r1, r3
 8001bb0:	0010      	movs	r0, r2
 8001bb2:	f7fe faa9 	bl	8000108 <__udivsi3>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	2b0f      	cmp	r3, #15
 8001bbe:	d91c      	bls.n	8001bfa <UART_SetConfig+0x1ae>
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	2380      	movs	r3, #128	@ 0x80
 8001bc4:	025b      	lsls	r3, r3, #9
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d217      	bcs.n	8001bfa <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	200e      	movs	r0, #14
 8001bd0:	183b      	adds	r3, r7, r0
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	438a      	bics	r2, r1
 8001bd6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	085b      	lsrs	r3, r3, #1
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	2207      	movs	r2, #7
 8001be0:	4013      	ands	r3, r2
 8001be2:	b299      	uxth	r1, r3
 8001be4:	183b      	adds	r3, r7, r0
 8001be6:	183a      	adds	r2, r7, r0
 8001be8:	8812      	ldrh	r2, [r2, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	183a      	adds	r2, r7, r0
 8001bf4:	8812      	ldrh	r2, [r2, #0]
 8001bf6:	60da      	str	r2, [r3, #12]
 8001bf8:	e04c      	b.n	8001c94 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8001bfa:	231e      	movs	r3, #30
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
 8001c02:	e047      	b.n	8001c94 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001c04:	231f      	movs	r3, #31
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d015      	beq.n	8001c3a <UART_SetConfig+0x1ee>
 8001c0e:	dc18      	bgt.n	8001c42 <UART_SetConfig+0x1f6>
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d00d      	beq.n	8001c30 <UART_SetConfig+0x1e4>
 8001c14:	dc15      	bgt.n	8001c42 <UART_SetConfig+0x1f6>
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <UART_SetConfig+0x1d4>
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d005      	beq.n	8001c2a <UART_SetConfig+0x1de>
 8001c1e:	e010      	b.n	8001c42 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001c20:	f7ff fdbc 	bl	800179c <HAL_RCC_GetPCLK1Freq>
 8001c24:	0003      	movs	r3, r0
 8001c26:	61bb      	str	r3, [r7, #24]
        break;
 8001c28:	e012      	b.n	8001c50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001c2a:	4b27      	ldr	r3, [pc, #156]	@ (8001cc8 <UART_SetConfig+0x27c>)
 8001c2c:	61bb      	str	r3, [r7, #24]
        break;
 8001c2e:	e00f      	b.n	8001c50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001c30:	f7ff fd38 	bl	80016a4 <HAL_RCC_GetSysClockFreq>
 8001c34:	0003      	movs	r3, r0
 8001c36:	61bb      	str	r3, [r7, #24]
        break;
 8001c38:	e00a      	b.n	8001c50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001c3a:	2380      	movs	r3, #128	@ 0x80
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	61bb      	str	r3, [r7, #24]
        break;
 8001c40:	e006      	b.n	8001c50 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001c46:	231e      	movs	r3, #30
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	701a      	strb	r2, [r3, #0]
        break;
 8001c4e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d01e      	beq.n	8001c94 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	085a      	lsrs	r2, r3, #1
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	18d2      	adds	r2, r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	0019      	movs	r1, r3
 8001c66:	0010      	movs	r0, r2
 8001c68:	f7fe fa4e 	bl	8000108 <__udivsi3>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	2b0f      	cmp	r3, #15
 8001c74:	d90a      	bls.n	8001c8c <UART_SetConfig+0x240>
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	2380      	movs	r3, #128	@ 0x80
 8001c7a:	025b      	lsls	r3, r3, #9
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d205      	bcs.n	8001c8c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	e003      	b.n	8001c94 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8001c8c:	231e      	movs	r3, #30
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8001ca0:	231e      	movs	r3, #30
 8001ca2:	18fb      	adds	r3, r7, r3
 8001ca4:	781b      	ldrb	r3, [r3, #0]
}
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b008      	add	sp, #32
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	efff69f3 	.word	0xefff69f3
 8001cb4:	ffffcfff 	.word	0xffffcfff
 8001cb8:	fffff4ff 	.word	0xfffff4ff
 8001cbc:	40013800 	.word	0x40013800
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40004400 	.word	0x40004400
 8001cc8:	007a1200 	.word	0x007a1200

08001ccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd8:	2208      	movs	r2, #8
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d00b      	beq.n	8001cf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	4a4a      	ldr	r2, [pc, #296]	@ (8001e10 <UART_AdvFeatureConfig+0x144>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	0019      	movs	r1, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d00b      	beq.n	8001d18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4a43      	ldr	r2, [pc, #268]	@ (8001e14 <UART_AdvFeatureConfig+0x148>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d00b      	beq.n	8001d3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4a3b      	ldr	r2, [pc, #236]	@ (8001e18 <UART_AdvFeatureConfig+0x14c>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	0019      	movs	r1, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3e:	2204      	movs	r2, #4
 8001d40:	4013      	ands	r3, r2
 8001d42:	d00b      	beq.n	8001d5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4a34      	ldr	r2, [pc, #208]	@ (8001e1c <UART_AdvFeatureConfig+0x150>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	0019      	movs	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d60:	2210      	movs	r2, #16
 8001d62:	4013      	ands	r3, r2
 8001d64:	d00b      	beq.n	8001d7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e20 <UART_AdvFeatureConfig+0x154>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	0019      	movs	r1, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d82:	2220      	movs	r2, #32
 8001d84:	4013      	ands	r3, r2
 8001d86:	d00b      	beq.n	8001da0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	4a25      	ldr	r2, [pc, #148]	@ (8001e24 <UART_AdvFeatureConfig+0x158>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	0019      	movs	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	2240      	movs	r2, #64	@ 0x40
 8001da6:	4013      	ands	r3, r2
 8001da8:	d01d      	beq.n	8001de6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e28 <UART_AdvFeatureConfig+0x15c>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	0019      	movs	r1, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dc6:	2380      	movs	r3, #128	@ 0x80
 8001dc8:	035b      	lsls	r3, r3, #13
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d10b      	bne.n	8001de6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4a15      	ldr	r2, [pc, #84]	@ (8001e2c <UART_AdvFeatureConfig+0x160>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	0019      	movs	r1, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dea:	2280      	movs	r2, #128	@ 0x80
 8001dec:	4013      	ands	r3, r2
 8001dee:	d00b      	beq.n	8001e08 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e30 <UART_AdvFeatureConfig+0x164>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	605a      	str	r2, [r3, #4]
  }
}
 8001e08:	46c0      	nop			@ (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b002      	add	sp, #8
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	ffff7fff 	.word	0xffff7fff
 8001e14:	fffdffff 	.word	0xfffdffff
 8001e18:	fffeffff 	.word	0xfffeffff
 8001e1c:	fffbffff 	.word	0xfffbffff
 8001e20:	ffffefff 	.word	0xffffefff
 8001e24:	ffffdfff 	.word	0xffffdfff
 8001e28:	ffefffff 	.word	0xffefffff
 8001e2c:	ff9fffff 	.word	0xff9fffff
 8001e30:	fff7ffff 	.word	0xfff7ffff

08001e34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b092      	sub	sp, #72	@ 0x48
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2284      	movs	r2, #132	@ 0x84
 8001e40:	2100      	movs	r1, #0
 8001e42:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001e44:	f7fe fd64 	bl	8000910 <HAL_GetTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2208      	movs	r2, #8
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d12c      	bne.n	8001eb4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e5c:	2280      	movs	r2, #128	@ 0x80
 8001e5e:	0391      	lsls	r1, r2, #14
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	4a46      	ldr	r2, [pc, #280]	@ (8001f7c <UART_CheckIdleState+0x148>)
 8001e64:	9200      	str	r2, [sp, #0]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f000 f88c 	bl	8001f84 <UART_WaitOnFlagUntilTimeout>
 8001e6c:	1e03      	subs	r3, r0, #0
 8001e6e:	d021      	beq.n	8001eb4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e70:	f3ef 8310 	mrs	r3, PRIMASK
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001e78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e80:	f383 8810 	msr	PRIMASK, r3
}
 8001e84:	46c0      	nop			@ (mov r8, r8)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2180      	movs	r1, #128	@ 0x80
 8001e92:	438a      	bics	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e9c:	f383 8810 	msr	PRIMASK, r3
}
 8001ea0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2278      	movs	r2, #120	@ 0x78
 8001eac:	2100      	movs	r1, #0
 8001eae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e05f      	b.n	8001f74 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2204      	movs	r2, #4
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d146      	bne.n	8001f50 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ec4:	2280      	movs	r2, #128	@ 0x80
 8001ec6:	03d1      	lsls	r1, r2, #15
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	4a2c      	ldr	r2, [pc, #176]	@ (8001f7c <UART_CheckIdleState+0x148>)
 8001ecc:	9200      	str	r2, [sp, #0]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f000 f858 	bl	8001f84 <UART_WaitOnFlagUntilTimeout>
 8001ed4:	1e03      	subs	r3, r0, #0
 8001ed6:	d03b      	beq.n	8001f50 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8001edc:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ede:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	f383 8810 	msr	PRIMASK, r3
}
 8001eec:	46c0      	nop			@ (mov r8, r8)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4921      	ldr	r1, [pc, #132]	@ (8001f80 <UART_CheckIdleState+0x14c>)
 8001efa:	400a      	ands	r2, r1
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f383 8810 	msr	PRIMASK, r3
}
 8001f08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8001f0e:	61bb      	str	r3, [r7, #24]
  return(result);
 8001f10:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f12:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f14:	2301      	movs	r3, #1
 8001f16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f383 8810 	msr	PRIMASK, r3
}
 8001f1e:	46c0      	nop			@ (mov r8, r8)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	438a      	bics	r2, r1
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	f383 8810 	msr	PRIMASK, r3
}
 8001f3a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2280      	movs	r2, #128	@ 0x80
 8001f40:	2120      	movs	r1, #32
 8001f42:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2278      	movs	r2, #120	@ 0x78
 8001f48:	2100      	movs	r1, #0
 8001f4a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e011      	b.n	8001f74 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2220      	movs	r2, #32
 8001f54:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2280      	movs	r2, #128	@ 0x80
 8001f5a:	2120      	movs	r1, #32
 8001f5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2278      	movs	r2, #120	@ 0x78
 8001f6e:	2100      	movs	r1, #0
 8001f70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b010      	add	sp, #64	@ 0x40
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	01ffffff 	.word	0x01ffffff
 8001f80:	fffffedf 	.word	0xfffffedf

08001f84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	1dfb      	adds	r3, r7, #7
 8001f92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f94:	e051      	b.n	800203a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	d04e      	beq.n	800203a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f9c:	f7fe fcb8 	bl	8000910 <HAL_GetTick>
 8001fa0:	0002      	movs	r2, r0
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d302      	bcc.n	8001fb2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e051      	b.n	800205a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d03b      	beq.n	800203a <UART_WaitOnFlagUntilTimeout+0xb6>
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b80      	cmp	r3, #128	@ 0x80
 8001fc6:	d038      	beq.n	800203a <UART_WaitOnFlagUntilTimeout+0xb6>
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b40      	cmp	r3, #64	@ 0x40
 8001fcc:	d035      	beq.n	800203a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	2208      	movs	r2, #8
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d111      	bne.n	8002000 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2208      	movs	r2, #8
 8001fe2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f000 f83c 	bl	8002064 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2284      	movs	r2, #132	@ 0x84
 8001ff0:	2108      	movs	r1, #8
 8001ff2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2278      	movs	r2, #120	@ 0x78
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e02c      	b.n	800205a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	69da      	ldr	r2, [r3, #28]
 8002006:	2380      	movs	r3, #128	@ 0x80
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	401a      	ands	r2, r3
 800200c:	2380      	movs	r3, #128	@ 0x80
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	429a      	cmp	r2, r3
 8002012:	d112      	bne.n	800203a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2280      	movs	r2, #128	@ 0x80
 800201a:	0112      	lsls	r2, r2, #4
 800201c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	0018      	movs	r0, r3
 8002022:	f000 f81f 	bl	8002064 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2284      	movs	r2, #132	@ 0x84
 800202a:	2120      	movs	r1, #32
 800202c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2278      	movs	r2, #120	@ 0x78
 8002032:	2100      	movs	r1, #0
 8002034:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e00f      	b.n	800205a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	4013      	ands	r3, r2
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	425a      	negs	r2, r3
 800204a:	4153      	adcs	r3, r2
 800204c:	b2db      	uxtb	r3, r3
 800204e:	001a      	movs	r2, r3
 8002050:	1dfb      	adds	r3, r7, #7
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d09e      	beq.n	8001f96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	0018      	movs	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	b004      	add	sp, #16
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08e      	sub	sp, #56	@ 0x38
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800206c:	f3ef 8310 	mrs	r3, PRIMASK
 8002070:	617b      	str	r3, [r7, #20]
  return(result);
 8002072:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002074:	637b      	str	r3, [r7, #52]	@ 0x34
 8002076:	2301      	movs	r3, #1
 8002078:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	f383 8810 	msr	PRIMASK, r3
}
 8002080:	46c0      	nop			@ (mov r8, r8)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4926      	ldr	r1, [pc, #152]	@ (8002128 <UART_EndRxTransfer+0xc4>)
 800208e:	400a      	ands	r2, r1
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002094:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f383 8810 	msr	PRIMASK, r3
}
 800209c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800209e:	f3ef 8310 	mrs	r3, PRIMASK
 80020a2:	623b      	str	r3, [r7, #32]
  return(result);
 80020a4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80020a8:	2301      	movs	r3, #1
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	f383 8810 	msr	PRIMASK, r3
}
 80020b2:	46c0      	nop			@ (mov r8, r8)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2101      	movs	r1, #1
 80020c0:	438a      	bics	r2, r1
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ca:	f383 8810 	msr	PRIMASK, r3
}
 80020ce:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d118      	bne.n	800210a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020d8:	f3ef 8310 	mrs	r3, PRIMASK
 80020dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80020de:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020e2:	2301      	movs	r3, #1
 80020e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f383 8810 	msr	PRIMASK, r3
}
 80020ec:	46c0      	nop			@ (mov r8, r8)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2110      	movs	r1, #16
 80020fa:	438a      	bics	r2, r1
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002100:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f383 8810 	msr	PRIMASK, r3
}
 8002108:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2280      	movs	r2, #128	@ 0x80
 800210e:	2120      	movs	r1, #32
 8002110:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800211e:	46c0      	nop			@ (mov r8, r8)
 8002120:	46bd      	mov	sp, r7
 8002122:	b00e      	add	sp, #56	@ 0x38
 8002124:	bd80      	pop	{r7, pc}
 8002126:	46c0      	nop			@ (mov r8, r8)
 8002128:	fffffedf 	.word	0xfffffedf

0800212c <malloc>:
 800212c:	b510      	push	{r4, lr}
 800212e:	4b03      	ldr	r3, [pc, #12]	@ (800213c <malloc+0x10>)
 8002130:	0001      	movs	r1, r0
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	f000 f826 	bl	8002184 <_malloc_r>
 8002138:	bd10      	pop	{r4, pc}
 800213a:	46c0      	nop			@ (mov r8, r8)
 800213c:	2000000c 	.word	0x2000000c

08002140 <sbrk_aligned>:
 8002140:	b570      	push	{r4, r5, r6, lr}
 8002142:	4e0f      	ldr	r6, [pc, #60]	@ (8002180 <sbrk_aligned+0x40>)
 8002144:	000d      	movs	r5, r1
 8002146:	6831      	ldr	r1, [r6, #0]
 8002148:	0004      	movs	r4, r0
 800214a:	2900      	cmp	r1, #0
 800214c:	d102      	bne.n	8002154 <sbrk_aligned+0x14>
 800214e:	f000 f8b1 	bl	80022b4 <_sbrk_r>
 8002152:	6030      	str	r0, [r6, #0]
 8002154:	0029      	movs	r1, r5
 8002156:	0020      	movs	r0, r4
 8002158:	f000 f8ac 	bl	80022b4 <_sbrk_r>
 800215c:	1c43      	adds	r3, r0, #1
 800215e:	d103      	bne.n	8002168 <sbrk_aligned+0x28>
 8002160:	2501      	movs	r5, #1
 8002162:	426d      	negs	r5, r5
 8002164:	0028      	movs	r0, r5
 8002166:	bd70      	pop	{r4, r5, r6, pc}
 8002168:	2303      	movs	r3, #3
 800216a:	1cc5      	adds	r5, r0, #3
 800216c:	439d      	bics	r5, r3
 800216e:	42a8      	cmp	r0, r5
 8002170:	d0f8      	beq.n	8002164 <sbrk_aligned+0x24>
 8002172:	1a29      	subs	r1, r5, r0
 8002174:	0020      	movs	r0, r4
 8002176:	f000 f89d 	bl	80022b4 <_sbrk_r>
 800217a:	3001      	adds	r0, #1
 800217c:	d1f2      	bne.n	8002164 <sbrk_aligned+0x24>
 800217e:	e7ef      	b.n	8002160 <sbrk_aligned+0x20>
 8002180:	20000198 	.word	0x20000198

08002184 <_malloc_r>:
 8002184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002186:	2203      	movs	r2, #3
 8002188:	1ccb      	adds	r3, r1, #3
 800218a:	4393      	bics	r3, r2
 800218c:	3308      	adds	r3, #8
 800218e:	0005      	movs	r5, r0
 8002190:	001f      	movs	r7, r3
 8002192:	2b0c      	cmp	r3, #12
 8002194:	d234      	bcs.n	8002200 <_malloc_r+0x7c>
 8002196:	270c      	movs	r7, #12
 8002198:	42b9      	cmp	r1, r7
 800219a:	d833      	bhi.n	8002204 <_malloc_r+0x80>
 800219c:	0028      	movs	r0, r5
 800219e:	f000 f871 	bl	8002284 <__malloc_lock>
 80021a2:	4e37      	ldr	r6, [pc, #220]	@ (8002280 <_malloc_r+0xfc>)
 80021a4:	6833      	ldr	r3, [r6, #0]
 80021a6:	001c      	movs	r4, r3
 80021a8:	2c00      	cmp	r4, #0
 80021aa:	d12f      	bne.n	800220c <_malloc_r+0x88>
 80021ac:	0039      	movs	r1, r7
 80021ae:	0028      	movs	r0, r5
 80021b0:	f7ff ffc6 	bl	8002140 <sbrk_aligned>
 80021b4:	0004      	movs	r4, r0
 80021b6:	1c43      	adds	r3, r0, #1
 80021b8:	d15f      	bne.n	800227a <_malloc_r+0xf6>
 80021ba:	6834      	ldr	r4, [r6, #0]
 80021bc:	9400      	str	r4, [sp, #0]
 80021be:	9b00      	ldr	r3, [sp, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d14a      	bne.n	800225a <_malloc_r+0xd6>
 80021c4:	2c00      	cmp	r4, #0
 80021c6:	d052      	beq.n	800226e <_malloc_r+0xea>
 80021c8:	6823      	ldr	r3, [r4, #0]
 80021ca:	0028      	movs	r0, r5
 80021cc:	18e3      	adds	r3, r4, r3
 80021ce:	9900      	ldr	r1, [sp, #0]
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	f000 f86f 	bl	80022b4 <_sbrk_r>
 80021d6:	9b01      	ldr	r3, [sp, #4]
 80021d8:	4283      	cmp	r3, r0
 80021da:	d148      	bne.n	800226e <_malloc_r+0xea>
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	0028      	movs	r0, r5
 80021e0:	1aff      	subs	r7, r7, r3
 80021e2:	0039      	movs	r1, r7
 80021e4:	f7ff ffac 	bl	8002140 <sbrk_aligned>
 80021e8:	3001      	adds	r0, #1
 80021ea:	d040      	beq.n	800226e <_malloc_r+0xea>
 80021ec:	6823      	ldr	r3, [r4, #0]
 80021ee:	19db      	adds	r3, r3, r7
 80021f0:	6023      	str	r3, [r4, #0]
 80021f2:	6833      	ldr	r3, [r6, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	2a00      	cmp	r2, #0
 80021f8:	d133      	bne.n	8002262 <_malloc_r+0xde>
 80021fa:	9b00      	ldr	r3, [sp, #0]
 80021fc:	6033      	str	r3, [r6, #0]
 80021fe:	e019      	b.n	8002234 <_malloc_r+0xb0>
 8002200:	2b00      	cmp	r3, #0
 8002202:	dac9      	bge.n	8002198 <_malloc_r+0x14>
 8002204:	230c      	movs	r3, #12
 8002206:	602b      	str	r3, [r5, #0]
 8002208:	2000      	movs	r0, #0
 800220a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800220c:	6821      	ldr	r1, [r4, #0]
 800220e:	1bc9      	subs	r1, r1, r7
 8002210:	d420      	bmi.n	8002254 <_malloc_r+0xd0>
 8002212:	290b      	cmp	r1, #11
 8002214:	d90a      	bls.n	800222c <_malloc_r+0xa8>
 8002216:	19e2      	adds	r2, r4, r7
 8002218:	6027      	str	r7, [r4, #0]
 800221a:	42a3      	cmp	r3, r4
 800221c:	d104      	bne.n	8002228 <_malloc_r+0xa4>
 800221e:	6032      	str	r2, [r6, #0]
 8002220:	6863      	ldr	r3, [r4, #4]
 8002222:	6011      	str	r1, [r2, #0]
 8002224:	6053      	str	r3, [r2, #4]
 8002226:	e005      	b.n	8002234 <_malloc_r+0xb0>
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	e7f9      	b.n	8002220 <_malloc_r+0x9c>
 800222c:	6862      	ldr	r2, [r4, #4]
 800222e:	42a3      	cmp	r3, r4
 8002230:	d10e      	bne.n	8002250 <_malloc_r+0xcc>
 8002232:	6032      	str	r2, [r6, #0]
 8002234:	0028      	movs	r0, r5
 8002236:	f000 f82d 	bl	8002294 <__malloc_unlock>
 800223a:	0020      	movs	r0, r4
 800223c:	2207      	movs	r2, #7
 800223e:	300b      	adds	r0, #11
 8002240:	1d23      	adds	r3, r4, #4
 8002242:	4390      	bics	r0, r2
 8002244:	1ac2      	subs	r2, r0, r3
 8002246:	4298      	cmp	r0, r3
 8002248:	d0df      	beq.n	800220a <_malloc_r+0x86>
 800224a:	1a1b      	subs	r3, r3, r0
 800224c:	50a3      	str	r3, [r4, r2]
 800224e:	e7dc      	b.n	800220a <_malloc_r+0x86>
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	e7ef      	b.n	8002234 <_malloc_r+0xb0>
 8002254:	0023      	movs	r3, r4
 8002256:	6864      	ldr	r4, [r4, #4]
 8002258:	e7a6      	b.n	80021a8 <_malloc_r+0x24>
 800225a:	9c00      	ldr	r4, [sp, #0]
 800225c:	6863      	ldr	r3, [r4, #4]
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	e7ad      	b.n	80021be <_malloc_r+0x3a>
 8002262:	001a      	movs	r2, r3
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	42a3      	cmp	r3, r4
 8002268:	d1fb      	bne.n	8002262 <_malloc_r+0xde>
 800226a:	2300      	movs	r3, #0
 800226c:	e7da      	b.n	8002224 <_malloc_r+0xa0>
 800226e:	230c      	movs	r3, #12
 8002270:	0028      	movs	r0, r5
 8002272:	602b      	str	r3, [r5, #0]
 8002274:	f000 f80e 	bl	8002294 <__malloc_unlock>
 8002278:	e7c6      	b.n	8002208 <_malloc_r+0x84>
 800227a:	6007      	str	r7, [r0, #0]
 800227c:	e7da      	b.n	8002234 <_malloc_r+0xb0>
 800227e:	46c0      	nop			@ (mov r8, r8)
 8002280:	2000019c 	.word	0x2000019c

08002284 <__malloc_lock>:
 8002284:	b510      	push	{r4, lr}
 8002286:	4802      	ldr	r0, [pc, #8]	@ (8002290 <__malloc_lock+0xc>)
 8002288:	f000 f850 	bl	800232c <__retarget_lock_acquire_recursive>
 800228c:	bd10      	pop	{r4, pc}
 800228e:	46c0      	nop			@ (mov r8, r8)
 8002290:	200002dc 	.word	0x200002dc

08002294 <__malloc_unlock>:
 8002294:	b510      	push	{r4, lr}
 8002296:	4802      	ldr	r0, [pc, #8]	@ (80022a0 <__malloc_unlock+0xc>)
 8002298:	f000 f849 	bl	800232e <__retarget_lock_release_recursive>
 800229c:	bd10      	pop	{r4, pc}
 800229e:	46c0      	nop			@ (mov r8, r8)
 80022a0:	200002dc 	.word	0x200002dc

080022a4 <memset>:
 80022a4:	0003      	movs	r3, r0
 80022a6:	1882      	adds	r2, r0, r2
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d100      	bne.n	80022ae <memset+0xa>
 80022ac:	4770      	bx	lr
 80022ae:	7019      	strb	r1, [r3, #0]
 80022b0:	3301      	adds	r3, #1
 80022b2:	e7f9      	b.n	80022a8 <memset+0x4>

080022b4 <_sbrk_r>:
 80022b4:	2300      	movs	r3, #0
 80022b6:	b570      	push	{r4, r5, r6, lr}
 80022b8:	4d06      	ldr	r5, [pc, #24]	@ (80022d4 <_sbrk_r+0x20>)
 80022ba:	0004      	movs	r4, r0
 80022bc:	0008      	movs	r0, r1
 80022be:	602b      	str	r3, [r5, #0]
 80022c0:	f7fe fa4e 	bl	8000760 <_sbrk>
 80022c4:	1c43      	adds	r3, r0, #1
 80022c6:	d103      	bne.n	80022d0 <_sbrk_r+0x1c>
 80022c8:	682b      	ldr	r3, [r5, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d000      	beq.n	80022d0 <_sbrk_r+0x1c>
 80022ce:	6023      	str	r3, [r4, #0]
 80022d0:	bd70      	pop	{r4, r5, r6, pc}
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	200002d8 	.word	0x200002d8

080022d8 <__errno>:
 80022d8:	4b01      	ldr	r3, [pc, #4]	@ (80022e0 <__errno+0x8>)
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	4770      	bx	lr
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	2000000c 	.word	0x2000000c

080022e4 <__libc_init_array>:
 80022e4:	b570      	push	{r4, r5, r6, lr}
 80022e6:	2600      	movs	r6, #0
 80022e8:	4c0c      	ldr	r4, [pc, #48]	@ (800231c <__libc_init_array+0x38>)
 80022ea:	4d0d      	ldr	r5, [pc, #52]	@ (8002320 <__libc_init_array+0x3c>)
 80022ec:	1b64      	subs	r4, r4, r5
 80022ee:	10a4      	asrs	r4, r4, #2
 80022f0:	42a6      	cmp	r6, r4
 80022f2:	d109      	bne.n	8002308 <__libc_init_array+0x24>
 80022f4:	2600      	movs	r6, #0
 80022f6:	f000 f81b 	bl	8002330 <_init>
 80022fa:	4c0a      	ldr	r4, [pc, #40]	@ (8002324 <__libc_init_array+0x40>)
 80022fc:	4d0a      	ldr	r5, [pc, #40]	@ (8002328 <__libc_init_array+0x44>)
 80022fe:	1b64      	subs	r4, r4, r5
 8002300:	10a4      	asrs	r4, r4, #2
 8002302:	42a6      	cmp	r6, r4
 8002304:	d105      	bne.n	8002312 <__libc_init_array+0x2e>
 8002306:	bd70      	pop	{r4, r5, r6, pc}
 8002308:	00b3      	lsls	r3, r6, #2
 800230a:	58eb      	ldr	r3, [r5, r3]
 800230c:	4798      	blx	r3
 800230e:	3601      	adds	r6, #1
 8002310:	e7ee      	b.n	80022f0 <__libc_init_array+0xc>
 8002312:	00b3      	lsls	r3, r6, #2
 8002314:	58eb      	ldr	r3, [r5, r3]
 8002316:	4798      	blx	r3
 8002318:	3601      	adds	r6, #1
 800231a:	e7f2      	b.n	8002302 <__libc_init_array+0x1e>
 800231c:	08002380 	.word	0x08002380
 8002320:	08002380 	.word	0x08002380
 8002324:	08002384 	.word	0x08002384
 8002328:	08002380 	.word	0x08002380

0800232c <__retarget_lock_acquire_recursive>:
 800232c:	4770      	bx	lr

0800232e <__retarget_lock_release_recursive>:
 800232e:	4770      	bx	lr

08002330 <_init>:
 8002330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002332:	46c0      	nop			@ (mov r8, r8)
 8002334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002336:	bc08      	pop	{r3}
 8002338:	469e      	mov	lr, r3
 800233a:	4770      	bx	lr

0800233c <_fini>:
 800233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233e:	46c0      	nop			@ (mov r8, r8)
 8002340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002342:	bc08      	pop	{r3}
 8002344:	469e      	mov	lr, r3
 8002346:	4770      	bx	lr
