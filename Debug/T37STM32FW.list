
T37STM32FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f80  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004040  08004040  00005040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040bc  080040bc  00006064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080040bc  080040bc  00006064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080040bc  080040bc  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040bc  080040bc  000050bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040c0  080040c0  000050c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080040c4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000064  08004128  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08004128  000062f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e44  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c32  00000000  00000000  0000eed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  00010b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000064a  00000000  00000000  00011350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002146  00000000  00000000  0001199a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a401  00000000  00000000  00013ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a38d  00000000  00000000  0001dee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a826e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002080  00000000  00000000  000a82b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000aa334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000064 	.word	0x20000064
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004028 	.word	0x08004028

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000068 	.word	0x20000068
 8000104:	08004028 	.word	0x08004028

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_f2uiz>:
 80003f4:	219e      	movs	r1, #158	@ 0x9e
 80003f6:	b510      	push	{r4, lr}
 80003f8:	05c9      	lsls	r1, r1, #23
 80003fa:	1c04      	adds	r4, r0, #0
 80003fc:	f000 fc70 	bl	8000ce0 <__aeabi_fcmpge>
 8000400:	2800      	cmp	r0, #0
 8000402:	d103      	bne.n	800040c <__aeabi_f2uiz+0x18>
 8000404:	1c20      	adds	r0, r4, #0
 8000406:	f000 fbcb 	bl	8000ba0 <__aeabi_f2iz>
 800040a:	bd10      	pop	{r4, pc}
 800040c:	219e      	movs	r1, #158	@ 0x9e
 800040e:	1c20      	adds	r0, r4, #0
 8000410:	05c9      	lsls	r1, r1, #23
 8000412:	f000 f961 	bl	80006d8 <__aeabi_fsub>
 8000416:	f000 fbc3 	bl	8000ba0 <__aeabi_f2iz>
 800041a:	2380      	movs	r3, #128	@ 0x80
 800041c:	061b      	lsls	r3, r3, #24
 800041e:	469c      	mov	ip, r3
 8000420:	4460      	add	r0, ip
 8000422:	e7f2      	b.n	800040a <__aeabi_f2uiz+0x16>

08000424 <__aeabi_fmul>:
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	464f      	mov	r7, r9
 8000428:	4646      	mov	r6, r8
 800042a:	46d6      	mov	lr, sl
 800042c:	0044      	lsls	r4, r0, #1
 800042e:	b5c0      	push	{r6, r7, lr}
 8000430:	0246      	lsls	r6, r0, #9
 8000432:	1c0f      	adds	r7, r1, #0
 8000434:	0a76      	lsrs	r6, r6, #9
 8000436:	0e24      	lsrs	r4, r4, #24
 8000438:	0fc5      	lsrs	r5, r0, #31
 800043a:	2c00      	cmp	r4, #0
 800043c:	d100      	bne.n	8000440 <__aeabi_fmul+0x1c>
 800043e:	e0da      	b.n	80005f6 <__aeabi_fmul+0x1d2>
 8000440:	2cff      	cmp	r4, #255	@ 0xff
 8000442:	d074      	beq.n	800052e <__aeabi_fmul+0x10a>
 8000444:	2380      	movs	r3, #128	@ 0x80
 8000446:	00f6      	lsls	r6, r6, #3
 8000448:	04db      	lsls	r3, r3, #19
 800044a:	431e      	orrs	r6, r3
 800044c:	2300      	movs	r3, #0
 800044e:	4699      	mov	r9, r3
 8000450:	469a      	mov	sl, r3
 8000452:	3c7f      	subs	r4, #127	@ 0x7f
 8000454:	027b      	lsls	r3, r7, #9
 8000456:	0a5b      	lsrs	r3, r3, #9
 8000458:	4698      	mov	r8, r3
 800045a:	007b      	lsls	r3, r7, #1
 800045c:	0e1b      	lsrs	r3, r3, #24
 800045e:	0fff      	lsrs	r7, r7, #31
 8000460:	2b00      	cmp	r3, #0
 8000462:	d074      	beq.n	800054e <__aeabi_fmul+0x12a>
 8000464:	2bff      	cmp	r3, #255	@ 0xff
 8000466:	d100      	bne.n	800046a <__aeabi_fmul+0x46>
 8000468:	e08e      	b.n	8000588 <__aeabi_fmul+0x164>
 800046a:	4642      	mov	r2, r8
 800046c:	2180      	movs	r1, #128	@ 0x80
 800046e:	00d2      	lsls	r2, r2, #3
 8000470:	04c9      	lsls	r1, r1, #19
 8000472:	4311      	orrs	r1, r2
 8000474:	3b7f      	subs	r3, #127	@ 0x7f
 8000476:	002a      	movs	r2, r5
 8000478:	18e4      	adds	r4, r4, r3
 800047a:	464b      	mov	r3, r9
 800047c:	407a      	eors	r2, r7
 800047e:	4688      	mov	r8, r1
 8000480:	b2d2      	uxtb	r2, r2
 8000482:	2b0a      	cmp	r3, #10
 8000484:	dc75      	bgt.n	8000572 <__aeabi_fmul+0x14e>
 8000486:	464b      	mov	r3, r9
 8000488:	2000      	movs	r0, #0
 800048a:	2b02      	cmp	r3, #2
 800048c:	dd0f      	ble.n	80004ae <__aeabi_fmul+0x8a>
 800048e:	4649      	mov	r1, r9
 8000490:	2301      	movs	r3, #1
 8000492:	408b      	lsls	r3, r1
 8000494:	21a6      	movs	r1, #166	@ 0xa6
 8000496:	00c9      	lsls	r1, r1, #3
 8000498:	420b      	tst	r3, r1
 800049a:	d169      	bne.n	8000570 <__aeabi_fmul+0x14c>
 800049c:	2190      	movs	r1, #144	@ 0x90
 800049e:	0089      	lsls	r1, r1, #2
 80004a0:	420b      	tst	r3, r1
 80004a2:	d000      	beq.n	80004a6 <__aeabi_fmul+0x82>
 80004a4:	e100      	b.n	80006a8 <__aeabi_fmul+0x284>
 80004a6:	2188      	movs	r1, #136	@ 0x88
 80004a8:	4219      	tst	r1, r3
 80004aa:	d000      	beq.n	80004ae <__aeabi_fmul+0x8a>
 80004ac:	e0f5      	b.n	800069a <__aeabi_fmul+0x276>
 80004ae:	4641      	mov	r1, r8
 80004b0:	0409      	lsls	r1, r1, #16
 80004b2:	0c09      	lsrs	r1, r1, #16
 80004b4:	4643      	mov	r3, r8
 80004b6:	0008      	movs	r0, r1
 80004b8:	0c35      	lsrs	r5, r6, #16
 80004ba:	0436      	lsls	r6, r6, #16
 80004bc:	0c1b      	lsrs	r3, r3, #16
 80004be:	0c36      	lsrs	r6, r6, #16
 80004c0:	4370      	muls	r0, r6
 80004c2:	4369      	muls	r1, r5
 80004c4:	435e      	muls	r6, r3
 80004c6:	435d      	muls	r5, r3
 80004c8:	1876      	adds	r6, r6, r1
 80004ca:	0c03      	lsrs	r3, r0, #16
 80004cc:	199b      	adds	r3, r3, r6
 80004ce:	4299      	cmp	r1, r3
 80004d0:	d903      	bls.n	80004da <__aeabi_fmul+0xb6>
 80004d2:	2180      	movs	r1, #128	@ 0x80
 80004d4:	0249      	lsls	r1, r1, #9
 80004d6:	468c      	mov	ip, r1
 80004d8:	4465      	add	r5, ip
 80004da:	0400      	lsls	r0, r0, #16
 80004dc:	0419      	lsls	r1, r3, #16
 80004de:	0c00      	lsrs	r0, r0, #16
 80004e0:	1809      	adds	r1, r1, r0
 80004e2:	018e      	lsls	r6, r1, #6
 80004e4:	1e70      	subs	r0, r6, #1
 80004e6:	4186      	sbcs	r6, r0
 80004e8:	0c1b      	lsrs	r3, r3, #16
 80004ea:	0e89      	lsrs	r1, r1, #26
 80004ec:	195b      	adds	r3, r3, r5
 80004ee:	430e      	orrs	r6, r1
 80004f0:	019b      	lsls	r3, r3, #6
 80004f2:	431e      	orrs	r6, r3
 80004f4:	011b      	lsls	r3, r3, #4
 80004f6:	d46c      	bmi.n	80005d2 <__aeabi_fmul+0x1ae>
 80004f8:	0023      	movs	r3, r4
 80004fa:	337f      	adds	r3, #127	@ 0x7f
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	dc00      	bgt.n	8000502 <__aeabi_fmul+0xde>
 8000500:	e0b1      	b.n	8000666 <__aeabi_fmul+0x242>
 8000502:	0015      	movs	r5, r2
 8000504:	0771      	lsls	r1, r6, #29
 8000506:	d00b      	beq.n	8000520 <__aeabi_fmul+0xfc>
 8000508:	200f      	movs	r0, #15
 800050a:	0021      	movs	r1, r4
 800050c:	4030      	ands	r0, r6
 800050e:	2804      	cmp	r0, #4
 8000510:	d006      	beq.n	8000520 <__aeabi_fmul+0xfc>
 8000512:	3604      	adds	r6, #4
 8000514:	0132      	lsls	r2, r6, #4
 8000516:	d503      	bpl.n	8000520 <__aeabi_fmul+0xfc>
 8000518:	4b6e      	ldr	r3, [pc, #440]	@ (80006d4 <__aeabi_fmul+0x2b0>)
 800051a:	401e      	ands	r6, r3
 800051c:	000b      	movs	r3, r1
 800051e:	3380      	adds	r3, #128	@ 0x80
 8000520:	2bfe      	cmp	r3, #254	@ 0xfe
 8000522:	dd00      	ble.n	8000526 <__aeabi_fmul+0x102>
 8000524:	e0bd      	b.n	80006a2 <__aeabi_fmul+0x27e>
 8000526:	01b2      	lsls	r2, r6, #6
 8000528:	0a52      	lsrs	r2, r2, #9
 800052a:	b2db      	uxtb	r3, r3
 800052c:	e048      	b.n	80005c0 <__aeabi_fmul+0x19c>
 800052e:	2e00      	cmp	r6, #0
 8000530:	d000      	beq.n	8000534 <__aeabi_fmul+0x110>
 8000532:	e092      	b.n	800065a <__aeabi_fmul+0x236>
 8000534:	2308      	movs	r3, #8
 8000536:	4699      	mov	r9, r3
 8000538:	3b06      	subs	r3, #6
 800053a:	469a      	mov	sl, r3
 800053c:	027b      	lsls	r3, r7, #9
 800053e:	0a5b      	lsrs	r3, r3, #9
 8000540:	4698      	mov	r8, r3
 8000542:	007b      	lsls	r3, r7, #1
 8000544:	24ff      	movs	r4, #255	@ 0xff
 8000546:	0e1b      	lsrs	r3, r3, #24
 8000548:	0fff      	lsrs	r7, r7, #31
 800054a:	2b00      	cmp	r3, #0
 800054c:	d18a      	bne.n	8000464 <__aeabi_fmul+0x40>
 800054e:	4642      	mov	r2, r8
 8000550:	2a00      	cmp	r2, #0
 8000552:	d164      	bne.n	800061e <__aeabi_fmul+0x1fa>
 8000554:	4649      	mov	r1, r9
 8000556:	3201      	adds	r2, #1
 8000558:	4311      	orrs	r1, r2
 800055a:	4689      	mov	r9, r1
 800055c:	290a      	cmp	r1, #10
 800055e:	dc08      	bgt.n	8000572 <__aeabi_fmul+0x14e>
 8000560:	407d      	eors	r5, r7
 8000562:	2001      	movs	r0, #1
 8000564:	b2ea      	uxtb	r2, r5
 8000566:	2902      	cmp	r1, #2
 8000568:	dc91      	bgt.n	800048e <__aeabi_fmul+0x6a>
 800056a:	0015      	movs	r5, r2
 800056c:	2200      	movs	r2, #0
 800056e:	e027      	b.n	80005c0 <__aeabi_fmul+0x19c>
 8000570:	0015      	movs	r5, r2
 8000572:	4653      	mov	r3, sl
 8000574:	2b02      	cmp	r3, #2
 8000576:	d100      	bne.n	800057a <__aeabi_fmul+0x156>
 8000578:	e093      	b.n	80006a2 <__aeabi_fmul+0x27e>
 800057a:	2b03      	cmp	r3, #3
 800057c:	d01a      	beq.n	80005b4 <__aeabi_fmul+0x190>
 800057e:	2b01      	cmp	r3, #1
 8000580:	d12c      	bne.n	80005dc <__aeabi_fmul+0x1b8>
 8000582:	2300      	movs	r3, #0
 8000584:	2200      	movs	r2, #0
 8000586:	e01b      	b.n	80005c0 <__aeabi_fmul+0x19c>
 8000588:	4643      	mov	r3, r8
 800058a:	34ff      	adds	r4, #255	@ 0xff
 800058c:	2b00      	cmp	r3, #0
 800058e:	d055      	beq.n	800063c <__aeabi_fmul+0x218>
 8000590:	2103      	movs	r1, #3
 8000592:	464b      	mov	r3, r9
 8000594:	430b      	orrs	r3, r1
 8000596:	0019      	movs	r1, r3
 8000598:	2b0a      	cmp	r3, #10
 800059a:	dc00      	bgt.n	800059e <__aeabi_fmul+0x17a>
 800059c:	e092      	b.n	80006c4 <__aeabi_fmul+0x2a0>
 800059e:	2b0f      	cmp	r3, #15
 80005a0:	d000      	beq.n	80005a4 <__aeabi_fmul+0x180>
 80005a2:	e08c      	b.n	80006be <__aeabi_fmul+0x29a>
 80005a4:	2280      	movs	r2, #128	@ 0x80
 80005a6:	03d2      	lsls	r2, r2, #15
 80005a8:	4216      	tst	r6, r2
 80005aa:	d003      	beq.n	80005b4 <__aeabi_fmul+0x190>
 80005ac:	4643      	mov	r3, r8
 80005ae:	4213      	tst	r3, r2
 80005b0:	d100      	bne.n	80005b4 <__aeabi_fmul+0x190>
 80005b2:	e07d      	b.n	80006b0 <__aeabi_fmul+0x28c>
 80005b4:	2280      	movs	r2, #128	@ 0x80
 80005b6:	03d2      	lsls	r2, r2, #15
 80005b8:	4332      	orrs	r2, r6
 80005ba:	0252      	lsls	r2, r2, #9
 80005bc:	0a52      	lsrs	r2, r2, #9
 80005be:	23ff      	movs	r3, #255	@ 0xff
 80005c0:	05d8      	lsls	r0, r3, #23
 80005c2:	07ed      	lsls	r5, r5, #31
 80005c4:	4310      	orrs	r0, r2
 80005c6:	4328      	orrs	r0, r5
 80005c8:	bce0      	pop	{r5, r6, r7}
 80005ca:	46ba      	mov	sl, r7
 80005cc:	46b1      	mov	r9, r6
 80005ce:	46a8      	mov	r8, r5
 80005d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d2:	2301      	movs	r3, #1
 80005d4:	0015      	movs	r5, r2
 80005d6:	0871      	lsrs	r1, r6, #1
 80005d8:	401e      	ands	r6, r3
 80005da:	430e      	orrs	r6, r1
 80005dc:	0023      	movs	r3, r4
 80005de:	3380      	adds	r3, #128	@ 0x80
 80005e0:	1c61      	adds	r1, r4, #1
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	dd41      	ble.n	800066a <__aeabi_fmul+0x246>
 80005e6:	0772      	lsls	r2, r6, #29
 80005e8:	d094      	beq.n	8000514 <__aeabi_fmul+0xf0>
 80005ea:	220f      	movs	r2, #15
 80005ec:	4032      	ands	r2, r6
 80005ee:	2a04      	cmp	r2, #4
 80005f0:	d000      	beq.n	80005f4 <__aeabi_fmul+0x1d0>
 80005f2:	e78e      	b.n	8000512 <__aeabi_fmul+0xee>
 80005f4:	e78e      	b.n	8000514 <__aeabi_fmul+0xf0>
 80005f6:	2e00      	cmp	r6, #0
 80005f8:	d105      	bne.n	8000606 <__aeabi_fmul+0x1e2>
 80005fa:	2304      	movs	r3, #4
 80005fc:	4699      	mov	r9, r3
 80005fe:	3b03      	subs	r3, #3
 8000600:	2400      	movs	r4, #0
 8000602:	469a      	mov	sl, r3
 8000604:	e726      	b.n	8000454 <__aeabi_fmul+0x30>
 8000606:	0030      	movs	r0, r6
 8000608:	f000 fb74 	bl	8000cf4 <__clzsi2>
 800060c:	2476      	movs	r4, #118	@ 0x76
 800060e:	1f43      	subs	r3, r0, #5
 8000610:	409e      	lsls	r6, r3
 8000612:	2300      	movs	r3, #0
 8000614:	4264      	negs	r4, r4
 8000616:	4699      	mov	r9, r3
 8000618:	469a      	mov	sl, r3
 800061a:	1a24      	subs	r4, r4, r0
 800061c:	e71a      	b.n	8000454 <__aeabi_fmul+0x30>
 800061e:	4640      	mov	r0, r8
 8000620:	f000 fb68 	bl	8000cf4 <__clzsi2>
 8000624:	464b      	mov	r3, r9
 8000626:	1a24      	subs	r4, r4, r0
 8000628:	3c76      	subs	r4, #118	@ 0x76
 800062a:	2b0a      	cmp	r3, #10
 800062c:	dca1      	bgt.n	8000572 <__aeabi_fmul+0x14e>
 800062e:	4643      	mov	r3, r8
 8000630:	3805      	subs	r0, #5
 8000632:	4083      	lsls	r3, r0
 8000634:	407d      	eors	r5, r7
 8000636:	4698      	mov	r8, r3
 8000638:	b2ea      	uxtb	r2, r5
 800063a:	e724      	b.n	8000486 <__aeabi_fmul+0x62>
 800063c:	464a      	mov	r2, r9
 800063e:	3302      	adds	r3, #2
 8000640:	4313      	orrs	r3, r2
 8000642:	002a      	movs	r2, r5
 8000644:	407a      	eors	r2, r7
 8000646:	b2d2      	uxtb	r2, r2
 8000648:	2b0a      	cmp	r3, #10
 800064a:	dc92      	bgt.n	8000572 <__aeabi_fmul+0x14e>
 800064c:	4649      	mov	r1, r9
 800064e:	0015      	movs	r5, r2
 8000650:	2900      	cmp	r1, #0
 8000652:	d026      	beq.n	80006a2 <__aeabi_fmul+0x27e>
 8000654:	4699      	mov	r9, r3
 8000656:	2002      	movs	r0, #2
 8000658:	e719      	b.n	800048e <__aeabi_fmul+0x6a>
 800065a:	230c      	movs	r3, #12
 800065c:	4699      	mov	r9, r3
 800065e:	3b09      	subs	r3, #9
 8000660:	24ff      	movs	r4, #255	@ 0xff
 8000662:	469a      	mov	sl, r3
 8000664:	e6f6      	b.n	8000454 <__aeabi_fmul+0x30>
 8000666:	0015      	movs	r5, r2
 8000668:	0021      	movs	r1, r4
 800066a:	2201      	movs	r2, #1
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	2b1b      	cmp	r3, #27
 8000670:	dd00      	ble.n	8000674 <__aeabi_fmul+0x250>
 8000672:	e786      	b.n	8000582 <__aeabi_fmul+0x15e>
 8000674:	319e      	adds	r1, #158	@ 0x9e
 8000676:	0032      	movs	r2, r6
 8000678:	408e      	lsls	r6, r1
 800067a:	40da      	lsrs	r2, r3
 800067c:	1e73      	subs	r3, r6, #1
 800067e:	419e      	sbcs	r6, r3
 8000680:	4332      	orrs	r2, r6
 8000682:	0753      	lsls	r3, r2, #29
 8000684:	d004      	beq.n	8000690 <__aeabi_fmul+0x26c>
 8000686:	230f      	movs	r3, #15
 8000688:	4013      	ands	r3, r2
 800068a:	2b04      	cmp	r3, #4
 800068c:	d000      	beq.n	8000690 <__aeabi_fmul+0x26c>
 800068e:	3204      	adds	r2, #4
 8000690:	0153      	lsls	r3, r2, #5
 8000692:	d510      	bpl.n	80006b6 <__aeabi_fmul+0x292>
 8000694:	2301      	movs	r3, #1
 8000696:	2200      	movs	r2, #0
 8000698:	e792      	b.n	80005c0 <__aeabi_fmul+0x19c>
 800069a:	003d      	movs	r5, r7
 800069c:	4646      	mov	r6, r8
 800069e:	4682      	mov	sl, r0
 80006a0:	e767      	b.n	8000572 <__aeabi_fmul+0x14e>
 80006a2:	23ff      	movs	r3, #255	@ 0xff
 80006a4:	2200      	movs	r2, #0
 80006a6:	e78b      	b.n	80005c0 <__aeabi_fmul+0x19c>
 80006a8:	2280      	movs	r2, #128	@ 0x80
 80006aa:	2500      	movs	r5, #0
 80006ac:	03d2      	lsls	r2, r2, #15
 80006ae:	e786      	b.n	80005be <__aeabi_fmul+0x19a>
 80006b0:	003d      	movs	r5, r7
 80006b2:	431a      	orrs	r2, r3
 80006b4:	e783      	b.n	80005be <__aeabi_fmul+0x19a>
 80006b6:	0192      	lsls	r2, r2, #6
 80006b8:	2300      	movs	r3, #0
 80006ba:	0a52      	lsrs	r2, r2, #9
 80006bc:	e780      	b.n	80005c0 <__aeabi_fmul+0x19c>
 80006be:	003d      	movs	r5, r7
 80006c0:	4646      	mov	r6, r8
 80006c2:	e777      	b.n	80005b4 <__aeabi_fmul+0x190>
 80006c4:	002a      	movs	r2, r5
 80006c6:	2301      	movs	r3, #1
 80006c8:	407a      	eors	r2, r7
 80006ca:	408b      	lsls	r3, r1
 80006cc:	2003      	movs	r0, #3
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	e6e9      	b.n	80004a6 <__aeabi_fmul+0x82>
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	f7ffffff 	.word	0xf7ffffff

080006d8 <__aeabi_fsub>:
 80006d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006da:	4647      	mov	r7, r8
 80006dc:	46ce      	mov	lr, r9
 80006de:	0243      	lsls	r3, r0, #9
 80006e0:	b580      	push	{r7, lr}
 80006e2:	0a5f      	lsrs	r7, r3, #9
 80006e4:	099b      	lsrs	r3, r3, #6
 80006e6:	0045      	lsls	r5, r0, #1
 80006e8:	004a      	lsls	r2, r1, #1
 80006ea:	469c      	mov	ip, r3
 80006ec:	024b      	lsls	r3, r1, #9
 80006ee:	0fc4      	lsrs	r4, r0, #31
 80006f0:	0fce      	lsrs	r6, r1, #31
 80006f2:	0e2d      	lsrs	r5, r5, #24
 80006f4:	0a58      	lsrs	r0, r3, #9
 80006f6:	0e12      	lsrs	r2, r2, #24
 80006f8:	0999      	lsrs	r1, r3, #6
 80006fa:	2aff      	cmp	r2, #255	@ 0xff
 80006fc:	d06b      	beq.n	80007d6 <__aeabi_fsub+0xfe>
 80006fe:	2301      	movs	r3, #1
 8000700:	405e      	eors	r6, r3
 8000702:	1aab      	subs	r3, r5, r2
 8000704:	42b4      	cmp	r4, r6
 8000706:	d04b      	beq.n	80007a0 <__aeabi_fsub+0xc8>
 8000708:	2b00      	cmp	r3, #0
 800070a:	dc00      	bgt.n	800070e <__aeabi_fsub+0x36>
 800070c:	e0ff      	b.n	800090e <__aeabi_fsub+0x236>
 800070e:	2a00      	cmp	r2, #0
 8000710:	d100      	bne.n	8000714 <__aeabi_fsub+0x3c>
 8000712:	e088      	b.n	8000826 <__aeabi_fsub+0x14e>
 8000714:	2dff      	cmp	r5, #255	@ 0xff
 8000716:	d100      	bne.n	800071a <__aeabi_fsub+0x42>
 8000718:	e0ef      	b.n	80008fa <__aeabi_fsub+0x222>
 800071a:	2280      	movs	r2, #128	@ 0x80
 800071c:	04d2      	lsls	r2, r2, #19
 800071e:	4311      	orrs	r1, r2
 8000720:	2001      	movs	r0, #1
 8000722:	2b1b      	cmp	r3, #27
 8000724:	dc08      	bgt.n	8000738 <__aeabi_fsub+0x60>
 8000726:	0008      	movs	r0, r1
 8000728:	2220      	movs	r2, #32
 800072a:	40d8      	lsrs	r0, r3
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	4099      	lsls	r1, r3
 8000730:	000b      	movs	r3, r1
 8000732:	1e5a      	subs	r2, r3, #1
 8000734:	4193      	sbcs	r3, r2
 8000736:	4318      	orrs	r0, r3
 8000738:	4663      	mov	r3, ip
 800073a:	1a1b      	subs	r3, r3, r0
 800073c:	469c      	mov	ip, r3
 800073e:	4663      	mov	r3, ip
 8000740:	015b      	lsls	r3, r3, #5
 8000742:	d400      	bmi.n	8000746 <__aeabi_fsub+0x6e>
 8000744:	e0cd      	b.n	80008e2 <__aeabi_fsub+0x20a>
 8000746:	4663      	mov	r3, ip
 8000748:	019f      	lsls	r7, r3, #6
 800074a:	09bf      	lsrs	r7, r7, #6
 800074c:	0038      	movs	r0, r7
 800074e:	f000 fad1 	bl	8000cf4 <__clzsi2>
 8000752:	003b      	movs	r3, r7
 8000754:	3805      	subs	r0, #5
 8000756:	4083      	lsls	r3, r0
 8000758:	4285      	cmp	r5, r0
 800075a:	dc00      	bgt.n	800075e <__aeabi_fsub+0x86>
 800075c:	e0a2      	b.n	80008a4 <__aeabi_fsub+0x1cc>
 800075e:	4ab7      	ldr	r2, [pc, #732]	@ (8000a3c <__aeabi_fsub+0x364>)
 8000760:	1a2d      	subs	r5, r5, r0
 8000762:	401a      	ands	r2, r3
 8000764:	4694      	mov	ip, r2
 8000766:	075a      	lsls	r2, r3, #29
 8000768:	d100      	bne.n	800076c <__aeabi_fsub+0x94>
 800076a:	e0c3      	b.n	80008f4 <__aeabi_fsub+0x21c>
 800076c:	220f      	movs	r2, #15
 800076e:	4013      	ands	r3, r2
 8000770:	2b04      	cmp	r3, #4
 8000772:	d100      	bne.n	8000776 <__aeabi_fsub+0x9e>
 8000774:	e0be      	b.n	80008f4 <__aeabi_fsub+0x21c>
 8000776:	2304      	movs	r3, #4
 8000778:	4698      	mov	r8, r3
 800077a:	44c4      	add	ip, r8
 800077c:	4663      	mov	r3, ip
 800077e:	015b      	lsls	r3, r3, #5
 8000780:	d400      	bmi.n	8000784 <__aeabi_fsub+0xac>
 8000782:	e0b7      	b.n	80008f4 <__aeabi_fsub+0x21c>
 8000784:	1c68      	adds	r0, r5, #1
 8000786:	2dfe      	cmp	r5, #254	@ 0xfe
 8000788:	d000      	beq.n	800078c <__aeabi_fsub+0xb4>
 800078a:	e0a5      	b.n	80008d8 <__aeabi_fsub+0x200>
 800078c:	20ff      	movs	r0, #255	@ 0xff
 800078e:	2200      	movs	r2, #0
 8000790:	05c0      	lsls	r0, r0, #23
 8000792:	4310      	orrs	r0, r2
 8000794:	07e4      	lsls	r4, r4, #31
 8000796:	4320      	orrs	r0, r4
 8000798:	bcc0      	pop	{r6, r7}
 800079a:	46b9      	mov	r9, r7
 800079c:	46b0      	mov	r8, r6
 800079e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dc00      	bgt.n	80007a6 <__aeabi_fsub+0xce>
 80007a4:	e1eb      	b.n	8000b7e <__aeabi_fsub+0x4a6>
 80007a6:	2a00      	cmp	r2, #0
 80007a8:	d046      	beq.n	8000838 <__aeabi_fsub+0x160>
 80007aa:	2dff      	cmp	r5, #255	@ 0xff
 80007ac:	d100      	bne.n	80007b0 <__aeabi_fsub+0xd8>
 80007ae:	e0a4      	b.n	80008fa <__aeabi_fsub+0x222>
 80007b0:	2280      	movs	r2, #128	@ 0x80
 80007b2:	04d2      	lsls	r2, r2, #19
 80007b4:	4311      	orrs	r1, r2
 80007b6:	2b1b      	cmp	r3, #27
 80007b8:	dc00      	bgt.n	80007bc <__aeabi_fsub+0xe4>
 80007ba:	e0fb      	b.n	80009b4 <__aeabi_fsub+0x2dc>
 80007bc:	2305      	movs	r3, #5
 80007be:	4698      	mov	r8, r3
 80007c0:	002b      	movs	r3, r5
 80007c2:	44c4      	add	ip, r8
 80007c4:	4662      	mov	r2, ip
 80007c6:	08d7      	lsrs	r7, r2, #3
 80007c8:	2bff      	cmp	r3, #255	@ 0xff
 80007ca:	d100      	bne.n	80007ce <__aeabi_fsub+0xf6>
 80007cc:	e095      	b.n	80008fa <__aeabi_fsub+0x222>
 80007ce:	027a      	lsls	r2, r7, #9
 80007d0:	0a52      	lsrs	r2, r2, #9
 80007d2:	b2d8      	uxtb	r0, r3
 80007d4:	e7dc      	b.n	8000790 <__aeabi_fsub+0xb8>
 80007d6:	002b      	movs	r3, r5
 80007d8:	3bff      	subs	r3, #255	@ 0xff
 80007da:	4699      	mov	r9, r3
 80007dc:	2900      	cmp	r1, #0
 80007de:	d118      	bne.n	8000812 <__aeabi_fsub+0x13a>
 80007e0:	2301      	movs	r3, #1
 80007e2:	405e      	eors	r6, r3
 80007e4:	42b4      	cmp	r4, r6
 80007e6:	d100      	bne.n	80007ea <__aeabi_fsub+0x112>
 80007e8:	e0ca      	b.n	8000980 <__aeabi_fsub+0x2a8>
 80007ea:	464b      	mov	r3, r9
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d02d      	beq.n	800084c <__aeabi_fsub+0x174>
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d000      	beq.n	80007f6 <__aeabi_fsub+0x11e>
 80007f4:	e13c      	b.n	8000a70 <__aeabi_fsub+0x398>
 80007f6:	23ff      	movs	r3, #255	@ 0xff
 80007f8:	4664      	mov	r4, ip
 80007fa:	2c00      	cmp	r4, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_fsub+0x128>
 80007fe:	e15f      	b.n	8000ac0 <__aeabi_fsub+0x3e8>
 8000800:	1e5d      	subs	r5, r3, #1
 8000802:	2b01      	cmp	r3, #1
 8000804:	d100      	bne.n	8000808 <__aeabi_fsub+0x130>
 8000806:	e174      	b.n	8000af2 <__aeabi_fsub+0x41a>
 8000808:	0034      	movs	r4, r6
 800080a:	2bff      	cmp	r3, #255	@ 0xff
 800080c:	d074      	beq.n	80008f8 <__aeabi_fsub+0x220>
 800080e:	002b      	movs	r3, r5
 8000810:	e103      	b.n	8000a1a <__aeabi_fsub+0x342>
 8000812:	42b4      	cmp	r4, r6
 8000814:	d100      	bne.n	8000818 <__aeabi_fsub+0x140>
 8000816:	e09c      	b.n	8000952 <__aeabi_fsub+0x27a>
 8000818:	2b00      	cmp	r3, #0
 800081a:	d017      	beq.n	800084c <__aeabi_fsub+0x174>
 800081c:	2d00      	cmp	r5, #0
 800081e:	d0ea      	beq.n	80007f6 <__aeabi_fsub+0x11e>
 8000820:	0007      	movs	r7, r0
 8000822:	0034      	movs	r4, r6
 8000824:	e06c      	b.n	8000900 <__aeabi_fsub+0x228>
 8000826:	2900      	cmp	r1, #0
 8000828:	d0cc      	beq.n	80007c4 <__aeabi_fsub+0xec>
 800082a:	1e5a      	subs	r2, r3, #1
 800082c:	2b01      	cmp	r3, #1
 800082e:	d02b      	beq.n	8000888 <__aeabi_fsub+0x1b0>
 8000830:	2bff      	cmp	r3, #255	@ 0xff
 8000832:	d062      	beq.n	80008fa <__aeabi_fsub+0x222>
 8000834:	0013      	movs	r3, r2
 8000836:	e773      	b.n	8000720 <__aeabi_fsub+0x48>
 8000838:	2900      	cmp	r1, #0
 800083a:	d0c3      	beq.n	80007c4 <__aeabi_fsub+0xec>
 800083c:	1e5a      	subs	r2, r3, #1
 800083e:	2b01      	cmp	r3, #1
 8000840:	d100      	bne.n	8000844 <__aeabi_fsub+0x16c>
 8000842:	e11e      	b.n	8000a82 <__aeabi_fsub+0x3aa>
 8000844:	2bff      	cmp	r3, #255	@ 0xff
 8000846:	d058      	beq.n	80008fa <__aeabi_fsub+0x222>
 8000848:	0013      	movs	r3, r2
 800084a:	e7b4      	b.n	80007b6 <__aeabi_fsub+0xde>
 800084c:	22fe      	movs	r2, #254	@ 0xfe
 800084e:	1c6b      	adds	r3, r5, #1
 8000850:	421a      	tst	r2, r3
 8000852:	d10d      	bne.n	8000870 <__aeabi_fsub+0x198>
 8000854:	2d00      	cmp	r5, #0
 8000856:	d060      	beq.n	800091a <__aeabi_fsub+0x242>
 8000858:	4663      	mov	r3, ip
 800085a:	2b00      	cmp	r3, #0
 800085c:	d000      	beq.n	8000860 <__aeabi_fsub+0x188>
 800085e:	e120      	b.n	8000aa2 <__aeabi_fsub+0x3ca>
 8000860:	2900      	cmp	r1, #0
 8000862:	d000      	beq.n	8000866 <__aeabi_fsub+0x18e>
 8000864:	e128      	b.n	8000ab8 <__aeabi_fsub+0x3e0>
 8000866:	2280      	movs	r2, #128	@ 0x80
 8000868:	2400      	movs	r4, #0
 800086a:	20ff      	movs	r0, #255	@ 0xff
 800086c:	03d2      	lsls	r2, r2, #15
 800086e:	e78f      	b.n	8000790 <__aeabi_fsub+0xb8>
 8000870:	4663      	mov	r3, ip
 8000872:	1a5f      	subs	r7, r3, r1
 8000874:	017b      	lsls	r3, r7, #5
 8000876:	d500      	bpl.n	800087a <__aeabi_fsub+0x1a2>
 8000878:	e0fe      	b.n	8000a78 <__aeabi_fsub+0x3a0>
 800087a:	2f00      	cmp	r7, #0
 800087c:	d000      	beq.n	8000880 <__aeabi_fsub+0x1a8>
 800087e:	e765      	b.n	800074c <__aeabi_fsub+0x74>
 8000880:	2400      	movs	r4, #0
 8000882:	2000      	movs	r0, #0
 8000884:	2200      	movs	r2, #0
 8000886:	e783      	b.n	8000790 <__aeabi_fsub+0xb8>
 8000888:	4663      	mov	r3, ip
 800088a:	1a59      	subs	r1, r3, r1
 800088c:	014b      	lsls	r3, r1, #5
 800088e:	d400      	bmi.n	8000892 <__aeabi_fsub+0x1ba>
 8000890:	e119      	b.n	8000ac6 <__aeabi_fsub+0x3ee>
 8000892:	018f      	lsls	r7, r1, #6
 8000894:	09bf      	lsrs	r7, r7, #6
 8000896:	0038      	movs	r0, r7
 8000898:	f000 fa2c 	bl	8000cf4 <__clzsi2>
 800089c:	003b      	movs	r3, r7
 800089e:	3805      	subs	r0, #5
 80008a0:	4083      	lsls	r3, r0
 80008a2:	2501      	movs	r5, #1
 80008a4:	2220      	movs	r2, #32
 80008a6:	1b40      	subs	r0, r0, r5
 80008a8:	3001      	adds	r0, #1
 80008aa:	1a12      	subs	r2, r2, r0
 80008ac:	0019      	movs	r1, r3
 80008ae:	4093      	lsls	r3, r2
 80008b0:	40c1      	lsrs	r1, r0
 80008b2:	1e5a      	subs	r2, r3, #1
 80008b4:	4193      	sbcs	r3, r2
 80008b6:	4319      	orrs	r1, r3
 80008b8:	468c      	mov	ip, r1
 80008ba:	1e0b      	subs	r3, r1, #0
 80008bc:	d0e1      	beq.n	8000882 <__aeabi_fsub+0x1aa>
 80008be:	075b      	lsls	r3, r3, #29
 80008c0:	d100      	bne.n	80008c4 <__aeabi_fsub+0x1ec>
 80008c2:	e152      	b.n	8000b6a <__aeabi_fsub+0x492>
 80008c4:	230f      	movs	r3, #15
 80008c6:	2500      	movs	r5, #0
 80008c8:	400b      	ands	r3, r1
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	d000      	beq.n	80008d0 <__aeabi_fsub+0x1f8>
 80008ce:	e752      	b.n	8000776 <__aeabi_fsub+0x9e>
 80008d0:	2001      	movs	r0, #1
 80008d2:	014a      	lsls	r2, r1, #5
 80008d4:	d400      	bmi.n	80008d8 <__aeabi_fsub+0x200>
 80008d6:	e092      	b.n	80009fe <__aeabi_fsub+0x326>
 80008d8:	b2c0      	uxtb	r0, r0
 80008da:	4663      	mov	r3, ip
 80008dc:	019a      	lsls	r2, r3, #6
 80008de:	0a52      	lsrs	r2, r2, #9
 80008e0:	e756      	b.n	8000790 <__aeabi_fsub+0xb8>
 80008e2:	4663      	mov	r3, ip
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	d005      	beq.n	80008f4 <__aeabi_fsub+0x21c>
 80008e8:	230f      	movs	r3, #15
 80008ea:	4662      	mov	r2, ip
 80008ec:	4013      	ands	r3, r2
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	d000      	beq.n	80008f4 <__aeabi_fsub+0x21c>
 80008f2:	e740      	b.n	8000776 <__aeabi_fsub+0x9e>
 80008f4:	002b      	movs	r3, r5
 80008f6:	e765      	b.n	80007c4 <__aeabi_fsub+0xec>
 80008f8:	0007      	movs	r7, r0
 80008fa:	2f00      	cmp	r7, #0
 80008fc:	d100      	bne.n	8000900 <__aeabi_fsub+0x228>
 80008fe:	e745      	b.n	800078c <__aeabi_fsub+0xb4>
 8000900:	2280      	movs	r2, #128	@ 0x80
 8000902:	03d2      	lsls	r2, r2, #15
 8000904:	433a      	orrs	r2, r7
 8000906:	0252      	lsls	r2, r2, #9
 8000908:	20ff      	movs	r0, #255	@ 0xff
 800090a:	0a52      	lsrs	r2, r2, #9
 800090c:	e740      	b.n	8000790 <__aeabi_fsub+0xb8>
 800090e:	2b00      	cmp	r3, #0
 8000910:	d179      	bne.n	8000a06 <__aeabi_fsub+0x32e>
 8000912:	22fe      	movs	r2, #254	@ 0xfe
 8000914:	1c6b      	adds	r3, r5, #1
 8000916:	421a      	tst	r2, r3
 8000918:	d1aa      	bne.n	8000870 <__aeabi_fsub+0x198>
 800091a:	4663      	mov	r3, ip
 800091c:	2b00      	cmp	r3, #0
 800091e:	d100      	bne.n	8000922 <__aeabi_fsub+0x24a>
 8000920:	e0f5      	b.n	8000b0e <__aeabi_fsub+0x436>
 8000922:	2900      	cmp	r1, #0
 8000924:	d100      	bne.n	8000928 <__aeabi_fsub+0x250>
 8000926:	e0d1      	b.n	8000acc <__aeabi_fsub+0x3f4>
 8000928:	1a5f      	subs	r7, r3, r1
 800092a:	2380      	movs	r3, #128	@ 0x80
 800092c:	04db      	lsls	r3, r3, #19
 800092e:	421f      	tst	r7, r3
 8000930:	d100      	bne.n	8000934 <__aeabi_fsub+0x25c>
 8000932:	e10e      	b.n	8000b52 <__aeabi_fsub+0x47a>
 8000934:	4662      	mov	r2, ip
 8000936:	2401      	movs	r4, #1
 8000938:	1a8a      	subs	r2, r1, r2
 800093a:	4694      	mov	ip, r2
 800093c:	2000      	movs	r0, #0
 800093e:	4034      	ands	r4, r6
 8000940:	2a00      	cmp	r2, #0
 8000942:	d100      	bne.n	8000946 <__aeabi_fsub+0x26e>
 8000944:	e724      	b.n	8000790 <__aeabi_fsub+0xb8>
 8000946:	2001      	movs	r0, #1
 8000948:	421a      	tst	r2, r3
 800094a:	d1c6      	bne.n	80008da <__aeabi_fsub+0x202>
 800094c:	2300      	movs	r3, #0
 800094e:	08d7      	lsrs	r7, r2, #3
 8000950:	e73d      	b.n	80007ce <__aeabi_fsub+0xf6>
 8000952:	2b00      	cmp	r3, #0
 8000954:	d017      	beq.n	8000986 <__aeabi_fsub+0x2ae>
 8000956:	2d00      	cmp	r5, #0
 8000958:	d000      	beq.n	800095c <__aeabi_fsub+0x284>
 800095a:	e0af      	b.n	8000abc <__aeabi_fsub+0x3e4>
 800095c:	23ff      	movs	r3, #255	@ 0xff
 800095e:	4665      	mov	r5, ip
 8000960:	2d00      	cmp	r5, #0
 8000962:	d100      	bne.n	8000966 <__aeabi_fsub+0x28e>
 8000964:	e0ad      	b.n	8000ac2 <__aeabi_fsub+0x3ea>
 8000966:	1e5e      	subs	r6, r3, #1
 8000968:	2b01      	cmp	r3, #1
 800096a:	d100      	bne.n	800096e <__aeabi_fsub+0x296>
 800096c:	e089      	b.n	8000a82 <__aeabi_fsub+0x3aa>
 800096e:	2bff      	cmp	r3, #255	@ 0xff
 8000970:	d0c2      	beq.n	80008f8 <__aeabi_fsub+0x220>
 8000972:	2e1b      	cmp	r6, #27
 8000974:	dc00      	bgt.n	8000978 <__aeabi_fsub+0x2a0>
 8000976:	e0ab      	b.n	8000ad0 <__aeabi_fsub+0x3f8>
 8000978:	1d4b      	adds	r3, r1, #5
 800097a:	469c      	mov	ip, r3
 800097c:	0013      	movs	r3, r2
 800097e:	e721      	b.n	80007c4 <__aeabi_fsub+0xec>
 8000980:	464b      	mov	r3, r9
 8000982:	2b00      	cmp	r3, #0
 8000984:	d170      	bne.n	8000a68 <__aeabi_fsub+0x390>
 8000986:	22fe      	movs	r2, #254	@ 0xfe
 8000988:	1c6b      	adds	r3, r5, #1
 800098a:	421a      	tst	r2, r3
 800098c:	d15e      	bne.n	8000a4c <__aeabi_fsub+0x374>
 800098e:	2d00      	cmp	r5, #0
 8000990:	d000      	beq.n	8000994 <__aeabi_fsub+0x2bc>
 8000992:	e0c3      	b.n	8000b1c <__aeabi_fsub+0x444>
 8000994:	4663      	mov	r3, ip
 8000996:	2b00      	cmp	r3, #0
 8000998:	d100      	bne.n	800099c <__aeabi_fsub+0x2c4>
 800099a:	e0d0      	b.n	8000b3e <__aeabi_fsub+0x466>
 800099c:	2900      	cmp	r1, #0
 800099e:	d100      	bne.n	80009a2 <__aeabi_fsub+0x2ca>
 80009a0:	e094      	b.n	8000acc <__aeabi_fsub+0x3f4>
 80009a2:	000a      	movs	r2, r1
 80009a4:	4462      	add	r2, ip
 80009a6:	0153      	lsls	r3, r2, #5
 80009a8:	d400      	bmi.n	80009ac <__aeabi_fsub+0x2d4>
 80009aa:	e0d8      	b.n	8000b5e <__aeabi_fsub+0x486>
 80009ac:	0192      	lsls	r2, r2, #6
 80009ae:	2001      	movs	r0, #1
 80009b0:	0a52      	lsrs	r2, r2, #9
 80009b2:	e6ed      	b.n	8000790 <__aeabi_fsub+0xb8>
 80009b4:	0008      	movs	r0, r1
 80009b6:	2220      	movs	r2, #32
 80009b8:	40d8      	lsrs	r0, r3
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	4099      	lsls	r1, r3
 80009be:	000b      	movs	r3, r1
 80009c0:	1e5a      	subs	r2, r3, #1
 80009c2:	4193      	sbcs	r3, r2
 80009c4:	4303      	orrs	r3, r0
 80009c6:	449c      	add	ip, r3
 80009c8:	4663      	mov	r3, ip
 80009ca:	015b      	lsls	r3, r3, #5
 80009cc:	d589      	bpl.n	80008e2 <__aeabi_fsub+0x20a>
 80009ce:	3501      	adds	r5, #1
 80009d0:	2dff      	cmp	r5, #255	@ 0xff
 80009d2:	d100      	bne.n	80009d6 <__aeabi_fsub+0x2fe>
 80009d4:	e6da      	b.n	800078c <__aeabi_fsub+0xb4>
 80009d6:	4662      	mov	r2, ip
 80009d8:	2301      	movs	r3, #1
 80009da:	4919      	ldr	r1, [pc, #100]	@ (8000a40 <__aeabi_fsub+0x368>)
 80009dc:	4013      	ands	r3, r2
 80009de:	0852      	lsrs	r2, r2, #1
 80009e0:	400a      	ands	r2, r1
 80009e2:	431a      	orrs	r2, r3
 80009e4:	0013      	movs	r3, r2
 80009e6:	4694      	mov	ip, r2
 80009e8:	075b      	lsls	r3, r3, #29
 80009ea:	d004      	beq.n	80009f6 <__aeabi_fsub+0x31e>
 80009ec:	230f      	movs	r3, #15
 80009ee:	4013      	ands	r3, r2
 80009f0:	2b04      	cmp	r3, #4
 80009f2:	d000      	beq.n	80009f6 <__aeabi_fsub+0x31e>
 80009f4:	e6bf      	b.n	8000776 <__aeabi_fsub+0x9e>
 80009f6:	4663      	mov	r3, ip
 80009f8:	015b      	lsls	r3, r3, #5
 80009fa:	d500      	bpl.n	80009fe <__aeabi_fsub+0x326>
 80009fc:	e6c2      	b.n	8000784 <__aeabi_fsub+0xac>
 80009fe:	4663      	mov	r3, ip
 8000a00:	08df      	lsrs	r7, r3, #3
 8000a02:	002b      	movs	r3, r5
 8000a04:	e6e3      	b.n	80007ce <__aeabi_fsub+0xf6>
 8000a06:	1b53      	subs	r3, r2, r5
 8000a08:	2d00      	cmp	r5, #0
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_fsub+0x336>
 8000a0c:	e6f4      	b.n	80007f8 <__aeabi_fsub+0x120>
 8000a0e:	2080      	movs	r0, #128	@ 0x80
 8000a10:	4664      	mov	r4, ip
 8000a12:	04c0      	lsls	r0, r0, #19
 8000a14:	4304      	orrs	r4, r0
 8000a16:	46a4      	mov	ip, r4
 8000a18:	0034      	movs	r4, r6
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	2b1b      	cmp	r3, #27
 8000a1e:	dc09      	bgt.n	8000a34 <__aeabi_fsub+0x35c>
 8000a20:	2520      	movs	r5, #32
 8000a22:	4660      	mov	r0, ip
 8000a24:	40d8      	lsrs	r0, r3
 8000a26:	1aeb      	subs	r3, r5, r3
 8000a28:	4665      	mov	r5, ip
 8000a2a:	409d      	lsls	r5, r3
 8000a2c:	002b      	movs	r3, r5
 8000a2e:	1e5d      	subs	r5, r3, #1
 8000a30:	41ab      	sbcs	r3, r5
 8000a32:	4318      	orrs	r0, r3
 8000a34:	1a0b      	subs	r3, r1, r0
 8000a36:	469c      	mov	ip, r3
 8000a38:	0015      	movs	r5, r2
 8000a3a:	e680      	b.n	800073e <__aeabi_fsub+0x66>
 8000a3c:	fbffffff 	.word	0xfbffffff
 8000a40:	7dffffff 	.word	0x7dffffff
 8000a44:	22fe      	movs	r2, #254	@ 0xfe
 8000a46:	1c6b      	adds	r3, r5, #1
 8000a48:	4213      	tst	r3, r2
 8000a4a:	d0a3      	beq.n	8000994 <__aeabi_fsub+0x2bc>
 8000a4c:	2bff      	cmp	r3, #255	@ 0xff
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_fsub+0x37a>
 8000a50:	e69c      	b.n	800078c <__aeabi_fsub+0xb4>
 8000a52:	4461      	add	r1, ip
 8000a54:	0849      	lsrs	r1, r1, #1
 8000a56:	074a      	lsls	r2, r1, #29
 8000a58:	d049      	beq.n	8000aee <__aeabi_fsub+0x416>
 8000a5a:	220f      	movs	r2, #15
 8000a5c:	400a      	ands	r2, r1
 8000a5e:	2a04      	cmp	r2, #4
 8000a60:	d045      	beq.n	8000aee <__aeabi_fsub+0x416>
 8000a62:	1d0a      	adds	r2, r1, #4
 8000a64:	4694      	mov	ip, r2
 8000a66:	e6ad      	b.n	80007c4 <__aeabi_fsub+0xec>
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_fsub+0x396>
 8000a6c:	e776      	b.n	800095c <__aeabi_fsub+0x284>
 8000a6e:	e68d      	b.n	800078c <__aeabi_fsub+0xb4>
 8000a70:	0034      	movs	r4, r6
 8000a72:	20ff      	movs	r0, #255	@ 0xff
 8000a74:	2200      	movs	r2, #0
 8000a76:	e68b      	b.n	8000790 <__aeabi_fsub+0xb8>
 8000a78:	4663      	mov	r3, ip
 8000a7a:	2401      	movs	r4, #1
 8000a7c:	1acf      	subs	r7, r1, r3
 8000a7e:	4034      	ands	r4, r6
 8000a80:	e664      	b.n	800074c <__aeabi_fsub+0x74>
 8000a82:	4461      	add	r1, ip
 8000a84:	014b      	lsls	r3, r1, #5
 8000a86:	d56d      	bpl.n	8000b64 <__aeabi_fsub+0x48c>
 8000a88:	0848      	lsrs	r0, r1, #1
 8000a8a:	4944      	ldr	r1, [pc, #272]	@ (8000b9c <__aeabi_fsub+0x4c4>)
 8000a8c:	4001      	ands	r1, r0
 8000a8e:	0743      	lsls	r3, r0, #29
 8000a90:	d02c      	beq.n	8000aec <__aeabi_fsub+0x414>
 8000a92:	230f      	movs	r3, #15
 8000a94:	4003      	ands	r3, r0
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	d028      	beq.n	8000aec <__aeabi_fsub+0x414>
 8000a9a:	1d0b      	adds	r3, r1, #4
 8000a9c:	469c      	mov	ip, r3
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	e690      	b.n	80007c4 <__aeabi_fsub+0xec>
 8000aa2:	2900      	cmp	r1, #0
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_fsub+0x3d0>
 8000aa6:	e72b      	b.n	8000900 <__aeabi_fsub+0x228>
 8000aa8:	2380      	movs	r3, #128	@ 0x80
 8000aaa:	03db      	lsls	r3, r3, #15
 8000aac:	429f      	cmp	r7, r3
 8000aae:	d200      	bcs.n	8000ab2 <__aeabi_fsub+0x3da>
 8000ab0:	e726      	b.n	8000900 <__aeabi_fsub+0x228>
 8000ab2:	4298      	cmp	r0, r3
 8000ab4:	d300      	bcc.n	8000ab8 <__aeabi_fsub+0x3e0>
 8000ab6:	e723      	b.n	8000900 <__aeabi_fsub+0x228>
 8000ab8:	2401      	movs	r4, #1
 8000aba:	4034      	ands	r4, r6
 8000abc:	0007      	movs	r7, r0
 8000abe:	e71f      	b.n	8000900 <__aeabi_fsub+0x228>
 8000ac0:	0034      	movs	r4, r6
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	e67e      	b.n	80007c4 <__aeabi_fsub+0xec>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	08cf      	lsrs	r7, r1, #3
 8000aca:	e680      	b.n	80007ce <__aeabi_fsub+0xf6>
 8000acc:	2300      	movs	r3, #0
 8000ace:	e67e      	b.n	80007ce <__aeabi_fsub+0xf6>
 8000ad0:	2020      	movs	r0, #32
 8000ad2:	4665      	mov	r5, ip
 8000ad4:	1b80      	subs	r0, r0, r6
 8000ad6:	4085      	lsls	r5, r0
 8000ad8:	4663      	mov	r3, ip
 8000ada:	0028      	movs	r0, r5
 8000adc:	40f3      	lsrs	r3, r6
 8000ade:	1e45      	subs	r5, r0, #1
 8000ae0:	41a8      	sbcs	r0, r5
 8000ae2:	4303      	orrs	r3, r0
 8000ae4:	469c      	mov	ip, r3
 8000ae6:	0015      	movs	r5, r2
 8000ae8:	448c      	add	ip, r1
 8000aea:	e76d      	b.n	80009c8 <__aeabi_fsub+0x2f0>
 8000aec:	2302      	movs	r3, #2
 8000aee:	08cf      	lsrs	r7, r1, #3
 8000af0:	e66d      	b.n	80007ce <__aeabi_fsub+0xf6>
 8000af2:	1b0f      	subs	r7, r1, r4
 8000af4:	017b      	lsls	r3, r7, #5
 8000af6:	d528      	bpl.n	8000b4a <__aeabi_fsub+0x472>
 8000af8:	01bf      	lsls	r7, r7, #6
 8000afa:	09bf      	lsrs	r7, r7, #6
 8000afc:	0038      	movs	r0, r7
 8000afe:	f000 f8f9 	bl	8000cf4 <__clzsi2>
 8000b02:	003b      	movs	r3, r7
 8000b04:	3805      	subs	r0, #5
 8000b06:	4083      	lsls	r3, r0
 8000b08:	0034      	movs	r4, r6
 8000b0a:	2501      	movs	r5, #1
 8000b0c:	e6ca      	b.n	80008a4 <__aeabi_fsub+0x1cc>
 8000b0e:	2900      	cmp	r1, #0
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fsub+0x43c>
 8000b12:	e6b5      	b.n	8000880 <__aeabi_fsub+0x1a8>
 8000b14:	2401      	movs	r4, #1
 8000b16:	0007      	movs	r7, r0
 8000b18:	4034      	ands	r4, r6
 8000b1a:	e658      	b.n	80007ce <__aeabi_fsub+0xf6>
 8000b1c:	4663      	mov	r3, ip
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d100      	bne.n	8000b24 <__aeabi_fsub+0x44c>
 8000b22:	e6e9      	b.n	80008f8 <__aeabi_fsub+0x220>
 8000b24:	2900      	cmp	r1, #0
 8000b26:	d100      	bne.n	8000b2a <__aeabi_fsub+0x452>
 8000b28:	e6ea      	b.n	8000900 <__aeabi_fsub+0x228>
 8000b2a:	2380      	movs	r3, #128	@ 0x80
 8000b2c:	03db      	lsls	r3, r3, #15
 8000b2e:	429f      	cmp	r7, r3
 8000b30:	d200      	bcs.n	8000b34 <__aeabi_fsub+0x45c>
 8000b32:	e6e5      	b.n	8000900 <__aeabi_fsub+0x228>
 8000b34:	4298      	cmp	r0, r3
 8000b36:	d300      	bcc.n	8000b3a <__aeabi_fsub+0x462>
 8000b38:	e6e2      	b.n	8000900 <__aeabi_fsub+0x228>
 8000b3a:	0007      	movs	r7, r0
 8000b3c:	e6e0      	b.n	8000900 <__aeabi_fsub+0x228>
 8000b3e:	2900      	cmp	r1, #0
 8000b40:	d100      	bne.n	8000b44 <__aeabi_fsub+0x46c>
 8000b42:	e69e      	b.n	8000882 <__aeabi_fsub+0x1aa>
 8000b44:	2300      	movs	r3, #0
 8000b46:	08cf      	lsrs	r7, r1, #3
 8000b48:	e641      	b.n	80007ce <__aeabi_fsub+0xf6>
 8000b4a:	0034      	movs	r4, r6
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	08ff      	lsrs	r7, r7, #3
 8000b50:	e63d      	b.n	80007ce <__aeabi_fsub+0xf6>
 8000b52:	2f00      	cmp	r7, #0
 8000b54:	d100      	bne.n	8000b58 <__aeabi_fsub+0x480>
 8000b56:	e693      	b.n	8000880 <__aeabi_fsub+0x1a8>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	08ff      	lsrs	r7, r7, #3
 8000b5c:	e637      	b.n	80007ce <__aeabi_fsub+0xf6>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	08d7      	lsrs	r7, r2, #3
 8000b62:	e634      	b.n	80007ce <__aeabi_fsub+0xf6>
 8000b64:	2301      	movs	r3, #1
 8000b66:	08cf      	lsrs	r7, r1, #3
 8000b68:	e631      	b.n	80007ce <__aeabi_fsub+0xf6>
 8000b6a:	2280      	movs	r2, #128	@ 0x80
 8000b6c:	000b      	movs	r3, r1
 8000b6e:	04d2      	lsls	r2, r2, #19
 8000b70:	2001      	movs	r0, #1
 8000b72:	4013      	ands	r3, r2
 8000b74:	4211      	tst	r1, r2
 8000b76:	d000      	beq.n	8000b7a <__aeabi_fsub+0x4a2>
 8000b78:	e6ae      	b.n	80008d8 <__aeabi_fsub+0x200>
 8000b7a:	08cf      	lsrs	r7, r1, #3
 8000b7c:	e627      	b.n	80007ce <__aeabi_fsub+0xf6>
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d100      	bne.n	8000b84 <__aeabi_fsub+0x4ac>
 8000b82:	e75f      	b.n	8000a44 <__aeabi_fsub+0x36c>
 8000b84:	1b56      	subs	r6, r2, r5
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	d101      	bne.n	8000b8e <__aeabi_fsub+0x4b6>
 8000b8a:	0033      	movs	r3, r6
 8000b8c:	e6e7      	b.n	800095e <__aeabi_fsub+0x286>
 8000b8e:	2380      	movs	r3, #128	@ 0x80
 8000b90:	4660      	mov	r0, ip
 8000b92:	04db      	lsls	r3, r3, #19
 8000b94:	4318      	orrs	r0, r3
 8000b96:	4684      	mov	ip, r0
 8000b98:	e6eb      	b.n	8000972 <__aeabi_fsub+0x29a>
 8000b9a:	46c0      	nop			@ (mov r8, r8)
 8000b9c:	7dffffff 	.word	0x7dffffff

08000ba0 <__aeabi_f2iz>:
 8000ba0:	0241      	lsls	r1, r0, #9
 8000ba2:	0042      	lsls	r2, r0, #1
 8000ba4:	0fc3      	lsrs	r3, r0, #31
 8000ba6:	0a49      	lsrs	r1, r1, #9
 8000ba8:	2000      	movs	r0, #0
 8000baa:	0e12      	lsrs	r2, r2, #24
 8000bac:	2a7e      	cmp	r2, #126	@ 0x7e
 8000bae:	dd03      	ble.n	8000bb8 <__aeabi_f2iz+0x18>
 8000bb0:	2a9d      	cmp	r2, #157	@ 0x9d
 8000bb2:	dd02      	ble.n	8000bba <__aeabi_f2iz+0x1a>
 8000bb4:	4a09      	ldr	r2, [pc, #36]	@ (8000bdc <__aeabi_f2iz+0x3c>)
 8000bb6:	1898      	adds	r0, r3, r2
 8000bb8:	4770      	bx	lr
 8000bba:	2080      	movs	r0, #128	@ 0x80
 8000bbc:	0400      	lsls	r0, r0, #16
 8000bbe:	4301      	orrs	r1, r0
 8000bc0:	2a95      	cmp	r2, #149	@ 0x95
 8000bc2:	dc07      	bgt.n	8000bd4 <__aeabi_f2iz+0x34>
 8000bc4:	2096      	movs	r0, #150	@ 0x96
 8000bc6:	1a82      	subs	r2, r0, r2
 8000bc8:	40d1      	lsrs	r1, r2
 8000bca:	4248      	negs	r0, r1
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1f3      	bne.n	8000bb8 <__aeabi_f2iz+0x18>
 8000bd0:	0008      	movs	r0, r1
 8000bd2:	e7f1      	b.n	8000bb8 <__aeabi_f2iz+0x18>
 8000bd4:	3a96      	subs	r2, #150	@ 0x96
 8000bd6:	4091      	lsls	r1, r2
 8000bd8:	e7f7      	b.n	8000bca <__aeabi_f2iz+0x2a>
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	7fffffff 	.word	0x7fffffff

08000be0 <__aeabi_i2f>:
 8000be0:	b570      	push	{r4, r5, r6, lr}
 8000be2:	2800      	cmp	r0, #0
 8000be4:	d012      	beq.n	8000c0c <__aeabi_i2f+0x2c>
 8000be6:	17c3      	asrs	r3, r0, #31
 8000be8:	18c5      	adds	r5, r0, r3
 8000bea:	405d      	eors	r5, r3
 8000bec:	0fc4      	lsrs	r4, r0, #31
 8000bee:	0028      	movs	r0, r5
 8000bf0:	f000 f880 	bl	8000cf4 <__clzsi2>
 8000bf4:	239e      	movs	r3, #158	@ 0x9e
 8000bf6:	1a1b      	subs	r3, r3, r0
 8000bf8:	2b96      	cmp	r3, #150	@ 0x96
 8000bfa:	dc0f      	bgt.n	8000c1c <__aeabi_i2f+0x3c>
 8000bfc:	2808      	cmp	r0, #8
 8000bfe:	d038      	beq.n	8000c72 <__aeabi_i2f+0x92>
 8000c00:	3808      	subs	r0, #8
 8000c02:	4085      	lsls	r5, r0
 8000c04:	026d      	lsls	r5, r5, #9
 8000c06:	0a6d      	lsrs	r5, r5, #9
 8000c08:	b2d8      	uxtb	r0, r3
 8000c0a:	e002      	b.n	8000c12 <__aeabi_i2f+0x32>
 8000c0c:	2400      	movs	r4, #0
 8000c0e:	2000      	movs	r0, #0
 8000c10:	2500      	movs	r5, #0
 8000c12:	05c0      	lsls	r0, r0, #23
 8000c14:	4328      	orrs	r0, r5
 8000c16:	07e4      	lsls	r4, r4, #31
 8000c18:	4320      	orrs	r0, r4
 8000c1a:	bd70      	pop	{r4, r5, r6, pc}
 8000c1c:	2b99      	cmp	r3, #153	@ 0x99
 8000c1e:	dc14      	bgt.n	8000c4a <__aeabi_i2f+0x6a>
 8000c20:	1f42      	subs	r2, r0, #5
 8000c22:	4095      	lsls	r5, r2
 8000c24:	002a      	movs	r2, r5
 8000c26:	4915      	ldr	r1, [pc, #84]	@ (8000c7c <__aeabi_i2f+0x9c>)
 8000c28:	4011      	ands	r1, r2
 8000c2a:	0755      	lsls	r5, r2, #29
 8000c2c:	d01c      	beq.n	8000c68 <__aeabi_i2f+0x88>
 8000c2e:	250f      	movs	r5, #15
 8000c30:	402a      	ands	r2, r5
 8000c32:	2a04      	cmp	r2, #4
 8000c34:	d018      	beq.n	8000c68 <__aeabi_i2f+0x88>
 8000c36:	3104      	adds	r1, #4
 8000c38:	08ca      	lsrs	r2, r1, #3
 8000c3a:	0149      	lsls	r1, r1, #5
 8000c3c:	d515      	bpl.n	8000c6a <__aeabi_i2f+0x8a>
 8000c3e:	239f      	movs	r3, #159	@ 0x9f
 8000c40:	0252      	lsls	r2, r2, #9
 8000c42:	1a18      	subs	r0, r3, r0
 8000c44:	0a55      	lsrs	r5, r2, #9
 8000c46:	b2c0      	uxtb	r0, r0
 8000c48:	e7e3      	b.n	8000c12 <__aeabi_i2f+0x32>
 8000c4a:	2205      	movs	r2, #5
 8000c4c:	0029      	movs	r1, r5
 8000c4e:	1a12      	subs	r2, r2, r0
 8000c50:	40d1      	lsrs	r1, r2
 8000c52:	0002      	movs	r2, r0
 8000c54:	321b      	adds	r2, #27
 8000c56:	4095      	lsls	r5, r2
 8000c58:	002a      	movs	r2, r5
 8000c5a:	1e55      	subs	r5, r2, #1
 8000c5c:	41aa      	sbcs	r2, r5
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	4906      	ldr	r1, [pc, #24]	@ (8000c7c <__aeabi_i2f+0x9c>)
 8000c62:	4011      	ands	r1, r2
 8000c64:	0755      	lsls	r5, r2, #29
 8000c66:	d1e2      	bne.n	8000c2e <__aeabi_i2f+0x4e>
 8000c68:	08ca      	lsrs	r2, r1, #3
 8000c6a:	0252      	lsls	r2, r2, #9
 8000c6c:	0a55      	lsrs	r5, r2, #9
 8000c6e:	b2d8      	uxtb	r0, r3
 8000c70:	e7cf      	b.n	8000c12 <__aeabi_i2f+0x32>
 8000c72:	026d      	lsls	r5, r5, #9
 8000c74:	0a6d      	lsrs	r5, r5, #9
 8000c76:	308e      	adds	r0, #142	@ 0x8e
 8000c78:	e7cb      	b.n	8000c12 <__aeabi_i2f+0x32>
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	fbffffff 	.word	0xfbffffff

08000c80 <__aeabi_cfrcmple>:
 8000c80:	4684      	mov	ip, r0
 8000c82:	0008      	movs	r0, r1
 8000c84:	4661      	mov	r1, ip
 8000c86:	e7ff      	b.n	8000c88 <__aeabi_cfcmpeq>

08000c88 <__aeabi_cfcmpeq>:
 8000c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000c8a:	f000 f8c1 	bl	8000e10 <__lesf2>
 8000c8e:	2800      	cmp	r0, #0
 8000c90:	d401      	bmi.n	8000c96 <__aeabi_cfcmpeq+0xe>
 8000c92:	2100      	movs	r1, #0
 8000c94:	42c8      	cmn	r0, r1
 8000c96:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000c98 <__aeabi_fcmpeq>:
 8000c98:	b510      	push	{r4, lr}
 8000c9a:	f000 f849 	bl	8000d30 <__eqsf2>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	3001      	adds	r0, #1
 8000ca2:	bd10      	pop	{r4, pc}

08000ca4 <__aeabi_fcmplt>:
 8000ca4:	b510      	push	{r4, lr}
 8000ca6:	f000 f8b3 	bl	8000e10 <__lesf2>
 8000caa:	2800      	cmp	r0, #0
 8000cac:	db01      	blt.n	8000cb2 <__aeabi_fcmplt+0xe>
 8000cae:	2000      	movs	r0, #0
 8000cb0:	bd10      	pop	{r4, pc}
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	bd10      	pop	{r4, pc}
 8000cb6:	46c0      	nop			@ (mov r8, r8)

08000cb8 <__aeabi_fcmple>:
 8000cb8:	b510      	push	{r4, lr}
 8000cba:	f000 f8a9 	bl	8000e10 <__lesf2>
 8000cbe:	2800      	cmp	r0, #0
 8000cc0:	dd01      	ble.n	8000cc6 <__aeabi_fcmple+0xe>
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	bd10      	pop	{r4, pc}
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	bd10      	pop	{r4, pc}
 8000cca:	46c0      	nop			@ (mov r8, r8)

08000ccc <__aeabi_fcmpgt>:
 8000ccc:	b510      	push	{r4, lr}
 8000cce:	f000 f857 	bl	8000d80 <__gesf2>
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	dc01      	bgt.n	8000cda <__aeabi_fcmpgt+0xe>
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	bd10      	pop	{r4, pc}
 8000cda:	2001      	movs	r0, #1
 8000cdc:	bd10      	pop	{r4, pc}
 8000cde:	46c0      	nop			@ (mov r8, r8)

08000ce0 <__aeabi_fcmpge>:
 8000ce0:	b510      	push	{r4, lr}
 8000ce2:	f000 f84d 	bl	8000d80 <__gesf2>
 8000ce6:	2800      	cmp	r0, #0
 8000ce8:	da01      	bge.n	8000cee <__aeabi_fcmpge+0xe>
 8000cea:	2000      	movs	r0, #0
 8000cec:	bd10      	pop	{r4, pc}
 8000cee:	2001      	movs	r0, #1
 8000cf0:	bd10      	pop	{r4, pc}
 8000cf2:	46c0      	nop			@ (mov r8, r8)

08000cf4 <__clzsi2>:
 8000cf4:	211c      	movs	r1, #28
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	041b      	lsls	r3, r3, #16
 8000cfa:	4298      	cmp	r0, r3
 8000cfc:	d301      	bcc.n	8000d02 <__clzsi2+0xe>
 8000cfe:	0c00      	lsrs	r0, r0, #16
 8000d00:	3910      	subs	r1, #16
 8000d02:	0a1b      	lsrs	r3, r3, #8
 8000d04:	4298      	cmp	r0, r3
 8000d06:	d301      	bcc.n	8000d0c <__clzsi2+0x18>
 8000d08:	0a00      	lsrs	r0, r0, #8
 8000d0a:	3908      	subs	r1, #8
 8000d0c:	091b      	lsrs	r3, r3, #4
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d301      	bcc.n	8000d16 <__clzsi2+0x22>
 8000d12:	0900      	lsrs	r0, r0, #4
 8000d14:	3904      	subs	r1, #4
 8000d16:	a202      	add	r2, pc, #8	@ (adr r2, 8000d20 <__clzsi2+0x2c>)
 8000d18:	5c10      	ldrb	r0, [r2, r0]
 8000d1a:	1840      	adds	r0, r0, r1
 8000d1c:	4770      	bx	lr
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	02020304 	.word	0x02020304
 8000d24:	01010101 	.word	0x01010101
	...

08000d30 <__eqsf2>:
 8000d30:	b570      	push	{r4, r5, r6, lr}
 8000d32:	0042      	lsls	r2, r0, #1
 8000d34:	024e      	lsls	r6, r1, #9
 8000d36:	004c      	lsls	r4, r1, #1
 8000d38:	0245      	lsls	r5, r0, #9
 8000d3a:	0a6d      	lsrs	r5, r5, #9
 8000d3c:	0e12      	lsrs	r2, r2, #24
 8000d3e:	0fc3      	lsrs	r3, r0, #31
 8000d40:	0a76      	lsrs	r6, r6, #9
 8000d42:	0e24      	lsrs	r4, r4, #24
 8000d44:	0fc9      	lsrs	r1, r1, #31
 8000d46:	2aff      	cmp	r2, #255	@ 0xff
 8000d48:	d010      	beq.n	8000d6c <__eqsf2+0x3c>
 8000d4a:	2cff      	cmp	r4, #255	@ 0xff
 8000d4c:	d00c      	beq.n	8000d68 <__eqsf2+0x38>
 8000d4e:	2001      	movs	r0, #1
 8000d50:	42a2      	cmp	r2, r4
 8000d52:	d10a      	bne.n	8000d6a <__eqsf2+0x3a>
 8000d54:	42b5      	cmp	r5, r6
 8000d56:	d108      	bne.n	8000d6a <__eqsf2+0x3a>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d00f      	beq.n	8000d7c <__eqsf2+0x4c>
 8000d5c:	2a00      	cmp	r2, #0
 8000d5e:	d104      	bne.n	8000d6a <__eqsf2+0x3a>
 8000d60:	0028      	movs	r0, r5
 8000d62:	1e43      	subs	r3, r0, #1
 8000d64:	4198      	sbcs	r0, r3
 8000d66:	e000      	b.n	8000d6a <__eqsf2+0x3a>
 8000d68:	2001      	movs	r0, #1
 8000d6a:	bd70      	pop	{r4, r5, r6, pc}
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	2cff      	cmp	r4, #255	@ 0xff
 8000d70:	d1fb      	bne.n	8000d6a <__eqsf2+0x3a>
 8000d72:	4335      	orrs	r5, r6
 8000d74:	d1f9      	bne.n	8000d6a <__eqsf2+0x3a>
 8000d76:	404b      	eors	r3, r1
 8000d78:	0018      	movs	r0, r3
 8000d7a:	e7f6      	b.n	8000d6a <__eqsf2+0x3a>
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	e7f4      	b.n	8000d6a <__eqsf2+0x3a>

08000d80 <__gesf2>:
 8000d80:	b530      	push	{r4, r5, lr}
 8000d82:	0042      	lsls	r2, r0, #1
 8000d84:	0244      	lsls	r4, r0, #9
 8000d86:	024d      	lsls	r5, r1, #9
 8000d88:	0fc3      	lsrs	r3, r0, #31
 8000d8a:	0048      	lsls	r0, r1, #1
 8000d8c:	0a64      	lsrs	r4, r4, #9
 8000d8e:	0e12      	lsrs	r2, r2, #24
 8000d90:	0a6d      	lsrs	r5, r5, #9
 8000d92:	0e00      	lsrs	r0, r0, #24
 8000d94:	0fc9      	lsrs	r1, r1, #31
 8000d96:	2aff      	cmp	r2, #255	@ 0xff
 8000d98:	d018      	beq.n	8000dcc <__gesf2+0x4c>
 8000d9a:	28ff      	cmp	r0, #255	@ 0xff
 8000d9c:	d00a      	beq.n	8000db4 <__gesf2+0x34>
 8000d9e:	2a00      	cmp	r2, #0
 8000da0:	d11e      	bne.n	8000de0 <__gesf2+0x60>
 8000da2:	2800      	cmp	r0, #0
 8000da4:	d10a      	bne.n	8000dbc <__gesf2+0x3c>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d029      	beq.n	8000dfe <__gesf2+0x7e>
 8000daa:	2c00      	cmp	r4, #0
 8000dac:	d12d      	bne.n	8000e0a <__gesf2+0x8a>
 8000dae:	0048      	lsls	r0, r1, #1
 8000db0:	3801      	subs	r0, #1
 8000db2:	bd30      	pop	{r4, r5, pc}
 8000db4:	2d00      	cmp	r5, #0
 8000db6:	d125      	bne.n	8000e04 <__gesf2+0x84>
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	d101      	bne.n	8000dc0 <__gesf2+0x40>
 8000dbc:	2c00      	cmp	r4, #0
 8000dbe:	d0f6      	beq.n	8000dae <__gesf2+0x2e>
 8000dc0:	428b      	cmp	r3, r1
 8000dc2:	d019      	beq.n	8000df8 <__gesf2+0x78>
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	4318      	orrs	r0, r3
 8000dca:	e7f2      	b.n	8000db2 <__gesf2+0x32>
 8000dcc:	2c00      	cmp	r4, #0
 8000dce:	d119      	bne.n	8000e04 <__gesf2+0x84>
 8000dd0:	28ff      	cmp	r0, #255	@ 0xff
 8000dd2:	d1f7      	bne.n	8000dc4 <__gesf2+0x44>
 8000dd4:	2d00      	cmp	r5, #0
 8000dd6:	d115      	bne.n	8000e04 <__gesf2+0x84>
 8000dd8:	2000      	movs	r0, #0
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d1f2      	bne.n	8000dc4 <__gesf2+0x44>
 8000dde:	e7e8      	b.n	8000db2 <__gesf2+0x32>
 8000de0:	2800      	cmp	r0, #0
 8000de2:	d0ef      	beq.n	8000dc4 <__gesf2+0x44>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1ed      	bne.n	8000dc4 <__gesf2+0x44>
 8000de8:	4282      	cmp	r2, r0
 8000dea:	dceb      	bgt.n	8000dc4 <__gesf2+0x44>
 8000dec:	db04      	blt.n	8000df8 <__gesf2+0x78>
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	d8e8      	bhi.n	8000dc4 <__gesf2+0x44>
 8000df2:	2000      	movs	r0, #0
 8000df4:	42ac      	cmp	r4, r5
 8000df6:	d2dc      	bcs.n	8000db2 <__gesf2+0x32>
 8000df8:	0058      	lsls	r0, r3, #1
 8000dfa:	3801      	subs	r0, #1
 8000dfc:	e7d9      	b.n	8000db2 <__gesf2+0x32>
 8000dfe:	2c00      	cmp	r4, #0
 8000e00:	d0d7      	beq.n	8000db2 <__gesf2+0x32>
 8000e02:	e7df      	b.n	8000dc4 <__gesf2+0x44>
 8000e04:	2002      	movs	r0, #2
 8000e06:	4240      	negs	r0, r0
 8000e08:	e7d3      	b.n	8000db2 <__gesf2+0x32>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d1da      	bne.n	8000dc4 <__gesf2+0x44>
 8000e0e:	e7ee      	b.n	8000dee <__gesf2+0x6e>

08000e10 <__lesf2>:
 8000e10:	b530      	push	{r4, r5, lr}
 8000e12:	0042      	lsls	r2, r0, #1
 8000e14:	0244      	lsls	r4, r0, #9
 8000e16:	024d      	lsls	r5, r1, #9
 8000e18:	0fc3      	lsrs	r3, r0, #31
 8000e1a:	0048      	lsls	r0, r1, #1
 8000e1c:	0a64      	lsrs	r4, r4, #9
 8000e1e:	0e12      	lsrs	r2, r2, #24
 8000e20:	0a6d      	lsrs	r5, r5, #9
 8000e22:	0e00      	lsrs	r0, r0, #24
 8000e24:	0fc9      	lsrs	r1, r1, #31
 8000e26:	2aff      	cmp	r2, #255	@ 0xff
 8000e28:	d017      	beq.n	8000e5a <__lesf2+0x4a>
 8000e2a:	28ff      	cmp	r0, #255	@ 0xff
 8000e2c:	d00a      	beq.n	8000e44 <__lesf2+0x34>
 8000e2e:	2a00      	cmp	r2, #0
 8000e30:	d11b      	bne.n	8000e6a <__lesf2+0x5a>
 8000e32:	2800      	cmp	r0, #0
 8000e34:	d10a      	bne.n	8000e4c <__lesf2+0x3c>
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d01d      	beq.n	8000e76 <__lesf2+0x66>
 8000e3a:	2c00      	cmp	r4, #0
 8000e3c:	d12d      	bne.n	8000e9a <__lesf2+0x8a>
 8000e3e:	0048      	lsls	r0, r1, #1
 8000e40:	3801      	subs	r0, #1
 8000e42:	e011      	b.n	8000e68 <__lesf2+0x58>
 8000e44:	2d00      	cmp	r5, #0
 8000e46:	d10e      	bne.n	8000e66 <__lesf2+0x56>
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	d101      	bne.n	8000e50 <__lesf2+0x40>
 8000e4c:	2c00      	cmp	r4, #0
 8000e4e:	d0f6      	beq.n	8000e3e <__lesf2+0x2e>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d10c      	bne.n	8000e6e <__lesf2+0x5e>
 8000e54:	0058      	lsls	r0, r3, #1
 8000e56:	3801      	subs	r0, #1
 8000e58:	e006      	b.n	8000e68 <__lesf2+0x58>
 8000e5a:	2c00      	cmp	r4, #0
 8000e5c:	d103      	bne.n	8000e66 <__lesf2+0x56>
 8000e5e:	28ff      	cmp	r0, #255	@ 0xff
 8000e60:	d105      	bne.n	8000e6e <__lesf2+0x5e>
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d015      	beq.n	8000e92 <__lesf2+0x82>
 8000e66:	2002      	movs	r0, #2
 8000e68:	bd30      	pop	{r4, r5, pc}
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d106      	bne.n	8000e7c <__lesf2+0x6c>
 8000e6e:	2001      	movs	r0, #1
 8000e70:	425b      	negs	r3, r3
 8000e72:	4318      	orrs	r0, r3
 8000e74:	e7f8      	b.n	8000e68 <__lesf2+0x58>
 8000e76:	2c00      	cmp	r4, #0
 8000e78:	d0f6      	beq.n	8000e68 <__lesf2+0x58>
 8000e7a:	e7f8      	b.n	8000e6e <__lesf2+0x5e>
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d1f6      	bne.n	8000e6e <__lesf2+0x5e>
 8000e80:	4282      	cmp	r2, r0
 8000e82:	dcf4      	bgt.n	8000e6e <__lesf2+0x5e>
 8000e84:	dbe6      	blt.n	8000e54 <__lesf2+0x44>
 8000e86:	42ac      	cmp	r4, r5
 8000e88:	d8f1      	bhi.n	8000e6e <__lesf2+0x5e>
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	42ac      	cmp	r4, r5
 8000e8e:	d2eb      	bcs.n	8000e68 <__lesf2+0x58>
 8000e90:	e7e0      	b.n	8000e54 <__lesf2+0x44>
 8000e92:	2000      	movs	r0, #0
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d1ea      	bne.n	8000e6e <__lesf2+0x5e>
 8000e98:	e7e6      	b.n	8000e68 <__lesf2+0x58>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d1e7      	bne.n	8000e6e <__lesf2+0x5e>
 8000e9e:	e7f2      	b.n	8000e86 <__lesf2+0x76>

08000ea0 <setLED_MLOCAL>:

// -----------------------------------------------------------------


// ---I/O SECTION---------------------------------------------------
void setLED_MLOCAL(int state){	// LED @ A0
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	if (state != 0) {
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d007      	beq.n	8000ebe <setLED_MLOCAL+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000eae:	2390      	movs	r3, #144	@ 0x90
 8000eb0:	05db      	lsls	r3, r3, #23
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f001 f9f4 	bl	80022a4 <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 8000ebc:	e006      	b.n	8000ecc <setLED_MLOCAL+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ebe:	2390      	movs	r3, #144	@ 0x90
 8000ec0:	05db      	lsls	r3, r3, #23
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f001 f9ec 	bl	80022a4 <HAL_GPIO_WritePin>
}
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <setLED_MSERIAL>:

void setLED_MSERIAL(int state){ // LED @ A1
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	if (state != 0) {
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d007      	beq.n	8000ef2 <setLED_MSERIAL+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000ee2:	2390      	movs	r3, #144	@ 0x90
 8000ee4:	05db      	lsls	r3, r3, #23
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2102      	movs	r1, #2
 8000eea:	0018      	movs	r0, r3
 8000eec:	f001 f9da 	bl	80022a4 <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
	}
}
 8000ef0:	e006      	b.n	8000f00 <setLED_MSERIAL+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ef2:	2390      	movs	r3, #144	@ 0x90
 8000ef4:	05db      	lsls	r3, r3, #23
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2102      	movs	r1, #2
 8000efa:	0018      	movs	r0, r3
 8000efc:	f001 f9d2 	bl	80022a4 <HAL_GPIO_WritePin>
}
 8000f00:	46c0      	nop			@ (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b002      	add	sp, #8
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <setLED_BSY>:

void setLED_BSY(int state){		// LED @ A2
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	if (state != 0) {
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d007      	beq.n	8000f26 <setLED_BSY+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000f16:	2390      	movs	r3, #144	@ 0x90
 8000f18:	05db      	lsls	r3, r3, #23
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2108      	movs	r1, #8
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f001 f9c0 	bl	80022a4 <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
	}
}
 8000f24:	e006      	b.n	8000f34 <setLED_BSY+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f26:	2390      	movs	r3, #144	@ 0x90
 8000f28:	05db      	lsls	r3, r3, #23
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2108      	movs	r1, #8
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f001 f9b8 	bl	80022a4 <HAL_GPIO_WritePin>
}
 8000f34:	46c0      	nop			@ (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b002      	add	sp, #8
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <debugger>:

void sanityCheck(){
	// very desperate debug entry point
}

int debugger(){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
	int8_t* a_symbols = sbf_createSymbolBuffer();
 8000f42:	f000 fbae 	bl	80016a2 <sbf_createSymbolBuffer>
 8000f46:	0003      	movs	r3, r0
 8000f48:	60fb      	str	r3, [r7, #12]
	int8_t* b_symbols = sbf_createSymbolBuffer();
 8000f4a:	f000 fbaa 	bl	80016a2 <sbf_createSymbolBuffer>
 8000f4e:	0003      	movs	r3, r0
 8000f50:	60bb      	str	r3, [r7, #8]
		a_symbols = sbf_appendSym(a_symbols, a);
		b_symbols = sbf_appendSym(b_symbols, b);
	}
	*/

	int8_t* ab_symbols = sbf_concaternate(a_symbols, b_symbols, 1);
 8000f52:	68b9      	ldr	r1, [r7, #8]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2201      	movs	r2, #1
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f000 fc1b 	bl	8001794 <sbf_concaternate>
 8000f5e:	0003      	movs	r3, r0
 8000f60:	607b      	str	r3, [r7, #4]
	ab_symbols = sbf_appendSym(ab_symbols, a);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2103      	movs	r1, #3
 8000f66:	0018      	movs	r0, r3
 8000f68:	f000 fbb1 	bl	80016ce <sbf_appendSym>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	607b      	str	r3, [r7, #4]
	ab_symbols = sbf_appendSym(ab_symbols, plus);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2111      	movs	r1, #17
 8000f74:	0018      	movs	r0, r3
 8000f76:	f000 fbaa 	bl	80016ce <sbf_appendSym>
 8000f7a:	0003      	movs	r3, r0
 8000f7c:	607b      	str	r3, [r7, #4]
	ab_symbols = sbf_appendSym(ab_symbols, a);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2103      	movs	r1, #3
 8000f82:	0018      	movs	r0, r3
 8000f84:	f000 fba3 	bl	80016ce <sbf_appendSym>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	607b      	str	r3, [r7, #4]
	ab_symbols = sbf_appendSym(ab_symbols, plus);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2111      	movs	r1, #17
 8000f90:	0018      	movs	r0, r3
 8000f92:	f000 fb9c 	bl	80016ce <sbf_appendSym>
 8000f96:	0003      	movs	r3, r0
 8000f98:	607b      	str	r3, [r7, #4]
	char* hello = sbf_convertToString(ab_symbols, "\r\n");
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <debugger+0x88>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	0011      	movs	r1, r2
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f000 fc63 	bl	800186c <sbf_convertToString>
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	603b      	str	r3, [r7, #0]
	ab_symbols = TTY_WRITEBUFFER(ab_symbols);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	0018      	movs	r0, r3
 8000fae:	f000 fd97 	bl	8001ae0 <TTY_WRITEBUFFER>
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	607b      	str	r3, [r7, #4]
	free(ab_symbols);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f002 fee9 	bl	8003d90 <free>


	while(1);
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	e7fd      	b.n	8000fbe <debugger+0x82>
 8000fc2:	46c0      	nop			@ (mov r8, r8)
 8000fc4:	08004040 	.word	0x08004040

08000fc8 <init>:
	tty_symbols = TTY_WRITEBUFFER(tty_symbols);

	*/
}

void init(){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	// scary ST-Stuff
    HAL_Init();
 8000fcc:	f000 fec6 	bl	8001d5c <HAL_Init>

    SystemClock_Config();
 8000fd0:	f000 f83a 	bl	8001048 <SystemClock_Config>

    MX_GPIO_Init();
 8000fd4:	f000 f8f2 	bl	80011bc <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8000fd8:	f000 f8c0 	bl	800115c <MX_USART2_UART_Init>
    MX_USART1_UART_Init();
 8000fdc:	f000 f88c 	bl	80010f8 <MX_USART1_UART_Init>
    //TODO: init ESP8266 uart
    // -------------------------------------------------------------

    // init vars

    writeBuffer = malloc(0);
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f002 fecb 	bl	8003d7c <malloc>
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	001a      	movs	r2, r3
 8000fea:	4b10      	ldr	r3, [pc, #64]	@ (800102c <init+0x64>)
 8000fec:	601a      	str	r2, [r3, #0]
    tty_symbols = malloc(0);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f002 fec4 	bl	8003d7c <malloc>
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	001a      	movs	r2, r3
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <init+0x68>)
 8000ffa:	601a      	str	r2, [r3, #0]

    // init i/o stuff
    setLED_BSY(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f7ff ff83 	bl	8000f08 <setLED_BSY>
    setLED_MLOCAL(0);
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff ff4c 	bl	8000ea0 <setLED_MLOCAL>
    setLED_MSERIAL(0);
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff ff63 	bl	8000ed4 <setLED_MSERIAL>


    HAL_UART_Receive_IT (&huart2, UART2_rxBuffer, 2);
 800100e:	4909      	ldr	r1, [pc, #36]	@ (8001034 <init+0x6c>)
 8001010:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <init+0x70>)
 8001012:	2202      	movs	r2, #2
 8001014:	0018      	movs	r0, r3
 8001016:	f002 f85c 	bl	80030d2 <HAL_UART_Receive_IT>
	// now we can do some UI-Stuff, like ask for bd-rate,
	// esp-summary, termminal-width, etc.
    //booTY();	// Boot TTY

    // -------------------------------------------------------------
    debugger();
 800101a:	f7ff ff8f 	bl	8000f3c <debugger>
    setLED_BSY(0);		// When init is done, we can SIGRDY
 800101e:	2000      	movs	r0, #0
 8001020:	f7ff ff72 	bl	8000f08 <setLED_BSY>
}
 8001024:	46c0      	nop			@ (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			@ (mov r8, r8)
 800102c:	20000190 	.word	0x20000190
 8001030:	20000194 	.word	0x20000194
 8001034:	20000198 	.word	0x20000198
 8001038:	20000108 	.word	0x20000108

0800103c <main>:

int main(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	init();
 8001040:	f7ff ffc2 	bl	8000fc8 <init>
    while(1){
 8001044:	46c0      	nop			@ (mov r8, r8)
 8001046:	e7fd      	b.n	8001044 <main+0x8>

08001048 <SystemClock_Config>:
}


// ---SCARY ST STUFF :C---------------------------------------------
void SystemClock_Config(void)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b099      	sub	sp, #100	@ 0x64
 800104c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104e:	242c      	movs	r4, #44	@ 0x2c
 8001050:	193b      	adds	r3, r7, r4
 8001052:	0018      	movs	r0, r3
 8001054:	2334      	movs	r3, #52	@ 0x34
 8001056:	001a      	movs	r2, r3
 8001058:	2100      	movs	r1, #0
 800105a:	f002 ff55 	bl	8003f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105e:	231c      	movs	r3, #28
 8001060:	18fb      	adds	r3, r7, r3
 8001062:	0018      	movs	r0, r3
 8001064:	2310      	movs	r3, #16
 8001066:	001a      	movs	r2, r3
 8001068:	2100      	movs	r1, #0
 800106a:	f002 ff4d 	bl	8003f08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	0018      	movs	r0, r3
 8001072:	2318      	movs	r3, #24
 8001074:	001a      	movs	r2, r3
 8001076:	2100      	movs	r1, #0
 8001078:	f002 ff46 	bl	8003f08 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800107c:	0021      	movs	r1, r4
 800107e:	187b      	adds	r3, r7, r1
 8001080:	2202      	movs	r2, #2
 8001082:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2201      	movs	r2, #1
 8001088:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800108a:	187b      	adds	r3, r7, r1
 800108c:	2210      	movs	r2, #16
 800108e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001096:	187b      	adds	r3, r7, r1
 8001098:	0018      	movs	r0, r3
 800109a:	f001 f947 	bl	800232c <HAL_RCC_OscConfig>
 800109e:	1e03      	subs	r3, r0, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80010a2:	f000 f92f 	bl	8001304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a6:	211c      	movs	r1, #28
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	2207      	movs	r2, #7
 80010ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ae:	187b      	adds	r3, r7, r1
 80010b0:	2200      	movs	r2, #0
 80010b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	2100      	movs	r1, #0
 80010c4:	0018      	movs	r0, r3
 80010c6:	f001 fcb7 	bl	8002a38 <HAL_RCC_ClockConfig>
 80010ca:	1e03      	subs	r3, r0, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80010ce:	f000 f919 	bl	8001304 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2201      	movs	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	0018      	movs	r0, r3
 80010e2:	f001 fe15 	bl	8002d10 <HAL_RCCEx_PeriphCLKConfig>
 80010e6:	1e03      	subs	r3, r0, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010ea:	f000 f90b 	bl	8001304 <Error_Handler>
  }
}
 80010ee:	46c0      	nop			@ (mov r8, r8)
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b019      	add	sp, #100	@ 0x64
 80010f4:	bd90      	pop	{r4, r7, pc}
	...

080010f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010fc:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <MX_USART1_UART_Init+0x5c>)
 80010fe:	4a16      	ldr	r2, [pc, #88]	@ (8001158 <MX_USART1_UART_Init+0x60>)
 8001100:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001102:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <MX_USART1_UART_Init+0x5c>)
 8001104:	2296      	movs	r2, #150	@ 0x96
 8001106:	0192      	lsls	r2, r2, #6
 8001108:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <MX_USART1_UART_Init+0x5c>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <MX_USART1_UART_Init+0x5c>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_USART1_UART_Init+0x5c>)
 8001118:	2280      	movs	r2, #128	@ 0x80
 800111a:	00d2      	lsls	r2, r2, #3
 800111c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800111e:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <MX_USART1_UART_Init+0x5c>)
 8001120:	220c      	movs	r2, #12
 8001122:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <MX_USART1_UART_Init+0x5c>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800112a:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <MX_USART1_UART_Init+0x5c>)
 800112c:	2200      	movs	r2, #0
 800112e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <MX_USART1_UART_Init+0x5c>)
 8001132:	2200      	movs	r2, #0
 8001134:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001136:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <MX_USART1_UART_Init+0x5c>)
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800113c:	4b05      	ldr	r3, [pc, #20]	@ (8001154 <MX_USART1_UART_Init+0x5c>)
 800113e:	0018      	movs	r0, r3
 8001140:	f001 fed4 	bl	8002eec <HAL_UART_Init>
 8001144:	1e03      	subs	r3, r0, #0
 8001146:	d001      	beq.n	800114c <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8001148:	f000 f8dc 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800114c:	46c0      	nop			@ (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	20000080 	.word	0x20000080
 8001158:	40013800 	.word	0x40013800

0800115c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001160:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <MX_USART2_UART_Init+0x58>)
 8001162:	4a15      	ldr	r2, [pc, #84]	@ (80011b8 <MX_USART2_UART_Init+0x5c>)
 8001164:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001166:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <MX_USART2_UART_Init+0x58>)
 8001168:	2296      	movs	r2, #150	@ 0x96
 800116a:	0212      	lsls	r2, r2, #8
 800116c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <MX_USART2_UART_Init+0x58>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001174:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <MX_USART2_UART_Init+0x58>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_USART2_UART_Init+0x58>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <MX_USART2_UART_Init+0x58>)
 8001182:	220c      	movs	r2, #12
 8001184:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <MX_USART2_UART_Init+0x58>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <MX_USART2_UART_Init+0x58>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001192:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <MX_USART2_UART_Init+0x58>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <MX_USART2_UART_Init+0x58>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119e:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <MX_USART2_UART_Init+0x58>)
 80011a0:	0018      	movs	r0, r3
 80011a2:	f001 fea3 	bl	8002eec <HAL_UART_Init>
 80011a6:	1e03      	subs	r3, r0, #0
 80011a8:	d001      	beq.n	80011ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011aa:	f000 f8ab 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000108 	.word	0x20000108
 80011b8:	40004400 	.word	0x40004400

080011bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b089      	sub	sp, #36	@ 0x24
 80011c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	240c      	movs	r4, #12
 80011c4:	193b      	adds	r3, r7, r4
 80011c6:	0018      	movs	r0, r3
 80011c8:	2314      	movs	r3, #20
 80011ca:	001a      	movs	r2, r3
 80011cc:	2100      	movs	r1, #0
 80011ce:	f002 fe9b 	bl	8003f08 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011d2:	4b3e      	ldr	r3, [pc, #248]	@ (80012cc <MX_GPIO_Init+0x110>)
 80011d4:	695a      	ldr	r2, [r3, #20]
 80011d6:	4b3d      	ldr	r3, [pc, #244]	@ (80012cc <MX_GPIO_Init+0x110>)
 80011d8:	2180      	movs	r1, #128	@ 0x80
 80011da:	03c9      	lsls	r1, r1, #15
 80011dc:	430a      	orrs	r2, r1
 80011de:	615a      	str	r2, [r3, #20]
 80011e0:	4b3a      	ldr	r3, [pc, #232]	@ (80012cc <MX_GPIO_Init+0x110>)
 80011e2:	695a      	ldr	r2, [r3, #20]
 80011e4:	2380      	movs	r3, #128	@ 0x80
 80011e6:	03db      	lsls	r3, r3, #15
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	4b37      	ldr	r3, [pc, #220]	@ (80012cc <MX_GPIO_Init+0x110>)
 80011f0:	695a      	ldr	r2, [r3, #20]
 80011f2:	4b36      	ldr	r3, [pc, #216]	@ (80012cc <MX_GPIO_Init+0x110>)
 80011f4:	2180      	movs	r1, #128	@ 0x80
 80011f6:	0289      	lsls	r1, r1, #10
 80011f8:	430a      	orrs	r2, r1
 80011fa:	615a      	str	r2, [r3, #20]
 80011fc:	4b33      	ldr	r3, [pc, #204]	@ (80012cc <MX_GPIO_Init+0x110>)
 80011fe:	695a      	ldr	r2, [r3, #20]
 8001200:	2380      	movs	r3, #128	@ 0x80
 8001202:	029b      	lsls	r3, r3, #10
 8001204:	4013      	ands	r3, r2
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	4b30      	ldr	r3, [pc, #192]	@ (80012cc <MX_GPIO_Init+0x110>)
 800120c:	695a      	ldr	r2, [r3, #20]
 800120e:	4b2f      	ldr	r3, [pc, #188]	@ (80012cc <MX_GPIO_Init+0x110>)
 8001210:	2180      	movs	r1, #128	@ 0x80
 8001212:	02c9      	lsls	r1, r1, #11
 8001214:	430a      	orrs	r2, r1
 8001216:	615a      	str	r2, [r3, #20]
 8001218:	4b2c      	ldr	r3, [pc, #176]	@ (80012cc <MX_GPIO_Init+0x110>)
 800121a:	695a      	ldr	r2, [r3, #20]
 800121c:	2380      	movs	r3, #128	@ 0x80
 800121e:	02db      	lsls	r3, r3, #11
 8001220:	4013      	ands	r3, r2
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_MLOCAL_Pin|LED_MSERIAL_Pin|LED_BSY_Pin|TTY_SEND_Pin|TTY_READERR_Pin, GPIO_PIN_RESET);
 8001226:	2390      	movs	r3, #144	@ 0x90
 8001228:	05db      	lsls	r3, r3, #23
 800122a:	2200      	movs	r2, #0
 800122c:	213b      	movs	r1, #59	@ 0x3b
 800122e:	0018      	movs	r0, r3
 8001230:	f001 f838 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_MLOCAL_Pin LED_MSERIAL_Pin LED_BSY_Pin */
  GPIO_InitStruct.Pin = LED_MLOCAL_Pin|LED_MSERIAL_Pin|LED_BSY_Pin|TTY_READERR_Pin;
 8001234:	193b      	adds	r3, r7, r4
 8001236:	222b      	movs	r2, #43	@ 0x2b
 8001238:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	193b      	adds	r3, r7, r4
 800123c:	2201      	movs	r2, #1
 800123e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	193b      	adds	r3, r7, r4
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	193b      	adds	r3, r7, r4
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	193a      	adds	r2, r7, r4
 800124e:	2390      	movs	r3, #144	@ 0x90
 8001250:	05db      	lsls	r3, r3, #23
 8001252:	0011      	movs	r1, r2
 8001254:	0018      	movs	r0, r3
 8001256:	f000 febd 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TTY_SEND_Pin */
  GPIO_InitStruct.Pin = TTY_SEND_Pin;
 800125a:	193b      	adds	r3, r7, r4
 800125c:	2210      	movs	r2, #16
 800125e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	193b      	adds	r3, r7, r4
 8001262:	2201      	movs	r2, #1
 8001264:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	193b      	adds	r3, r7, r4
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126c:	193b      	adds	r3, r7, r4
 800126e:	2203      	movs	r2, #3
 8001270:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TTY_SEND_GPIO_Port, &GPIO_InitStruct);
 8001272:	193a      	adds	r2, r7, r4
 8001274:	2390      	movs	r3, #144	@ 0x90
 8001276:	05db      	lsls	r3, r3, #23
 8001278:	0011      	movs	r1, r2
 800127a:	0018      	movs	r0, r3
 800127c:	f000 feaa 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TTY_RECV_Pin */
  GPIO_InitStruct.Pin = TTY_RECV_Pin;
 8001280:	193b      	adds	r3, r7, r4
 8001282:	2201      	movs	r2, #1
 8001284:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001286:	193b      	adds	r3, r7, r4
 8001288:	2200      	movs	r2, #0
 800128a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	193b      	adds	r3, r7, r4
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TTY_RECV_GPIO_Port, &GPIO_InitStruct);
 8001292:	193b      	adds	r3, r7, r4
 8001294:	4a0e      	ldr	r2, [pc, #56]	@ (80012d0 <MX_GPIO_Init+0x114>)
 8001296:	0019      	movs	r1, r3
 8001298:	0010      	movs	r0, r2
 800129a:	f000 fe9b 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_MODE_Pin */
  GPIO_InitStruct.Pin = BT_MODE_Pin;
 800129e:	0021      	movs	r1, r4
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	2280      	movs	r2, #128	@ 0x80
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	2200      	movs	r2, #0
 80012ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	2202      	movs	r2, #2
 80012b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BT_MODE_GPIO_Port, &GPIO_InitStruct);
 80012b4:	187a      	adds	r2, r7, r1
 80012b6:	2390      	movs	r3, #144	@ 0x90
 80012b8:	05db      	lsls	r3, r3, #23
 80012ba:	0011      	movs	r1, r2
 80012bc:	0018      	movs	r0, r3
 80012be:	f000 fe89 	bl	8001fd4 <HAL_GPIO_Init>


  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012c2:	46c0      	nop			@ (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b009      	add	sp, #36	@ 0x24
 80012c8:	bd90      	pop	{r4, r7, pc}
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	40021000 	.word	0x40021000
 80012d0:	48000400 	.word	0x48000400

080012d4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, UART2_rxBuffer, 2, 100);
 80012dc:	4907      	ldr	r1, [pc, #28]	@ (80012fc <HAL_UART_RxCpltCallback+0x28>)
 80012de:	4808      	ldr	r0, [pc, #32]	@ (8001300 <HAL_UART_RxCpltCallback+0x2c>)
 80012e0:	2364      	movs	r3, #100	@ 0x64
 80012e2:	2202      	movs	r2, #2
 80012e4:	f001 fe56 	bl	8002f94 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, 2);
 80012e8:	4904      	ldr	r1, [pc, #16]	@ (80012fc <HAL_UART_RxCpltCallback+0x28>)
 80012ea:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <HAL_UART_RxCpltCallback+0x2c>)
 80012ec:	2202      	movs	r2, #2
 80012ee:	0018      	movs	r0, r3
 80012f0:	f001 feef 	bl	80030d2 <HAL_UART_Receive_IT>
}
 80012f4:	46c0      	nop			@ (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b002      	add	sp, #8
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000198 	.word	0x20000198
 8001300:	20000108 	.word	0x20000108

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800130c:	46c0      	nop			@ (mov r8, r8)
 800130e:	e7fd      	b.n	800130c <Error_Handler+0x8>

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <HAL_MspInit+0x44>)
 8001318:	699a      	ldr	r2, [r3, #24]
 800131a:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <HAL_MspInit+0x44>)
 800131c:	2101      	movs	r1, #1
 800131e:	430a      	orrs	r2, r1
 8001320:	619a      	str	r2, [r3, #24]
 8001322:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <HAL_MspInit+0x44>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	2201      	movs	r2, #1
 8001328:	4013      	ands	r3, r2
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <HAL_MspInit+0x44>)
 8001330:	69da      	ldr	r2, [r3, #28]
 8001332:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <HAL_MspInit+0x44>)
 8001334:	2180      	movs	r1, #128	@ 0x80
 8001336:	0549      	lsls	r1, r1, #21
 8001338:	430a      	orrs	r2, r1
 800133a:	61da      	str	r2, [r3, #28]
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <HAL_MspInit+0x44>)
 800133e:	69da      	ldr	r2, [r3, #28]
 8001340:	2380      	movs	r3, #128	@ 0x80
 8001342:	055b      	lsls	r3, r3, #21
 8001344:	4013      	ands	r3, r2
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	b002      	add	sp, #8
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	40021000 	.word	0x40021000

08001358 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b08d      	sub	sp, #52	@ 0x34
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	241c      	movs	r4, #28
 8001362:	193b      	adds	r3, r7, r4
 8001364:	0018      	movs	r0, r3
 8001366:	2314      	movs	r3, #20
 8001368:	001a      	movs	r2, r3
 800136a:	2100      	movs	r1, #0
 800136c:	f002 fdcc 	bl	8003f08 <memset>
  if(huart->Instance==USART1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a39      	ldr	r2, [pc, #228]	@ (800145c <HAL_UART_MspInit+0x104>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d134      	bne.n	80013e4 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800137a:	4b39      	ldr	r3, [pc, #228]	@ (8001460 <HAL_UART_MspInit+0x108>)
 800137c:	699a      	ldr	r2, [r3, #24]
 800137e:	4b38      	ldr	r3, [pc, #224]	@ (8001460 <HAL_UART_MspInit+0x108>)
 8001380:	2180      	movs	r1, #128	@ 0x80
 8001382:	01c9      	lsls	r1, r1, #7
 8001384:	430a      	orrs	r2, r1
 8001386:	619a      	str	r2, [r3, #24]
 8001388:	4b35      	ldr	r3, [pc, #212]	@ (8001460 <HAL_UART_MspInit+0x108>)
 800138a:	699a      	ldr	r2, [r3, #24]
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	01db      	lsls	r3, r3, #7
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
 8001394:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4b32      	ldr	r3, [pc, #200]	@ (8001460 <HAL_UART_MspInit+0x108>)
 8001398:	695a      	ldr	r2, [r3, #20]
 800139a:	4b31      	ldr	r3, [pc, #196]	@ (8001460 <HAL_UART_MspInit+0x108>)
 800139c:	2180      	movs	r1, #128	@ 0x80
 800139e:	0289      	lsls	r1, r1, #10
 80013a0:	430a      	orrs	r2, r1
 80013a2:	615a      	str	r2, [r3, #20]
 80013a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001460 <HAL_UART_MspInit+0x108>)
 80013a6:	695a      	ldr	r2, [r3, #20]
 80013a8:	2380      	movs	r3, #128	@ 0x80
 80013aa:	029b      	lsls	r3, r3, #10
 80013ac:	4013      	ands	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013b2:	193b      	adds	r3, r7, r4
 80013b4:	22c0      	movs	r2, #192	@ 0xc0
 80013b6:	00d2      	lsls	r2, r2, #3
 80013b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	0021      	movs	r1, r4
 80013bc:	187b      	adds	r3, r7, r1
 80013be:	2202      	movs	r2, #2
 80013c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	187b      	adds	r3, r7, r1
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c8:	187b      	adds	r3, r7, r1
 80013ca:	2203      	movs	r2, #3
 80013cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80013ce:	187b      	adds	r3, r7, r1
 80013d0:	2201      	movs	r2, #1
 80013d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	187a      	adds	r2, r7, r1
 80013d6:	2390      	movs	r3, #144	@ 0x90
 80013d8:	05db      	lsls	r3, r3, #23
 80013da:	0011      	movs	r1, r2
 80013dc:	0018      	movs	r0, r3
 80013de:	f000 fdf9 	bl	8001fd4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80013e2:	e037      	b.n	8001454 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001464 <HAL_UART_MspInit+0x10c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d132      	bne.n	8001454 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001460 <HAL_UART_MspInit+0x108>)
 80013f0:	69da      	ldr	r2, [r3, #28]
 80013f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001460 <HAL_UART_MspInit+0x108>)
 80013f4:	2180      	movs	r1, #128	@ 0x80
 80013f6:	0289      	lsls	r1, r1, #10
 80013f8:	430a      	orrs	r2, r1
 80013fa:	61da      	str	r2, [r3, #28]
 80013fc:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <HAL_UART_MspInit+0x108>)
 80013fe:	69da      	ldr	r2, [r3, #28]
 8001400:	2380      	movs	r3, #128	@ 0x80
 8001402:	029b      	lsls	r3, r3, #10
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <HAL_UART_MspInit+0x108>)
 800140c:	695a      	ldr	r2, [r3, #20]
 800140e:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <HAL_UART_MspInit+0x108>)
 8001410:	2180      	movs	r1, #128	@ 0x80
 8001412:	0289      	lsls	r1, r1, #10
 8001414:	430a      	orrs	r2, r1
 8001416:	615a      	str	r2, [r3, #20]
 8001418:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <HAL_UART_MspInit+0x108>)
 800141a:	695a      	ldr	r2, [r3, #20]
 800141c:	2380      	movs	r3, #128	@ 0x80
 800141e:	029b      	lsls	r3, r3, #10
 8001420:	4013      	ands	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001426:	211c      	movs	r1, #28
 8001428:	187b      	adds	r3, r7, r1
 800142a:	4a0f      	ldr	r2, [pc, #60]	@ (8001468 <HAL_UART_MspInit+0x110>)
 800142c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	187b      	adds	r3, r7, r1
 8001430:	2202      	movs	r2, #2
 8001432:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	187b      	adds	r3, r7, r1
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143a:	187b      	adds	r3, r7, r1
 800143c:	2203      	movs	r2, #3
 800143e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001440:	187b      	adds	r3, r7, r1
 8001442:	2201      	movs	r2, #1
 8001444:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	187a      	adds	r2, r7, r1
 8001448:	2390      	movs	r3, #144	@ 0x90
 800144a:	05db      	lsls	r3, r3, #23
 800144c:	0011      	movs	r1, r2
 800144e:	0018      	movs	r0, r3
 8001450:	f000 fdc0 	bl	8001fd4 <HAL_GPIO_Init>
}
 8001454:	46c0      	nop			@ (mov r8, r8)
 8001456:	46bd      	mov	sp, r7
 8001458:	b00d      	add	sp, #52	@ 0x34
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	40013800 	.word	0x40013800
 8001460:	40021000 	.word	0x40021000
 8001464:	40004400 	.word	0x40004400
 8001468:	00008004 	.word	0x00008004

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001470:	46c0      	nop			@ (mov r8, r8)
 8001472:	e7fd      	b.n	8001470 <NMI_Handler+0x4>

08001474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001478:	46c0      	nop			@ (mov r8, r8)
 800147a:	e7fd      	b.n	8001478 <HardFault_Handler+0x4>

0800147c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001480:	46c0      	nop			@ (mov r8, r8)
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148a:	46c0      	nop			@ (mov r8, r8)
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001494:	f000 fcaa 	bl	8001dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001498:	46c0      	nop			@ (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TTY_RECV_Pin);
 80014a2:	2001      	movs	r0, #1
 80014a4:	f000 ff1c 	bl	80022e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80014a8:	46c0      	nop			@ (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <str_len>:
 *  - int str_len(char* str)
 *
 *
 */

uint32_t str_len(char* str){
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b084      	sub	sp, #16
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
	while(str[i] != '\0') i++;
 80014ba:	e002      	b.n	80014c2 <str_len+0x14>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	3301      	adds	r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	18d3      	adds	r3, r2, r3
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f6      	bne.n	80014bc <str_len+0xe>
	return i;
 80014ce:	68fb      	ldr	r3, [r7, #12]
}
 80014d0:	0018      	movs	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b004      	add	sp, #16
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <str_empty>:
char* str_empty(void){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
	char* _out = (char*) malloc(1 * sizeof(char));
 80014de:	2001      	movs	r0, #1
 80014e0:	f002 fc4c 	bl	8003d7c <malloc>
 80014e4:	0003      	movs	r3, r0
 80014e6:	607b      	str	r3, [r7, #4]
	if (_out == NULL) TTY_raiseMemoryError();
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <str_empty+0x1a>
 80014ee:	f000 fbef 	bl	8001cd0 <TTY_raiseMemoryError>
	_out[0] = '\0';
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
	return _out;
 80014f8:	687b      	ldr	r3, [r7, #4]

}
 80014fa:	0018      	movs	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b002      	add	sp, #8
 8001500:	bd80      	pop	{r7, pc}

08001502 <str_appendChar>:

char* str_appendChar(char* head, char c){
 8001502:	b580      	push	{r7, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	000a      	movs	r2, r1
 800150c:	1cfb      	adds	r3, r7, #3
 800150e:	701a      	strb	r2, [r3, #0]
	uint32_t head_len = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	613b      	str	r3, [r7, #16]

	// When head NULL, create a single string
	if (head == NULL) {
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d113      	bne.n	8001542 <str_appendChar+0x40>
		char* tail = (char*) malloc(2 * sizeof(char));
 800151a:	2002      	movs	r0, #2
 800151c:	f002 fc2e 	bl	8003d7c <malloc>
 8001520:	0003      	movs	r3, r0
 8001522:	60bb      	str	r3, [r7, #8]
		if (tail == NULL) TTY_raiseMemoryError();
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <str_appendChar+0x2c>
 800152a:	f000 fbd1 	bl	8001cd0 <TTY_raiseMemoryError>
		tail[0] = c;
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	1cfa      	adds	r2, r7, #3
 8001532:	7812      	ldrb	r2, [r2, #0]
 8001534:	701a      	strb	r2, [r3, #0]
		tail[1] = '\0';
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	3301      	adds	r3, #1
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
		return tail;
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	e032      	b.n	80015a8 <str_appendChar+0xa6>
	}

	head_len = str_len(head);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	0018      	movs	r0, r3
 8001546:	f7ff ffb2 	bl	80014ae <str_len>
 800154a:	0003      	movs	r3, r0
 800154c:	613b      	str	r3, [r7, #16]
	char* tail = (char*) malloc((head_len + 2) * sizeof(char));
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	3302      	adds	r3, #2
 8001552:	0018      	movs	r0, r3
 8001554:	f002 fc12 	bl	8003d7c <malloc>
 8001558:	0003      	movs	r3, r0
 800155a:	60fb      	str	r3, [r7, #12]
	if (tail == NULL) TTY_raiseMemoryError();
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <str_appendChar+0x64>
 8001562:	f000 fbb5 	bl	8001cd0 <TTY_raiseMemoryError>

	uint32_t i = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
	while (head[i] != '\0') {
 800156a:	e00a      	b.n	8001582 <str_appendChar+0x80>
		tail[i] = head[i];
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	18d2      	adds	r2, r2, r3
 8001572:	68f9      	ldr	r1, [r7, #12]
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	18cb      	adds	r3, r1, r3
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	701a      	strb	r2, [r3, #0]
		i++;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	3301      	adds	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
	while (head[i] != '\0') {
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	18d3      	adds	r3, r2, r3
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1ee      	bne.n	800156c <str_appendChar+0x6a>
	}
	tail[i] = c;
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	18d3      	adds	r3, r2, r3
 8001594:	1cfa      	adds	r2, r7, #3
 8001596:	7812      	ldrb	r2, [r2, #0]
 8001598:	701a      	strb	r2, [r3, #0]
	tail[i+1] = '\0';
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	18d3      	adds	r3, r2, r3
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]

	return tail;
 80015a6:	68fb      	ldr	r3, [r7, #12]
}
 80015a8:	0018      	movs	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b006      	add	sp, #24
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <str_add>:



char* str_add(char* head, char* tail, uint8_t keepTail){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	1dfb      	adds	r3, r7, #7
 80015bc:	701a      	strb	r2, [r3, #0]
	uint32_t head_len = str_len(head);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	0018      	movs	r0, r3
 80015c2:	f7ff ff74 	bl	80014ae <str_len>
 80015c6:	0003      	movs	r3, r0
 80015c8:	61bb      	str	r3, [r7, #24]
	uint32_t tail_len = str_len(tail);
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	0018      	movs	r0, r3
 80015ce:	f7ff ff6e 	bl	80014ae <str_len>
 80015d2:	0003      	movs	r3, r0
 80015d4:	617b      	str	r3, [r7, #20]
	uint32_t len = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]

	char* _out = (char*) malloc((head_len + tail_len + 1) * sizeof(char));
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	18d3      	adds	r3, r2, r3
 80015e0:	3301      	adds	r3, #1
 80015e2:	0018      	movs	r0, r3
 80015e4:	f002 fbca 	bl	8003d7c <malloc>
 80015e8:	0003      	movs	r3, r0
 80015ea:	613b      	str	r3, [r7, #16]
	if (_out == NULL) TTY_raiseMemoryError();
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10d      	bne.n	800160e <str_add+0x5e>
 80015f2:	f000 fb6d 	bl	8001cd0 <TTY_raiseMemoryError>

	while(head[len] != '\0'){
 80015f6:	e00a      	b.n	800160e <str_add+0x5e>
		_out[len] = head[len];
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	18d2      	adds	r2, r2, r3
 80015fe:	6939      	ldr	r1, [r7, #16]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	18cb      	adds	r3, r1, r3
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	701a      	strb	r2, [r3, #0]
		len++;
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	3301      	adds	r3, #1
 800160c:	61fb      	str	r3, [r7, #28]
	while(head[len] != '\0'){
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	18d3      	adds	r3, r2, r3
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1ee      	bne.n	80015f8 <str_add+0x48>
	}

	while(tail[len - head_len] != '\0'){
 800161a:	e00c      	b.n	8001636 <str_add+0x86>
		_out[len] = tail[len - head_len];
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	18d2      	adds	r2, r2, r3
 8001626:	6939      	ldr	r1, [r7, #16]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	18cb      	adds	r3, r1, r3
 800162c:	7812      	ldrb	r2, [r2, #0]
 800162e:	701a      	strb	r2, [r3, #0]
		len++;
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	3301      	adds	r3, #1
 8001634:	61fb      	str	r3, [r7, #28]
	while(tail[len - head_len] != '\0'){
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	18d3      	adds	r3, r2, r3
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ea      	bne.n	800161c <str_add+0x6c>
	}
	_out[len] = '\0';
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	18d3      	adds	r3, r2, r3
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]

	free(head);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	0018      	movs	r0, r3
 8001654:	f002 fb9c 	bl	8003d90 <free>
	if (keepTail != 0) free(tail);
 8001658:	1dfb      	adds	r3, r7, #7
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <str_add+0xb8>
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	0018      	movs	r0, r3
 8001664:	f002 fb94 	bl	8003d90 <free>

	return _out;
 8001668:	693b      	ldr	r3, [r7, #16]
}
 800166a:	0018      	movs	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	b008      	add	sp, #32
 8001670:	bd80      	pop	{r7, pc}

08001672 <sbf_len>:

// --- Private functions -------------------------------------------
tty_mode_t _findInitialMode(int8_t* _inSbf);

// --- Basic manipulation ------------------------------------------
uint32_t sbf_len(int8_t* sbf){
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
	uint32_t out = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
	while(sbf[out] != SBF_TERMINATOR) out++;
 800167e:	e002      	b.n	8001686 <sbf_len+0x14>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	3301      	adds	r3, #1
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	18d3      	adds	r3, r2, r3
 800168c:	2200      	movs	r2, #0
 800168e:	569a      	ldrsb	r2, [r3, r2]
 8001690:	2301      	movs	r3, #1
 8001692:	425b      	negs	r3, r3
 8001694:	429a      	cmp	r2, r3
 8001696:	d1f3      	bne.n	8001680 <sbf_len+0xe>
	return out;
 8001698:	68fb      	ldr	r3, [r7, #12]
}
 800169a:	0018      	movs	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	b004      	add	sp, #16
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <sbf_createSymbolBuffer>:

int8_t* sbf_createSymbolBuffer(void){
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
	// This returns a valid and correct terminated Symbol Buffer
	int8_t* _out = malloc((sizeof(int8_t)) * 1);
 80016a8:	2001      	movs	r0, #1
 80016aa:	f002 fb67 	bl	8003d7c <malloc>
 80016ae:	0003      	movs	r3, r0
 80016b0:	607b      	str	r3, [r7, #4]
	if (!_out) TTY_raiseMemoryError();
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <sbf_createSymbolBuffer+0x1a>
 80016b8:	f000 fb0a 	bl	8001cd0 <TTY_raiseMemoryError>
	_out[0] = SBF_TERMINATOR;
 80016bc:	2301      	movs	r3, #1
 80016be:	425a      	negs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	701a      	strb	r2, [r3, #0]
	return _out;
 80016c4:	687b      	ldr	r3, [r7, #4]
}
 80016c6:	0018      	movs	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b002      	add	sp, #8
 80016cc:	bd80      	pop	{r7, pc}

080016ce <sbf_appendSym>:

int8_t* sbf_appendSym(int8_t* head, uint8_t sym){
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	000a      	movs	r2, r1
 80016d8:	1cfb      	adds	r3, r7, #3
 80016da:	701a      	strb	r2, [r3, #0]
	uint32_t head_len = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	613b      	str	r3, [r7, #16]

	// When head NULL, create a single symbolbuffer
	if (head == NULL) {
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d115      	bne.n	8001712 <sbf_appendSym+0x44>
		int8_t* tail = (int8_t*) malloc(2 * sizeof(int8_t));
 80016e6:	2002      	movs	r0, #2
 80016e8:	f002 fb48 	bl	8003d7c <malloc>
 80016ec:	0003      	movs	r3, r0
 80016ee:	60bb      	str	r3, [r7, #8]
		if (tail == NULL) TTY_raiseMemoryError();
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <sbf_appendSym+0x2c>
 80016f6:	f000 faeb 	bl	8001cd0 <TTY_raiseMemoryError>
		tail[0] = sym;
 80016fa:	1cfb      	adds	r3, r7, #3
 80016fc:	2200      	movs	r2, #0
 80016fe:	569a      	ldrsb	r2, [r3, r2]
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	701a      	strb	r2, [r3, #0]
		tail[1] = SBF_TERMINATOR;
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	3301      	adds	r3, #1
 8001708:	2201      	movs	r2, #1
 800170a:	4252      	negs	r2, r2
 800170c:	701a      	strb	r2, [r3, #0]
		return tail;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	e03c      	b.n	800178c <sbf_appendSym+0xbe>
	}

	// Create a tail with correct length
	head_len = sbf_len(head);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	0018      	movs	r0, r3
 8001716:	f7ff ffac 	bl	8001672 <sbf_len>
 800171a:	0003      	movs	r3, r0
 800171c:	613b      	str	r3, [r7, #16]
	int8_t* tail = (int8_t*) malloc((head_len + 2) * sizeof(int8_t));
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	3302      	adds	r3, #2
 8001722:	0018      	movs	r0, r3
 8001724:	f002 fb2a 	bl	8003d7c <malloc>
 8001728:	0003      	movs	r3, r0
 800172a:	60fb      	str	r3, [r7, #12]
	if (tail == NULL) TTY_raiseMemoryError();
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <sbf_appendSym+0x68>
 8001732:	f000 facd 	bl	8001cd0 <TTY_raiseMemoryError>

	// Populate tail
	uint32_t i = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
	while (head[i] != SBF_TERMINATOR) {
 800173a:	e00b      	b.n	8001754 <sbf_appendSym+0x86>
		tail[i] = head[i];
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	18d2      	adds	r2, r2, r3
 8001742:	68f9      	ldr	r1, [r7, #12]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	18cb      	adds	r3, r1, r3
 8001748:	7812      	ldrb	r2, [r2, #0]
 800174a:	b252      	sxtb	r2, r2
 800174c:	701a      	strb	r2, [r3, #0]
		i++;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
	while (head[i] != SBF_TERMINATOR) {
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	18d3      	adds	r3, r2, r3
 800175a:	2200      	movs	r2, #0
 800175c:	569a      	ldrsb	r2, [r3, r2]
 800175e:	2301      	movs	r3, #1
 8001760:	425b      	negs	r3, r3
 8001762:	429a      	cmp	r2, r3
 8001764:	d1ea      	bne.n	800173c <sbf_appendSym+0x6e>
	}
	// Append Symbol
	tail[i] = sym;
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	18d3      	adds	r3, r2, r3
 800176c:	1cfa      	adds	r2, r7, #3
 800176e:	7812      	ldrb	r2, [r2, #0]
 8001770:	b252      	sxtb	r2, r2
 8001772:	701a      	strb	r2, [r3, #0]
	tail[i+1] = SBF_TERMINATOR;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	3301      	adds	r3, #1
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	18d3      	adds	r3, r2, r3
 800177c:	2201      	movs	r2, #1
 800177e:	4252      	negs	r2, r2
 8001780:	701a      	strb	r2, [r3, #0]
	free(head);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	0018      	movs	r0, r3
 8001786:	f002 fb03 	bl	8003d90 <free>
	return tail;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b006      	add	sp, #24
 8001792:	bd80      	pop	{r7, pc}

08001794 <sbf_concaternate>:

int8_t* sbf_concaternate(int8_t* head, int8_t* tail, uint8_t keepTail){
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	1dfb      	adds	r3, r7, #7
 80017a0:	701a      	strb	r2, [r3, #0]
	uint32_t head_len = sbf_len(head);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	0018      	movs	r0, r3
 80017a6:	f7ff ff64 	bl	8001672 <sbf_len>
 80017aa:	0003      	movs	r3, r0
 80017ac:	61bb      	str	r3, [r7, #24]
	uint32_t tail_len = sbf_len(tail);
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7ff ff5e 	bl	8001672 <sbf_len>
 80017b6:	0003      	movs	r3, r0
 80017b8:	617b      	str	r3, [r7, #20]

	int8_t* _out = malloc(sizeof(int8_t*) * (head_len + tail_len + 1));
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	18d3      	adds	r3, r2, r3
 80017c0:	3301      	adds	r3, #1
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	0018      	movs	r0, r3
 80017c6:	f002 fad9 	bl	8003d7c <malloc>
 80017ca:	0003      	movs	r3, r0
 80017cc:	613b      	str	r3, [r7, #16]
	if (_out == NULL) TTY_raiseMemoryError();
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <sbf_concaternate+0x44>
 80017d4:	f000 fa7c 	bl	8001cd0 <TTY_raiseMemoryError>

	uint32_t len = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]

	while(head[len] != SBF_TERMINATOR){
 80017dc:	e00b      	b.n	80017f6 <sbf_concaternate+0x62>
		_out[len] = head[len];
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	18d2      	adds	r2, r2, r3
 80017e4:	6939      	ldr	r1, [r7, #16]
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	18cb      	adds	r3, r1, r3
 80017ea:	7812      	ldrb	r2, [r2, #0]
 80017ec:	b252      	sxtb	r2, r2
 80017ee:	701a      	strb	r2, [r3, #0]
		len++;
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	3301      	adds	r3, #1
 80017f4:	61fb      	str	r3, [r7, #28]
	while(head[len] != SBF_TERMINATOR){
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	18d3      	adds	r3, r2, r3
 80017fc:	2200      	movs	r2, #0
 80017fe:	569a      	ldrsb	r2, [r3, r2]
 8001800:	2301      	movs	r3, #1
 8001802:	425b      	negs	r3, r3
 8001804:	429a      	cmp	r2, r3
 8001806:	d1ea      	bne.n	80017de <sbf_concaternate+0x4a>
	}

	while(tail[len - head_len] != SBF_TERMINATOR){
 8001808:	e00d      	b.n	8001826 <sbf_concaternate+0x92>
		_out[len] = tail[len - head_len];
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	18d2      	adds	r2, r2, r3
 8001814:	6939      	ldr	r1, [r7, #16]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	18cb      	adds	r3, r1, r3
 800181a:	7812      	ldrb	r2, [r2, #0]
 800181c:	b252      	sxtb	r2, r2
 800181e:	701a      	strb	r2, [r3, #0]
		len++;
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	3301      	adds	r3, #1
 8001824:	61fb      	str	r3, [r7, #28]
	while(tail[len - head_len] != SBF_TERMINATOR){
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	18d3      	adds	r3, r2, r3
 8001830:	2200      	movs	r2, #0
 8001832:	569a      	ldrsb	r2, [r3, r2]
 8001834:	2301      	movs	r3, #1
 8001836:	425b      	negs	r3, r3
 8001838:	429a      	cmp	r2, r3
 800183a:	d1e6      	bne.n	800180a <sbf_concaternate+0x76>
	}

	_out[len] = SBF_TERMINATOR;
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	18d3      	adds	r3, r2, r3
 8001842:	2201      	movs	r2, #1
 8001844:	4252      	negs	r2, r2
 8001846:	701a      	strb	r2, [r3, #0]

	free(head);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	0018      	movs	r0, r3
 800184c:	f002 faa0 	bl	8003d90 <free>
	if (keepTail != 0) free(tail);
 8001850:	1dfb      	adds	r3, r7, #7
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <sbf_concaternate+0xcc>
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	0018      	movs	r0, r3
 800185c:	f002 fa98 	bl	8003d90 <free>
	return _out;
 8001860:	693b      	ldr	r3, [r7, #16]
}
 8001862:	0018      	movs	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	b008      	add	sp, #32
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <sbf_convertToString>:
// -----------------------------------------------------------------


// --- CONVERT -----------------------------------------------------
char* sbf_convertToString(int8_t* _inSbf, char* _newLine){
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
	char* _out = str_empty();
 8001876:	f7ff fe2f 	bl	80014d8 <str_empty>
 800187a:	0003      	movs	r3, r0
 800187c:	617b      	str	r3, [r7, #20]

	if (_inSbf[0] == SBF_TERMINATOR) return _out;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	569a      	ldrsb	r2, [r3, r2]
 8001884:	2301      	movs	r3, #1
 8001886:	425b      	negs	r3, r3
 8001888:	429a      	cmp	r2, r3
 800188a:	d101      	bne.n	8001890 <sbf_convertToString+0x24>
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	e0a7      	b.n	80019e0 <sbf_convertToString+0x174>

	tty_mode_t _mode = TTY_LETTERS;
 8001890:	2313      	movs	r3, #19
 8001892:	18fb      	adds	r3, r7, r3
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
	// Its good practice to begin with a "ltrs" or "figs" symbol.
	// But if a leading symbol is missing, we have to assume :c
	if (_inSbf[0] != ltrs || _inSbf[0] != figs)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b25b      	sxtb	r3, r3
 800189e:	2b1f      	cmp	r3, #31
 80018a0:	d104      	bne.n	80018ac <sbf_convertToString+0x40>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b25b      	sxtb	r3, r3
 80018a8:	2b1b      	cmp	r3, #27
 80018aa:	d008      	beq.n	80018be <sbf_convertToString+0x52>
		_mode = _findInitialMode(_inSbf);
 80018ac:	2313      	movs	r3, #19
 80018ae:	18fc      	adds	r4, r7, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	0018      	movs	r0, r3
 80018b4:	f000 f89c 	bl	80019f0 <_findInitialMode>
 80018b8:	0003      	movs	r3, r0
 80018ba:	7023      	strb	r3, [r4, #0]
 80018bc:	e00d      	b.n	80018da <sbf_convertToString+0x6e>
	else {
		if(_inSbf[0] == ltrs) _mode = TTY_LETTERS;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	b25b      	sxtb	r3, r3
 80018c4:	2b1f      	cmp	r3, #31
 80018c6:	d104      	bne.n	80018d2 <sbf_convertToString+0x66>
 80018c8:	2313      	movs	r3, #19
 80018ca:	18fb      	adds	r3, r7, r3
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	e003      	b.n	80018da <sbf_convertToString+0x6e>
		else _mode = TTY_FIGURES;
 80018d2:	2313      	movs	r3, #19
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
	}

	uint32_t carriage = 0;	// when 0 every lf will be a newline
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
	for (int i = 0; _inSbf[i] != SBF_TERMINATOR; i++){
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	e06f      	b.n	80019c4 <sbf_convertToString+0x158>

		// Handle common symbols
		switch(_inSbf[i]){
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	18d3      	adds	r3, r2, r3
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	b25b      	sxtb	r3, r3
 80018ee:	2b1f      	cmp	r3, #31
 80018f0:	d013      	beq.n	800191a <sbf_convertToString+0xae>
 80018f2:	dc22      	bgt.n	800193a <sbf_convertToString+0xce>
 80018f4:	2b1b      	cmp	r3, #27
 80018f6:	d018      	beq.n	800192a <sbf_convertToString+0xbe>
 80018f8:	dc1f      	bgt.n	800193a <sbf_convertToString+0xce>
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d004      	beq.n	8001908 <sbf_convertToString+0x9c>
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d11b      	bne.n	800193a <sbf_convertToString+0xce>
			case cr: carriage = 0; continue;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	e05a      	b.n	80019be <sbf_convertToString+0x152>
			case space: str_appendChar(_out, ' '); carriage++; continue;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	2120      	movs	r1, #32
 800190c:	0018      	movs	r0, r3
 800190e:	f7ff fdf8 	bl	8001502 <str_appendChar>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3301      	adds	r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	e051      	b.n	80019be <sbf_convertToString+0x152>
			case ltrs: _mode = TTY_LETTERS; carriage++; continue;
 800191a:	2313      	movs	r3, #19
 800191c:	18fb      	adds	r3, r7, r3
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	3301      	adds	r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	e049      	b.n	80019be <sbf_convertToString+0x152>
			case figs: _mode = TTY_FIGURES; carriage++; continue;
 800192a:	2313      	movs	r3, #19
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3301      	adds	r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	e041      	b.n	80019be <sbf_convertToString+0x152>
		}

		// if crlf OR lfcr OR lflflfl…
		if (_inSbf[i] == lf && (_inSbf[i+1] == cr || carriage == 0)){
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	18d3      	adds	r3, r2, r3
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	b25b      	sxtb	r3, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d113      	bne.n	8001970 <sbf_convertToString+0x104>
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	3301      	adds	r3, #1
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	18d3      	adds	r3, r2, r3
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	b25b      	sxtb	r3, r3
 8001954:	2b08      	cmp	r3, #8
 8001956:	d002      	beq.n	800195e <sbf_convertToString+0xf2>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d108      	bne.n	8001970 <sbf_convertToString+0x104>
			_out = str_add(_out, _newLine, 1);
 800195e:	6839      	ldr	r1, [r7, #0]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2201      	movs	r2, #1
 8001964:	0018      	movs	r0, r3
 8001966:	f7ff fe23 	bl	80015b0 <str_add>
 800196a:	0003      	movs	r3, r0
 800196c:	617b      	str	r3, [r7, #20]
			continue;
 800196e:	e026      	b.n	80019be <sbf_convertToString+0x152>
		}

		if (_mode == TTY_LETTERS)
 8001970:	2313      	movs	r3, #19
 8001972:	18fb      	adds	r3, r7, r3
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10f      	bne.n	800199a <sbf_convertToString+0x12e>
			_out = str_appendChar(_out, ltrs_to_char[_inSbf[i]]);
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	18d3      	adds	r3, r2, r3
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	b25b      	sxtb	r3, r3
 8001984:	001a      	movs	r2, r3
 8001986:	4b18      	ldr	r3, [pc, #96]	@ (80019e8 <sbf_convertToString+0x17c>)
 8001988:	5c9a      	ldrb	r2, [r3, r2]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	0011      	movs	r1, r2
 800198e:	0018      	movs	r0, r3
 8001990:	f7ff fdb7 	bl	8001502 <str_appendChar>
 8001994:	0003      	movs	r3, r0
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	e00e      	b.n	80019b8 <sbf_convertToString+0x14c>
		else
			_out = str_appendChar(_out, figs_to_char[_inSbf[i]]);
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	18d3      	adds	r3, r2, r3
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	b25b      	sxtb	r3, r3
 80019a4:	001a      	movs	r2, r3
 80019a6:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <sbf_convertToString+0x180>)
 80019a8:	5c9a      	ldrb	r2, [r3, r2]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	0011      	movs	r1, r2
 80019ae:	0018      	movs	r0, r3
 80019b0:	f7ff fda7 	bl	8001502 <str_appendChar>
 80019b4:	0003      	movs	r3, r0
 80019b6:	617b      	str	r3, [r7, #20]
		carriage++;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3301      	adds	r3, #1
 80019bc:	60fb      	str	r3, [r7, #12]
	for (int i = 0; _inSbf[i] != SBF_TERMINATOR; i++){
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	3301      	adds	r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	18d3      	adds	r3, r2, r3
 80019ca:	2200      	movs	r2, #0
 80019cc:	569a      	ldrsb	r2, [r3, r2]
 80019ce:	2301      	movs	r3, #1
 80019d0:	425b      	negs	r3, r3
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d186      	bne.n	80018e4 <sbf_convertToString+0x78>
	}

	free(_inSbf);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	0018      	movs	r0, r3
 80019da:	f002 f9d9 	bl	8003d90 <free>
	return _out;
 80019de:	697b      	ldr	r3, [r7, #20]
}
 80019e0:	0018      	movs	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b007      	add	sp, #28
 80019e6:	bd90      	pop	{r4, r7, pc}
 80019e8:	08004044 	.word	0x08004044
 80019ec:	08004064 	.word	0x08004064

080019f0 <_findInitialMode>:
}

// -----------------------------------------------------------------
// PRIVATE FUNCTIONS
void ___();
tty_mode_t _findInitialMode(int8_t* _inSbf){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; _inSbf[i] != SBF_TERMINATOR; i++){
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	e014      	b.n	8001a28 <_findInitialMode+0x38>
		if (_inSbf[i] == ltrs) return TTY_FIGURES;
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	18d3      	adds	r3, r2, r3
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	b25b      	sxtb	r3, r3
 8001a08:	2b1f      	cmp	r3, #31
 8001a0a:	d101      	bne.n	8001a10 <_findInitialMode+0x20>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e015      	b.n	8001a3c <_findInitialMode+0x4c>
		if (_inSbf[i] == figs) return TTY_LETTERS;
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	18d3      	adds	r3, r2, r3
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b25b      	sxtb	r3, r3
 8001a1a:	2b1b      	cmp	r3, #27
 8001a1c:	d101      	bne.n	8001a22 <_findInitialMode+0x32>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e00c      	b.n	8001a3c <_findInitialMode+0x4c>
	for (uint32_t i = 0; _inSbf[i] != SBF_TERMINATOR; i++){
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3301      	adds	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	18d3      	adds	r3, r2, r3
 8001a2e:	2200      	movs	r2, #0
 8001a30:	569a      	ldrsb	r2, [r3, r2]
 8001a32:	2301      	movs	r3, #1
 8001a34:	425b      	negs	r3, r3
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d1e1      	bne.n	80019fe <_findInitialMode+0xe>
	}
	return TTY_LETTERS;	// assume default value
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b004      	add	sp, #16
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a4c:	4a14      	ldr	r2, [pc, #80]	@ (8001aa0 <_sbrk+0x5c>)
 8001a4e:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <_sbrk+0x60>)
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a58:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a60:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <_sbrk+0x64>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <_sbrk+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	18d3      	adds	r3, r2, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d207      	bcs.n	8001a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a74:	f002 fa62 	bl	8003f3c <__errno>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	425b      	negs	r3, r3
 8001a82:	e009      	b.n	8001a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a84:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	18d2      	adds	r2, r2, r3
 8001a92:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <_sbrk+0x64>)
 8001a94:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	0018      	movs	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	b006      	add	sp, #24
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20001800 	.word	0x20001800
 8001aa4:	00000400 	.word	0x00000400
 8001aa8:	2000019c 	.word	0x2000019c
 8001aac:	200002f0 	.word	0x200002f0

08001ab0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001ab4:	46c0      	nop			@ (mov r8, r8)
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ac0:	f3bf 8f4f 	dsb	sy
}
 8001ac4:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	@ (8001ad8 <__NVIC_SystemReset+0x1c>)
 8001ac8:	4a04      	ldr	r2, [pc, #16]	@ (8001adc <__NVIC_SystemReset+0x20>)
 8001aca:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001acc:	f3bf 8f4f 	dsb	sy
}
 8001ad0:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001ad2:	46c0      	nop			@ (mov r8, r8)
 8001ad4:	e7fd      	b.n	8001ad2 <__NVIC_SystemReset+0x16>
 8001ad6:	46c0      	nop			@ (mov r8, r8)
 8001ad8:	e000ed00 	.word	0xe000ed00
 8001adc:	05fa0004 	.word	0x05fa0004

08001ae0 <TTY_WRITEBUFFER>:
    writebuffer = TTY_WRITEBUFFER(writebuffer);

    free(writebuffer);
}

int8_t* TTY_WRITEBUFFER(int8_t* buffer){
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
    
    // Write all symbols in buffer
    for (uint8_t i = 0; buffer[i] != -1; i++) {
 8001ae8:	230f      	movs	r3, #15
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
 8001af0:	e00e      	b.n	8001b10 <TTY_WRITEBUFFER+0x30>
        TTY_Write(buffer[i]);
 8001af2:	240f      	movs	r4, #15
 8001af4:	193b      	adds	r3, r7, r4
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	18d3      	adds	r3, r2, r3
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b25b      	sxtb	r3, r3
 8001b00:	0018      	movs	r0, r3
 8001b02:	f000 f825 	bl	8001b50 <TTY_Write>
    for (uint8_t i = 0; buffer[i] != -1; i++) {
 8001b06:	193b      	adds	r3, r7, r4
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	193b      	adds	r3, r7, r4
 8001b0c:	3201      	adds	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	230f      	movs	r3, #15
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	18d3      	adds	r3, r2, r3
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	b25b      	sxtb	r3, r3
 8001b1e:	3301      	adds	r3, #1
 8001b20:	d1e7      	bne.n	8001af2 <TTY_WRITEBUFFER+0x12>
    }
    
    // Free the input buffer
    free(buffer);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	0018      	movs	r0, r3
 8001b26:	f002 f933 	bl	8003d90 <free>
    
    // Create new empty buffer
    int8_t* out = (int8_t*)malloc(sizeof(int8_t));
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f002 f926 	bl	8003d7c <malloc>
 8001b30:	0003      	movs	r3, r0
 8001b32:	60bb      	str	r3, [r7, #8]
    if (out == NULL) {
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <TTY_WRITEBUFFER+0x5e>
        return NULL;  // malloc failed - caller must handle this!
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e003      	b.n	8001b46 <TTY_WRITEBUFFER+0x66>
    }
    out[0] = -1;  // Null-terminate
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	22ff      	movs	r2, #255	@ 0xff
 8001b42:	701a      	strb	r2, [r3, #0]
    return out;
 8001b44:	68bb      	ldr	r3, [r7, #8]
}
 8001b46:	0018      	movs	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b005      	add	sp, #20
 8001b4c:	bd90      	pop	{r4, r7, pc}
	...

08001b50 <TTY_Write>:

void TTY_Write(int8_t _sym){
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	0002      	movs	r2, r0
 8001b58:	1dfb      	adds	r3, r7, #7
 8001b5a:	701a      	strb	r2, [r3, #0]

	if (_sym == -1) return;
 8001b5c:	1dfb      	adds	r3, r7, #7
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	b25b      	sxtb	r3, r3
 8001b62:	3301      	adds	r3, #1
 8001b64:	d04c      	beq.n	8001c00 <TTY_Write+0xb0>

	// Skip redundant ltrs/figs commands
	if (_sym == TTY_FIGURES || _sym == TTY_LETTERS)
 8001b66:	1dfb      	adds	r3, r7, #7
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b25b      	sxtb	r3, r3
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d004      	beq.n	8001b7a <TTY_Write+0x2a>
 8001b70:	1dfb      	adds	r3, r7, #7
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	b25b      	sxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d102      	bne.n	8001b80 <TTY_Write+0x30>
		tty_mode = TTY_FIGURES ?
 8001b7a:	4b23      	ldr	r3, [pc, #140]	@ (8001c08 <TTY_Write+0xb8>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
				TTY_FIGURES : TTY_LETTERS;

	// if we want to use a "ltrs"|"figs" as audio-visual thingie
	// then we set this self-resetting flag
	if (send_mode != 0){
 8001b80:	4b22      	ldr	r3, [pc, #136]	@ (8001c0c <TTY_Write+0xbc>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00d      	beq.n	8001ba4 <TTY_Write+0x54>
		if (tty_mode == TTY_LETTERS) _sym = symbol.figs;
 8001b88:	4b1f      	ldr	r3, [pc, #124]	@ (8001c08 <TTY_Write+0xb8>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d103      	bne.n	8001b98 <TTY_Write+0x48>
 8001b90:	221b      	movs	r2, #27
 8001b92:	1dfb      	adds	r3, r7, #7
 8001b94:	701a      	strb	r2, [r3, #0]
 8001b96:	e002      	b.n	8001b9e <TTY_Write+0x4e>
		else _sym = symbol.ltrs;
 8001b98:	221f      	movs	r2, #31
 8001b9a:	1dfb      	adds	r3, r7, #7
 8001b9c:	701a      	strb	r2, [r3, #0]
		send_mode = 0;			// Remove Flag
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c0c <TTY_Write+0xbc>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
	}
    // ---TRANSMIT--------------------------------------------------
	TTY_Startbit();
 8001ba4:	f000 f876 	bl	8001c94 <TTY_Startbit>

	// LSB FIRST!
    for (uint8_t i = 0; i < 5; i++) {
 8001ba8:	230f      	movs	r3, #15
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	e01e      	b.n	8001bf0 <TTY_Write+0xa0>
        uint8_t bit = ((_sym >> i) & 0x01) ^ 1;
 8001bb2:	1dfb      	adds	r3, r7, #7
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	569a      	ldrsb	r2, [r3, r2]
 8001bb8:	240f      	movs	r4, #15
 8001bba:	193b      	adds	r3, r7, r4
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	411a      	asrs	r2, r3
 8001bc0:	0013      	movs	r3, r2
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	425a      	negs	r2, r3
 8001bc8:	4153      	adcs	r3, r2
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	210e      	movs	r1, #14
 8001bce:	187b      	adds	r3, r7, r1
 8001bd0:	701a      	strb	r2, [r3, #0]
        setTTY(bit);
 8001bd2:	187b      	adds	r3, r7, r1
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f000 f81a 	bl	8001c10 <setTTY>
        TTY_DELAY(1);
 8001bdc:	23fe      	movs	r3, #254	@ 0xfe
 8001bde:	059b      	lsls	r3, r3, #22
 8001be0:	1c18      	adds	r0, r3, #0
 8001be2:	f000 f833 	bl	8001c4c <TTY_DELAY>
    for (uint8_t i = 0; i < 5; i++) {
 8001be6:	193b      	adds	r3, r7, r4
 8001be8:	781a      	ldrb	r2, [r3, #0]
 8001bea:	193b      	adds	r3, r7, r4
 8001bec:	3201      	adds	r2, #1
 8001bee:	701a      	strb	r2, [r3, #0]
 8001bf0:	230f      	movs	r3, #15
 8001bf2:	18fb      	adds	r3, r7, r3
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d9db      	bls.n	8001bb2 <TTY_Write+0x62>
    }
	// send those 5 bits
	TTY_Stopbit();
 8001bfa:	f000 f859 	bl	8001cb0 <TTY_Stopbit>
 8001bfe:	e000      	b.n	8001c02 <TTY_Write+0xb2>
	if (_sym == -1) return;
 8001c00:	46c0      	nop			@ (mov r8, r8)
}
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b005      	add	sp, #20
 8001c06:	bd90      	pop	{r4, r7, pc}
 8001c08:	200001a0 	.word	0x200001a0
 8001c0c:	200001a1 	.word	0x200001a1

08001c10 <setTTY>:
	out = HAL_GPIO_ReadPin(GPIOB, TTY_RECV_Pin);
	if (loopback != 0) setTTY(out);
	return out;
}

void setTTY(uint8_t state){			// TTY @ A3
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	0002      	movs	r2, r0
 8001c18:	1dfb      	adds	r3, r7, #7
 8001c1a:	701a      	strb	r2, [r3, #0]
	if (state != 0) {
 8001c1c:	1dfb      	adds	r3, r7, #7
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d007      	beq.n	8001c34 <setTTY+0x24>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001c24:	2390      	movs	r3, #144	@ 0x90
 8001c26:	05db      	lsls	r3, r3, #23
 8001c28:	2201      	movs	r2, #1
 8001c2a:	2110      	movs	r1, #16
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f000 fb39 	bl	80022a4 <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
	}
}
 8001c32:	e006      	b.n	8001c42 <setTTY+0x32>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c34:	2390      	movs	r3, #144	@ 0x90
 8001c36:	05db      	lsls	r3, r3, #23
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2110      	movs	r1, #16
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f000 fb31 	bl	80022a4 <HAL_GPIO_WritePin>
}
 8001c42:	46c0      	nop			@ (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b002      	add	sp, #8
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <TTY_DELAY>:

void TTY_DELAY(float cycles){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	HAL_Delay((uint8_t)(cycles * ( 1000 / baud)));
 8001c54:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <TTY_DELAY+0x44>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	0019      	movs	r1, r3
 8001c5a:	23fa      	movs	r3, #250	@ 0xfa
 8001c5c:	0098      	lsls	r0, r3, #2
 8001c5e:	f7fe fadd 	bl	800021c <__divsi3>
 8001c62:	0003      	movs	r3, r0
 8001c64:	0018      	movs	r0, r3
 8001c66:	f7fe ffbb 	bl	8000be0 <__aeabi_i2f>
 8001c6a:	1c03      	adds	r3, r0, #0
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	1c18      	adds	r0, r3, #0
 8001c70:	f7fe fbd8 	bl	8000424 <__aeabi_fmul>
 8001c74:	1c03      	adds	r3, r0, #0
 8001c76:	1c18      	adds	r0, r3, #0
 8001c78:	f7fe fbbc 	bl	80003f4 <__aeabi_f2uiz>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	0018      	movs	r0, r3
 8001c82:	f000 f8cf 	bl	8001e24 <HAL_Delay>
}
 8001c86:	46c0      	nop			@ (mov r8, r8)
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b002      	add	sp, #8
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	20000004 	.word	0x20000004

08001c94 <TTY_Startbit>:

void TTY_Startbit(){
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
	setTTY(1);
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f7ff ffb9 	bl	8001c10 <setTTY>
	TTY_DELAY(1.0);
 8001c9e:	23fe      	movs	r3, #254	@ 0xfe
 8001ca0:	059b      	lsls	r3, r3, #22
 8001ca2:	1c18      	adds	r0, r3, #0
 8001ca4:	f7ff ffd2 	bl	8001c4c <TTY_DELAY>
}
 8001ca8:	46c0      	nop			@ (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <TTY_Stopbit>:

void TTY_Stopbit(){
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
	setTTY(0);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7ff ffab 	bl	8001c10 <setTTY>
	TTY_DELAY(stopbit_cnt);
 8001cba:	4b04      	ldr	r3, [pc, #16]	@ (8001ccc <TTY_Stopbit+0x1c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	1c18      	adds	r0, r3, #0
 8001cc0:	f7ff ffc4 	bl	8001c4c <TTY_DELAY>
}
 8001cc4:	46c0      	nop			@ (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			@ (mov r8, r8)
 8001ccc:	20000008 	.word	0x20000008

08001cd0 <TTY_raiseMemoryError>:

void TTY_raiseMemoryError(void){
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
	 *
	 * 1. Send MEM_ERR_MSG[], symbol by symbol
	 * 2. Reset CPU
	 * 3. Hope for the best
	 */
	NVIC_SystemReset();	// REBOOT CPU
 8001cd4:	f7ff fef2 	bl	8001abc <__NVIC_SystemReset>

08001cd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cd8:	4813      	ldr	r0, [pc, #76]	@ (8001d28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cda:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cdc:	f7ff fee8 	bl	8001ab0 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001ce0:	4812      	ldr	r0, [pc, #72]	@ (8001d2c <LoopForever+0x6>)
    LDR R1, [R0]
 8001ce2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001ce4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001ce6:	4a12      	ldr	r2, [pc, #72]	@ (8001d30 <LoopForever+0xa>)
    CMP R1, R2
 8001ce8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001cea:	d105      	bne.n	8001cf8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001cec:	4811      	ldr	r0, [pc, #68]	@ (8001d34 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001cee:	4912      	ldr	r1, [pc, #72]	@ (8001d38 <LoopForever+0x12>)
    STR R1, [R0]
 8001cf0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001cf2:	4812      	ldr	r0, [pc, #72]	@ (8001d3c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001cf4:	4912      	ldr	r1, [pc, #72]	@ (8001d40 <LoopForever+0x1a>)
    STR R1, [R0]
 8001cf6:	6001      	str	r1, [r0, #0]

08001cf8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf8:	4812      	ldr	r0, [pc, #72]	@ (8001d44 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001cfa:	4913      	ldr	r1, [pc, #76]	@ (8001d48 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001cfc:	4a13      	ldr	r2, [pc, #76]	@ (8001d4c <LoopForever+0x26>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d00:	e002      	b.n	8001d08 <LoopCopyDataInit>

08001d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d06:	3304      	adds	r3, #4

08001d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d0c:	d3f9      	bcc.n	8001d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0e:	4a10      	ldr	r2, [pc, #64]	@ (8001d50 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001d10:	4c10      	ldr	r4, [pc, #64]	@ (8001d54 <LoopForever+0x2e>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d14:	e001      	b.n	8001d1a <LoopFillZerobss>

08001d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d18:	3204      	adds	r2, #4

08001d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d1c:	d3fb      	bcc.n	8001d16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d1e:	f002 f913 	bl	8003f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d22:	f7ff f98b 	bl	800103c <main>

08001d26 <LoopForever>:

LoopForever:
    b LoopForever
 8001d26:	e7fe      	b.n	8001d26 <LoopForever>
  ldr   r0, =_estack
 8001d28:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001d2c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001d30:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001d34:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001d38:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001d3c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001d40:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d48:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001d4c:	080040c4 	.word	0x080040c4
  ldr r2, =_sbss
 8001d50:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001d54:	200002f0 	.word	0x200002f0

08001d58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC1_IRQHandler>
	...

08001d5c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d60:	4b07      	ldr	r3, [pc, #28]	@ (8001d80 <HAL_Init+0x24>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_Init+0x24>)
 8001d66:	2110      	movs	r1, #16
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f000 f809 	bl	8001d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d72:	f7ff facd 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	0018      	movs	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	46c0      	nop			@ (mov r8, r8)
 8001d80:	40022000 	.word	0x40022000

08001d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d8c:	4b14      	ldr	r3, [pc, #80]	@ (8001de0 <HAL_InitTick+0x5c>)
 8001d8e:	681c      	ldr	r4, [r3, #0]
 8001d90:	4b14      	ldr	r3, [pc, #80]	@ (8001de4 <HAL_InitTick+0x60>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	0019      	movs	r1, r3
 8001d96:	23fa      	movs	r3, #250	@ 0xfa
 8001d98:	0098      	lsls	r0, r3, #2
 8001d9a:	f7fe f9b5 	bl	8000108 <__udivsi3>
 8001d9e:	0003      	movs	r3, r0
 8001da0:	0019      	movs	r1, r3
 8001da2:	0020      	movs	r0, r4
 8001da4:	f7fe f9b0 	bl	8000108 <__udivsi3>
 8001da8:	0003      	movs	r3, r0
 8001daa:	0018      	movs	r0, r3
 8001dac:	f000 f905 	bl	8001fba <HAL_SYSTICK_Config>
 8001db0:	1e03      	subs	r3, r0, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e00f      	b.n	8001dd8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d80b      	bhi.n	8001dd6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	425b      	negs	r3, r3
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f000 f8e2 	bl	8001f90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <HAL_InitTick+0x64>)
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e000      	b.n	8001dd8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
}
 8001dd8:	0018      	movs	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b003      	add	sp, #12
 8001dde:	bd90      	pop	{r4, r7, pc}
 8001de0:	20000000 	.word	0x20000000
 8001de4:	20000010 	.word	0x20000010
 8001de8:	2000000c 	.word	0x2000000c

08001dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df0:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <HAL_IncTick+0x1c>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	001a      	movs	r2, r3
 8001df6:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <HAL_IncTick+0x20>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	18d2      	adds	r2, r2, r3
 8001dfc:	4b03      	ldr	r3, [pc, #12]	@ (8001e0c <HAL_IncTick+0x20>)
 8001dfe:	601a      	str	r2, [r3, #0]
}
 8001e00:	46c0      	nop			@ (mov r8, r8)
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	20000010 	.word	0x20000010
 8001e0c:	200001a4 	.word	0x200001a4

08001e10 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  return uwTick;
 8001e14:	4b02      	ldr	r3, [pc, #8]	@ (8001e20 <HAL_GetTick+0x10>)
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	46c0      	nop			@ (mov r8, r8)
 8001e20:	200001a4 	.word	0x200001a4

08001e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e2c:	f7ff fff0 	bl	8001e10 <HAL_GetTick>
 8001e30:	0003      	movs	r3, r0
 8001e32:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	d005      	beq.n	8001e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e68 <HAL_Delay+0x44>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	001a      	movs	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	189b      	adds	r3, r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001e4a:	46c0      	nop			@ (mov r8, r8)
 8001e4c:	f7ff ffe0 	bl	8001e10 <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d8f7      	bhi.n	8001e4c <HAL_Delay+0x28>
  {
  }
}
 8001e5c:	46c0      	nop			@ (mov r8, r8)
 8001e5e:	46c0      	nop			@ (mov r8, r8)
 8001e60:	46bd      	mov	sp, r7
 8001e62:	b004      	add	sp, #16
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	46c0      	nop			@ (mov r8, r8)
 8001e68:	20000010 	.word	0x20000010

08001e6c <__NVIC_SetPriority>:
{
 8001e6c:	b590      	push	{r4, r7, lr}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	0002      	movs	r2, r0
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	1dfb      	adds	r3, r7, #7
 8001e78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e7a:	1dfb      	adds	r3, r7, #7
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e80:	d828      	bhi.n	8001ed4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e82:	4a2f      	ldr	r2, [pc, #188]	@ (8001f40 <__NVIC_SetPriority+0xd4>)
 8001e84:	1dfb      	adds	r3, r7, #7
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	b25b      	sxtb	r3, r3
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	33c0      	adds	r3, #192	@ 0xc0
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	589b      	ldr	r3, [r3, r2]
 8001e92:	1dfa      	adds	r2, r7, #7
 8001e94:	7812      	ldrb	r2, [r2, #0]
 8001e96:	0011      	movs	r1, r2
 8001e98:	2203      	movs	r2, #3
 8001e9a:	400a      	ands	r2, r1
 8001e9c:	00d2      	lsls	r2, r2, #3
 8001e9e:	21ff      	movs	r1, #255	@ 0xff
 8001ea0:	4091      	lsls	r1, r2
 8001ea2:	000a      	movs	r2, r1
 8001ea4:	43d2      	mvns	r2, r2
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	019b      	lsls	r3, r3, #6
 8001eae:	22ff      	movs	r2, #255	@ 0xff
 8001eb0:	401a      	ands	r2, r3
 8001eb2:	1dfb      	adds	r3, r7, #7
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	2303      	movs	r3, #3
 8001eba:	4003      	ands	r3, r0
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ec0:	481f      	ldr	r0, [pc, #124]	@ (8001f40 <__NVIC_SetPriority+0xd4>)
 8001ec2:	1dfb      	adds	r3, r7, #7
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	b25b      	sxtb	r3, r3
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	33c0      	adds	r3, #192	@ 0xc0
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	501a      	str	r2, [r3, r0]
}
 8001ed2:	e031      	b.n	8001f38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f44 <__NVIC_SetPriority+0xd8>)
 8001ed6:	1dfb      	adds	r3, r7, #7
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	0019      	movs	r1, r3
 8001edc:	230f      	movs	r3, #15
 8001ede:	400b      	ands	r3, r1
 8001ee0:	3b08      	subs	r3, #8
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3306      	adds	r3, #6
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	18d3      	adds	r3, r2, r3
 8001eea:	3304      	adds	r3, #4
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	1dfa      	adds	r2, r7, #7
 8001ef0:	7812      	ldrb	r2, [r2, #0]
 8001ef2:	0011      	movs	r1, r2
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	00d2      	lsls	r2, r2, #3
 8001efa:	21ff      	movs	r1, #255	@ 0xff
 8001efc:	4091      	lsls	r1, r2
 8001efe:	000a      	movs	r2, r1
 8001f00:	43d2      	mvns	r2, r2
 8001f02:	401a      	ands	r2, r3
 8001f04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	019b      	lsls	r3, r3, #6
 8001f0a:	22ff      	movs	r2, #255	@ 0xff
 8001f0c:	401a      	ands	r2, r3
 8001f0e:	1dfb      	adds	r3, r7, #7
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	0018      	movs	r0, r3
 8001f14:	2303      	movs	r3, #3
 8001f16:	4003      	ands	r3, r0
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f1c:	4809      	ldr	r0, [pc, #36]	@ (8001f44 <__NVIC_SetPriority+0xd8>)
 8001f1e:	1dfb      	adds	r3, r7, #7
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	001c      	movs	r4, r3
 8001f24:	230f      	movs	r3, #15
 8001f26:	4023      	ands	r3, r4
 8001f28:	3b08      	subs	r3, #8
 8001f2a:	089b      	lsrs	r3, r3, #2
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	3306      	adds	r3, #6
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	18c3      	adds	r3, r0, r3
 8001f34:	3304      	adds	r3, #4
 8001f36:	601a      	str	r2, [r3, #0]
}
 8001f38:	46c0      	nop			@ (mov r8, r8)
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b003      	add	sp, #12
 8001f3e:	bd90      	pop	{r4, r7, pc}
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	1e5a      	subs	r2, r3, #1
 8001f54:	2380      	movs	r3, #128	@ 0x80
 8001f56:	045b      	lsls	r3, r3, #17
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d301      	bcc.n	8001f60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e010      	b.n	8001f82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f60:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <SysTick_Config+0x44>)
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	3a01      	subs	r2, #1
 8001f66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f68:	2301      	movs	r3, #1
 8001f6a:	425b      	negs	r3, r3
 8001f6c:	2103      	movs	r1, #3
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f7ff ff7c 	bl	8001e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f74:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <SysTick_Config+0x44>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7a:	4b04      	ldr	r3, [pc, #16]	@ (8001f8c <SysTick_Config+0x44>)
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	0018      	movs	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b002      	add	sp, #8
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			@ (mov r8, r8)
 8001f8c:	e000e010 	.word	0xe000e010

08001f90 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	187b      	adds	r3, r7, r1
 8001f9e:	1c02      	adds	r2, r0, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	187b      	adds	r3, r7, r1
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	b25b      	sxtb	r3, r3
 8001faa:	0011      	movs	r1, r2
 8001fac:	0018      	movs	r0, r3
 8001fae:	f7ff ff5d 	bl	8001e6c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001fb2:	46c0      	nop			@ (mov r8, r8)
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b004      	add	sp, #16
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f7ff ffbf 	bl	8001f48 <SysTick_Config>
 8001fca:	0003      	movs	r3, r0
}
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b002      	add	sp, #8
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe2:	e149      	b.n	8002278 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2101      	movs	r1, #1
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4091      	lsls	r1, r2
 8001fee:	000a      	movs	r2, r1
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d100      	bne.n	8001ffc <HAL_GPIO_Init+0x28>
 8001ffa:	e13a      	b.n	8002272 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2203      	movs	r2, #3
 8002002:	4013      	ands	r3, r2
 8002004:	2b01      	cmp	r3, #1
 8002006:	d005      	beq.n	8002014 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2203      	movs	r2, #3
 800200e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002010:	2b02      	cmp	r3, #2
 8002012:	d130      	bne.n	8002076 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	2203      	movs	r2, #3
 8002020:	409a      	lsls	r2, r3
 8002022:	0013      	movs	r3, r2
 8002024:	43da      	mvns	r2, r3
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	409a      	lsls	r2, r3
 8002036:	0013      	movs	r3, r2
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800204a:	2201      	movs	r2, #1
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	409a      	lsls	r2, r3
 8002050:	0013      	movs	r3, r2
 8002052:	43da      	mvns	r2, r3
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	2201      	movs	r2, #1
 8002062:	401a      	ands	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	409a      	lsls	r2, r3
 8002068:	0013      	movs	r3, r2
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2203      	movs	r2, #3
 800207c:	4013      	ands	r3, r2
 800207e:	2b03      	cmp	r3, #3
 8002080:	d017      	beq.n	80020b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	2203      	movs	r2, #3
 800208e:	409a      	lsls	r2, r3
 8002090:	0013      	movs	r3, r2
 8002092:	43da      	mvns	r2, r3
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	409a      	lsls	r2, r3
 80020a4:	0013      	movs	r3, r2
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2203      	movs	r2, #3
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d123      	bne.n	8002106 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	08da      	lsrs	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3208      	adds	r2, #8
 80020c6:	0092      	lsls	r2, r2, #2
 80020c8:	58d3      	ldr	r3, [r2, r3]
 80020ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	2207      	movs	r2, #7
 80020d0:	4013      	ands	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	220f      	movs	r2, #15
 80020d6:	409a      	lsls	r2, r3
 80020d8:	0013      	movs	r3, r2
 80020da:	43da      	mvns	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	691a      	ldr	r2, [r3, #16]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2107      	movs	r1, #7
 80020ea:	400b      	ands	r3, r1
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	409a      	lsls	r2, r3
 80020f0:	0013      	movs	r3, r2
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	08da      	lsrs	r2, r3, #3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3208      	adds	r2, #8
 8002100:	0092      	lsls	r2, r2, #2
 8002102:	6939      	ldr	r1, [r7, #16]
 8002104:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	2203      	movs	r2, #3
 8002112:	409a      	lsls	r2, r3
 8002114:	0013      	movs	r3, r2
 8002116:	43da      	mvns	r2, r3
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2203      	movs	r2, #3
 8002124:	401a      	ands	r2, r3
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	409a      	lsls	r2, r3
 800212c:	0013      	movs	r3, r2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	23c0      	movs	r3, #192	@ 0xc0
 8002140:	029b      	lsls	r3, r3, #10
 8002142:	4013      	ands	r3, r2
 8002144:	d100      	bne.n	8002148 <HAL_GPIO_Init+0x174>
 8002146:	e094      	b.n	8002272 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002148:	4b51      	ldr	r3, [pc, #324]	@ (8002290 <HAL_GPIO_Init+0x2bc>)
 800214a:	699a      	ldr	r2, [r3, #24]
 800214c:	4b50      	ldr	r3, [pc, #320]	@ (8002290 <HAL_GPIO_Init+0x2bc>)
 800214e:	2101      	movs	r1, #1
 8002150:	430a      	orrs	r2, r1
 8002152:	619a      	str	r2, [r3, #24]
 8002154:	4b4e      	ldr	r3, [pc, #312]	@ (8002290 <HAL_GPIO_Init+0x2bc>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2201      	movs	r2, #1
 800215a:	4013      	ands	r3, r2
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002160:	4a4c      	ldr	r2, [pc, #304]	@ (8002294 <HAL_GPIO_Init+0x2c0>)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	089b      	lsrs	r3, r3, #2
 8002166:	3302      	adds	r3, #2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	589b      	ldr	r3, [r3, r2]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2203      	movs	r2, #3
 8002172:	4013      	ands	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	220f      	movs	r2, #15
 8002178:	409a      	lsls	r2, r3
 800217a:	0013      	movs	r3, r2
 800217c:	43da      	mvns	r2, r3
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	2390      	movs	r3, #144	@ 0x90
 8002188:	05db      	lsls	r3, r3, #23
 800218a:	429a      	cmp	r2, r3
 800218c:	d00d      	beq.n	80021aa <HAL_GPIO_Init+0x1d6>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a41      	ldr	r2, [pc, #260]	@ (8002298 <HAL_GPIO_Init+0x2c4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d007      	beq.n	80021a6 <HAL_GPIO_Init+0x1d2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a40      	ldr	r2, [pc, #256]	@ (800229c <HAL_GPIO_Init+0x2c8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d101      	bne.n	80021a2 <HAL_GPIO_Init+0x1ce>
 800219e:	2302      	movs	r3, #2
 80021a0:	e004      	b.n	80021ac <HAL_GPIO_Init+0x1d8>
 80021a2:	2305      	movs	r3, #5
 80021a4:	e002      	b.n	80021ac <HAL_GPIO_Init+0x1d8>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <HAL_GPIO_Init+0x1d8>
 80021aa:	2300      	movs	r3, #0
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	2103      	movs	r1, #3
 80021b0:	400a      	ands	r2, r1
 80021b2:	0092      	lsls	r2, r2, #2
 80021b4:	4093      	lsls	r3, r2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021bc:	4935      	ldr	r1, [pc, #212]	@ (8002294 <HAL_GPIO_Init+0x2c0>)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	3302      	adds	r3, #2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ca:	4b35      	ldr	r3, [pc, #212]	@ (80022a0 <HAL_GPIO_Init+0x2cc>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	43da      	mvns	r2, r3
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	2380      	movs	r3, #128	@ 0x80
 80021e0:	035b      	lsls	r3, r3, #13
 80021e2:	4013      	ands	r3, r2
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021ee:	4b2c      	ldr	r3, [pc, #176]	@ (80022a0 <HAL_GPIO_Init+0x2cc>)
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80021f4:	4b2a      	ldr	r3, [pc, #168]	@ (80022a0 <HAL_GPIO_Init+0x2cc>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	43da      	mvns	r2, r3
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	2380      	movs	r3, #128	@ 0x80
 800220a:	039b      	lsls	r3, r3, #14
 800220c:	4013      	ands	r3, r2
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002218:	4b21      	ldr	r3, [pc, #132]	@ (80022a0 <HAL_GPIO_Init+0x2cc>)
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800221e:	4b20      	ldr	r3, [pc, #128]	@ (80022a0 <HAL_GPIO_Init+0x2cc>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	43da      	mvns	r2, r3
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4013      	ands	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	2380      	movs	r3, #128	@ 0x80
 8002234:	029b      	lsls	r3, r3, #10
 8002236:	4013      	ands	r3, r2
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002242:	4b17      	ldr	r3, [pc, #92]	@ (80022a0 <HAL_GPIO_Init+0x2cc>)
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002248:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <HAL_GPIO_Init+0x2cc>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	43da      	mvns	r2, r3
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	2380      	movs	r3, #128	@ 0x80
 800225e:	025b      	lsls	r3, r3, #9
 8002260:	4013      	ands	r3, r2
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800226c:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <HAL_GPIO_Init+0x2cc>)
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	3301      	adds	r3, #1
 8002276:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	40da      	lsrs	r2, r3
 8002280:	1e13      	subs	r3, r2, #0
 8002282:	d000      	beq.n	8002286 <HAL_GPIO_Init+0x2b2>
 8002284:	e6ae      	b.n	8001fe4 <HAL_GPIO_Init+0x10>
  } 
}
 8002286:	46c0      	nop			@ (mov r8, r8)
 8002288:	46c0      	nop			@ (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	b006      	add	sp, #24
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	40010000 	.word	0x40010000
 8002298:	48000400 	.word	0x48000400
 800229c:	48000800 	.word	0x48000800
 80022a0:	40010400 	.word	0x40010400

080022a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	0008      	movs	r0, r1
 80022ae:	0011      	movs	r1, r2
 80022b0:	1cbb      	adds	r3, r7, #2
 80022b2:	1c02      	adds	r2, r0, #0
 80022b4:	801a      	strh	r2, [r3, #0]
 80022b6:	1c7b      	adds	r3, r7, #1
 80022b8:	1c0a      	adds	r2, r1, #0
 80022ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022bc:	1c7b      	adds	r3, r7, #1
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d004      	beq.n	80022ce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022c4:	1cbb      	adds	r3, r7, #2
 80022c6:	881a      	ldrh	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022cc:	e003      	b.n	80022d6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022ce:	1cbb      	adds	r3, r7, #2
 80022d0:	881a      	ldrh	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022d6:	46c0      	nop			@ (mov r8, r8)
 80022d8:	46bd      	mov	sp, r7
 80022da:	b002      	add	sp, #8
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	0002      	movs	r2, r0
 80022e8:	1dbb      	adds	r3, r7, #6
 80022ea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022ec:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	1dba      	adds	r2, r7, #6
 80022f2:	8812      	ldrh	r2, [r2, #0]
 80022f4:	4013      	ands	r3, r2
 80022f6:	d008      	beq.n	800230a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022f8:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80022fa:	1dba      	adds	r2, r7, #6
 80022fc:	8812      	ldrh	r2, [r2, #0]
 80022fe:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002300:	1dbb      	adds	r3, r7, #6
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	0018      	movs	r0, r3
 8002306:	f000 f807 	bl	8002318 <HAL_GPIO_EXTI_Callback>
  }
}
 800230a:	46c0      	nop			@ (mov r8, r8)
 800230c:	46bd      	mov	sp, r7
 800230e:	b002      	add	sp, #8
 8002310:	bd80      	pop	{r7, pc}
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	40010400 	.word	0x40010400

08002318 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	0002      	movs	r2, r0
 8002320:	1dbb      	adds	r3, r7, #6
 8002322:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8002324:	46c0      	nop			@ (mov r8, r8)
 8002326:	46bd      	mov	sp, r7
 8002328:	b002      	add	sp, #8
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d102      	bne.n	8002340 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	f000 fb76 	bl	8002a2c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2201      	movs	r2, #1
 8002346:	4013      	ands	r3, r2
 8002348:	d100      	bne.n	800234c <HAL_RCC_OscConfig+0x20>
 800234a:	e08e      	b.n	800246a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800234c:	4bc5      	ldr	r3, [pc, #788]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	220c      	movs	r2, #12
 8002352:	4013      	ands	r3, r2
 8002354:	2b04      	cmp	r3, #4
 8002356:	d00e      	beq.n	8002376 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002358:	4bc2      	ldr	r3, [pc, #776]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	220c      	movs	r2, #12
 800235e:	4013      	ands	r3, r2
 8002360:	2b08      	cmp	r3, #8
 8002362:	d117      	bne.n	8002394 <HAL_RCC_OscConfig+0x68>
 8002364:	4bbf      	ldr	r3, [pc, #764]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	23c0      	movs	r3, #192	@ 0xc0
 800236a:	025b      	lsls	r3, r3, #9
 800236c:	401a      	ands	r2, r3
 800236e:	2380      	movs	r3, #128	@ 0x80
 8002370:	025b      	lsls	r3, r3, #9
 8002372:	429a      	cmp	r2, r3
 8002374:	d10e      	bne.n	8002394 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002376:	4bbb      	ldr	r3, [pc, #748]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	2380      	movs	r3, #128	@ 0x80
 800237c:	029b      	lsls	r3, r3, #10
 800237e:	4013      	ands	r3, r2
 8002380:	d100      	bne.n	8002384 <HAL_RCC_OscConfig+0x58>
 8002382:	e071      	b.n	8002468 <HAL_RCC_OscConfig+0x13c>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d000      	beq.n	800238e <HAL_RCC_OscConfig+0x62>
 800238c:	e06c      	b.n	8002468 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	f000 fb4c 	bl	8002a2c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d107      	bne.n	80023ac <HAL_RCC_OscConfig+0x80>
 800239c:	4bb1      	ldr	r3, [pc, #708]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4bb0      	ldr	r3, [pc, #704]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80023a2:	2180      	movs	r1, #128	@ 0x80
 80023a4:	0249      	lsls	r1, r1, #9
 80023a6:	430a      	orrs	r2, r1
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	e02f      	b.n	800240c <HAL_RCC_OscConfig+0xe0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10c      	bne.n	80023ce <HAL_RCC_OscConfig+0xa2>
 80023b4:	4bab      	ldr	r3, [pc, #684]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4baa      	ldr	r3, [pc, #680]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80023ba:	49ab      	ldr	r1, [pc, #684]	@ (8002668 <HAL_RCC_OscConfig+0x33c>)
 80023bc:	400a      	ands	r2, r1
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	4ba8      	ldr	r3, [pc, #672]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4ba7      	ldr	r3, [pc, #668]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80023c6:	49a9      	ldr	r1, [pc, #676]	@ (800266c <HAL_RCC_OscConfig+0x340>)
 80023c8:	400a      	ands	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	e01e      	b.n	800240c <HAL_RCC_OscConfig+0xe0>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b05      	cmp	r3, #5
 80023d4:	d10e      	bne.n	80023f4 <HAL_RCC_OscConfig+0xc8>
 80023d6:	4ba3      	ldr	r3, [pc, #652]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4ba2      	ldr	r3, [pc, #648]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80023dc:	2180      	movs	r1, #128	@ 0x80
 80023de:	02c9      	lsls	r1, r1, #11
 80023e0:	430a      	orrs	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	4b9f      	ldr	r3, [pc, #636]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4b9e      	ldr	r3, [pc, #632]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80023ea:	2180      	movs	r1, #128	@ 0x80
 80023ec:	0249      	lsls	r1, r1, #9
 80023ee:	430a      	orrs	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	e00b      	b.n	800240c <HAL_RCC_OscConfig+0xe0>
 80023f4:	4b9b      	ldr	r3, [pc, #620]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b9a      	ldr	r3, [pc, #616]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80023fa:	499b      	ldr	r1, [pc, #620]	@ (8002668 <HAL_RCC_OscConfig+0x33c>)
 80023fc:	400a      	ands	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	4b98      	ldr	r3, [pc, #608]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b97      	ldr	r3, [pc, #604]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 8002406:	4999      	ldr	r1, [pc, #612]	@ (800266c <HAL_RCC_OscConfig+0x340>)
 8002408:	400a      	ands	r2, r1
 800240a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d014      	beq.n	800243e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7ff fcfc 	bl	8001e10 <HAL_GetTick>
 8002418:	0003      	movs	r3, r0
 800241a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800241e:	f7ff fcf7 	bl	8001e10 <HAL_GetTick>
 8002422:	0002      	movs	r2, r0
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b64      	cmp	r3, #100	@ 0x64
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e2fd      	b.n	8002a2c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002430:	4b8c      	ldr	r3, [pc, #560]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	2380      	movs	r3, #128	@ 0x80
 8002436:	029b      	lsls	r3, r3, #10
 8002438:	4013      	ands	r3, r2
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0xf2>
 800243c:	e015      	b.n	800246a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243e:	f7ff fce7 	bl	8001e10 <HAL_GetTick>
 8002442:	0003      	movs	r3, r0
 8002444:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002448:	f7ff fce2 	bl	8001e10 <HAL_GetTick>
 800244c:	0002      	movs	r2, r0
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	@ 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e2e8      	b.n	8002a2c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245a:	4b82      	ldr	r3, [pc, #520]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	2380      	movs	r3, #128	@ 0x80
 8002460:	029b      	lsls	r3, r3, #10
 8002462:	4013      	ands	r3, r2
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x11c>
 8002466:	e000      	b.n	800246a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002468:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2202      	movs	r2, #2
 8002470:	4013      	ands	r3, r2
 8002472:	d100      	bne.n	8002476 <HAL_RCC_OscConfig+0x14a>
 8002474:	e06c      	b.n	8002550 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002476:	4b7b      	ldr	r3, [pc, #492]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	220c      	movs	r2, #12
 800247c:	4013      	ands	r3, r2
 800247e:	d00e      	beq.n	800249e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002480:	4b78      	ldr	r3, [pc, #480]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	220c      	movs	r2, #12
 8002486:	4013      	ands	r3, r2
 8002488:	2b08      	cmp	r3, #8
 800248a:	d11f      	bne.n	80024cc <HAL_RCC_OscConfig+0x1a0>
 800248c:	4b75      	ldr	r3, [pc, #468]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	23c0      	movs	r3, #192	@ 0xc0
 8002492:	025b      	lsls	r3, r3, #9
 8002494:	401a      	ands	r2, r3
 8002496:	2380      	movs	r3, #128	@ 0x80
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	429a      	cmp	r2, r3
 800249c:	d116      	bne.n	80024cc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	4b71      	ldr	r3, [pc, #452]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2202      	movs	r2, #2
 80024a4:	4013      	ands	r3, r2
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_OscConfig+0x188>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e2bb      	b.n	8002a2c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b4:	4b6b      	ldr	r3, [pc, #428]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	22f8      	movs	r2, #248	@ 0xf8
 80024ba:	4393      	bics	r3, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	00da      	lsls	r2, r3, #3
 80024c4:	4b67      	ldr	r3, [pc, #412]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80024c6:	430a      	orrs	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ca:	e041      	b.n	8002550 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d024      	beq.n	800251e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d4:	4b63      	ldr	r3, [pc, #396]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b62      	ldr	r3, [pc, #392]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80024da:	2101      	movs	r1, #1
 80024dc:	430a      	orrs	r2, r1
 80024de:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7ff fc96 	bl	8001e10 <HAL_GetTick>
 80024e4:	0003      	movs	r3, r0
 80024e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ea:	f7ff fc91 	bl	8001e10 <HAL_GetTick>
 80024ee:	0002      	movs	r2, r0
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e297      	b.n	8002a2c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fc:	4b59      	ldr	r3, [pc, #356]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2202      	movs	r2, #2
 8002502:	4013      	ands	r3, r2
 8002504:	d0f1      	beq.n	80024ea <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002506:	4b57      	ldr	r3, [pc, #348]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	22f8      	movs	r2, #248	@ 0xf8
 800250c:	4393      	bics	r3, r2
 800250e:	0019      	movs	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	00da      	lsls	r2, r3, #3
 8002516:	4b53      	ldr	r3, [pc, #332]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 8002518:	430a      	orrs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e018      	b.n	8002550 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800251e:	4b51      	ldr	r3, [pc, #324]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4b50      	ldr	r3, [pc, #320]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 8002524:	2101      	movs	r1, #1
 8002526:	438a      	bics	r2, r1
 8002528:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252a:	f7ff fc71 	bl	8001e10 <HAL_GetTick>
 800252e:	0003      	movs	r3, r0
 8002530:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002534:	f7ff fc6c 	bl	8001e10 <HAL_GetTick>
 8002538:	0002      	movs	r2, r0
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e272      	b.n	8002a2c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002546:	4b47      	ldr	r3, [pc, #284]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2202      	movs	r2, #2
 800254c:	4013      	ands	r3, r2
 800254e:	d1f1      	bne.n	8002534 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2208      	movs	r2, #8
 8002556:	4013      	ands	r3, r2
 8002558:	d036      	beq.n	80025c8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d019      	beq.n	8002596 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002562:	4b40      	ldr	r3, [pc, #256]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 8002564:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002566:	4b3f      	ldr	r3, [pc, #252]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 8002568:	2101      	movs	r1, #1
 800256a:	430a      	orrs	r2, r1
 800256c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7ff fc4f 	bl	8001e10 <HAL_GetTick>
 8002572:	0003      	movs	r3, r0
 8002574:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002578:	f7ff fc4a 	bl	8001e10 <HAL_GetTick>
 800257c:	0002      	movs	r2, r0
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e250      	b.n	8002a2c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258a:	4b36      	ldr	r3, [pc, #216]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 800258c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258e:	2202      	movs	r2, #2
 8002590:	4013      	ands	r3, r2
 8002592:	d0f1      	beq.n	8002578 <HAL_RCC_OscConfig+0x24c>
 8002594:	e018      	b.n	80025c8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002596:	4b33      	ldr	r3, [pc, #204]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 8002598:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800259a:	4b32      	ldr	r3, [pc, #200]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 800259c:	2101      	movs	r1, #1
 800259e:	438a      	bics	r2, r1
 80025a0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a2:	f7ff fc35 	bl	8001e10 <HAL_GetTick>
 80025a6:	0003      	movs	r3, r0
 80025a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ac:	f7ff fc30 	bl	8001e10 <HAL_GetTick>
 80025b0:	0002      	movs	r2, r0
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e236      	b.n	8002a2c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025be:	4b29      	ldr	r3, [pc, #164]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80025c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c2:	2202      	movs	r2, #2
 80025c4:	4013      	ands	r3, r2
 80025c6:	d1f1      	bne.n	80025ac <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2204      	movs	r2, #4
 80025ce:	4013      	ands	r3, r2
 80025d0:	d100      	bne.n	80025d4 <HAL_RCC_OscConfig+0x2a8>
 80025d2:	e0b5      	b.n	8002740 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d4:	201f      	movs	r0, #31
 80025d6:	183b      	adds	r3, r7, r0
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025dc:	4b21      	ldr	r3, [pc, #132]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80025de:	69da      	ldr	r2, [r3, #28]
 80025e0:	2380      	movs	r3, #128	@ 0x80
 80025e2:	055b      	lsls	r3, r3, #21
 80025e4:	4013      	ands	r3, r2
 80025e6:	d110      	bne.n	800260a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80025ea:	69da      	ldr	r2, [r3, #28]
 80025ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80025ee:	2180      	movs	r1, #128	@ 0x80
 80025f0:	0549      	lsls	r1, r1, #21
 80025f2:	430a      	orrs	r2, r1
 80025f4:	61da      	str	r2, [r3, #28]
 80025f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 80025f8:	69da      	ldr	r2, [r3, #28]
 80025fa:	2380      	movs	r3, #128	@ 0x80
 80025fc:	055b      	lsls	r3, r3, #21
 80025fe:	4013      	ands	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002604:	183b      	adds	r3, r7, r0
 8002606:	2201      	movs	r2, #1
 8002608:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260a:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <HAL_RCC_OscConfig+0x344>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	2380      	movs	r3, #128	@ 0x80
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4013      	ands	r3, r2
 8002614:	d11a      	bne.n	800264c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002616:	4b16      	ldr	r3, [pc, #88]	@ (8002670 <HAL_RCC_OscConfig+0x344>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	4b15      	ldr	r3, [pc, #84]	@ (8002670 <HAL_RCC_OscConfig+0x344>)
 800261c:	2180      	movs	r1, #128	@ 0x80
 800261e:	0049      	lsls	r1, r1, #1
 8002620:	430a      	orrs	r2, r1
 8002622:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002624:	f7ff fbf4 	bl	8001e10 <HAL_GetTick>
 8002628:	0003      	movs	r3, r0
 800262a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262e:	f7ff fbef 	bl	8001e10 <HAL_GetTick>
 8002632:	0002      	movs	r2, r0
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b64      	cmp	r3, #100	@ 0x64
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e1f5      	b.n	8002a2c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <HAL_RCC_OscConfig+0x344>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	2380      	movs	r3, #128	@ 0x80
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4013      	ands	r3, r2
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d10f      	bne.n	8002674 <HAL_RCC_OscConfig+0x348>
 8002654:	4b03      	ldr	r3, [pc, #12]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 8002656:	6a1a      	ldr	r2, [r3, #32]
 8002658:	4b02      	ldr	r3, [pc, #8]	@ (8002664 <HAL_RCC_OscConfig+0x338>)
 800265a:	2101      	movs	r1, #1
 800265c:	430a      	orrs	r2, r1
 800265e:	621a      	str	r2, [r3, #32]
 8002660:	e036      	b.n	80026d0 <HAL_RCC_OscConfig+0x3a4>
 8002662:	46c0      	nop			@ (mov r8, r8)
 8002664:	40021000 	.word	0x40021000
 8002668:	fffeffff 	.word	0xfffeffff
 800266c:	fffbffff 	.word	0xfffbffff
 8002670:	40007000 	.word	0x40007000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10c      	bne.n	8002696 <HAL_RCC_OscConfig+0x36a>
 800267c:	4bca      	ldr	r3, [pc, #808]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 800267e:	6a1a      	ldr	r2, [r3, #32]
 8002680:	4bc9      	ldr	r3, [pc, #804]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 8002682:	2101      	movs	r1, #1
 8002684:	438a      	bics	r2, r1
 8002686:	621a      	str	r2, [r3, #32]
 8002688:	4bc7      	ldr	r3, [pc, #796]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 800268a:	6a1a      	ldr	r2, [r3, #32]
 800268c:	4bc6      	ldr	r3, [pc, #792]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 800268e:	2104      	movs	r1, #4
 8002690:	438a      	bics	r2, r1
 8002692:	621a      	str	r2, [r3, #32]
 8002694:	e01c      	b.n	80026d0 <HAL_RCC_OscConfig+0x3a4>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b05      	cmp	r3, #5
 800269c:	d10c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x38c>
 800269e:	4bc2      	ldr	r3, [pc, #776]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80026a0:	6a1a      	ldr	r2, [r3, #32]
 80026a2:	4bc1      	ldr	r3, [pc, #772]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80026a4:	2104      	movs	r1, #4
 80026a6:	430a      	orrs	r2, r1
 80026a8:	621a      	str	r2, [r3, #32]
 80026aa:	4bbf      	ldr	r3, [pc, #764]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80026ac:	6a1a      	ldr	r2, [r3, #32]
 80026ae:	4bbe      	ldr	r3, [pc, #760]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80026b0:	2101      	movs	r1, #1
 80026b2:	430a      	orrs	r2, r1
 80026b4:	621a      	str	r2, [r3, #32]
 80026b6:	e00b      	b.n	80026d0 <HAL_RCC_OscConfig+0x3a4>
 80026b8:	4bbb      	ldr	r3, [pc, #748]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80026ba:	6a1a      	ldr	r2, [r3, #32]
 80026bc:	4bba      	ldr	r3, [pc, #744]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80026be:	2101      	movs	r1, #1
 80026c0:	438a      	bics	r2, r1
 80026c2:	621a      	str	r2, [r3, #32]
 80026c4:	4bb8      	ldr	r3, [pc, #736]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80026c6:	6a1a      	ldr	r2, [r3, #32]
 80026c8:	4bb7      	ldr	r3, [pc, #732]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80026ca:	2104      	movs	r1, #4
 80026cc:	438a      	bics	r2, r1
 80026ce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d014      	beq.n	8002702 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d8:	f7ff fb9a 	bl	8001e10 <HAL_GetTick>
 80026dc:	0003      	movs	r3, r0
 80026de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e0:	e009      	b.n	80026f6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e2:	f7ff fb95 	bl	8001e10 <HAL_GetTick>
 80026e6:	0002      	movs	r2, r0
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	4aaf      	ldr	r2, [pc, #700]	@ (80029ac <HAL_RCC_OscConfig+0x680>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e19a      	b.n	8002a2c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f6:	4bac      	ldr	r3, [pc, #688]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	2202      	movs	r2, #2
 80026fc:	4013      	ands	r3, r2
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x3b6>
 8002700:	e013      	b.n	800272a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002702:	f7ff fb85 	bl	8001e10 <HAL_GetTick>
 8002706:	0003      	movs	r3, r0
 8002708:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800270a:	e009      	b.n	8002720 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800270c:	f7ff fb80 	bl	8001e10 <HAL_GetTick>
 8002710:	0002      	movs	r2, r0
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	4aa5      	ldr	r2, [pc, #660]	@ (80029ac <HAL_RCC_OscConfig+0x680>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e185      	b.n	8002a2c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002720:	4ba1      	ldr	r3, [pc, #644]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	2202      	movs	r2, #2
 8002726:	4013      	ands	r3, r2
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800272a:	231f      	movs	r3, #31
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d105      	bne.n	8002740 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002734:	4b9c      	ldr	r3, [pc, #624]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 8002736:	69da      	ldr	r2, [r3, #28]
 8002738:	4b9b      	ldr	r3, [pc, #620]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 800273a:	499d      	ldr	r1, [pc, #628]	@ (80029b0 <HAL_RCC_OscConfig+0x684>)
 800273c:	400a      	ands	r2, r1
 800273e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2210      	movs	r2, #16
 8002746:	4013      	ands	r3, r2
 8002748:	d063      	beq.n	8002812 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d12a      	bne.n	80027a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002752:	4b95      	ldr	r3, [pc, #596]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 8002754:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002756:	4b94      	ldr	r3, [pc, #592]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 8002758:	2104      	movs	r1, #4
 800275a:	430a      	orrs	r2, r1
 800275c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800275e:	4b92      	ldr	r3, [pc, #584]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 8002760:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002762:	4b91      	ldr	r3, [pc, #580]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 8002764:	2101      	movs	r1, #1
 8002766:	430a      	orrs	r2, r1
 8002768:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276a:	f7ff fb51 	bl	8001e10 <HAL_GetTick>
 800276e:	0003      	movs	r3, r0
 8002770:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002774:	f7ff fb4c 	bl	8001e10 <HAL_GetTick>
 8002778:	0002      	movs	r2, r0
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e152      	b.n	8002a2c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002786:	4b88      	ldr	r3, [pc, #544]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 8002788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800278a:	2202      	movs	r2, #2
 800278c:	4013      	ands	r3, r2
 800278e:	d0f1      	beq.n	8002774 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002790:	4b85      	ldr	r3, [pc, #532]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 8002792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002794:	22f8      	movs	r2, #248	@ 0xf8
 8002796:	4393      	bics	r3, r2
 8002798:	0019      	movs	r1, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	00da      	lsls	r2, r3, #3
 80027a0:	4b81      	ldr	r3, [pc, #516]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80027a2:	430a      	orrs	r2, r1
 80027a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80027a6:	e034      	b.n	8002812 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	3305      	adds	r3, #5
 80027ae:	d111      	bne.n	80027d4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80027b0:	4b7d      	ldr	r3, [pc, #500]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80027b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027b4:	4b7c      	ldr	r3, [pc, #496]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80027b6:	2104      	movs	r1, #4
 80027b8:	438a      	bics	r2, r1
 80027ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80027bc:	4b7a      	ldr	r3, [pc, #488]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80027be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c0:	22f8      	movs	r2, #248	@ 0xf8
 80027c2:	4393      	bics	r3, r2
 80027c4:	0019      	movs	r1, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	00da      	lsls	r2, r3, #3
 80027cc:	4b76      	ldr	r3, [pc, #472]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80027ce:	430a      	orrs	r2, r1
 80027d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80027d2:	e01e      	b.n	8002812 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80027d4:	4b74      	ldr	r3, [pc, #464]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80027d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027d8:	4b73      	ldr	r3, [pc, #460]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80027da:	2104      	movs	r1, #4
 80027dc:	430a      	orrs	r2, r1
 80027de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80027e0:	4b71      	ldr	r3, [pc, #452]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80027e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027e4:	4b70      	ldr	r3, [pc, #448]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80027e6:	2101      	movs	r1, #1
 80027e8:	438a      	bics	r2, r1
 80027ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ec:	f7ff fb10 	bl	8001e10 <HAL_GetTick>
 80027f0:	0003      	movs	r3, r0
 80027f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80027f6:	f7ff fb0b 	bl	8001e10 <HAL_GetTick>
 80027fa:	0002      	movs	r2, r0
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e111      	b.n	8002a2c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002808:	4b67      	ldr	r3, [pc, #412]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 800280a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800280c:	2202      	movs	r2, #2
 800280e:	4013      	ands	r3, r2
 8002810:	d1f1      	bne.n	80027f6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2220      	movs	r2, #32
 8002818:	4013      	ands	r3, r2
 800281a:	d05c      	beq.n	80028d6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800281c:	4b62      	ldr	r3, [pc, #392]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	220c      	movs	r2, #12
 8002822:	4013      	ands	r3, r2
 8002824:	2b0c      	cmp	r3, #12
 8002826:	d00e      	beq.n	8002846 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002828:	4b5f      	ldr	r3, [pc, #380]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	220c      	movs	r2, #12
 800282e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002830:	2b08      	cmp	r3, #8
 8002832:	d114      	bne.n	800285e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002834:	4b5c      	ldr	r3, [pc, #368]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	23c0      	movs	r3, #192	@ 0xc0
 800283a:	025b      	lsls	r3, r3, #9
 800283c:	401a      	ands	r2, r3
 800283e:	23c0      	movs	r3, #192	@ 0xc0
 8002840:	025b      	lsls	r3, r3, #9
 8002842:	429a      	cmp	r2, r3
 8002844:	d10b      	bne.n	800285e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002846:	4b58      	ldr	r3, [pc, #352]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 8002848:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800284a:	2380      	movs	r3, #128	@ 0x80
 800284c:	029b      	lsls	r3, r3, #10
 800284e:	4013      	ands	r3, r2
 8002850:	d040      	beq.n	80028d4 <HAL_RCC_OscConfig+0x5a8>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d03c      	beq.n	80028d4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e0e6      	b.n	8002a2c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d01b      	beq.n	800289e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002866:	4b50      	ldr	r3, [pc, #320]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 8002868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800286a:	4b4f      	ldr	r3, [pc, #316]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 800286c:	2180      	movs	r1, #128	@ 0x80
 800286e:	0249      	lsls	r1, r1, #9
 8002870:	430a      	orrs	r2, r1
 8002872:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7ff facc 	bl	8001e10 <HAL_GetTick>
 8002878:	0003      	movs	r3, r0
 800287a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800287e:	f7ff fac7 	bl	8001e10 <HAL_GetTick>
 8002882:	0002      	movs	r2, r0
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e0cd      	b.n	8002a2c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002890:	4b45      	ldr	r3, [pc, #276]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 8002892:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002894:	2380      	movs	r3, #128	@ 0x80
 8002896:	029b      	lsls	r3, r3, #10
 8002898:	4013      	ands	r3, r2
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x552>
 800289c:	e01b      	b.n	80028d6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800289e:	4b42      	ldr	r3, [pc, #264]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80028a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028a2:	4b41      	ldr	r3, [pc, #260]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80028a4:	4943      	ldr	r1, [pc, #268]	@ (80029b4 <HAL_RCC_OscConfig+0x688>)
 80028a6:	400a      	ands	r2, r1
 80028a8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7ff fab1 	bl	8001e10 <HAL_GetTick>
 80028ae:	0003      	movs	r3, r0
 80028b0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028b4:	f7ff faac 	bl	8001e10 <HAL_GetTick>
 80028b8:	0002      	movs	r2, r0
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e0b2      	b.n	8002a2c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80028c6:	4b38      	ldr	r3, [pc, #224]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80028c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028ca:	2380      	movs	r3, #128	@ 0x80
 80028cc:	029b      	lsls	r3, r3, #10
 80028ce:	4013      	ands	r3, r2
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x588>
 80028d2:	e000      	b.n	80028d6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80028d4:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d100      	bne.n	80028e0 <HAL_RCC_OscConfig+0x5b4>
 80028de:	e0a4      	b.n	8002a2a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028e0:	4b31      	ldr	r3, [pc, #196]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	220c      	movs	r2, #12
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d100      	bne.n	80028ee <HAL_RCC_OscConfig+0x5c2>
 80028ec:	e078      	b.n	80029e0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d14c      	bne.n	8002990 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f6:	4b2c      	ldr	r3, [pc, #176]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4b2b      	ldr	r3, [pc, #172]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 80028fc:	492e      	ldr	r1, [pc, #184]	@ (80029b8 <HAL_RCC_OscConfig+0x68c>)
 80028fe:	400a      	ands	r2, r1
 8002900:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002902:	f7ff fa85 	bl	8001e10 <HAL_GetTick>
 8002906:	0003      	movs	r3, r0
 8002908:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290c:	f7ff fa80 	bl	8001e10 <HAL_GetTick>
 8002910:	0002      	movs	r2, r0
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e086      	b.n	8002a2c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800291e:	4b22      	ldr	r3, [pc, #136]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	2380      	movs	r3, #128	@ 0x80
 8002924:	049b      	lsls	r3, r3, #18
 8002926:	4013      	ands	r3, r2
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800292a:	4b1f      	ldr	r3, [pc, #124]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 800292c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292e:	220f      	movs	r2, #15
 8002930:	4393      	bics	r3, r2
 8002932:	0019      	movs	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002938:	4b1b      	ldr	r3, [pc, #108]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 800293a:	430a      	orrs	r2, r1
 800293c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800293e:	4b1a      	ldr	r3, [pc, #104]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4a1e      	ldr	r2, [pc, #120]	@ (80029bc <HAL_RCC_OscConfig+0x690>)
 8002944:	4013      	ands	r3, r2
 8002946:	0019      	movs	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002950:	431a      	orrs	r2, r3
 8002952:	4b15      	ldr	r3, [pc, #84]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 8002954:	430a      	orrs	r2, r1
 8002956:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002958:	4b13      	ldr	r3, [pc, #76]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b12      	ldr	r3, [pc, #72]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 800295e:	2180      	movs	r1, #128	@ 0x80
 8002960:	0449      	lsls	r1, r1, #17
 8002962:	430a      	orrs	r2, r1
 8002964:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002966:	f7ff fa53 	bl	8001e10 <HAL_GetTick>
 800296a:	0003      	movs	r3, r0
 800296c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002970:	f7ff fa4e 	bl	8001e10 <HAL_GetTick>
 8002974:	0002      	movs	r2, r0
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e054      	b.n	8002a2c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002982:	4b09      	ldr	r3, [pc, #36]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	2380      	movs	r3, #128	@ 0x80
 8002988:	049b      	lsls	r3, r3, #18
 800298a:	4013      	ands	r3, r2
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x644>
 800298e:	e04c      	b.n	8002a2a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002990:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b04      	ldr	r3, [pc, #16]	@ (80029a8 <HAL_RCC_OscConfig+0x67c>)
 8002996:	4908      	ldr	r1, [pc, #32]	@ (80029b8 <HAL_RCC_OscConfig+0x68c>)
 8002998:	400a      	ands	r2, r1
 800299a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7ff fa38 	bl	8001e10 <HAL_GetTick>
 80029a0:	0003      	movs	r3, r0
 80029a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a4:	e015      	b.n	80029d2 <HAL_RCC_OscConfig+0x6a6>
 80029a6:	46c0      	nop			@ (mov r8, r8)
 80029a8:	40021000 	.word	0x40021000
 80029ac:	00001388 	.word	0x00001388
 80029b0:	efffffff 	.word	0xefffffff
 80029b4:	fffeffff 	.word	0xfffeffff
 80029b8:	feffffff 	.word	0xfeffffff
 80029bc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c0:	f7ff fa26 	bl	8001e10 <HAL_GetTick>
 80029c4:	0002      	movs	r2, r0
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e02c      	b.n	8002a2c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d2:	4b18      	ldr	r3, [pc, #96]	@ (8002a34 <HAL_RCC_OscConfig+0x708>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	2380      	movs	r3, #128	@ 0x80
 80029d8:	049b      	lsls	r3, r3, #18
 80029da:	4013      	ands	r3, r2
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x694>
 80029de:	e024      	b.n	8002a2a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e01f      	b.n	8002a2c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80029ec:	4b11      	ldr	r3, [pc, #68]	@ (8002a34 <HAL_RCC_OscConfig+0x708>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80029f2:	4b10      	ldr	r3, [pc, #64]	@ (8002a34 <HAL_RCC_OscConfig+0x708>)
 80029f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	23c0      	movs	r3, #192	@ 0xc0
 80029fc:	025b      	lsls	r3, r3, #9
 80029fe:	401a      	ands	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d10e      	bne.n	8002a26 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	220f      	movs	r2, #15
 8002a0c:	401a      	ands	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d107      	bne.n	8002a26 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	23f0      	movs	r3, #240	@ 0xf0
 8002a1a:	039b      	lsls	r3, r3, #14
 8002a1c:	401a      	ands	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d001      	beq.n	8002a2a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b008      	add	sp, #32
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40021000 	.word	0x40021000

08002a38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0bf      	b.n	8002bcc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a4c:	4b61      	ldr	r3, [pc, #388]	@ (8002bd4 <HAL_RCC_ClockConfig+0x19c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2201      	movs	r2, #1
 8002a52:	4013      	ands	r3, r2
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d911      	bls.n	8002a7e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5a:	4b5e      	ldr	r3, [pc, #376]	@ (8002bd4 <HAL_RCC_ClockConfig+0x19c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	4393      	bics	r3, r2
 8002a62:	0019      	movs	r1, r3
 8002a64:	4b5b      	ldr	r3, [pc, #364]	@ (8002bd4 <HAL_RCC_ClockConfig+0x19c>)
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6c:	4b59      	ldr	r3, [pc, #356]	@ (8002bd4 <HAL_RCC_ClockConfig+0x19c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2201      	movs	r2, #1
 8002a72:	4013      	ands	r3, r2
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d001      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e0a6      	b.n	8002bcc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2202      	movs	r2, #2
 8002a84:	4013      	ands	r3, r2
 8002a86:	d015      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d006      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a92:	4b51      	ldr	r3, [pc, #324]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	4b50      	ldr	r3, [pc, #320]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a98:	21e0      	movs	r1, #224	@ 0xe0
 8002a9a:	00c9      	lsls	r1, r1, #3
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa0:	4b4d      	ldr	r3, [pc, #308]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	22f0      	movs	r2, #240	@ 0xf0
 8002aa6:	4393      	bics	r3, r2
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	4b4a      	ldr	r3, [pc, #296]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	4013      	ands	r3, r2
 8002abc:	d04c      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d107      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac6:	4b44      	ldr	r3, [pc, #272]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	2380      	movs	r3, #128	@ 0x80
 8002acc:	029b      	lsls	r3, r3, #10
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d120      	bne.n	8002b14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e07a      	b.n	8002bcc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d107      	bne.n	8002aee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ade:	4b3e      	ldr	r3, [pc, #248]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	2380      	movs	r3, #128	@ 0x80
 8002ae4:	049b      	lsls	r3, r3, #18
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d114      	bne.n	8002b14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e06e      	b.n	8002bcc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002af6:	4b38      	ldr	r3, [pc, #224]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8002af8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002afa:	2380      	movs	r3, #128	@ 0x80
 8002afc:	029b      	lsls	r3, r3, #10
 8002afe:	4013      	ands	r3, r2
 8002b00:	d108      	bne.n	8002b14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e062      	b.n	8002bcc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b06:	4b34      	ldr	r3, [pc, #208]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d101      	bne.n	8002b14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e05b      	b.n	8002bcc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b14:	4b30      	ldr	r3, [pc, #192]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2203      	movs	r2, #3
 8002b1a:	4393      	bics	r3, r2
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	4b2d      	ldr	r3, [pc, #180]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b24:	430a      	orrs	r2, r1
 8002b26:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b28:	f7ff f972 	bl	8001e10 <HAL_GetTick>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b30:	e009      	b.n	8002b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b32:	f7ff f96d 	bl	8001e10 <HAL_GetTick>
 8002b36:	0002      	movs	r2, r0
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	4a27      	ldr	r2, [pc, #156]	@ (8002bdc <HAL_RCC_ClockConfig+0x1a4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e042      	b.n	8002bcc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b46:	4b24      	ldr	r3, [pc, #144]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	220c      	movs	r2, #12
 8002b4c:	401a      	ands	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d1ec      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b58:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd4 <HAL_RCC_ClockConfig+0x19c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	4013      	ands	r3, r2
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d211      	bcs.n	8002b8a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b66:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd4 <HAL_RCC_ClockConfig+0x19c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	4393      	bics	r3, r2
 8002b6e:	0019      	movs	r1, r3
 8002b70:	4b18      	ldr	r3, [pc, #96]	@ (8002bd4 <HAL_RCC_ClockConfig+0x19c>)
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b78:	4b16      	ldr	r3, [pc, #88]	@ (8002bd4 <HAL_RCC_ClockConfig+0x19c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	4013      	ands	r3, r2
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d001      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e020      	b.n	8002bcc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2204      	movs	r2, #4
 8002b90:	4013      	ands	r3, r2
 8002b92:	d009      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b94:	4b10      	ldr	r3, [pc, #64]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	4a11      	ldr	r2, [pc, #68]	@ (8002be0 <HAL_RCC_ClockConfig+0x1a8>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ba8:	f000 f820 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8002bac:	0001      	movs	r1, r0
 8002bae:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1a0>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	091b      	lsrs	r3, r3, #4
 8002bb4:	220f      	movs	r2, #15
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8002be4 <HAL_RCC_ClockConfig+0x1ac>)
 8002bba:	5cd3      	ldrb	r3, [r2, r3]
 8002bbc:	000a      	movs	r2, r1
 8002bbe:	40da      	lsrs	r2, r3
 8002bc0:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <HAL_RCC_ClockConfig+0x1b0>)
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f7ff f8dd 	bl	8001d84 <HAL_InitTick>
  
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	0018      	movs	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b004      	add	sp, #16
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40022000 	.word	0x40022000
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	00001388 	.word	0x00001388
 8002be0:	fffff8ff 	.word	0xfffff8ff
 8002be4:	08004084 	.word	0x08004084
 8002be8:	20000000 	.word	0x20000000

08002bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c06:	4b2d      	ldr	r3, [pc, #180]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	220c      	movs	r2, #12
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d046      	beq.n	8002ca4 <HAL_RCC_GetSysClockFreq+0xb8>
 8002c16:	d848      	bhi.n	8002caa <HAL_RCC_GetSysClockFreq+0xbe>
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d002      	beq.n	8002c22 <HAL_RCC_GetSysClockFreq+0x36>
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d003      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0x3c>
 8002c20:	e043      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c22:	4b27      	ldr	r3, [pc, #156]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c24:	613b      	str	r3, [r7, #16]
      break;
 8002c26:	e043      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	0c9b      	lsrs	r3, r3, #18
 8002c2c:	220f      	movs	r2, #15
 8002c2e:	4013      	ands	r3, r2
 8002c30:	4a24      	ldr	r2, [pc, #144]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002c32:	5cd3      	ldrb	r3, [r2, r3]
 8002c34:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c36:	4b21      	ldr	r3, [pc, #132]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3a:	220f      	movs	r2, #15
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	4a22      	ldr	r2, [pc, #136]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002c40:	5cd3      	ldrb	r3, [r2, r3]
 8002c42:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	23c0      	movs	r3, #192	@ 0xc0
 8002c48:	025b      	lsls	r3, r3, #9
 8002c4a:	401a      	ands	r2, r3
 8002c4c:	2380      	movs	r3, #128	@ 0x80
 8002c4e:	025b      	lsls	r3, r3, #9
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d109      	bne.n	8002c68 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	481a      	ldr	r0, [pc, #104]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c58:	f7fd fa56 	bl	8000108 <__udivsi3>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	001a      	movs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4353      	muls	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	e01a      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	23c0      	movs	r3, #192	@ 0xc0
 8002c6c:	025b      	lsls	r3, r3, #9
 8002c6e:	401a      	ands	r2, r3
 8002c70:	23c0      	movs	r3, #192	@ 0xc0
 8002c72:	025b      	lsls	r3, r3, #9
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d109      	bne.n	8002c8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	4814      	ldr	r0, [pc, #80]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0xe0>)
 8002c7c:	f7fd fa44 	bl	8000108 <__udivsi3>
 8002c80:	0003      	movs	r3, r0
 8002c82:	001a      	movs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4353      	muls	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	480c      	ldr	r0, [pc, #48]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c90:	f7fd fa3a 	bl	8000108 <__udivsi3>
 8002c94:	0003      	movs	r3, r0
 8002c96:	001a      	movs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4353      	muls	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	613b      	str	r3, [r7, #16]
      break;
 8002ca2:	e005      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002ca4:	4b09      	ldr	r3, [pc, #36]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0xe0>)
 8002ca6:	613b      	str	r3, [r7, #16]
      break;
 8002ca8:	e002      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002caa:	4b05      	ldr	r3, [pc, #20]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002cac:	613b      	str	r3, [r7, #16]
      break;
 8002cae:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002cb0:	693b      	ldr	r3, [r7, #16]
}
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b006      	add	sp, #24
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	46c0      	nop			@ (mov r8, r8)
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	007a1200 	.word	0x007a1200
 8002cc4:	0800409c 	.word	0x0800409c
 8002cc8:	080040ac 	.word	0x080040ac
 8002ccc:	02dc6c00 	.word	0x02dc6c00

08002cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cd4:	4b02      	ldr	r3, [pc, #8]	@ (8002ce0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
}
 8002cd8:	0018      	movs	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	46c0      	nop			@ (mov r8, r8)
 8002ce0:	20000000 	.word	0x20000000

08002ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002ce8:	f7ff fff2 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8002cec:	0001      	movs	r1, r0
 8002cee:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	0a1b      	lsrs	r3, r3, #8
 8002cf4:	2207      	movs	r2, #7
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	4a04      	ldr	r2, [pc, #16]	@ (8002d0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cfa:	5cd3      	ldrb	r3, [r2, r3]
 8002cfc:	40d9      	lsrs	r1, r3
 8002cfe:	000b      	movs	r3, r1
}    
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	46c0      	nop			@ (mov r8, r8)
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	08004094 	.word	0x08004094

08002d10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	2380      	movs	r3, #128	@ 0x80
 8002d26:	025b      	lsls	r3, r3, #9
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d100      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002d2c:	e08e      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002d2e:	2017      	movs	r0, #23
 8002d30:	183b      	adds	r3, r7, r0
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d36:	4b67      	ldr	r3, [pc, #412]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d38:	69da      	ldr	r2, [r3, #28]
 8002d3a:	2380      	movs	r3, #128	@ 0x80
 8002d3c:	055b      	lsls	r3, r3, #21
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d110      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d42:	4b64      	ldr	r3, [pc, #400]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d44:	69da      	ldr	r2, [r3, #28]
 8002d46:	4b63      	ldr	r3, [pc, #396]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d48:	2180      	movs	r1, #128	@ 0x80
 8002d4a:	0549      	lsls	r1, r1, #21
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	61da      	str	r2, [r3, #28]
 8002d50:	4b60      	ldr	r3, [pc, #384]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d52:	69da      	ldr	r2, [r3, #28]
 8002d54:	2380      	movs	r3, #128	@ 0x80
 8002d56:	055b      	lsls	r3, r3, #21
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d5e:	183b      	adds	r3, r7, r0
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d64:	4b5c      	ldr	r3, [pc, #368]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	2380      	movs	r3, #128	@ 0x80
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d11a      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d70:	4b59      	ldr	r3, [pc, #356]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4b58      	ldr	r3, [pc, #352]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d76:	2180      	movs	r1, #128	@ 0x80
 8002d78:	0049      	lsls	r1, r1, #1
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d7e:	f7ff f847 	bl	8001e10 <HAL_GetTick>
 8002d82:	0003      	movs	r3, r0
 8002d84:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d86:	e008      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d88:	f7ff f842 	bl	8001e10 <HAL_GetTick>
 8002d8c:	0002      	movs	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	@ 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e097      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	2380      	movs	r3, #128	@ 0x80
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4013      	ands	r3, r2
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002da6:	4b4b      	ldr	r3, [pc, #300]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002da8:	6a1a      	ldr	r2, [r3, #32]
 8002daa:	23c0      	movs	r3, #192	@ 0xc0
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4013      	ands	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d034      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	23c0      	movs	r3, #192	@ 0xc0
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d02c      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dc8:	4b42      	ldr	r3, [pc, #264]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	4a43      	ldr	r2, [pc, #268]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dd2:	4b40      	ldr	r3, [pc, #256]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dd4:	6a1a      	ldr	r2, [r3, #32]
 8002dd6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dd8:	2180      	movs	r1, #128	@ 0x80
 8002dda:	0249      	lsls	r1, r1, #9
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002de0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002de2:	6a1a      	ldr	r2, [r3, #32]
 8002de4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002de6:	493e      	ldr	r1, [pc, #248]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de8:	400a      	ands	r2, r1
 8002dea:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002dec:	4b39      	ldr	r3, [pc, #228]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	4013      	ands	r3, r2
 8002df8:	d013      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfa:	f7ff f809 	bl	8001e10 <HAL_GetTick>
 8002dfe:	0003      	movs	r3, r0
 8002e00:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e02:	e009      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e04:	f7ff f804 	bl	8001e10 <HAL_GetTick>
 8002e08:	0002      	movs	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	4a35      	ldr	r2, [pc, #212]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e058      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e18:	4b2e      	ldr	r3, [pc, #184]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e22:	4b2c      	ldr	r3, [pc, #176]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	4a2d      	ldr	r2, [pc, #180]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	4b28      	ldr	r3, [pc, #160]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e32:	430a      	orrs	r2, r1
 8002e34:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e36:	2317      	movs	r3, #23
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d105      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e40:	4b24      	ldr	r3, [pc, #144]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e42:	69da      	ldr	r2, [r3, #28]
 8002e44:	4b23      	ldr	r3, [pc, #140]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e46:	4928      	ldr	r1, [pc, #160]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e48:	400a      	ands	r2, r1
 8002e4a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2201      	movs	r2, #1
 8002e52:	4013      	ands	r3, r2
 8002e54:	d009      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e56:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	4393      	bics	r3, r2
 8002e5e:	0019      	movs	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e66:	430a      	orrs	r2, r1
 8002e68:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	4013      	ands	r3, r2
 8002e72:	d009      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e74:	4b17      	ldr	r3, [pc, #92]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e78:	2210      	movs	r2, #16
 8002e7a:	4393      	bics	r3, r2
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	4b14      	ldr	r3, [pc, #80]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e84:	430a      	orrs	r2, r1
 8002e86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	2380      	movs	r3, #128	@ 0x80
 8002e8e:	029b      	lsls	r3, r3, #10
 8002e90:	4013      	ands	r3, r2
 8002e92:	d009      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e94:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e98:	2280      	movs	r2, #128	@ 0x80
 8002e9a:	4393      	bics	r3, r2
 8002e9c:	0019      	movs	r1, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	2380      	movs	r3, #128	@ 0x80
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d009      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002eb4:	4b07      	ldr	r3, [pc, #28]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb8:	2240      	movs	r2, #64	@ 0x40
 8002eba:	4393      	bics	r3, r2
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	4b04      	ldr	r3, [pc, #16]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	0018      	movs	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b006      	add	sp, #24
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			@ (mov r8, r8)
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40007000 	.word	0x40007000
 8002edc:	fffffcff 	.word	0xfffffcff
 8002ee0:	fffeffff 	.word	0xfffeffff
 8002ee4:	00001388 	.word	0x00001388
 8002ee8:	efffffff 	.word	0xefffffff

08002eec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e044      	b.n	8002f88 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d107      	bne.n	8002f16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2278      	movs	r2, #120	@ 0x78
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	0018      	movs	r0, r3
 8002f12:	f7fe fa21 	bl	8001358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2224      	movs	r2, #36	@ 0x24
 8002f1a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2101      	movs	r1, #1
 8002f28:	438a      	bics	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	0018      	movs	r0, r3
 8002f38:	f000 fa6e 	bl	8003418 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f000 f92a 	bl	8003198 <UART_SetConfig>
 8002f44:	0003      	movs	r3, r0
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e01c      	b.n	8002f88 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	490d      	ldr	r1, [pc, #52]	@ (8002f90 <HAL_UART_Init+0xa4>)
 8002f5a:	400a      	ands	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	212a      	movs	r1, #42	@ 0x2a
 8002f6a:	438a      	bics	r2, r1
 8002f6c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2101      	movs	r1, #1
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f000 fafd 	bl	8003580 <UART_CheckIdleState>
 8002f86:	0003      	movs	r3, r0
}
 8002f88:	0018      	movs	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b002      	add	sp, #8
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	ffffb7ff 	.word	0xffffb7ff

08002f94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08a      	sub	sp, #40	@ 0x28
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	1dbb      	adds	r3, r7, #6
 8002fa2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	d000      	beq.n	8002fae <HAL_UART_Transmit+0x1a>
 8002fac:	e08c      	b.n	80030c8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_UART_Transmit+0x28>
 8002fb4:	1dbb      	adds	r3, r7, #6
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e084      	b.n	80030ca <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	2380      	movs	r3, #128	@ 0x80
 8002fc6:	015b      	lsls	r3, r3, #5
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d109      	bne.n	8002fe0 <HAL_UART_Transmit+0x4c>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d105      	bne.n	8002fe0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d001      	beq.n	8002fe0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e074      	b.n	80030ca <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2284      	movs	r2, #132	@ 0x84
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2221      	movs	r2, #33	@ 0x21
 8002fec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fee:	f7fe ff0f 	bl	8001e10 <HAL_GetTick>
 8002ff2:	0003      	movs	r3, r0
 8002ff4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1dba      	adds	r2, r7, #6
 8002ffa:	2150      	movs	r1, #80	@ 0x50
 8002ffc:	8812      	ldrh	r2, [r2, #0]
 8002ffe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1dba      	adds	r2, r7, #6
 8003004:	2152      	movs	r1, #82	@ 0x52
 8003006:	8812      	ldrh	r2, [r2, #0]
 8003008:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	2380      	movs	r3, #128	@ 0x80
 8003010:	015b      	lsls	r3, r3, #5
 8003012:	429a      	cmp	r2, r3
 8003014:	d108      	bne.n	8003028 <HAL_UART_Transmit+0x94>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d104      	bne.n	8003028 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	e003      	b.n	8003030 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800302c:	2300      	movs	r3, #0
 800302e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003030:	e02f      	b.n	8003092 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	0013      	movs	r3, r2
 800303c:	2200      	movs	r2, #0
 800303e:	2180      	movs	r1, #128	@ 0x80
 8003040:	f000 fb46 	bl	80036d0 <UART_WaitOnFlagUntilTimeout>
 8003044:	1e03      	subs	r3, r0, #0
 8003046:	d004      	beq.n	8003052 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e03b      	b.n	80030ca <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10b      	bne.n	8003070 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	881a      	ldrh	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	05d2      	lsls	r2, r2, #23
 8003062:	0dd2      	lsrs	r2, r2, #23
 8003064:	b292      	uxth	r2, r2
 8003066:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	3302      	adds	r3, #2
 800306c:	61bb      	str	r3, [r7, #24]
 800306e:	e007      	b.n	8003080 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	781a      	ldrb	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	3301      	adds	r3, #1
 800307e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2252      	movs	r2, #82	@ 0x52
 8003084:	5a9b      	ldrh	r3, [r3, r2]
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b299      	uxth	r1, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2252      	movs	r2, #82	@ 0x52
 8003090:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2252      	movs	r2, #82	@ 0x52
 8003096:	5a9b      	ldrh	r3, [r3, r2]
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1c9      	bne.n	8003032 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	0013      	movs	r3, r2
 80030a8:	2200      	movs	r2, #0
 80030aa:	2140      	movs	r1, #64	@ 0x40
 80030ac:	f000 fb10 	bl	80036d0 <UART_WaitOnFlagUntilTimeout>
 80030b0:	1e03      	subs	r3, r0, #0
 80030b2:	d004      	beq.n	80030be <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2220      	movs	r2, #32
 80030b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e005      	b.n	80030ca <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2220      	movs	r2, #32
 80030c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	e000      	b.n	80030ca <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80030c8:	2302      	movs	r3, #2
  }
}
 80030ca:	0018      	movs	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b008      	add	sp, #32
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b088      	sub	sp, #32
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	1dbb      	adds	r3, r7, #6
 80030de:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2280      	movs	r2, #128	@ 0x80
 80030e4:	589b      	ldr	r3, [r3, r2]
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d145      	bne.n	8003176 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_UART_Receive_IT+0x26>
 80030f0:	1dbb      	adds	r3, r7, #6
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e03d      	b.n	8003178 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	2380      	movs	r3, #128	@ 0x80
 8003102:	015b      	lsls	r3, r3, #5
 8003104:	429a      	cmp	r2, r3
 8003106:	d109      	bne.n	800311c <HAL_UART_Receive_IT+0x4a>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d105      	bne.n	800311c <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2201      	movs	r2, #1
 8003114:	4013      	ands	r3, r2
 8003116:	d001      	beq.n	800311c <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e02d      	b.n	8003178 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	2380      	movs	r3, #128	@ 0x80
 800312a:	041b      	lsls	r3, r3, #16
 800312c:	4013      	ands	r3, r2
 800312e:	d019      	beq.n	8003164 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003130:	f3ef 8310 	mrs	r3, PRIMASK
 8003134:	613b      	str	r3, [r7, #16]
  return(result);
 8003136:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	2301      	movs	r3, #1
 800313c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f383 8810 	msr	PRIMASK, r3
}
 8003144:	46c0      	nop			@ (mov r8, r8)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2180      	movs	r1, #128	@ 0x80
 8003152:	04c9      	lsls	r1, r1, #19
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f383 8810 	msr	PRIMASK, r3
}
 8003162:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003164:	1dbb      	adds	r3, r7, #6
 8003166:	881a      	ldrh	r2, [r3, #0]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	0018      	movs	r0, r3
 800316e:	f000 fb1f 	bl	80037b0 <UART_Start_Receive_IT>
 8003172:	0003      	movs	r3, r0
 8003174:	e000      	b.n	8003178 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003176:	2302      	movs	r3, #2
  }
}
 8003178:	0018      	movs	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	b008      	add	sp, #32
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	000a      	movs	r2, r1
 800318a:	1cbb      	adds	r3, r7, #2
 800318c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800318e:	46c0      	nop			@ (mov r8, r8)
 8003190:	46bd      	mov	sp, r7
 8003192:	b002      	add	sp, #8
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031a0:	231e      	movs	r3, #30
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	4313      	orrs	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a8d      	ldr	r2, [pc, #564]	@ (80033fc <UART_SetConfig+0x264>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	0019      	movs	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4a88      	ldr	r2, [pc, #544]	@ (8003400 <UART_SetConfig+0x268>)
 80031de:	4013      	ands	r3, r2
 80031e0:	0019      	movs	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a7f      	ldr	r2, [pc, #508]	@ (8003404 <UART_SetConfig+0x26c>)
 8003206:	4013      	ands	r3, r2
 8003208:	0019      	movs	r1, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	430a      	orrs	r2, r1
 8003212:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a7b      	ldr	r2, [pc, #492]	@ (8003408 <UART_SetConfig+0x270>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d127      	bne.n	800326e <UART_SetConfig+0xd6>
 800321e:	4b7b      	ldr	r3, [pc, #492]	@ (800340c <UART_SetConfig+0x274>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	2203      	movs	r2, #3
 8003224:	4013      	ands	r3, r2
 8003226:	2b03      	cmp	r3, #3
 8003228:	d00d      	beq.n	8003246 <UART_SetConfig+0xae>
 800322a:	d81b      	bhi.n	8003264 <UART_SetConfig+0xcc>
 800322c:	2b02      	cmp	r3, #2
 800322e:	d014      	beq.n	800325a <UART_SetConfig+0xc2>
 8003230:	d818      	bhi.n	8003264 <UART_SetConfig+0xcc>
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <UART_SetConfig+0xa4>
 8003236:	2b01      	cmp	r3, #1
 8003238:	d00a      	beq.n	8003250 <UART_SetConfig+0xb8>
 800323a:	e013      	b.n	8003264 <UART_SetConfig+0xcc>
 800323c:	231f      	movs	r3, #31
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	2200      	movs	r2, #0
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	e021      	b.n	800328a <UART_SetConfig+0xf2>
 8003246:	231f      	movs	r3, #31
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	2202      	movs	r2, #2
 800324c:	701a      	strb	r2, [r3, #0]
 800324e:	e01c      	b.n	800328a <UART_SetConfig+0xf2>
 8003250:	231f      	movs	r3, #31
 8003252:	18fb      	adds	r3, r7, r3
 8003254:	2204      	movs	r2, #4
 8003256:	701a      	strb	r2, [r3, #0]
 8003258:	e017      	b.n	800328a <UART_SetConfig+0xf2>
 800325a:	231f      	movs	r3, #31
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	2208      	movs	r2, #8
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	e012      	b.n	800328a <UART_SetConfig+0xf2>
 8003264:	231f      	movs	r3, #31
 8003266:	18fb      	adds	r3, r7, r3
 8003268:	2210      	movs	r2, #16
 800326a:	701a      	strb	r2, [r3, #0]
 800326c:	e00d      	b.n	800328a <UART_SetConfig+0xf2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a67      	ldr	r2, [pc, #412]	@ (8003410 <UART_SetConfig+0x278>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d104      	bne.n	8003282 <UART_SetConfig+0xea>
 8003278:	231f      	movs	r3, #31
 800327a:	18fb      	adds	r3, r7, r3
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]
 8003280:	e003      	b.n	800328a <UART_SetConfig+0xf2>
 8003282:	231f      	movs	r3, #31
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	2210      	movs	r2, #16
 8003288:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69da      	ldr	r2, [r3, #28]
 800328e:	2380      	movs	r3, #128	@ 0x80
 8003290:	021b      	lsls	r3, r3, #8
 8003292:	429a      	cmp	r2, r3
 8003294:	d15c      	bne.n	8003350 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003296:	231f      	movs	r3, #31
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b08      	cmp	r3, #8
 800329e:	d015      	beq.n	80032cc <UART_SetConfig+0x134>
 80032a0:	dc18      	bgt.n	80032d4 <UART_SetConfig+0x13c>
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d00d      	beq.n	80032c2 <UART_SetConfig+0x12a>
 80032a6:	dc15      	bgt.n	80032d4 <UART_SetConfig+0x13c>
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <UART_SetConfig+0x11a>
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d005      	beq.n	80032bc <UART_SetConfig+0x124>
 80032b0:	e010      	b.n	80032d4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b2:	f7ff fd17 	bl	8002ce4 <HAL_RCC_GetPCLK1Freq>
 80032b6:	0003      	movs	r3, r0
 80032b8:	61bb      	str	r3, [r7, #24]
        break;
 80032ba:	e012      	b.n	80032e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032bc:	4b55      	ldr	r3, [pc, #340]	@ (8003414 <UART_SetConfig+0x27c>)
 80032be:	61bb      	str	r3, [r7, #24]
        break;
 80032c0:	e00f      	b.n	80032e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032c2:	f7ff fc93 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 80032c6:	0003      	movs	r3, r0
 80032c8:	61bb      	str	r3, [r7, #24]
        break;
 80032ca:	e00a      	b.n	80032e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032cc:	2380      	movs	r3, #128	@ 0x80
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	61bb      	str	r3, [r7, #24]
        break;
 80032d2:	e006      	b.n	80032e2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032d8:	231e      	movs	r3, #30
 80032da:	18fb      	adds	r3, r7, r3
 80032dc:	2201      	movs	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]
        break;
 80032e0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d100      	bne.n	80032ea <UART_SetConfig+0x152>
 80032e8:	e07a      	b.n	80033e0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	005a      	lsls	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	085b      	lsrs	r3, r3, #1
 80032f4:	18d2      	adds	r2, r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	0019      	movs	r1, r3
 80032fc:	0010      	movs	r0, r2
 80032fe:	f7fc ff03 	bl	8000108 <__udivsi3>
 8003302:	0003      	movs	r3, r0
 8003304:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b0f      	cmp	r3, #15
 800330a:	d91c      	bls.n	8003346 <UART_SetConfig+0x1ae>
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	2380      	movs	r3, #128	@ 0x80
 8003310:	025b      	lsls	r3, r3, #9
 8003312:	429a      	cmp	r2, r3
 8003314:	d217      	bcs.n	8003346 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	b29a      	uxth	r2, r3
 800331a:	200e      	movs	r0, #14
 800331c:	183b      	adds	r3, r7, r0
 800331e:	210f      	movs	r1, #15
 8003320:	438a      	bics	r2, r1
 8003322:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	085b      	lsrs	r3, r3, #1
 8003328:	b29b      	uxth	r3, r3
 800332a:	2207      	movs	r2, #7
 800332c:	4013      	ands	r3, r2
 800332e:	b299      	uxth	r1, r3
 8003330:	183b      	adds	r3, r7, r0
 8003332:	183a      	adds	r2, r7, r0
 8003334:	8812      	ldrh	r2, [r2, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	183a      	adds	r2, r7, r0
 8003340:	8812      	ldrh	r2, [r2, #0]
 8003342:	60da      	str	r2, [r3, #12]
 8003344:	e04c      	b.n	80033e0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003346:	231e      	movs	r3, #30
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	e047      	b.n	80033e0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003350:	231f      	movs	r3, #31
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b08      	cmp	r3, #8
 8003358:	d015      	beq.n	8003386 <UART_SetConfig+0x1ee>
 800335a:	dc18      	bgt.n	800338e <UART_SetConfig+0x1f6>
 800335c:	2b04      	cmp	r3, #4
 800335e:	d00d      	beq.n	800337c <UART_SetConfig+0x1e4>
 8003360:	dc15      	bgt.n	800338e <UART_SetConfig+0x1f6>
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <UART_SetConfig+0x1d4>
 8003366:	2b02      	cmp	r3, #2
 8003368:	d005      	beq.n	8003376 <UART_SetConfig+0x1de>
 800336a:	e010      	b.n	800338e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800336c:	f7ff fcba 	bl	8002ce4 <HAL_RCC_GetPCLK1Freq>
 8003370:	0003      	movs	r3, r0
 8003372:	61bb      	str	r3, [r7, #24]
        break;
 8003374:	e012      	b.n	800339c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003376:	4b27      	ldr	r3, [pc, #156]	@ (8003414 <UART_SetConfig+0x27c>)
 8003378:	61bb      	str	r3, [r7, #24]
        break;
 800337a:	e00f      	b.n	800339c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337c:	f7ff fc36 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8003380:	0003      	movs	r3, r0
 8003382:	61bb      	str	r3, [r7, #24]
        break;
 8003384:	e00a      	b.n	800339c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003386:	2380      	movs	r3, #128	@ 0x80
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	61bb      	str	r3, [r7, #24]
        break;
 800338c:	e006      	b.n	800339c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003392:	231e      	movs	r3, #30
 8003394:	18fb      	adds	r3, r7, r3
 8003396:	2201      	movs	r2, #1
 8003398:	701a      	strb	r2, [r3, #0]
        break;
 800339a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d01e      	beq.n	80033e0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	085a      	lsrs	r2, r3, #1
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	18d2      	adds	r2, r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	0019      	movs	r1, r3
 80033b2:	0010      	movs	r0, r2
 80033b4:	f7fc fea8 	bl	8000108 <__udivsi3>
 80033b8:	0003      	movs	r3, r0
 80033ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	2b0f      	cmp	r3, #15
 80033c0:	d90a      	bls.n	80033d8 <UART_SetConfig+0x240>
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	2380      	movs	r3, #128	@ 0x80
 80033c6:	025b      	lsls	r3, r3, #9
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d205      	bcs.n	80033d8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	e003      	b.n	80033e0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80033d8:	231e      	movs	r3, #30
 80033da:	18fb      	adds	r3, r7, r3
 80033dc:	2201      	movs	r2, #1
 80033de:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80033ec:	231e      	movs	r3, #30
 80033ee:	18fb      	adds	r3, r7, r3
 80033f0:	781b      	ldrb	r3, [r3, #0]
}
 80033f2:	0018      	movs	r0, r3
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b008      	add	sp, #32
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	46c0      	nop			@ (mov r8, r8)
 80033fc:	efff69f3 	.word	0xefff69f3
 8003400:	ffffcfff 	.word	0xffffcfff
 8003404:	fffff4ff 	.word	0xfffff4ff
 8003408:	40013800 	.word	0x40013800
 800340c:	40021000 	.word	0x40021000
 8003410:	40004400 	.word	0x40004400
 8003414:	007a1200 	.word	0x007a1200

08003418 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	2208      	movs	r2, #8
 8003426:	4013      	ands	r3, r2
 8003428:	d00b      	beq.n	8003442 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	4a4a      	ldr	r2, [pc, #296]	@ (800355c <UART_AdvFeatureConfig+0x144>)
 8003432:	4013      	ands	r3, r2
 8003434:	0019      	movs	r1, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003446:	2201      	movs	r2, #1
 8003448:	4013      	ands	r3, r2
 800344a:	d00b      	beq.n	8003464 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	4a43      	ldr	r2, [pc, #268]	@ (8003560 <UART_AdvFeatureConfig+0x148>)
 8003454:	4013      	ands	r3, r2
 8003456:	0019      	movs	r1, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	2202      	movs	r2, #2
 800346a:	4013      	ands	r3, r2
 800346c:	d00b      	beq.n	8003486 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4a3b      	ldr	r2, [pc, #236]	@ (8003564 <UART_AdvFeatureConfig+0x14c>)
 8003476:	4013      	ands	r3, r2
 8003478:	0019      	movs	r1, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348a:	2204      	movs	r2, #4
 800348c:	4013      	ands	r3, r2
 800348e:	d00b      	beq.n	80034a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4a34      	ldr	r2, [pc, #208]	@ (8003568 <UART_AdvFeatureConfig+0x150>)
 8003498:	4013      	ands	r3, r2
 800349a:	0019      	movs	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	2210      	movs	r2, #16
 80034ae:	4013      	ands	r3, r2
 80034b0:	d00b      	beq.n	80034ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4a2c      	ldr	r2, [pc, #176]	@ (800356c <UART_AdvFeatureConfig+0x154>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	0019      	movs	r1, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ce:	2220      	movs	r2, #32
 80034d0:	4013      	ands	r3, r2
 80034d2:	d00b      	beq.n	80034ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	4a25      	ldr	r2, [pc, #148]	@ (8003570 <UART_AdvFeatureConfig+0x158>)
 80034dc:	4013      	ands	r3, r2
 80034de:	0019      	movs	r1, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f0:	2240      	movs	r2, #64	@ 0x40
 80034f2:	4013      	ands	r3, r2
 80034f4:	d01d      	beq.n	8003532 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003574 <UART_AdvFeatureConfig+0x15c>)
 80034fe:	4013      	ands	r3, r2
 8003500:	0019      	movs	r1, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003512:	2380      	movs	r3, #128	@ 0x80
 8003514:	035b      	lsls	r3, r3, #13
 8003516:	429a      	cmp	r2, r3
 8003518:	d10b      	bne.n	8003532 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4a15      	ldr	r2, [pc, #84]	@ (8003578 <UART_AdvFeatureConfig+0x160>)
 8003522:	4013      	ands	r3, r2
 8003524:	0019      	movs	r1, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003536:	2280      	movs	r2, #128	@ 0x80
 8003538:	4013      	ands	r3, r2
 800353a:	d00b      	beq.n	8003554 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	4a0e      	ldr	r2, [pc, #56]	@ (800357c <UART_AdvFeatureConfig+0x164>)
 8003544:	4013      	ands	r3, r2
 8003546:	0019      	movs	r1, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	605a      	str	r2, [r3, #4]
  }
}
 8003554:	46c0      	nop			@ (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	b002      	add	sp, #8
 800355a:	bd80      	pop	{r7, pc}
 800355c:	ffff7fff 	.word	0xffff7fff
 8003560:	fffdffff 	.word	0xfffdffff
 8003564:	fffeffff 	.word	0xfffeffff
 8003568:	fffbffff 	.word	0xfffbffff
 800356c:	ffffefff 	.word	0xffffefff
 8003570:	ffffdfff 	.word	0xffffdfff
 8003574:	ffefffff 	.word	0xffefffff
 8003578:	ff9fffff 	.word	0xff9fffff
 800357c:	fff7ffff 	.word	0xfff7ffff

08003580 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b092      	sub	sp, #72	@ 0x48
 8003584:	af02      	add	r7, sp, #8
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2284      	movs	r2, #132	@ 0x84
 800358c:	2100      	movs	r1, #0
 800358e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003590:	f7fe fc3e 	bl	8001e10 <HAL_GetTick>
 8003594:	0003      	movs	r3, r0
 8003596:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2208      	movs	r2, #8
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d12c      	bne.n	8003600 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035a8:	2280      	movs	r2, #128	@ 0x80
 80035aa:	0391      	lsls	r1, r2, #14
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	4a46      	ldr	r2, [pc, #280]	@ (80036c8 <UART_CheckIdleState+0x148>)
 80035b0:	9200      	str	r2, [sp, #0]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f000 f88c 	bl	80036d0 <UART_WaitOnFlagUntilTimeout>
 80035b8:	1e03      	subs	r3, r0, #0
 80035ba:	d021      	beq.n	8003600 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035bc:	f3ef 8310 	mrs	r3, PRIMASK
 80035c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035c6:	2301      	movs	r3, #1
 80035c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035cc:	f383 8810 	msr	PRIMASK, r3
}
 80035d0:	46c0      	nop			@ (mov r8, r8)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2180      	movs	r1, #128	@ 0x80
 80035de:	438a      	bics	r2, r1
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e8:	f383 8810 	msr	PRIMASK, r3
}
 80035ec:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2220      	movs	r2, #32
 80035f2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2278      	movs	r2, #120	@ 0x78
 80035f8:	2100      	movs	r1, #0
 80035fa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e05f      	b.n	80036c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2204      	movs	r2, #4
 8003608:	4013      	ands	r3, r2
 800360a:	2b04      	cmp	r3, #4
 800360c:	d146      	bne.n	800369c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800360e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003610:	2280      	movs	r2, #128	@ 0x80
 8003612:	03d1      	lsls	r1, r2, #15
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4a2c      	ldr	r2, [pc, #176]	@ (80036c8 <UART_CheckIdleState+0x148>)
 8003618:	9200      	str	r2, [sp, #0]
 800361a:	2200      	movs	r2, #0
 800361c:	f000 f858 	bl	80036d0 <UART_WaitOnFlagUntilTimeout>
 8003620:	1e03      	subs	r3, r0, #0
 8003622:	d03b      	beq.n	800369c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003624:	f3ef 8310 	mrs	r3, PRIMASK
 8003628:	60fb      	str	r3, [r7, #12]
  return(result);
 800362a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800362c:	637b      	str	r3, [r7, #52]	@ 0x34
 800362e:	2301      	movs	r3, #1
 8003630:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f383 8810 	msr	PRIMASK, r3
}
 8003638:	46c0      	nop			@ (mov r8, r8)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4921      	ldr	r1, [pc, #132]	@ (80036cc <UART_CheckIdleState+0x14c>)
 8003646:	400a      	ands	r2, r1
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f383 8810 	msr	PRIMASK, r3
}
 8003654:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003656:	f3ef 8310 	mrs	r3, PRIMASK
 800365a:	61bb      	str	r3, [r7, #24]
  return(result);
 800365c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003660:	2301      	movs	r3, #1
 8003662:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f383 8810 	msr	PRIMASK, r3
}
 800366a:	46c0      	nop			@ (mov r8, r8)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2101      	movs	r1, #1
 8003678:	438a      	bics	r2, r1
 800367a:	609a      	str	r2, [r3, #8]
 800367c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	f383 8810 	msr	PRIMASK, r3
}
 8003686:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2280      	movs	r2, #128	@ 0x80
 800368c:	2120      	movs	r1, #32
 800368e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2278      	movs	r2, #120	@ 0x78
 8003694:	2100      	movs	r1, #0
 8003696:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e011      	b.n	80036c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2280      	movs	r2, #128	@ 0x80
 80036a6:	2120      	movs	r1, #32
 80036a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2278      	movs	r2, #120	@ 0x78
 80036ba:	2100      	movs	r1, #0
 80036bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	0018      	movs	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b010      	add	sp, #64	@ 0x40
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	01ffffff 	.word	0x01ffffff
 80036cc:	fffffedf 	.word	0xfffffedf

080036d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	1dfb      	adds	r3, r7, #7
 80036de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e0:	e051      	b.n	8003786 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	3301      	adds	r3, #1
 80036e6:	d04e      	beq.n	8003786 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e8:	f7fe fb92 	bl	8001e10 <HAL_GetTick>
 80036ec:	0002      	movs	r2, r0
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d302      	bcc.n	80036fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e051      	b.n	80037a6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2204      	movs	r2, #4
 800370a:	4013      	ands	r3, r2
 800370c:	d03b      	beq.n	8003786 <UART_WaitOnFlagUntilTimeout+0xb6>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b80      	cmp	r3, #128	@ 0x80
 8003712:	d038      	beq.n	8003786 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b40      	cmp	r3, #64	@ 0x40
 8003718:	d035      	beq.n	8003786 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	2208      	movs	r2, #8
 8003722:	4013      	ands	r3, r2
 8003724:	2b08      	cmp	r3, #8
 8003726:	d111      	bne.n	800374c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2208      	movs	r2, #8
 800372e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	0018      	movs	r0, r3
 8003734:	f000 f906 	bl	8003944 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2284      	movs	r2, #132	@ 0x84
 800373c:	2108      	movs	r1, #8
 800373e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2278      	movs	r2, #120	@ 0x78
 8003744:	2100      	movs	r1, #0
 8003746:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e02c      	b.n	80037a6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69da      	ldr	r2, [r3, #28]
 8003752:	2380      	movs	r3, #128	@ 0x80
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	401a      	ands	r2, r3
 8003758:	2380      	movs	r3, #128	@ 0x80
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	429a      	cmp	r2, r3
 800375e:	d112      	bne.n	8003786 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2280      	movs	r2, #128	@ 0x80
 8003766:	0112      	lsls	r2, r2, #4
 8003768:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	0018      	movs	r0, r3
 800376e:	f000 f8e9 	bl	8003944 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2284      	movs	r2, #132	@ 0x84
 8003776:	2120      	movs	r1, #32
 8003778:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2278      	movs	r2, #120	@ 0x78
 800377e:	2100      	movs	r1, #0
 8003780:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e00f      	b.n	80037a6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	4013      	ands	r3, r2
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	425a      	negs	r2, r3
 8003796:	4153      	adcs	r3, r2
 8003798:	b2db      	uxtb	r3, r3
 800379a:	001a      	movs	r2, r3
 800379c:	1dfb      	adds	r3, r7, #7
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d09e      	beq.n	80036e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	0018      	movs	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b004      	add	sp, #16
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b090      	sub	sp, #64	@ 0x40
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	1dbb      	adds	r3, r7, #6
 80037bc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1dba      	adds	r2, r7, #6
 80037c8:	2158      	movs	r1, #88	@ 0x58
 80037ca:	8812      	ldrh	r2, [r2, #0]
 80037cc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1dba      	adds	r2, r7, #6
 80037d2:	215a      	movs	r1, #90	@ 0x5a
 80037d4:	8812      	ldrh	r2, [r2, #0]
 80037d6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	2380      	movs	r3, #128	@ 0x80
 80037e4:	015b      	lsls	r3, r3, #5
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d10d      	bne.n	8003806 <UART_Start_Receive_IT+0x56>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d104      	bne.n	80037fc <UART_Start_Receive_IT+0x4c>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	225c      	movs	r2, #92	@ 0x5c
 80037f6:	4950      	ldr	r1, [pc, #320]	@ (8003938 <UART_Start_Receive_IT+0x188>)
 80037f8:	5299      	strh	r1, [r3, r2]
 80037fa:	e02e      	b.n	800385a <UART_Start_Receive_IT+0xaa>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	225c      	movs	r2, #92	@ 0x5c
 8003800:	21ff      	movs	r1, #255	@ 0xff
 8003802:	5299      	strh	r1, [r3, r2]
 8003804:	e029      	b.n	800385a <UART_Start_Receive_IT+0xaa>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10d      	bne.n	800382a <UART_Start_Receive_IT+0x7a>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d104      	bne.n	8003820 <UART_Start_Receive_IT+0x70>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	225c      	movs	r2, #92	@ 0x5c
 800381a:	21ff      	movs	r1, #255	@ 0xff
 800381c:	5299      	strh	r1, [r3, r2]
 800381e:	e01c      	b.n	800385a <UART_Start_Receive_IT+0xaa>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	225c      	movs	r2, #92	@ 0x5c
 8003824:	217f      	movs	r1, #127	@ 0x7f
 8003826:	5299      	strh	r1, [r3, r2]
 8003828:	e017      	b.n	800385a <UART_Start_Receive_IT+0xaa>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	2380      	movs	r3, #128	@ 0x80
 8003830:	055b      	lsls	r3, r3, #21
 8003832:	429a      	cmp	r2, r3
 8003834:	d10d      	bne.n	8003852 <UART_Start_Receive_IT+0xa2>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d104      	bne.n	8003848 <UART_Start_Receive_IT+0x98>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	225c      	movs	r2, #92	@ 0x5c
 8003842:	217f      	movs	r1, #127	@ 0x7f
 8003844:	5299      	strh	r1, [r3, r2]
 8003846:	e008      	b.n	800385a <UART_Start_Receive_IT+0xaa>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	225c      	movs	r2, #92	@ 0x5c
 800384c:	213f      	movs	r1, #63	@ 0x3f
 800384e:	5299      	strh	r1, [r3, r2]
 8003850:	e003      	b.n	800385a <UART_Start_Receive_IT+0xaa>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	225c      	movs	r2, #92	@ 0x5c
 8003856:	2100      	movs	r1, #0
 8003858:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2284      	movs	r2, #132	@ 0x84
 800385e:	2100      	movs	r1, #0
 8003860:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2280      	movs	r2, #128	@ 0x80
 8003866:	2122      	movs	r1, #34	@ 0x22
 8003868:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386a:	f3ef 8310 	mrs	r3, PRIMASK
 800386e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003870:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003872:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003874:	2301      	movs	r3, #1
 8003876:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800387a:	f383 8810 	msr	PRIMASK, r3
}
 800387e:	46c0      	nop			@ (mov r8, r8)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2101      	movs	r1, #1
 800388c:	430a      	orrs	r2, r1
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003892:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003896:	f383 8810 	msr	PRIMASK, r3
}
 800389a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	2380      	movs	r3, #128	@ 0x80
 80038a2:	015b      	lsls	r3, r3, #5
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d107      	bne.n	80038b8 <UART_Start_Receive_IT+0x108>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d103      	bne.n	80038b8 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4a22      	ldr	r2, [pc, #136]	@ (800393c <UART_Start_Receive_IT+0x18c>)
 80038b4:	669a      	str	r2, [r3, #104]	@ 0x68
 80038b6:	e002      	b.n	80038be <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4a21      	ldr	r2, [pc, #132]	@ (8003940 <UART_Start_Receive_IT+0x190>)
 80038bc:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d019      	beq.n	80038fa <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038c6:	f3ef 8310 	mrs	r3, PRIMASK
 80038ca:	61fb      	str	r3, [r7, #28]
  return(result);
 80038cc:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80038ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80038d0:	2301      	movs	r3, #1
 80038d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	f383 8810 	msr	PRIMASK, r3
}
 80038da:	46c0      	nop			@ (mov r8, r8)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2190      	movs	r1, #144	@ 0x90
 80038e8:	0049      	lsls	r1, r1, #1
 80038ea:	430a      	orrs	r2, r1
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f4:	f383 8810 	msr	PRIMASK, r3
}
 80038f8:	e018      	b.n	800392c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038fa:	f3ef 8310 	mrs	r3, PRIMASK
 80038fe:	613b      	str	r3, [r7, #16]
  return(result);
 8003900:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003902:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003904:	2301      	movs	r3, #1
 8003906:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f383 8810 	msr	PRIMASK, r3
}
 800390e:	46c0      	nop			@ (mov r8, r8)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2120      	movs	r1, #32
 800391c:	430a      	orrs	r2, r1
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003922:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	f383 8810 	msr	PRIMASK, r3
}
 800392a:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	0018      	movs	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	b010      	add	sp, #64	@ 0x40
 8003934:	bd80      	pop	{r7, pc}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	000001ff 	.word	0x000001ff
 800393c:	08003bc5 	.word	0x08003bc5
 8003940:	08003a0d 	.word	0x08003a0d

08003944 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08e      	sub	sp, #56	@ 0x38
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800394c:	f3ef 8310 	mrs	r3, PRIMASK
 8003950:	617b      	str	r3, [r7, #20]
  return(result);
 8003952:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003954:	637b      	str	r3, [r7, #52]	@ 0x34
 8003956:	2301      	movs	r3, #1
 8003958:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f383 8810 	msr	PRIMASK, r3
}
 8003960:	46c0      	nop			@ (mov r8, r8)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4926      	ldr	r1, [pc, #152]	@ (8003a08 <UART_EndRxTransfer+0xc4>)
 800396e:	400a      	ands	r2, r1
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003974:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	f383 8810 	msr	PRIMASK, r3
}
 800397c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800397e:	f3ef 8310 	mrs	r3, PRIMASK
 8003982:	623b      	str	r3, [r7, #32]
  return(result);
 8003984:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003986:	633b      	str	r3, [r7, #48]	@ 0x30
 8003988:	2301      	movs	r3, #1
 800398a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398e:	f383 8810 	msr	PRIMASK, r3
}
 8003992:	46c0      	nop			@ (mov r8, r8)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2101      	movs	r1, #1
 80039a0:	438a      	bics	r2, r1
 80039a2:	609a      	str	r2, [r3, #8]
 80039a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039aa:	f383 8810 	msr	PRIMASK, r3
}
 80039ae:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d118      	bne.n	80039ea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039b8:	f3ef 8310 	mrs	r3, PRIMASK
 80039bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80039be:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039c2:	2301      	movs	r3, #1
 80039c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f383 8810 	msr	PRIMASK, r3
}
 80039cc:	46c0      	nop			@ (mov r8, r8)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2110      	movs	r1, #16
 80039da:	438a      	bics	r2, r1
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f383 8810 	msr	PRIMASK, r3
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2280      	movs	r2, #128	@ 0x80
 80039ee:	2120      	movs	r1, #32
 80039f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b00e      	add	sp, #56	@ 0x38
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	46c0      	nop			@ (mov r8, r8)
 8003a08:	fffffedf 	.word	0xfffffedf

08003a0c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b094      	sub	sp, #80	@ 0x50
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003a14:	204e      	movs	r0, #78	@ 0x4e
 8003a16:	183b      	adds	r3, r7, r0
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	215c      	movs	r1, #92	@ 0x5c
 8003a1c:	5a52      	ldrh	r2, [r2, r1]
 8003a1e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2280      	movs	r2, #128	@ 0x80
 8003a24:	589b      	ldr	r3, [r3, r2]
 8003a26:	2b22      	cmp	r3, #34	@ 0x22
 8003a28:	d000      	beq.n	8003a2c <UART_RxISR_8BIT+0x20>
 8003a2a:	e0ba      	b.n	8003ba2 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	214c      	movs	r1, #76	@ 0x4c
 8003a32:	187b      	adds	r3, r7, r1
 8003a34:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8003a36:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003a38:	187b      	adds	r3, r7, r1
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	183b      	adds	r3, r7, r0
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	b2d9      	uxtb	r1, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a48:	400a      	ands	r2, r1
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	225a      	movs	r2, #90	@ 0x5a
 8003a5c:	5a9b      	ldrh	r3, [r3, r2]
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b299      	uxth	r1, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	225a      	movs	r2, #90	@ 0x5a
 8003a68:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	225a      	movs	r2, #90	@ 0x5a
 8003a6e:	5a9b      	ldrh	r3, [r3, r2]
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d000      	beq.n	8003a78 <UART_RxISR_8BIT+0x6c>
 8003a76:	e09c      	b.n	8003bb2 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a78:	f3ef 8310 	mrs	r3, PRIMASK
 8003a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a82:	2301      	movs	r3, #1
 8003a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a88:	f383 8810 	msr	PRIMASK, r3
}
 8003a8c:	46c0      	nop			@ (mov r8, r8)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4948      	ldr	r1, [pc, #288]	@ (8003bbc <UART_RxISR_8BIT+0x1b0>)
 8003a9a:	400a      	ands	r2, r1
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa4:	f383 8810 	msr	PRIMASK, r3
}
 8003aa8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8003aae:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aba:	f383 8810 	msr	PRIMASK, r3
}
 8003abe:	46c0      	nop			@ (mov r8, r8)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2101      	movs	r1, #1
 8003acc:	438a      	bics	r2, r1
 8003ace:	609a      	str	r2, [r3, #8]
 8003ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad6:	f383 8810 	msr	PRIMASK, r3
}
 8003ada:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2280      	movs	r2, #128	@ 0x80
 8003ae0:	2120      	movs	r1, #32
 8003ae2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	2380      	movs	r3, #128	@ 0x80
 8003af8:	041b      	lsls	r3, r3, #16
 8003afa:	4013      	ands	r3, r2
 8003afc:	d018      	beq.n	8003b30 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003afe:	f3ef 8310 	mrs	r3, PRIMASK
 8003b02:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b04:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b06:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b08:	2301      	movs	r3, #1
 8003b0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f383 8810 	msr	PRIMASK, r3
}
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4928      	ldr	r1, [pc, #160]	@ (8003bc0 <UART_RxISR_8BIT+0x1b4>)
 8003b20:	400a      	ands	r2, r1
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b26:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	f383 8810 	msr	PRIMASK, r3
}
 8003b2e:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d12f      	bne.n	8003b98 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b42:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b44:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b48:	2301      	movs	r3, #1
 8003b4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f383 8810 	msr	PRIMASK, r3
}
 8003b52:	46c0      	nop			@ (mov r8, r8)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2110      	movs	r1, #16
 8003b60:	438a      	bics	r2, r1
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f383 8810 	msr	PRIMASK, r3
}
 8003b6e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	2210      	movs	r2, #16
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b10      	cmp	r3, #16
 8003b7c:	d103      	bne.n	8003b86 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2210      	movs	r2, #16
 8003b84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2258      	movs	r2, #88	@ 0x58
 8003b8a:	5a9a      	ldrh	r2, [r3, r2]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	0011      	movs	r1, r2
 8003b90:	0018      	movs	r0, r3
 8003b92:	f7ff faf5 	bl	8003180 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b96:	e00c      	b.n	8003bb2 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f7fd fb9a 	bl	80012d4 <HAL_UART_RxCpltCallback>
}
 8003ba0:	e007      	b.n	8003bb2 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699a      	ldr	r2, [r3, #24]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2108      	movs	r1, #8
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	619a      	str	r2, [r3, #24]
}
 8003bb2:	46c0      	nop			@ (mov r8, r8)
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	b014      	add	sp, #80	@ 0x50
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	46c0      	nop			@ (mov r8, r8)
 8003bbc:	fffffedf 	.word	0xfffffedf
 8003bc0:	fbffffff 	.word	0xfbffffff

08003bc4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b094      	sub	sp, #80	@ 0x50
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003bcc:	204e      	movs	r0, #78	@ 0x4e
 8003bce:	183b      	adds	r3, r7, r0
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	215c      	movs	r1, #92	@ 0x5c
 8003bd4:	5a52      	ldrh	r2, [r2, r1]
 8003bd6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2280      	movs	r2, #128	@ 0x80
 8003bdc:	589b      	ldr	r3, [r3, r2]
 8003bde:	2b22      	cmp	r3, #34	@ 0x22
 8003be0:	d000      	beq.n	8003be4 <UART_RxISR_16BIT+0x20>
 8003be2:	e0ba      	b.n	8003d5a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	214c      	movs	r1, #76	@ 0x4c
 8003bea:	187b      	adds	r3, r7, r1
 8003bec:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8003bee:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003bf6:	187b      	adds	r3, r7, r1
 8003bf8:	183a      	adds	r2, r7, r0
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	8812      	ldrh	r2, [r2, #0]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c04:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c0a:	1c9a      	adds	r2, r3, #2
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	225a      	movs	r2, #90	@ 0x5a
 8003c14:	5a9b      	ldrh	r3, [r3, r2]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b299      	uxth	r1, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	225a      	movs	r2, #90	@ 0x5a
 8003c20:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	225a      	movs	r2, #90	@ 0x5a
 8003c26:	5a9b      	ldrh	r3, [r3, r2]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d000      	beq.n	8003c30 <UART_RxISR_16BIT+0x6c>
 8003c2e:	e09c      	b.n	8003d6a <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c30:	f3ef 8310 	mrs	r3, PRIMASK
 8003c34:	623b      	str	r3, [r7, #32]
  return(result);
 8003c36:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	f383 8810 	msr	PRIMASK, r3
}
 8003c44:	46c0      	nop			@ (mov r8, r8)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4948      	ldr	r1, [pc, #288]	@ (8003d74 <UART_RxISR_16BIT+0x1b0>)
 8003c52:	400a      	ands	r2, r1
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5c:	f383 8810 	msr	PRIMASK, r3
}
 8003c60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c62:	f3ef 8310 	mrs	r3, PRIMASK
 8003c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c72:	f383 8810 	msr	PRIMASK, r3
}
 8003c76:	46c0      	nop			@ (mov r8, r8)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2101      	movs	r1, #1
 8003c84:	438a      	bics	r2, r1
 8003c86:	609a      	str	r2, [r3, #8]
 8003c88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c8a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c8e:	f383 8810 	msr	PRIMASK, r3
}
 8003c92:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2280      	movs	r2, #128	@ 0x80
 8003c98:	2120      	movs	r1, #32
 8003c9a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	2380      	movs	r3, #128	@ 0x80
 8003cb0:	041b      	lsls	r3, r3, #16
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	d018      	beq.n	8003ce8 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8003cba:	617b      	str	r3, [r7, #20]
  return(result);
 8003cbc:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	f383 8810 	msr	PRIMASK, r3
}
 8003cca:	46c0      	nop			@ (mov r8, r8)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4928      	ldr	r1, [pc, #160]	@ (8003d78 <UART_RxISR_16BIT+0x1b4>)
 8003cd8:	400a      	ands	r2, r1
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f383 8810 	msr	PRIMASK, r3
}
 8003ce6:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d12f      	bne.n	8003d50 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8003cfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cfc:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d00:	2301      	movs	r3, #1
 8003d02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f383 8810 	msr	PRIMASK, r3
}
 8003d0a:	46c0      	nop			@ (mov r8, r8)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2110      	movs	r1, #16
 8003d18:	438a      	bics	r2, r1
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f383 8810 	msr	PRIMASK, r3
}
 8003d26:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	2210      	movs	r2, #16
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b10      	cmp	r3, #16
 8003d34:	d103      	bne.n	8003d3e <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2210      	movs	r2, #16
 8003d3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2258      	movs	r2, #88	@ 0x58
 8003d42:	5a9a      	ldrh	r2, [r3, r2]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	0011      	movs	r1, r2
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f7ff fa19 	bl	8003180 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d4e:	e00c      	b.n	8003d6a <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	0018      	movs	r0, r3
 8003d54:	f7fd fabe 	bl	80012d4 <HAL_UART_RxCpltCallback>
}
 8003d58:	e007      	b.n	8003d6a <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699a      	ldr	r2, [r3, #24]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2108      	movs	r1, #8
 8003d66:	430a      	orrs	r2, r1
 8003d68:	619a      	str	r2, [r3, #24]
}
 8003d6a:	46c0      	nop			@ (mov r8, r8)
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b014      	add	sp, #80	@ 0x50
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	46c0      	nop			@ (mov r8, r8)
 8003d74:	fffffedf 	.word	0xfffffedf
 8003d78:	fbffffff 	.word	0xfbffffff

08003d7c <malloc>:
 8003d7c:	b510      	push	{r4, lr}
 8003d7e:	4b03      	ldr	r3, [pc, #12]	@ (8003d8c <malloc+0x10>)
 8003d80:	0001      	movs	r1, r0
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	f000 f830 	bl	8003de8 <_malloc_r>
 8003d88:	bd10      	pop	{r4, pc}
 8003d8a:	46c0      	nop			@ (mov r8, r8)
 8003d8c:	20000014 	.word	0x20000014

08003d90 <free>:
 8003d90:	b510      	push	{r4, lr}
 8003d92:	4b03      	ldr	r3, [pc, #12]	@ (8003da0 <free+0x10>)
 8003d94:	0001      	movs	r1, r0
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	f000 f8fc 	bl	8003f94 <_free_r>
 8003d9c:	bd10      	pop	{r4, pc}
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	20000014 	.word	0x20000014

08003da4 <sbrk_aligned>:
 8003da4:	b570      	push	{r4, r5, r6, lr}
 8003da6:	4e0f      	ldr	r6, [pc, #60]	@ (8003de4 <sbrk_aligned+0x40>)
 8003da8:	000d      	movs	r5, r1
 8003daa:	6831      	ldr	r1, [r6, #0]
 8003dac:	0004      	movs	r4, r0
 8003dae:	2900      	cmp	r1, #0
 8003db0:	d102      	bne.n	8003db8 <sbrk_aligned+0x14>
 8003db2:	f000 f8b1 	bl	8003f18 <_sbrk_r>
 8003db6:	6030      	str	r0, [r6, #0]
 8003db8:	0029      	movs	r1, r5
 8003dba:	0020      	movs	r0, r4
 8003dbc:	f000 f8ac 	bl	8003f18 <_sbrk_r>
 8003dc0:	1c43      	adds	r3, r0, #1
 8003dc2:	d103      	bne.n	8003dcc <sbrk_aligned+0x28>
 8003dc4:	2501      	movs	r5, #1
 8003dc6:	426d      	negs	r5, r5
 8003dc8:	0028      	movs	r0, r5
 8003dca:	bd70      	pop	{r4, r5, r6, pc}
 8003dcc:	2303      	movs	r3, #3
 8003dce:	1cc5      	adds	r5, r0, #3
 8003dd0:	439d      	bics	r5, r3
 8003dd2:	42a8      	cmp	r0, r5
 8003dd4:	d0f8      	beq.n	8003dc8 <sbrk_aligned+0x24>
 8003dd6:	1a29      	subs	r1, r5, r0
 8003dd8:	0020      	movs	r0, r4
 8003dda:	f000 f89d 	bl	8003f18 <_sbrk_r>
 8003dde:	3001      	adds	r0, #1
 8003de0:	d1f2      	bne.n	8003dc8 <sbrk_aligned+0x24>
 8003de2:	e7ef      	b.n	8003dc4 <sbrk_aligned+0x20>
 8003de4:	200001a8 	.word	0x200001a8

08003de8 <_malloc_r>:
 8003de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dea:	2203      	movs	r2, #3
 8003dec:	1ccb      	adds	r3, r1, #3
 8003dee:	4393      	bics	r3, r2
 8003df0:	3308      	adds	r3, #8
 8003df2:	0005      	movs	r5, r0
 8003df4:	001f      	movs	r7, r3
 8003df6:	2b0c      	cmp	r3, #12
 8003df8:	d234      	bcs.n	8003e64 <_malloc_r+0x7c>
 8003dfa:	270c      	movs	r7, #12
 8003dfc:	42b9      	cmp	r1, r7
 8003dfe:	d833      	bhi.n	8003e68 <_malloc_r+0x80>
 8003e00:	0028      	movs	r0, r5
 8003e02:	f000 f871 	bl	8003ee8 <__malloc_lock>
 8003e06:	4e37      	ldr	r6, [pc, #220]	@ (8003ee4 <_malloc_r+0xfc>)
 8003e08:	6833      	ldr	r3, [r6, #0]
 8003e0a:	001c      	movs	r4, r3
 8003e0c:	2c00      	cmp	r4, #0
 8003e0e:	d12f      	bne.n	8003e70 <_malloc_r+0x88>
 8003e10:	0039      	movs	r1, r7
 8003e12:	0028      	movs	r0, r5
 8003e14:	f7ff ffc6 	bl	8003da4 <sbrk_aligned>
 8003e18:	0004      	movs	r4, r0
 8003e1a:	1c43      	adds	r3, r0, #1
 8003e1c:	d15f      	bne.n	8003ede <_malloc_r+0xf6>
 8003e1e:	6834      	ldr	r4, [r6, #0]
 8003e20:	9400      	str	r4, [sp, #0]
 8003e22:	9b00      	ldr	r3, [sp, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d14a      	bne.n	8003ebe <_malloc_r+0xd6>
 8003e28:	2c00      	cmp	r4, #0
 8003e2a:	d052      	beq.n	8003ed2 <_malloc_r+0xea>
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	0028      	movs	r0, r5
 8003e30:	18e3      	adds	r3, r4, r3
 8003e32:	9900      	ldr	r1, [sp, #0]
 8003e34:	9301      	str	r3, [sp, #4]
 8003e36:	f000 f86f 	bl	8003f18 <_sbrk_r>
 8003e3a:	9b01      	ldr	r3, [sp, #4]
 8003e3c:	4283      	cmp	r3, r0
 8003e3e:	d148      	bne.n	8003ed2 <_malloc_r+0xea>
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	0028      	movs	r0, r5
 8003e44:	1aff      	subs	r7, r7, r3
 8003e46:	0039      	movs	r1, r7
 8003e48:	f7ff ffac 	bl	8003da4 <sbrk_aligned>
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	d040      	beq.n	8003ed2 <_malloc_r+0xea>
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	19db      	adds	r3, r3, r7
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	6833      	ldr	r3, [r6, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	2a00      	cmp	r2, #0
 8003e5c:	d133      	bne.n	8003ec6 <_malloc_r+0xde>
 8003e5e:	9b00      	ldr	r3, [sp, #0]
 8003e60:	6033      	str	r3, [r6, #0]
 8003e62:	e019      	b.n	8003e98 <_malloc_r+0xb0>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	dac9      	bge.n	8003dfc <_malloc_r+0x14>
 8003e68:	230c      	movs	r3, #12
 8003e6a:	602b      	str	r3, [r5, #0]
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e70:	6821      	ldr	r1, [r4, #0]
 8003e72:	1bc9      	subs	r1, r1, r7
 8003e74:	d420      	bmi.n	8003eb8 <_malloc_r+0xd0>
 8003e76:	290b      	cmp	r1, #11
 8003e78:	d90a      	bls.n	8003e90 <_malloc_r+0xa8>
 8003e7a:	19e2      	adds	r2, r4, r7
 8003e7c:	6027      	str	r7, [r4, #0]
 8003e7e:	42a3      	cmp	r3, r4
 8003e80:	d104      	bne.n	8003e8c <_malloc_r+0xa4>
 8003e82:	6032      	str	r2, [r6, #0]
 8003e84:	6863      	ldr	r3, [r4, #4]
 8003e86:	6011      	str	r1, [r2, #0]
 8003e88:	6053      	str	r3, [r2, #4]
 8003e8a:	e005      	b.n	8003e98 <_malloc_r+0xb0>
 8003e8c:	605a      	str	r2, [r3, #4]
 8003e8e:	e7f9      	b.n	8003e84 <_malloc_r+0x9c>
 8003e90:	6862      	ldr	r2, [r4, #4]
 8003e92:	42a3      	cmp	r3, r4
 8003e94:	d10e      	bne.n	8003eb4 <_malloc_r+0xcc>
 8003e96:	6032      	str	r2, [r6, #0]
 8003e98:	0028      	movs	r0, r5
 8003e9a:	f000 f82d 	bl	8003ef8 <__malloc_unlock>
 8003e9e:	0020      	movs	r0, r4
 8003ea0:	2207      	movs	r2, #7
 8003ea2:	300b      	adds	r0, #11
 8003ea4:	1d23      	adds	r3, r4, #4
 8003ea6:	4390      	bics	r0, r2
 8003ea8:	1ac2      	subs	r2, r0, r3
 8003eaa:	4298      	cmp	r0, r3
 8003eac:	d0df      	beq.n	8003e6e <_malloc_r+0x86>
 8003eae:	1a1b      	subs	r3, r3, r0
 8003eb0:	50a3      	str	r3, [r4, r2]
 8003eb2:	e7dc      	b.n	8003e6e <_malloc_r+0x86>
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	e7ef      	b.n	8003e98 <_malloc_r+0xb0>
 8003eb8:	0023      	movs	r3, r4
 8003eba:	6864      	ldr	r4, [r4, #4]
 8003ebc:	e7a6      	b.n	8003e0c <_malloc_r+0x24>
 8003ebe:	9c00      	ldr	r4, [sp, #0]
 8003ec0:	6863      	ldr	r3, [r4, #4]
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	e7ad      	b.n	8003e22 <_malloc_r+0x3a>
 8003ec6:	001a      	movs	r2, r3
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	42a3      	cmp	r3, r4
 8003ecc:	d1fb      	bne.n	8003ec6 <_malloc_r+0xde>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e7da      	b.n	8003e88 <_malloc_r+0xa0>
 8003ed2:	230c      	movs	r3, #12
 8003ed4:	0028      	movs	r0, r5
 8003ed6:	602b      	str	r3, [r5, #0]
 8003ed8:	f000 f80e 	bl	8003ef8 <__malloc_unlock>
 8003edc:	e7c6      	b.n	8003e6c <_malloc_r+0x84>
 8003ede:	6007      	str	r7, [r0, #0]
 8003ee0:	e7da      	b.n	8003e98 <_malloc_r+0xb0>
 8003ee2:	46c0      	nop			@ (mov r8, r8)
 8003ee4:	200001ac 	.word	0x200001ac

08003ee8 <__malloc_lock>:
 8003ee8:	b510      	push	{r4, lr}
 8003eea:	4802      	ldr	r0, [pc, #8]	@ (8003ef4 <__malloc_lock+0xc>)
 8003eec:	f000 f850 	bl	8003f90 <__retarget_lock_acquire_recursive>
 8003ef0:	bd10      	pop	{r4, pc}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	200002ec 	.word	0x200002ec

08003ef8 <__malloc_unlock>:
 8003ef8:	b510      	push	{r4, lr}
 8003efa:	4802      	ldr	r0, [pc, #8]	@ (8003f04 <__malloc_unlock+0xc>)
 8003efc:	f000 f849 	bl	8003f92 <__retarget_lock_release_recursive>
 8003f00:	bd10      	pop	{r4, pc}
 8003f02:	46c0      	nop			@ (mov r8, r8)
 8003f04:	200002ec 	.word	0x200002ec

08003f08 <memset>:
 8003f08:	0003      	movs	r3, r0
 8003f0a:	1882      	adds	r2, r0, r2
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d100      	bne.n	8003f12 <memset+0xa>
 8003f10:	4770      	bx	lr
 8003f12:	7019      	strb	r1, [r3, #0]
 8003f14:	3301      	adds	r3, #1
 8003f16:	e7f9      	b.n	8003f0c <memset+0x4>

08003f18 <_sbrk_r>:
 8003f18:	2300      	movs	r3, #0
 8003f1a:	b570      	push	{r4, r5, r6, lr}
 8003f1c:	4d06      	ldr	r5, [pc, #24]	@ (8003f38 <_sbrk_r+0x20>)
 8003f1e:	0004      	movs	r4, r0
 8003f20:	0008      	movs	r0, r1
 8003f22:	602b      	str	r3, [r5, #0]
 8003f24:	f7fd fd8e 	bl	8001a44 <_sbrk>
 8003f28:	1c43      	adds	r3, r0, #1
 8003f2a:	d103      	bne.n	8003f34 <_sbrk_r+0x1c>
 8003f2c:	682b      	ldr	r3, [r5, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d000      	beq.n	8003f34 <_sbrk_r+0x1c>
 8003f32:	6023      	str	r3, [r4, #0]
 8003f34:	bd70      	pop	{r4, r5, r6, pc}
 8003f36:	46c0      	nop			@ (mov r8, r8)
 8003f38:	200002e8 	.word	0x200002e8

08003f3c <__errno>:
 8003f3c:	4b01      	ldr	r3, [pc, #4]	@ (8003f44 <__errno+0x8>)
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	4770      	bx	lr
 8003f42:	46c0      	nop			@ (mov r8, r8)
 8003f44:	20000014 	.word	0x20000014

08003f48 <__libc_init_array>:
 8003f48:	b570      	push	{r4, r5, r6, lr}
 8003f4a:	2600      	movs	r6, #0
 8003f4c:	4c0c      	ldr	r4, [pc, #48]	@ (8003f80 <__libc_init_array+0x38>)
 8003f4e:	4d0d      	ldr	r5, [pc, #52]	@ (8003f84 <__libc_init_array+0x3c>)
 8003f50:	1b64      	subs	r4, r4, r5
 8003f52:	10a4      	asrs	r4, r4, #2
 8003f54:	42a6      	cmp	r6, r4
 8003f56:	d109      	bne.n	8003f6c <__libc_init_array+0x24>
 8003f58:	2600      	movs	r6, #0
 8003f5a:	f000 f865 	bl	8004028 <_init>
 8003f5e:	4c0a      	ldr	r4, [pc, #40]	@ (8003f88 <__libc_init_array+0x40>)
 8003f60:	4d0a      	ldr	r5, [pc, #40]	@ (8003f8c <__libc_init_array+0x44>)
 8003f62:	1b64      	subs	r4, r4, r5
 8003f64:	10a4      	asrs	r4, r4, #2
 8003f66:	42a6      	cmp	r6, r4
 8003f68:	d105      	bne.n	8003f76 <__libc_init_array+0x2e>
 8003f6a:	bd70      	pop	{r4, r5, r6, pc}
 8003f6c:	00b3      	lsls	r3, r6, #2
 8003f6e:	58eb      	ldr	r3, [r5, r3]
 8003f70:	4798      	blx	r3
 8003f72:	3601      	adds	r6, #1
 8003f74:	e7ee      	b.n	8003f54 <__libc_init_array+0xc>
 8003f76:	00b3      	lsls	r3, r6, #2
 8003f78:	58eb      	ldr	r3, [r5, r3]
 8003f7a:	4798      	blx	r3
 8003f7c:	3601      	adds	r6, #1
 8003f7e:	e7f2      	b.n	8003f66 <__libc_init_array+0x1e>
 8003f80:	080040bc 	.word	0x080040bc
 8003f84:	080040bc 	.word	0x080040bc
 8003f88:	080040c0 	.word	0x080040c0
 8003f8c:	080040bc 	.word	0x080040bc

08003f90 <__retarget_lock_acquire_recursive>:
 8003f90:	4770      	bx	lr

08003f92 <__retarget_lock_release_recursive>:
 8003f92:	4770      	bx	lr

08003f94 <_free_r>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	0005      	movs	r5, r0
 8003f98:	1e0c      	subs	r4, r1, #0
 8003f9a:	d010      	beq.n	8003fbe <_free_r+0x2a>
 8003f9c:	3c04      	subs	r4, #4
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	da00      	bge.n	8003fa6 <_free_r+0x12>
 8003fa4:	18e4      	adds	r4, r4, r3
 8003fa6:	0028      	movs	r0, r5
 8003fa8:	f7ff ff9e 	bl	8003ee8 <__malloc_lock>
 8003fac:	4a1d      	ldr	r2, [pc, #116]	@ (8004024 <_free_r+0x90>)
 8003fae:	6813      	ldr	r3, [r2, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d105      	bne.n	8003fc0 <_free_r+0x2c>
 8003fb4:	6063      	str	r3, [r4, #4]
 8003fb6:	6014      	str	r4, [r2, #0]
 8003fb8:	0028      	movs	r0, r5
 8003fba:	f7ff ff9d 	bl	8003ef8 <__malloc_unlock>
 8003fbe:	bd70      	pop	{r4, r5, r6, pc}
 8003fc0:	42a3      	cmp	r3, r4
 8003fc2:	d908      	bls.n	8003fd6 <_free_r+0x42>
 8003fc4:	6820      	ldr	r0, [r4, #0]
 8003fc6:	1821      	adds	r1, r4, r0
 8003fc8:	428b      	cmp	r3, r1
 8003fca:	d1f3      	bne.n	8003fb4 <_free_r+0x20>
 8003fcc:	6819      	ldr	r1, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	1809      	adds	r1, r1, r0
 8003fd2:	6021      	str	r1, [r4, #0]
 8003fd4:	e7ee      	b.n	8003fb4 <_free_r+0x20>
 8003fd6:	001a      	movs	r2, r3
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <_free_r+0x4e>
 8003fde:	42a3      	cmp	r3, r4
 8003fe0:	d9f9      	bls.n	8003fd6 <_free_r+0x42>
 8003fe2:	6811      	ldr	r1, [r2, #0]
 8003fe4:	1850      	adds	r0, r2, r1
 8003fe6:	42a0      	cmp	r0, r4
 8003fe8:	d10b      	bne.n	8004002 <_free_r+0x6e>
 8003fea:	6820      	ldr	r0, [r4, #0]
 8003fec:	1809      	adds	r1, r1, r0
 8003fee:	1850      	adds	r0, r2, r1
 8003ff0:	6011      	str	r1, [r2, #0]
 8003ff2:	4283      	cmp	r3, r0
 8003ff4:	d1e0      	bne.n	8003fb8 <_free_r+0x24>
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	1841      	adds	r1, r0, r1
 8003ffc:	6011      	str	r1, [r2, #0]
 8003ffe:	6053      	str	r3, [r2, #4]
 8004000:	e7da      	b.n	8003fb8 <_free_r+0x24>
 8004002:	42a0      	cmp	r0, r4
 8004004:	d902      	bls.n	800400c <_free_r+0x78>
 8004006:	230c      	movs	r3, #12
 8004008:	602b      	str	r3, [r5, #0]
 800400a:	e7d5      	b.n	8003fb8 <_free_r+0x24>
 800400c:	6820      	ldr	r0, [r4, #0]
 800400e:	1821      	adds	r1, r4, r0
 8004010:	428b      	cmp	r3, r1
 8004012:	d103      	bne.n	800401c <_free_r+0x88>
 8004014:	6819      	ldr	r1, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	1809      	adds	r1, r1, r0
 800401a:	6021      	str	r1, [r4, #0]
 800401c:	6063      	str	r3, [r4, #4]
 800401e:	6054      	str	r4, [r2, #4]
 8004020:	e7ca      	b.n	8003fb8 <_free_r+0x24>
 8004022:	46c0      	nop			@ (mov r8, r8)
 8004024:	200001ac 	.word	0x200001ac

08004028 <_init>:
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	46c0      	nop			@ (mov r8, r8)
 800402c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402e:	bc08      	pop	{r3}
 8004030:	469e      	mov	lr, r3
 8004032:	4770      	bx	lr

08004034 <_fini>:
 8004034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004036:	46c0      	nop			@ (mov r8, r8)
 8004038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800403a:	bc08      	pop	{r3}
 800403c:	469e      	mov	lr, r3
 800403e:	4770      	bx	lr
