
T37STM32FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004484  08004484  00005484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004564  08004564  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004564  08004564  00006068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004564  08004564  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004564  08004564  00005564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004568  08004568  00005568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800456c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000068  080045d4  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  080045d4  000062ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a64c  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002024  00000000  00000000  000106dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  00012700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000681  00000000  00000000  00012f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020a1  00000000  00000000  00013609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b2c6  00000000  00000000  000156aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089f4f  00000000  00000000  00020970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa8bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002144  00000000  00000000  000aa904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000aca48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800446c 	.word	0x0800446c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800446c 	.word	0x0800446c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	@ 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 fd36 	bl	8000c98 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fce1 	bl	8000bf8 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	@ 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 fa77 	bl	8000730 <__aeabi_fsub>
 8000242:	f000 fcd9 	bl	8000bf8 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	@ 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fdiv>:
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	4646      	mov	r6, r8
 8000254:	464f      	mov	r7, r9
 8000256:	46d6      	mov	lr, sl
 8000258:	0245      	lsls	r5, r0, #9
 800025a:	b5c0      	push	{r6, r7, lr}
 800025c:	0fc3      	lsrs	r3, r0, #31
 800025e:	0047      	lsls	r7, r0, #1
 8000260:	4698      	mov	r8, r3
 8000262:	1c0e      	adds	r6, r1, #0
 8000264:	0a6d      	lsrs	r5, r5, #9
 8000266:	0e3f      	lsrs	r7, r7, #24
 8000268:	d05b      	beq.n	8000322 <__aeabi_fdiv+0xd2>
 800026a:	2fff      	cmp	r7, #255	@ 0xff
 800026c:	d021      	beq.n	80002b2 <__aeabi_fdiv+0x62>
 800026e:	2380      	movs	r3, #128	@ 0x80
 8000270:	00ed      	lsls	r5, r5, #3
 8000272:	04db      	lsls	r3, r3, #19
 8000274:	431d      	orrs	r5, r3
 8000276:	2300      	movs	r3, #0
 8000278:	4699      	mov	r9, r3
 800027a:	469a      	mov	sl, r3
 800027c:	3f7f      	subs	r7, #127	@ 0x7f
 800027e:	0274      	lsls	r4, r6, #9
 8000280:	0073      	lsls	r3, r6, #1
 8000282:	0a64      	lsrs	r4, r4, #9
 8000284:	0e1b      	lsrs	r3, r3, #24
 8000286:	0ff6      	lsrs	r6, r6, #31
 8000288:	2b00      	cmp	r3, #0
 800028a:	d020      	beq.n	80002ce <__aeabi_fdiv+0x7e>
 800028c:	2bff      	cmp	r3, #255	@ 0xff
 800028e:	d043      	beq.n	8000318 <__aeabi_fdiv+0xc8>
 8000290:	2280      	movs	r2, #128	@ 0x80
 8000292:	2000      	movs	r0, #0
 8000294:	00e4      	lsls	r4, r4, #3
 8000296:	04d2      	lsls	r2, r2, #19
 8000298:	4314      	orrs	r4, r2
 800029a:	3b7f      	subs	r3, #127	@ 0x7f
 800029c:	4642      	mov	r2, r8
 800029e:	1aff      	subs	r7, r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4072      	eors	r2, r6
 80002a4:	2b0f      	cmp	r3, #15
 80002a6:	d900      	bls.n	80002aa <__aeabi_fdiv+0x5a>
 80002a8:	e09d      	b.n	80003e6 <__aeabi_fdiv+0x196>
 80002aa:	4971      	ldr	r1, [pc, #452]	@ (8000470 <__aeabi_fdiv+0x220>)
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	58cb      	ldr	r3, [r1, r3]
 80002b0:	469f      	mov	pc, r3
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	d15a      	bne.n	800036c <__aeabi_fdiv+0x11c>
 80002b6:	2308      	movs	r3, #8
 80002b8:	4699      	mov	r9, r3
 80002ba:	3b06      	subs	r3, #6
 80002bc:	0274      	lsls	r4, r6, #9
 80002be:	469a      	mov	sl, r3
 80002c0:	0073      	lsls	r3, r6, #1
 80002c2:	27ff      	movs	r7, #255	@ 0xff
 80002c4:	0a64      	lsrs	r4, r4, #9
 80002c6:	0e1b      	lsrs	r3, r3, #24
 80002c8:	0ff6      	lsrs	r6, r6, #31
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d1de      	bne.n	800028c <__aeabi_fdiv+0x3c>
 80002ce:	2c00      	cmp	r4, #0
 80002d0:	d13b      	bne.n	800034a <__aeabi_fdiv+0xfa>
 80002d2:	2301      	movs	r3, #1
 80002d4:	4642      	mov	r2, r8
 80002d6:	4649      	mov	r1, r9
 80002d8:	4072      	eors	r2, r6
 80002da:	4319      	orrs	r1, r3
 80002dc:	290e      	cmp	r1, #14
 80002de:	d818      	bhi.n	8000312 <__aeabi_fdiv+0xc2>
 80002e0:	4864      	ldr	r0, [pc, #400]	@ (8000474 <__aeabi_fdiv+0x224>)
 80002e2:	0089      	lsls	r1, r1, #2
 80002e4:	5841      	ldr	r1, [r0, r1]
 80002e6:	468f      	mov	pc, r1
 80002e8:	4653      	mov	r3, sl
 80002ea:	2b02      	cmp	r3, #2
 80002ec:	d100      	bne.n	80002f0 <__aeabi_fdiv+0xa0>
 80002ee:	e0b8      	b.n	8000462 <__aeabi_fdiv+0x212>
 80002f0:	2b03      	cmp	r3, #3
 80002f2:	d06e      	beq.n	80003d2 <__aeabi_fdiv+0x182>
 80002f4:	4642      	mov	r2, r8
 80002f6:	002c      	movs	r4, r5
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d140      	bne.n	800037e <__aeabi_fdiv+0x12e>
 80002fc:	2000      	movs	r0, #0
 80002fe:	2400      	movs	r4, #0
 8000300:	05c0      	lsls	r0, r0, #23
 8000302:	4320      	orrs	r0, r4
 8000304:	07d2      	lsls	r2, r2, #31
 8000306:	4310      	orrs	r0, r2
 8000308:	bce0      	pop	{r5, r6, r7}
 800030a:	46ba      	mov	sl, r7
 800030c:	46b1      	mov	r9, r6
 800030e:	46a8      	mov	r8, r5
 8000310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000312:	20ff      	movs	r0, #255	@ 0xff
 8000314:	2400      	movs	r4, #0
 8000316:	e7f3      	b.n	8000300 <__aeabi_fdiv+0xb0>
 8000318:	2c00      	cmp	r4, #0
 800031a:	d120      	bne.n	800035e <__aeabi_fdiv+0x10e>
 800031c:	2302      	movs	r3, #2
 800031e:	3fff      	subs	r7, #255	@ 0xff
 8000320:	e7d8      	b.n	80002d4 <__aeabi_fdiv+0x84>
 8000322:	2d00      	cmp	r5, #0
 8000324:	d105      	bne.n	8000332 <__aeabi_fdiv+0xe2>
 8000326:	2304      	movs	r3, #4
 8000328:	4699      	mov	r9, r3
 800032a:	3b03      	subs	r3, #3
 800032c:	2700      	movs	r7, #0
 800032e:	469a      	mov	sl, r3
 8000330:	e7a5      	b.n	800027e <__aeabi_fdiv+0x2e>
 8000332:	0028      	movs	r0, r5
 8000334:	f000 fcba 	bl	8000cac <__clzsi2>
 8000338:	2776      	movs	r7, #118	@ 0x76
 800033a:	1f43      	subs	r3, r0, #5
 800033c:	409d      	lsls	r5, r3
 800033e:	2300      	movs	r3, #0
 8000340:	427f      	negs	r7, r7
 8000342:	4699      	mov	r9, r3
 8000344:	469a      	mov	sl, r3
 8000346:	1a3f      	subs	r7, r7, r0
 8000348:	e799      	b.n	800027e <__aeabi_fdiv+0x2e>
 800034a:	0020      	movs	r0, r4
 800034c:	f000 fcae 	bl	8000cac <__clzsi2>
 8000350:	1f43      	subs	r3, r0, #5
 8000352:	409c      	lsls	r4, r3
 8000354:	2376      	movs	r3, #118	@ 0x76
 8000356:	425b      	negs	r3, r3
 8000358:	1a1b      	subs	r3, r3, r0
 800035a:	2000      	movs	r0, #0
 800035c:	e79e      	b.n	800029c <__aeabi_fdiv+0x4c>
 800035e:	2303      	movs	r3, #3
 8000360:	464a      	mov	r2, r9
 8000362:	431a      	orrs	r2, r3
 8000364:	4691      	mov	r9, r2
 8000366:	2003      	movs	r0, #3
 8000368:	33fc      	adds	r3, #252	@ 0xfc
 800036a:	e797      	b.n	800029c <__aeabi_fdiv+0x4c>
 800036c:	230c      	movs	r3, #12
 800036e:	4699      	mov	r9, r3
 8000370:	3b09      	subs	r3, #9
 8000372:	27ff      	movs	r7, #255	@ 0xff
 8000374:	469a      	mov	sl, r3
 8000376:	e782      	b.n	800027e <__aeabi_fdiv+0x2e>
 8000378:	2803      	cmp	r0, #3
 800037a:	d02c      	beq.n	80003d6 <__aeabi_fdiv+0x186>
 800037c:	0032      	movs	r2, r6
 800037e:	0038      	movs	r0, r7
 8000380:	307f      	adds	r0, #127	@ 0x7f
 8000382:	2800      	cmp	r0, #0
 8000384:	dd47      	ble.n	8000416 <__aeabi_fdiv+0x1c6>
 8000386:	0763      	lsls	r3, r4, #29
 8000388:	d004      	beq.n	8000394 <__aeabi_fdiv+0x144>
 800038a:	230f      	movs	r3, #15
 800038c:	4023      	ands	r3, r4
 800038e:	2b04      	cmp	r3, #4
 8000390:	d000      	beq.n	8000394 <__aeabi_fdiv+0x144>
 8000392:	3404      	adds	r4, #4
 8000394:	0123      	lsls	r3, r4, #4
 8000396:	d503      	bpl.n	80003a0 <__aeabi_fdiv+0x150>
 8000398:	0038      	movs	r0, r7
 800039a:	4b37      	ldr	r3, [pc, #220]	@ (8000478 <__aeabi_fdiv+0x228>)
 800039c:	3080      	adds	r0, #128	@ 0x80
 800039e:	401c      	ands	r4, r3
 80003a0:	28fe      	cmp	r0, #254	@ 0xfe
 80003a2:	dcb6      	bgt.n	8000312 <__aeabi_fdiv+0xc2>
 80003a4:	01a4      	lsls	r4, r4, #6
 80003a6:	0a64      	lsrs	r4, r4, #9
 80003a8:	b2c0      	uxtb	r0, r0
 80003aa:	e7a9      	b.n	8000300 <__aeabi_fdiv+0xb0>
 80003ac:	2480      	movs	r4, #128	@ 0x80
 80003ae:	2200      	movs	r2, #0
 80003b0:	20ff      	movs	r0, #255	@ 0xff
 80003b2:	03e4      	lsls	r4, r4, #15
 80003b4:	e7a4      	b.n	8000300 <__aeabi_fdiv+0xb0>
 80003b6:	2380      	movs	r3, #128	@ 0x80
 80003b8:	03db      	lsls	r3, r3, #15
 80003ba:	421d      	tst	r5, r3
 80003bc:	d001      	beq.n	80003c2 <__aeabi_fdiv+0x172>
 80003be:	421c      	tst	r4, r3
 80003c0:	d00b      	beq.n	80003da <__aeabi_fdiv+0x18a>
 80003c2:	2480      	movs	r4, #128	@ 0x80
 80003c4:	03e4      	lsls	r4, r4, #15
 80003c6:	432c      	orrs	r4, r5
 80003c8:	0264      	lsls	r4, r4, #9
 80003ca:	4642      	mov	r2, r8
 80003cc:	20ff      	movs	r0, #255	@ 0xff
 80003ce:	0a64      	lsrs	r4, r4, #9
 80003d0:	e796      	b.n	8000300 <__aeabi_fdiv+0xb0>
 80003d2:	4646      	mov	r6, r8
 80003d4:	002c      	movs	r4, r5
 80003d6:	2380      	movs	r3, #128	@ 0x80
 80003d8:	03db      	lsls	r3, r3, #15
 80003da:	431c      	orrs	r4, r3
 80003dc:	0264      	lsls	r4, r4, #9
 80003de:	0032      	movs	r2, r6
 80003e0:	20ff      	movs	r0, #255	@ 0xff
 80003e2:	0a64      	lsrs	r4, r4, #9
 80003e4:	e78c      	b.n	8000300 <__aeabi_fdiv+0xb0>
 80003e6:	016d      	lsls	r5, r5, #5
 80003e8:	0160      	lsls	r0, r4, #5
 80003ea:	4285      	cmp	r5, r0
 80003ec:	d22d      	bcs.n	800044a <__aeabi_fdiv+0x1fa>
 80003ee:	231b      	movs	r3, #27
 80003f0:	2400      	movs	r4, #0
 80003f2:	3f01      	subs	r7, #1
 80003f4:	2601      	movs	r6, #1
 80003f6:	0029      	movs	r1, r5
 80003f8:	0064      	lsls	r4, r4, #1
 80003fa:	006d      	lsls	r5, r5, #1
 80003fc:	2900      	cmp	r1, #0
 80003fe:	db01      	blt.n	8000404 <__aeabi_fdiv+0x1b4>
 8000400:	4285      	cmp	r5, r0
 8000402:	d301      	bcc.n	8000408 <__aeabi_fdiv+0x1b8>
 8000404:	1a2d      	subs	r5, r5, r0
 8000406:	4334      	orrs	r4, r6
 8000408:	3b01      	subs	r3, #1
 800040a:	2b00      	cmp	r3, #0
 800040c:	d1f3      	bne.n	80003f6 <__aeabi_fdiv+0x1a6>
 800040e:	1e6b      	subs	r3, r5, #1
 8000410:	419d      	sbcs	r5, r3
 8000412:	432c      	orrs	r4, r5
 8000414:	e7b3      	b.n	800037e <__aeabi_fdiv+0x12e>
 8000416:	2301      	movs	r3, #1
 8000418:	1a1b      	subs	r3, r3, r0
 800041a:	2b1b      	cmp	r3, #27
 800041c:	dd00      	ble.n	8000420 <__aeabi_fdiv+0x1d0>
 800041e:	e76d      	b.n	80002fc <__aeabi_fdiv+0xac>
 8000420:	0021      	movs	r1, r4
 8000422:	379e      	adds	r7, #158	@ 0x9e
 8000424:	40d9      	lsrs	r1, r3
 8000426:	40bc      	lsls	r4, r7
 8000428:	000b      	movs	r3, r1
 800042a:	1e61      	subs	r1, r4, #1
 800042c:	418c      	sbcs	r4, r1
 800042e:	4323      	orrs	r3, r4
 8000430:	0759      	lsls	r1, r3, #29
 8000432:	d004      	beq.n	800043e <__aeabi_fdiv+0x1ee>
 8000434:	210f      	movs	r1, #15
 8000436:	4019      	ands	r1, r3
 8000438:	2904      	cmp	r1, #4
 800043a:	d000      	beq.n	800043e <__aeabi_fdiv+0x1ee>
 800043c:	3304      	adds	r3, #4
 800043e:	0159      	lsls	r1, r3, #5
 8000440:	d413      	bmi.n	800046a <__aeabi_fdiv+0x21a>
 8000442:	019b      	lsls	r3, r3, #6
 8000444:	2000      	movs	r0, #0
 8000446:	0a5c      	lsrs	r4, r3, #9
 8000448:	e75a      	b.n	8000300 <__aeabi_fdiv+0xb0>
 800044a:	231a      	movs	r3, #26
 800044c:	2401      	movs	r4, #1
 800044e:	1a2d      	subs	r5, r5, r0
 8000450:	e7d0      	b.n	80003f4 <__aeabi_fdiv+0x1a4>
 8000452:	1e98      	subs	r0, r3, #2
 8000454:	4243      	negs	r3, r0
 8000456:	4158      	adcs	r0, r3
 8000458:	4240      	negs	r0, r0
 800045a:	0032      	movs	r2, r6
 800045c:	2400      	movs	r4, #0
 800045e:	b2c0      	uxtb	r0, r0
 8000460:	e74e      	b.n	8000300 <__aeabi_fdiv+0xb0>
 8000462:	4642      	mov	r2, r8
 8000464:	20ff      	movs	r0, #255	@ 0xff
 8000466:	2400      	movs	r4, #0
 8000468:	e74a      	b.n	8000300 <__aeabi_fdiv+0xb0>
 800046a:	2001      	movs	r0, #1
 800046c:	2400      	movs	r4, #0
 800046e:	e747      	b.n	8000300 <__aeabi_fdiv+0xb0>
 8000470:	08004484 	.word	0x08004484
 8000474:	080044c4 	.word	0x080044c4
 8000478:	f7ffffff 	.word	0xf7ffffff

0800047c <__aeabi_fmul>:
 800047c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800047e:	464f      	mov	r7, r9
 8000480:	4646      	mov	r6, r8
 8000482:	46d6      	mov	lr, sl
 8000484:	0044      	lsls	r4, r0, #1
 8000486:	b5c0      	push	{r6, r7, lr}
 8000488:	0246      	lsls	r6, r0, #9
 800048a:	1c0f      	adds	r7, r1, #0
 800048c:	0a76      	lsrs	r6, r6, #9
 800048e:	0e24      	lsrs	r4, r4, #24
 8000490:	0fc5      	lsrs	r5, r0, #31
 8000492:	2c00      	cmp	r4, #0
 8000494:	d100      	bne.n	8000498 <__aeabi_fmul+0x1c>
 8000496:	e0da      	b.n	800064e <__aeabi_fmul+0x1d2>
 8000498:	2cff      	cmp	r4, #255	@ 0xff
 800049a:	d074      	beq.n	8000586 <__aeabi_fmul+0x10a>
 800049c:	2380      	movs	r3, #128	@ 0x80
 800049e:	00f6      	lsls	r6, r6, #3
 80004a0:	04db      	lsls	r3, r3, #19
 80004a2:	431e      	orrs	r6, r3
 80004a4:	2300      	movs	r3, #0
 80004a6:	4699      	mov	r9, r3
 80004a8:	469a      	mov	sl, r3
 80004aa:	3c7f      	subs	r4, #127	@ 0x7f
 80004ac:	027b      	lsls	r3, r7, #9
 80004ae:	0a5b      	lsrs	r3, r3, #9
 80004b0:	4698      	mov	r8, r3
 80004b2:	007b      	lsls	r3, r7, #1
 80004b4:	0e1b      	lsrs	r3, r3, #24
 80004b6:	0fff      	lsrs	r7, r7, #31
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d074      	beq.n	80005a6 <__aeabi_fmul+0x12a>
 80004bc:	2bff      	cmp	r3, #255	@ 0xff
 80004be:	d100      	bne.n	80004c2 <__aeabi_fmul+0x46>
 80004c0:	e08e      	b.n	80005e0 <__aeabi_fmul+0x164>
 80004c2:	4642      	mov	r2, r8
 80004c4:	2180      	movs	r1, #128	@ 0x80
 80004c6:	00d2      	lsls	r2, r2, #3
 80004c8:	04c9      	lsls	r1, r1, #19
 80004ca:	4311      	orrs	r1, r2
 80004cc:	3b7f      	subs	r3, #127	@ 0x7f
 80004ce:	002a      	movs	r2, r5
 80004d0:	18e4      	adds	r4, r4, r3
 80004d2:	464b      	mov	r3, r9
 80004d4:	407a      	eors	r2, r7
 80004d6:	4688      	mov	r8, r1
 80004d8:	b2d2      	uxtb	r2, r2
 80004da:	2b0a      	cmp	r3, #10
 80004dc:	dc75      	bgt.n	80005ca <__aeabi_fmul+0x14e>
 80004de:	464b      	mov	r3, r9
 80004e0:	2000      	movs	r0, #0
 80004e2:	2b02      	cmp	r3, #2
 80004e4:	dd0f      	ble.n	8000506 <__aeabi_fmul+0x8a>
 80004e6:	4649      	mov	r1, r9
 80004e8:	2301      	movs	r3, #1
 80004ea:	408b      	lsls	r3, r1
 80004ec:	21a6      	movs	r1, #166	@ 0xa6
 80004ee:	00c9      	lsls	r1, r1, #3
 80004f0:	420b      	tst	r3, r1
 80004f2:	d169      	bne.n	80005c8 <__aeabi_fmul+0x14c>
 80004f4:	2190      	movs	r1, #144	@ 0x90
 80004f6:	0089      	lsls	r1, r1, #2
 80004f8:	420b      	tst	r3, r1
 80004fa:	d000      	beq.n	80004fe <__aeabi_fmul+0x82>
 80004fc:	e100      	b.n	8000700 <__aeabi_fmul+0x284>
 80004fe:	2188      	movs	r1, #136	@ 0x88
 8000500:	4219      	tst	r1, r3
 8000502:	d000      	beq.n	8000506 <__aeabi_fmul+0x8a>
 8000504:	e0f5      	b.n	80006f2 <__aeabi_fmul+0x276>
 8000506:	4641      	mov	r1, r8
 8000508:	0409      	lsls	r1, r1, #16
 800050a:	0c09      	lsrs	r1, r1, #16
 800050c:	4643      	mov	r3, r8
 800050e:	0008      	movs	r0, r1
 8000510:	0c35      	lsrs	r5, r6, #16
 8000512:	0436      	lsls	r6, r6, #16
 8000514:	0c1b      	lsrs	r3, r3, #16
 8000516:	0c36      	lsrs	r6, r6, #16
 8000518:	4370      	muls	r0, r6
 800051a:	4369      	muls	r1, r5
 800051c:	435e      	muls	r6, r3
 800051e:	435d      	muls	r5, r3
 8000520:	1876      	adds	r6, r6, r1
 8000522:	0c03      	lsrs	r3, r0, #16
 8000524:	199b      	adds	r3, r3, r6
 8000526:	4299      	cmp	r1, r3
 8000528:	d903      	bls.n	8000532 <__aeabi_fmul+0xb6>
 800052a:	2180      	movs	r1, #128	@ 0x80
 800052c:	0249      	lsls	r1, r1, #9
 800052e:	468c      	mov	ip, r1
 8000530:	4465      	add	r5, ip
 8000532:	0400      	lsls	r0, r0, #16
 8000534:	0419      	lsls	r1, r3, #16
 8000536:	0c00      	lsrs	r0, r0, #16
 8000538:	1809      	adds	r1, r1, r0
 800053a:	018e      	lsls	r6, r1, #6
 800053c:	1e70      	subs	r0, r6, #1
 800053e:	4186      	sbcs	r6, r0
 8000540:	0c1b      	lsrs	r3, r3, #16
 8000542:	0e89      	lsrs	r1, r1, #26
 8000544:	195b      	adds	r3, r3, r5
 8000546:	430e      	orrs	r6, r1
 8000548:	019b      	lsls	r3, r3, #6
 800054a:	431e      	orrs	r6, r3
 800054c:	011b      	lsls	r3, r3, #4
 800054e:	d46c      	bmi.n	800062a <__aeabi_fmul+0x1ae>
 8000550:	0023      	movs	r3, r4
 8000552:	337f      	adds	r3, #127	@ 0x7f
 8000554:	2b00      	cmp	r3, #0
 8000556:	dc00      	bgt.n	800055a <__aeabi_fmul+0xde>
 8000558:	e0b1      	b.n	80006be <__aeabi_fmul+0x242>
 800055a:	0015      	movs	r5, r2
 800055c:	0771      	lsls	r1, r6, #29
 800055e:	d00b      	beq.n	8000578 <__aeabi_fmul+0xfc>
 8000560:	200f      	movs	r0, #15
 8000562:	0021      	movs	r1, r4
 8000564:	4030      	ands	r0, r6
 8000566:	2804      	cmp	r0, #4
 8000568:	d006      	beq.n	8000578 <__aeabi_fmul+0xfc>
 800056a:	3604      	adds	r6, #4
 800056c:	0132      	lsls	r2, r6, #4
 800056e:	d503      	bpl.n	8000578 <__aeabi_fmul+0xfc>
 8000570:	4b6e      	ldr	r3, [pc, #440]	@ (800072c <__aeabi_fmul+0x2b0>)
 8000572:	401e      	ands	r6, r3
 8000574:	000b      	movs	r3, r1
 8000576:	3380      	adds	r3, #128	@ 0x80
 8000578:	2bfe      	cmp	r3, #254	@ 0xfe
 800057a:	dd00      	ble.n	800057e <__aeabi_fmul+0x102>
 800057c:	e0bd      	b.n	80006fa <__aeabi_fmul+0x27e>
 800057e:	01b2      	lsls	r2, r6, #6
 8000580:	0a52      	lsrs	r2, r2, #9
 8000582:	b2db      	uxtb	r3, r3
 8000584:	e048      	b.n	8000618 <__aeabi_fmul+0x19c>
 8000586:	2e00      	cmp	r6, #0
 8000588:	d000      	beq.n	800058c <__aeabi_fmul+0x110>
 800058a:	e092      	b.n	80006b2 <__aeabi_fmul+0x236>
 800058c:	2308      	movs	r3, #8
 800058e:	4699      	mov	r9, r3
 8000590:	3b06      	subs	r3, #6
 8000592:	469a      	mov	sl, r3
 8000594:	027b      	lsls	r3, r7, #9
 8000596:	0a5b      	lsrs	r3, r3, #9
 8000598:	4698      	mov	r8, r3
 800059a:	007b      	lsls	r3, r7, #1
 800059c:	24ff      	movs	r4, #255	@ 0xff
 800059e:	0e1b      	lsrs	r3, r3, #24
 80005a0:	0fff      	lsrs	r7, r7, #31
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d18a      	bne.n	80004bc <__aeabi_fmul+0x40>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2a00      	cmp	r2, #0
 80005aa:	d164      	bne.n	8000676 <__aeabi_fmul+0x1fa>
 80005ac:	4649      	mov	r1, r9
 80005ae:	3201      	adds	r2, #1
 80005b0:	4311      	orrs	r1, r2
 80005b2:	4689      	mov	r9, r1
 80005b4:	290a      	cmp	r1, #10
 80005b6:	dc08      	bgt.n	80005ca <__aeabi_fmul+0x14e>
 80005b8:	407d      	eors	r5, r7
 80005ba:	2001      	movs	r0, #1
 80005bc:	b2ea      	uxtb	r2, r5
 80005be:	2902      	cmp	r1, #2
 80005c0:	dc91      	bgt.n	80004e6 <__aeabi_fmul+0x6a>
 80005c2:	0015      	movs	r5, r2
 80005c4:	2200      	movs	r2, #0
 80005c6:	e027      	b.n	8000618 <__aeabi_fmul+0x19c>
 80005c8:	0015      	movs	r5, r2
 80005ca:	4653      	mov	r3, sl
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d100      	bne.n	80005d2 <__aeabi_fmul+0x156>
 80005d0:	e093      	b.n	80006fa <__aeabi_fmul+0x27e>
 80005d2:	2b03      	cmp	r3, #3
 80005d4:	d01a      	beq.n	800060c <__aeabi_fmul+0x190>
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d12c      	bne.n	8000634 <__aeabi_fmul+0x1b8>
 80005da:	2300      	movs	r3, #0
 80005dc:	2200      	movs	r2, #0
 80005de:	e01b      	b.n	8000618 <__aeabi_fmul+0x19c>
 80005e0:	4643      	mov	r3, r8
 80005e2:	34ff      	adds	r4, #255	@ 0xff
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d055      	beq.n	8000694 <__aeabi_fmul+0x218>
 80005e8:	2103      	movs	r1, #3
 80005ea:	464b      	mov	r3, r9
 80005ec:	430b      	orrs	r3, r1
 80005ee:	0019      	movs	r1, r3
 80005f0:	2b0a      	cmp	r3, #10
 80005f2:	dc00      	bgt.n	80005f6 <__aeabi_fmul+0x17a>
 80005f4:	e092      	b.n	800071c <__aeabi_fmul+0x2a0>
 80005f6:	2b0f      	cmp	r3, #15
 80005f8:	d000      	beq.n	80005fc <__aeabi_fmul+0x180>
 80005fa:	e08c      	b.n	8000716 <__aeabi_fmul+0x29a>
 80005fc:	2280      	movs	r2, #128	@ 0x80
 80005fe:	03d2      	lsls	r2, r2, #15
 8000600:	4216      	tst	r6, r2
 8000602:	d003      	beq.n	800060c <__aeabi_fmul+0x190>
 8000604:	4643      	mov	r3, r8
 8000606:	4213      	tst	r3, r2
 8000608:	d100      	bne.n	800060c <__aeabi_fmul+0x190>
 800060a:	e07d      	b.n	8000708 <__aeabi_fmul+0x28c>
 800060c:	2280      	movs	r2, #128	@ 0x80
 800060e:	03d2      	lsls	r2, r2, #15
 8000610:	4332      	orrs	r2, r6
 8000612:	0252      	lsls	r2, r2, #9
 8000614:	0a52      	lsrs	r2, r2, #9
 8000616:	23ff      	movs	r3, #255	@ 0xff
 8000618:	05d8      	lsls	r0, r3, #23
 800061a:	07ed      	lsls	r5, r5, #31
 800061c:	4310      	orrs	r0, r2
 800061e:	4328      	orrs	r0, r5
 8000620:	bce0      	pop	{r5, r6, r7}
 8000622:	46ba      	mov	sl, r7
 8000624:	46b1      	mov	r9, r6
 8000626:	46a8      	mov	r8, r5
 8000628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062a:	2301      	movs	r3, #1
 800062c:	0015      	movs	r5, r2
 800062e:	0871      	lsrs	r1, r6, #1
 8000630:	401e      	ands	r6, r3
 8000632:	430e      	orrs	r6, r1
 8000634:	0023      	movs	r3, r4
 8000636:	3380      	adds	r3, #128	@ 0x80
 8000638:	1c61      	adds	r1, r4, #1
 800063a:	2b00      	cmp	r3, #0
 800063c:	dd41      	ble.n	80006c2 <__aeabi_fmul+0x246>
 800063e:	0772      	lsls	r2, r6, #29
 8000640:	d094      	beq.n	800056c <__aeabi_fmul+0xf0>
 8000642:	220f      	movs	r2, #15
 8000644:	4032      	ands	r2, r6
 8000646:	2a04      	cmp	r2, #4
 8000648:	d000      	beq.n	800064c <__aeabi_fmul+0x1d0>
 800064a:	e78e      	b.n	800056a <__aeabi_fmul+0xee>
 800064c:	e78e      	b.n	800056c <__aeabi_fmul+0xf0>
 800064e:	2e00      	cmp	r6, #0
 8000650:	d105      	bne.n	800065e <__aeabi_fmul+0x1e2>
 8000652:	2304      	movs	r3, #4
 8000654:	4699      	mov	r9, r3
 8000656:	3b03      	subs	r3, #3
 8000658:	2400      	movs	r4, #0
 800065a:	469a      	mov	sl, r3
 800065c:	e726      	b.n	80004ac <__aeabi_fmul+0x30>
 800065e:	0030      	movs	r0, r6
 8000660:	f000 fb24 	bl	8000cac <__clzsi2>
 8000664:	2476      	movs	r4, #118	@ 0x76
 8000666:	1f43      	subs	r3, r0, #5
 8000668:	409e      	lsls	r6, r3
 800066a:	2300      	movs	r3, #0
 800066c:	4264      	negs	r4, r4
 800066e:	4699      	mov	r9, r3
 8000670:	469a      	mov	sl, r3
 8000672:	1a24      	subs	r4, r4, r0
 8000674:	e71a      	b.n	80004ac <__aeabi_fmul+0x30>
 8000676:	4640      	mov	r0, r8
 8000678:	f000 fb18 	bl	8000cac <__clzsi2>
 800067c:	464b      	mov	r3, r9
 800067e:	1a24      	subs	r4, r4, r0
 8000680:	3c76      	subs	r4, #118	@ 0x76
 8000682:	2b0a      	cmp	r3, #10
 8000684:	dca1      	bgt.n	80005ca <__aeabi_fmul+0x14e>
 8000686:	4643      	mov	r3, r8
 8000688:	3805      	subs	r0, #5
 800068a:	4083      	lsls	r3, r0
 800068c:	407d      	eors	r5, r7
 800068e:	4698      	mov	r8, r3
 8000690:	b2ea      	uxtb	r2, r5
 8000692:	e724      	b.n	80004de <__aeabi_fmul+0x62>
 8000694:	464a      	mov	r2, r9
 8000696:	3302      	adds	r3, #2
 8000698:	4313      	orrs	r3, r2
 800069a:	002a      	movs	r2, r5
 800069c:	407a      	eors	r2, r7
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	2b0a      	cmp	r3, #10
 80006a2:	dc92      	bgt.n	80005ca <__aeabi_fmul+0x14e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	0015      	movs	r5, r2
 80006a8:	2900      	cmp	r1, #0
 80006aa:	d026      	beq.n	80006fa <__aeabi_fmul+0x27e>
 80006ac:	4699      	mov	r9, r3
 80006ae:	2002      	movs	r0, #2
 80006b0:	e719      	b.n	80004e6 <__aeabi_fmul+0x6a>
 80006b2:	230c      	movs	r3, #12
 80006b4:	4699      	mov	r9, r3
 80006b6:	3b09      	subs	r3, #9
 80006b8:	24ff      	movs	r4, #255	@ 0xff
 80006ba:	469a      	mov	sl, r3
 80006bc:	e6f6      	b.n	80004ac <__aeabi_fmul+0x30>
 80006be:	0015      	movs	r5, r2
 80006c0:	0021      	movs	r1, r4
 80006c2:	2201      	movs	r2, #1
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	2b1b      	cmp	r3, #27
 80006c8:	dd00      	ble.n	80006cc <__aeabi_fmul+0x250>
 80006ca:	e786      	b.n	80005da <__aeabi_fmul+0x15e>
 80006cc:	319e      	adds	r1, #158	@ 0x9e
 80006ce:	0032      	movs	r2, r6
 80006d0:	408e      	lsls	r6, r1
 80006d2:	40da      	lsrs	r2, r3
 80006d4:	1e73      	subs	r3, r6, #1
 80006d6:	419e      	sbcs	r6, r3
 80006d8:	4332      	orrs	r2, r6
 80006da:	0753      	lsls	r3, r2, #29
 80006dc:	d004      	beq.n	80006e8 <__aeabi_fmul+0x26c>
 80006de:	230f      	movs	r3, #15
 80006e0:	4013      	ands	r3, r2
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	d000      	beq.n	80006e8 <__aeabi_fmul+0x26c>
 80006e6:	3204      	adds	r2, #4
 80006e8:	0153      	lsls	r3, r2, #5
 80006ea:	d510      	bpl.n	800070e <__aeabi_fmul+0x292>
 80006ec:	2301      	movs	r3, #1
 80006ee:	2200      	movs	r2, #0
 80006f0:	e792      	b.n	8000618 <__aeabi_fmul+0x19c>
 80006f2:	003d      	movs	r5, r7
 80006f4:	4646      	mov	r6, r8
 80006f6:	4682      	mov	sl, r0
 80006f8:	e767      	b.n	80005ca <__aeabi_fmul+0x14e>
 80006fa:	23ff      	movs	r3, #255	@ 0xff
 80006fc:	2200      	movs	r2, #0
 80006fe:	e78b      	b.n	8000618 <__aeabi_fmul+0x19c>
 8000700:	2280      	movs	r2, #128	@ 0x80
 8000702:	2500      	movs	r5, #0
 8000704:	03d2      	lsls	r2, r2, #15
 8000706:	e786      	b.n	8000616 <__aeabi_fmul+0x19a>
 8000708:	003d      	movs	r5, r7
 800070a:	431a      	orrs	r2, r3
 800070c:	e783      	b.n	8000616 <__aeabi_fmul+0x19a>
 800070e:	0192      	lsls	r2, r2, #6
 8000710:	2300      	movs	r3, #0
 8000712:	0a52      	lsrs	r2, r2, #9
 8000714:	e780      	b.n	8000618 <__aeabi_fmul+0x19c>
 8000716:	003d      	movs	r5, r7
 8000718:	4646      	mov	r6, r8
 800071a:	e777      	b.n	800060c <__aeabi_fmul+0x190>
 800071c:	002a      	movs	r2, r5
 800071e:	2301      	movs	r3, #1
 8000720:	407a      	eors	r2, r7
 8000722:	408b      	lsls	r3, r1
 8000724:	2003      	movs	r0, #3
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	e6e9      	b.n	80004fe <__aeabi_fmul+0x82>
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	f7ffffff 	.word	0xf7ffffff

08000730 <__aeabi_fsub>:
 8000730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000732:	4647      	mov	r7, r8
 8000734:	46ce      	mov	lr, r9
 8000736:	0243      	lsls	r3, r0, #9
 8000738:	b580      	push	{r7, lr}
 800073a:	0a5f      	lsrs	r7, r3, #9
 800073c:	099b      	lsrs	r3, r3, #6
 800073e:	0045      	lsls	r5, r0, #1
 8000740:	004a      	lsls	r2, r1, #1
 8000742:	469c      	mov	ip, r3
 8000744:	024b      	lsls	r3, r1, #9
 8000746:	0fc4      	lsrs	r4, r0, #31
 8000748:	0fce      	lsrs	r6, r1, #31
 800074a:	0e2d      	lsrs	r5, r5, #24
 800074c:	0a58      	lsrs	r0, r3, #9
 800074e:	0e12      	lsrs	r2, r2, #24
 8000750:	0999      	lsrs	r1, r3, #6
 8000752:	2aff      	cmp	r2, #255	@ 0xff
 8000754:	d06b      	beq.n	800082e <__aeabi_fsub+0xfe>
 8000756:	2301      	movs	r3, #1
 8000758:	405e      	eors	r6, r3
 800075a:	1aab      	subs	r3, r5, r2
 800075c:	42b4      	cmp	r4, r6
 800075e:	d04b      	beq.n	80007f8 <__aeabi_fsub+0xc8>
 8000760:	2b00      	cmp	r3, #0
 8000762:	dc00      	bgt.n	8000766 <__aeabi_fsub+0x36>
 8000764:	e0ff      	b.n	8000966 <__aeabi_fsub+0x236>
 8000766:	2a00      	cmp	r2, #0
 8000768:	d100      	bne.n	800076c <__aeabi_fsub+0x3c>
 800076a:	e088      	b.n	800087e <__aeabi_fsub+0x14e>
 800076c:	2dff      	cmp	r5, #255	@ 0xff
 800076e:	d100      	bne.n	8000772 <__aeabi_fsub+0x42>
 8000770:	e0ef      	b.n	8000952 <__aeabi_fsub+0x222>
 8000772:	2280      	movs	r2, #128	@ 0x80
 8000774:	04d2      	lsls	r2, r2, #19
 8000776:	4311      	orrs	r1, r2
 8000778:	2001      	movs	r0, #1
 800077a:	2b1b      	cmp	r3, #27
 800077c:	dc08      	bgt.n	8000790 <__aeabi_fsub+0x60>
 800077e:	0008      	movs	r0, r1
 8000780:	2220      	movs	r2, #32
 8000782:	40d8      	lsrs	r0, r3
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	4099      	lsls	r1, r3
 8000788:	000b      	movs	r3, r1
 800078a:	1e5a      	subs	r2, r3, #1
 800078c:	4193      	sbcs	r3, r2
 800078e:	4318      	orrs	r0, r3
 8000790:	4663      	mov	r3, ip
 8000792:	1a1b      	subs	r3, r3, r0
 8000794:	469c      	mov	ip, r3
 8000796:	4663      	mov	r3, ip
 8000798:	015b      	lsls	r3, r3, #5
 800079a:	d400      	bmi.n	800079e <__aeabi_fsub+0x6e>
 800079c:	e0cd      	b.n	800093a <__aeabi_fsub+0x20a>
 800079e:	4663      	mov	r3, ip
 80007a0:	019f      	lsls	r7, r3, #6
 80007a2:	09bf      	lsrs	r7, r7, #6
 80007a4:	0038      	movs	r0, r7
 80007a6:	f000 fa81 	bl	8000cac <__clzsi2>
 80007aa:	003b      	movs	r3, r7
 80007ac:	3805      	subs	r0, #5
 80007ae:	4083      	lsls	r3, r0
 80007b0:	4285      	cmp	r5, r0
 80007b2:	dc00      	bgt.n	80007b6 <__aeabi_fsub+0x86>
 80007b4:	e0a2      	b.n	80008fc <__aeabi_fsub+0x1cc>
 80007b6:	4ab7      	ldr	r2, [pc, #732]	@ (8000a94 <__aeabi_fsub+0x364>)
 80007b8:	1a2d      	subs	r5, r5, r0
 80007ba:	401a      	ands	r2, r3
 80007bc:	4694      	mov	ip, r2
 80007be:	075a      	lsls	r2, r3, #29
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fsub+0x94>
 80007c2:	e0c3      	b.n	800094c <__aeabi_fsub+0x21c>
 80007c4:	220f      	movs	r2, #15
 80007c6:	4013      	ands	r3, r2
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	d100      	bne.n	80007ce <__aeabi_fsub+0x9e>
 80007cc:	e0be      	b.n	800094c <__aeabi_fsub+0x21c>
 80007ce:	2304      	movs	r3, #4
 80007d0:	4698      	mov	r8, r3
 80007d2:	44c4      	add	ip, r8
 80007d4:	4663      	mov	r3, ip
 80007d6:	015b      	lsls	r3, r3, #5
 80007d8:	d400      	bmi.n	80007dc <__aeabi_fsub+0xac>
 80007da:	e0b7      	b.n	800094c <__aeabi_fsub+0x21c>
 80007dc:	1c68      	adds	r0, r5, #1
 80007de:	2dfe      	cmp	r5, #254	@ 0xfe
 80007e0:	d000      	beq.n	80007e4 <__aeabi_fsub+0xb4>
 80007e2:	e0a5      	b.n	8000930 <__aeabi_fsub+0x200>
 80007e4:	20ff      	movs	r0, #255	@ 0xff
 80007e6:	2200      	movs	r2, #0
 80007e8:	05c0      	lsls	r0, r0, #23
 80007ea:	4310      	orrs	r0, r2
 80007ec:	07e4      	lsls	r4, r4, #31
 80007ee:	4320      	orrs	r0, r4
 80007f0:	bcc0      	pop	{r6, r7}
 80007f2:	46b9      	mov	r9, r7
 80007f4:	46b0      	mov	r8, r6
 80007f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	dc00      	bgt.n	80007fe <__aeabi_fsub+0xce>
 80007fc:	e1eb      	b.n	8000bd6 <__aeabi_fsub+0x4a6>
 80007fe:	2a00      	cmp	r2, #0
 8000800:	d046      	beq.n	8000890 <__aeabi_fsub+0x160>
 8000802:	2dff      	cmp	r5, #255	@ 0xff
 8000804:	d100      	bne.n	8000808 <__aeabi_fsub+0xd8>
 8000806:	e0a4      	b.n	8000952 <__aeabi_fsub+0x222>
 8000808:	2280      	movs	r2, #128	@ 0x80
 800080a:	04d2      	lsls	r2, r2, #19
 800080c:	4311      	orrs	r1, r2
 800080e:	2b1b      	cmp	r3, #27
 8000810:	dc00      	bgt.n	8000814 <__aeabi_fsub+0xe4>
 8000812:	e0fb      	b.n	8000a0c <__aeabi_fsub+0x2dc>
 8000814:	2305      	movs	r3, #5
 8000816:	4698      	mov	r8, r3
 8000818:	002b      	movs	r3, r5
 800081a:	44c4      	add	ip, r8
 800081c:	4662      	mov	r2, ip
 800081e:	08d7      	lsrs	r7, r2, #3
 8000820:	2bff      	cmp	r3, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fsub+0xf6>
 8000824:	e095      	b.n	8000952 <__aeabi_fsub+0x222>
 8000826:	027a      	lsls	r2, r7, #9
 8000828:	0a52      	lsrs	r2, r2, #9
 800082a:	b2d8      	uxtb	r0, r3
 800082c:	e7dc      	b.n	80007e8 <__aeabi_fsub+0xb8>
 800082e:	002b      	movs	r3, r5
 8000830:	3bff      	subs	r3, #255	@ 0xff
 8000832:	4699      	mov	r9, r3
 8000834:	2900      	cmp	r1, #0
 8000836:	d118      	bne.n	800086a <__aeabi_fsub+0x13a>
 8000838:	2301      	movs	r3, #1
 800083a:	405e      	eors	r6, r3
 800083c:	42b4      	cmp	r4, r6
 800083e:	d100      	bne.n	8000842 <__aeabi_fsub+0x112>
 8000840:	e0ca      	b.n	80009d8 <__aeabi_fsub+0x2a8>
 8000842:	464b      	mov	r3, r9
 8000844:	2b00      	cmp	r3, #0
 8000846:	d02d      	beq.n	80008a4 <__aeabi_fsub+0x174>
 8000848:	2d00      	cmp	r5, #0
 800084a:	d000      	beq.n	800084e <__aeabi_fsub+0x11e>
 800084c:	e13c      	b.n	8000ac8 <__aeabi_fsub+0x398>
 800084e:	23ff      	movs	r3, #255	@ 0xff
 8000850:	4664      	mov	r4, ip
 8000852:	2c00      	cmp	r4, #0
 8000854:	d100      	bne.n	8000858 <__aeabi_fsub+0x128>
 8000856:	e15f      	b.n	8000b18 <__aeabi_fsub+0x3e8>
 8000858:	1e5d      	subs	r5, r3, #1
 800085a:	2b01      	cmp	r3, #1
 800085c:	d100      	bne.n	8000860 <__aeabi_fsub+0x130>
 800085e:	e174      	b.n	8000b4a <__aeabi_fsub+0x41a>
 8000860:	0034      	movs	r4, r6
 8000862:	2bff      	cmp	r3, #255	@ 0xff
 8000864:	d074      	beq.n	8000950 <__aeabi_fsub+0x220>
 8000866:	002b      	movs	r3, r5
 8000868:	e103      	b.n	8000a72 <__aeabi_fsub+0x342>
 800086a:	42b4      	cmp	r4, r6
 800086c:	d100      	bne.n	8000870 <__aeabi_fsub+0x140>
 800086e:	e09c      	b.n	80009aa <__aeabi_fsub+0x27a>
 8000870:	2b00      	cmp	r3, #0
 8000872:	d017      	beq.n	80008a4 <__aeabi_fsub+0x174>
 8000874:	2d00      	cmp	r5, #0
 8000876:	d0ea      	beq.n	800084e <__aeabi_fsub+0x11e>
 8000878:	0007      	movs	r7, r0
 800087a:	0034      	movs	r4, r6
 800087c:	e06c      	b.n	8000958 <__aeabi_fsub+0x228>
 800087e:	2900      	cmp	r1, #0
 8000880:	d0cc      	beq.n	800081c <__aeabi_fsub+0xec>
 8000882:	1e5a      	subs	r2, r3, #1
 8000884:	2b01      	cmp	r3, #1
 8000886:	d02b      	beq.n	80008e0 <__aeabi_fsub+0x1b0>
 8000888:	2bff      	cmp	r3, #255	@ 0xff
 800088a:	d062      	beq.n	8000952 <__aeabi_fsub+0x222>
 800088c:	0013      	movs	r3, r2
 800088e:	e773      	b.n	8000778 <__aeabi_fsub+0x48>
 8000890:	2900      	cmp	r1, #0
 8000892:	d0c3      	beq.n	800081c <__aeabi_fsub+0xec>
 8000894:	1e5a      	subs	r2, r3, #1
 8000896:	2b01      	cmp	r3, #1
 8000898:	d100      	bne.n	800089c <__aeabi_fsub+0x16c>
 800089a:	e11e      	b.n	8000ada <__aeabi_fsub+0x3aa>
 800089c:	2bff      	cmp	r3, #255	@ 0xff
 800089e:	d058      	beq.n	8000952 <__aeabi_fsub+0x222>
 80008a0:	0013      	movs	r3, r2
 80008a2:	e7b4      	b.n	800080e <__aeabi_fsub+0xde>
 80008a4:	22fe      	movs	r2, #254	@ 0xfe
 80008a6:	1c6b      	adds	r3, r5, #1
 80008a8:	421a      	tst	r2, r3
 80008aa:	d10d      	bne.n	80008c8 <__aeabi_fsub+0x198>
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d060      	beq.n	8000972 <__aeabi_fsub+0x242>
 80008b0:	4663      	mov	r3, ip
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d000      	beq.n	80008b8 <__aeabi_fsub+0x188>
 80008b6:	e120      	b.n	8000afa <__aeabi_fsub+0x3ca>
 80008b8:	2900      	cmp	r1, #0
 80008ba:	d000      	beq.n	80008be <__aeabi_fsub+0x18e>
 80008bc:	e128      	b.n	8000b10 <__aeabi_fsub+0x3e0>
 80008be:	2280      	movs	r2, #128	@ 0x80
 80008c0:	2400      	movs	r4, #0
 80008c2:	20ff      	movs	r0, #255	@ 0xff
 80008c4:	03d2      	lsls	r2, r2, #15
 80008c6:	e78f      	b.n	80007e8 <__aeabi_fsub+0xb8>
 80008c8:	4663      	mov	r3, ip
 80008ca:	1a5f      	subs	r7, r3, r1
 80008cc:	017b      	lsls	r3, r7, #5
 80008ce:	d500      	bpl.n	80008d2 <__aeabi_fsub+0x1a2>
 80008d0:	e0fe      	b.n	8000ad0 <__aeabi_fsub+0x3a0>
 80008d2:	2f00      	cmp	r7, #0
 80008d4:	d000      	beq.n	80008d8 <__aeabi_fsub+0x1a8>
 80008d6:	e765      	b.n	80007a4 <__aeabi_fsub+0x74>
 80008d8:	2400      	movs	r4, #0
 80008da:	2000      	movs	r0, #0
 80008dc:	2200      	movs	r2, #0
 80008de:	e783      	b.n	80007e8 <__aeabi_fsub+0xb8>
 80008e0:	4663      	mov	r3, ip
 80008e2:	1a59      	subs	r1, r3, r1
 80008e4:	014b      	lsls	r3, r1, #5
 80008e6:	d400      	bmi.n	80008ea <__aeabi_fsub+0x1ba>
 80008e8:	e119      	b.n	8000b1e <__aeabi_fsub+0x3ee>
 80008ea:	018f      	lsls	r7, r1, #6
 80008ec:	09bf      	lsrs	r7, r7, #6
 80008ee:	0038      	movs	r0, r7
 80008f0:	f000 f9dc 	bl	8000cac <__clzsi2>
 80008f4:	003b      	movs	r3, r7
 80008f6:	3805      	subs	r0, #5
 80008f8:	4083      	lsls	r3, r0
 80008fa:	2501      	movs	r5, #1
 80008fc:	2220      	movs	r2, #32
 80008fe:	1b40      	subs	r0, r0, r5
 8000900:	3001      	adds	r0, #1
 8000902:	1a12      	subs	r2, r2, r0
 8000904:	0019      	movs	r1, r3
 8000906:	4093      	lsls	r3, r2
 8000908:	40c1      	lsrs	r1, r0
 800090a:	1e5a      	subs	r2, r3, #1
 800090c:	4193      	sbcs	r3, r2
 800090e:	4319      	orrs	r1, r3
 8000910:	468c      	mov	ip, r1
 8000912:	1e0b      	subs	r3, r1, #0
 8000914:	d0e1      	beq.n	80008da <__aeabi_fsub+0x1aa>
 8000916:	075b      	lsls	r3, r3, #29
 8000918:	d100      	bne.n	800091c <__aeabi_fsub+0x1ec>
 800091a:	e152      	b.n	8000bc2 <__aeabi_fsub+0x492>
 800091c:	230f      	movs	r3, #15
 800091e:	2500      	movs	r5, #0
 8000920:	400b      	ands	r3, r1
 8000922:	2b04      	cmp	r3, #4
 8000924:	d000      	beq.n	8000928 <__aeabi_fsub+0x1f8>
 8000926:	e752      	b.n	80007ce <__aeabi_fsub+0x9e>
 8000928:	2001      	movs	r0, #1
 800092a:	014a      	lsls	r2, r1, #5
 800092c:	d400      	bmi.n	8000930 <__aeabi_fsub+0x200>
 800092e:	e092      	b.n	8000a56 <__aeabi_fsub+0x326>
 8000930:	b2c0      	uxtb	r0, r0
 8000932:	4663      	mov	r3, ip
 8000934:	019a      	lsls	r2, r3, #6
 8000936:	0a52      	lsrs	r2, r2, #9
 8000938:	e756      	b.n	80007e8 <__aeabi_fsub+0xb8>
 800093a:	4663      	mov	r3, ip
 800093c:	075b      	lsls	r3, r3, #29
 800093e:	d005      	beq.n	800094c <__aeabi_fsub+0x21c>
 8000940:	230f      	movs	r3, #15
 8000942:	4662      	mov	r2, ip
 8000944:	4013      	ands	r3, r2
 8000946:	2b04      	cmp	r3, #4
 8000948:	d000      	beq.n	800094c <__aeabi_fsub+0x21c>
 800094a:	e740      	b.n	80007ce <__aeabi_fsub+0x9e>
 800094c:	002b      	movs	r3, r5
 800094e:	e765      	b.n	800081c <__aeabi_fsub+0xec>
 8000950:	0007      	movs	r7, r0
 8000952:	2f00      	cmp	r7, #0
 8000954:	d100      	bne.n	8000958 <__aeabi_fsub+0x228>
 8000956:	e745      	b.n	80007e4 <__aeabi_fsub+0xb4>
 8000958:	2280      	movs	r2, #128	@ 0x80
 800095a:	03d2      	lsls	r2, r2, #15
 800095c:	433a      	orrs	r2, r7
 800095e:	0252      	lsls	r2, r2, #9
 8000960:	20ff      	movs	r0, #255	@ 0xff
 8000962:	0a52      	lsrs	r2, r2, #9
 8000964:	e740      	b.n	80007e8 <__aeabi_fsub+0xb8>
 8000966:	2b00      	cmp	r3, #0
 8000968:	d179      	bne.n	8000a5e <__aeabi_fsub+0x32e>
 800096a:	22fe      	movs	r2, #254	@ 0xfe
 800096c:	1c6b      	adds	r3, r5, #1
 800096e:	421a      	tst	r2, r3
 8000970:	d1aa      	bne.n	80008c8 <__aeabi_fsub+0x198>
 8000972:	4663      	mov	r3, ip
 8000974:	2b00      	cmp	r3, #0
 8000976:	d100      	bne.n	800097a <__aeabi_fsub+0x24a>
 8000978:	e0f5      	b.n	8000b66 <__aeabi_fsub+0x436>
 800097a:	2900      	cmp	r1, #0
 800097c:	d100      	bne.n	8000980 <__aeabi_fsub+0x250>
 800097e:	e0d1      	b.n	8000b24 <__aeabi_fsub+0x3f4>
 8000980:	1a5f      	subs	r7, r3, r1
 8000982:	2380      	movs	r3, #128	@ 0x80
 8000984:	04db      	lsls	r3, r3, #19
 8000986:	421f      	tst	r7, r3
 8000988:	d100      	bne.n	800098c <__aeabi_fsub+0x25c>
 800098a:	e10e      	b.n	8000baa <__aeabi_fsub+0x47a>
 800098c:	4662      	mov	r2, ip
 800098e:	2401      	movs	r4, #1
 8000990:	1a8a      	subs	r2, r1, r2
 8000992:	4694      	mov	ip, r2
 8000994:	2000      	movs	r0, #0
 8000996:	4034      	ands	r4, r6
 8000998:	2a00      	cmp	r2, #0
 800099a:	d100      	bne.n	800099e <__aeabi_fsub+0x26e>
 800099c:	e724      	b.n	80007e8 <__aeabi_fsub+0xb8>
 800099e:	2001      	movs	r0, #1
 80009a0:	421a      	tst	r2, r3
 80009a2:	d1c6      	bne.n	8000932 <__aeabi_fsub+0x202>
 80009a4:	2300      	movs	r3, #0
 80009a6:	08d7      	lsrs	r7, r2, #3
 80009a8:	e73d      	b.n	8000826 <__aeabi_fsub+0xf6>
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d017      	beq.n	80009de <__aeabi_fsub+0x2ae>
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	d000      	beq.n	80009b4 <__aeabi_fsub+0x284>
 80009b2:	e0af      	b.n	8000b14 <__aeabi_fsub+0x3e4>
 80009b4:	23ff      	movs	r3, #255	@ 0xff
 80009b6:	4665      	mov	r5, ip
 80009b8:	2d00      	cmp	r5, #0
 80009ba:	d100      	bne.n	80009be <__aeabi_fsub+0x28e>
 80009bc:	e0ad      	b.n	8000b1a <__aeabi_fsub+0x3ea>
 80009be:	1e5e      	subs	r6, r3, #1
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fsub+0x296>
 80009c4:	e089      	b.n	8000ada <__aeabi_fsub+0x3aa>
 80009c6:	2bff      	cmp	r3, #255	@ 0xff
 80009c8:	d0c2      	beq.n	8000950 <__aeabi_fsub+0x220>
 80009ca:	2e1b      	cmp	r6, #27
 80009cc:	dc00      	bgt.n	80009d0 <__aeabi_fsub+0x2a0>
 80009ce:	e0ab      	b.n	8000b28 <__aeabi_fsub+0x3f8>
 80009d0:	1d4b      	adds	r3, r1, #5
 80009d2:	469c      	mov	ip, r3
 80009d4:	0013      	movs	r3, r2
 80009d6:	e721      	b.n	800081c <__aeabi_fsub+0xec>
 80009d8:	464b      	mov	r3, r9
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d170      	bne.n	8000ac0 <__aeabi_fsub+0x390>
 80009de:	22fe      	movs	r2, #254	@ 0xfe
 80009e0:	1c6b      	adds	r3, r5, #1
 80009e2:	421a      	tst	r2, r3
 80009e4:	d15e      	bne.n	8000aa4 <__aeabi_fsub+0x374>
 80009e6:	2d00      	cmp	r5, #0
 80009e8:	d000      	beq.n	80009ec <__aeabi_fsub+0x2bc>
 80009ea:	e0c3      	b.n	8000b74 <__aeabi_fsub+0x444>
 80009ec:	4663      	mov	r3, ip
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_fsub+0x2c4>
 80009f2:	e0d0      	b.n	8000b96 <__aeabi_fsub+0x466>
 80009f4:	2900      	cmp	r1, #0
 80009f6:	d100      	bne.n	80009fa <__aeabi_fsub+0x2ca>
 80009f8:	e094      	b.n	8000b24 <__aeabi_fsub+0x3f4>
 80009fa:	000a      	movs	r2, r1
 80009fc:	4462      	add	r2, ip
 80009fe:	0153      	lsls	r3, r2, #5
 8000a00:	d400      	bmi.n	8000a04 <__aeabi_fsub+0x2d4>
 8000a02:	e0d8      	b.n	8000bb6 <__aeabi_fsub+0x486>
 8000a04:	0192      	lsls	r2, r2, #6
 8000a06:	2001      	movs	r0, #1
 8000a08:	0a52      	lsrs	r2, r2, #9
 8000a0a:	e6ed      	b.n	80007e8 <__aeabi_fsub+0xb8>
 8000a0c:	0008      	movs	r0, r1
 8000a0e:	2220      	movs	r2, #32
 8000a10:	40d8      	lsrs	r0, r3
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	4099      	lsls	r1, r3
 8000a16:	000b      	movs	r3, r1
 8000a18:	1e5a      	subs	r2, r3, #1
 8000a1a:	4193      	sbcs	r3, r2
 8000a1c:	4303      	orrs	r3, r0
 8000a1e:	449c      	add	ip, r3
 8000a20:	4663      	mov	r3, ip
 8000a22:	015b      	lsls	r3, r3, #5
 8000a24:	d589      	bpl.n	800093a <__aeabi_fsub+0x20a>
 8000a26:	3501      	adds	r5, #1
 8000a28:	2dff      	cmp	r5, #255	@ 0xff
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_fsub+0x2fe>
 8000a2c:	e6da      	b.n	80007e4 <__aeabi_fsub+0xb4>
 8000a2e:	4662      	mov	r2, ip
 8000a30:	2301      	movs	r3, #1
 8000a32:	4919      	ldr	r1, [pc, #100]	@ (8000a98 <__aeabi_fsub+0x368>)
 8000a34:	4013      	ands	r3, r2
 8000a36:	0852      	lsrs	r2, r2, #1
 8000a38:	400a      	ands	r2, r1
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	0013      	movs	r3, r2
 8000a3e:	4694      	mov	ip, r2
 8000a40:	075b      	lsls	r3, r3, #29
 8000a42:	d004      	beq.n	8000a4e <__aeabi_fsub+0x31e>
 8000a44:	230f      	movs	r3, #15
 8000a46:	4013      	ands	r3, r2
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_fsub+0x31e>
 8000a4c:	e6bf      	b.n	80007ce <__aeabi_fsub+0x9e>
 8000a4e:	4663      	mov	r3, ip
 8000a50:	015b      	lsls	r3, r3, #5
 8000a52:	d500      	bpl.n	8000a56 <__aeabi_fsub+0x326>
 8000a54:	e6c2      	b.n	80007dc <__aeabi_fsub+0xac>
 8000a56:	4663      	mov	r3, ip
 8000a58:	08df      	lsrs	r7, r3, #3
 8000a5a:	002b      	movs	r3, r5
 8000a5c:	e6e3      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000a5e:	1b53      	subs	r3, r2, r5
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d100      	bne.n	8000a66 <__aeabi_fsub+0x336>
 8000a64:	e6f4      	b.n	8000850 <__aeabi_fsub+0x120>
 8000a66:	2080      	movs	r0, #128	@ 0x80
 8000a68:	4664      	mov	r4, ip
 8000a6a:	04c0      	lsls	r0, r0, #19
 8000a6c:	4304      	orrs	r4, r0
 8000a6e:	46a4      	mov	ip, r4
 8000a70:	0034      	movs	r4, r6
 8000a72:	2001      	movs	r0, #1
 8000a74:	2b1b      	cmp	r3, #27
 8000a76:	dc09      	bgt.n	8000a8c <__aeabi_fsub+0x35c>
 8000a78:	2520      	movs	r5, #32
 8000a7a:	4660      	mov	r0, ip
 8000a7c:	40d8      	lsrs	r0, r3
 8000a7e:	1aeb      	subs	r3, r5, r3
 8000a80:	4665      	mov	r5, ip
 8000a82:	409d      	lsls	r5, r3
 8000a84:	002b      	movs	r3, r5
 8000a86:	1e5d      	subs	r5, r3, #1
 8000a88:	41ab      	sbcs	r3, r5
 8000a8a:	4318      	orrs	r0, r3
 8000a8c:	1a0b      	subs	r3, r1, r0
 8000a8e:	469c      	mov	ip, r3
 8000a90:	0015      	movs	r5, r2
 8000a92:	e680      	b.n	8000796 <__aeabi_fsub+0x66>
 8000a94:	fbffffff 	.word	0xfbffffff
 8000a98:	7dffffff 	.word	0x7dffffff
 8000a9c:	22fe      	movs	r2, #254	@ 0xfe
 8000a9e:	1c6b      	adds	r3, r5, #1
 8000aa0:	4213      	tst	r3, r2
 8000aa2:	d0a3      	beq.n	80009ec <__aeabi_fsub+0x2bc>
 8000aa4:	2bff      	cmp	r3, #255	@ 0xff
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_fsub+0x37a>
 8000aa8:	e69c      	b.n	80007e4 <__aeabi_fsub+0xb4>
 8000aaa:	4461      	add	r1, ip
 8000aac:	0849      	lsrs	r1, r1, #1
 8000aae:	074a      	lsls	r2, r1, #29
 8000ab0:	d049      	beq.n	8000b46 <__aeabi_fsub+0x416>
 8000ab2:	220f      	movs	r2, #15
 8000ab4:	400a      	ands	r2, r1
 8000ab6:	2a04      	cmp	r2, #4
 8000ab8:	d045      	beq.n	8000b46 <__aeabi_fsub+0x416>
 8000aba:	1d0a      	adds	r2, r1, #4
 8000abc:	4694      	mov	ip, r2
 8000abe:	e6ad      	b.n	800081c <__aeabi_fsub+0xec>
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_fsub+0x396>
 8000ac4:	e776      	b.n	80009b4 <__aeabi_fsub+0x284>
 8000ac6:	e68d      	b.n	80007e4 <__aeabi_fsub+0xb4>
 8000ac8:	0034      	movs	r4, r6
 8000aca:	20ff      	movs	r0, #255	@ 0xff
 8000acc:	2200      	movs	r2, #0
 8000ace:	e68b      	b.n	80007e8 <__aeabi_fsub+0xb8>
 8000ad0:	4663      	mov	r3, ip
 8000ad2:	2401      	movs	r4, #1
 8000ad4:	1acf      	subs	r7, r1, r3
 8000ad6:	4034      	ands	r4, r6
 8000ad8:	e664      	b.n	80007a4 <__aeabi_fsub+0x74>
 8000ada:	4461      	add	r1, ip
 8000adc:	014b      	lsls	r3, r1, #5
 8000ade:	d56d      	bpl.n	8000bbc <__aeabi_fsub+0x48c>
 8000ae0:	0848      	lsrs	r0, r1, #1
 8000ae2:	4944      	ldr	r1, [pc, #272]	@ (8000bf4 <__aeabi_fsub+0x4c4>)
 8000ae4:	4001      	ands	r1, r0
 8000ae6:	0743      	lsls	r3, r0, #29
 8000ae8:	d02c      	beq.n	8000b44 <__aeabi_fsub+0x414>
 8000aea:	230f      	movs	r3, #15
 8000aec:	4003      	ands	r3, r0
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	d028      	beq.n	8000b44 <__aeabi_fsub+0x414>
 8000af2:	1d0b      	adds	r3, r1, #4
 8000af4:	469c      	mov	ip, r3
 8000af6:	2302      	movs	r3, #2
 8000af8:	e690      	b.n	800081c <__aeabi_fsub+0xec>
 8000afa:	2900      	cmp	r1, #0
 8000afc:	d100      	bne.n	8000b00 <__aeabi_fsub+0x3d0>
 8000afe:	e72b      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b00:	2380      	movs	r3, #128	@ 0x80
 8000b02:	03db      	lsls	r3, r3, #15
 8000b04:	429f      	cmp	r7, r3
 8000b06:	d200      	bcs.n	8000b0a <__aeabi_fsub+0x3da>
 8000b08:	e726      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b0a:	4298      	cmp	r0, r3
 8000b0c:	d300      	bcc.n	8000b10 <__aeabi_fsub+0x3e0>
 8000b0e:	e723      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b10:	2401      	movs	r4, #1
 8000b12:	4034      	ands	r4, r6
 8000b14:	0007      	movs	r7, r0
 8000b16:	e71f      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b18:	0034      	movs	r4, r6
 8000b1a:	468c      	mov	ip, r1
 8000b1c:	e67e      	b.n	800081c <__aeabi_fsub+0xec>
 8000b1e:	2301      	movs	r3, #1
 8000b20:	08cf      	lsrs	r7, r1, #3
 8000b22:	e680      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000b24:	2300      	movs	r3, #0
 8000b26:	e67e      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000b28:	2020      	movs	r0, #32
 8000b2a:	4665      	mov	r5, ip
 8000b2c:	1b80      	subs	r0, r0, r6
 8000b2e:	4085      	lsls	r5, r0
 8000b30:	4663      	mov	r3, ip
 8000b32:	0028      	movs	r0, r5
 8000b34:	40f3      	lsrs	r3, r6
 8000b36:	1e45      	subs	r5, r0, #1
 8000b38:	41a8      	sbcs	r0, r5
 8000b3a:	4303      	orrs	r3, r0
 8000b3c:	469c      	mov	ip, r3
 8000b3e:	0015      	movs	r5, r2
 8000b40:	448c      	add	ip, r1
 8000b42:	e76d      	b.n	8000a20 <__aeabi_fsub+0x2f0>
 8000b44:	2302      	movs	r3, #2
 8000b46:	08cf      	lsrs	r7, r1, #3
 8000b48:	e66d      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000b4a:	1b0f      	subs	r7, r1, r4
 8000b4c:	017b      	lsls	r3, r7, #5
 8000b4e:	d528      	bpl.n	8000ba2 <__aeabi_fsub+0x472>
 8000b50:	01bf      	lsls	r7, r7, #6
 8000b52:	09bf      	lsrs	r7, r7, #6
 8000b54:	0038      	movs	r0, r7
 8000b56:	f000 f8a9 	bl	8000cac <__clzsi2>
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	3805      	subs	r0, #5
 8000b5e:	4083      	lsls	r3, r0
 8000b60:	0034      	movs	r4, r6
 8000b62:	2501      	movs	r5, #1
 8000b64:	e6ca      	b.n	80008fc <__aeabi_fsub+0x1cc>
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d100      	bne.n	8000b6c <__aeabi_fsub+0x43c>
 8000b6a:	e6b5      	b.n	80008d8 <__aeabi_fsub+0x1a8>
 8000b6c:	2401      	movs	r4, #1
 8000b6e:	0007      	movs	r7, r0
 8000b70:	4034      	ands	r4, r6
 8000b72:	e658      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000b74:	4663      	mov	r3, ip
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d100      	bne.n	8000b7c <__aeabi_fsub+0x44c>
 8000b7a:	e6e9      	b.n	8000950 <__aeabi_fsub+0x220>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_fsub+0x452>
 8000b80:	e6ea      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b82:	2380      	movs	r3, #128	@ 0x80
 8000b84:	03db      	lsls	r3, r3, #15
 8000b86:	429f      	cmp	r7, r3
 8000b88:	d200      	bcs.n	8000b8c <__aeabi_fsub+0x45c>
 8000b8a:	e6e5      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b8c:	4298      	cmp	r0, r3
 8000b8e:	d300      	bcc.n	8000b92 <__aeabi_fsub+0x462>
 8000b90:	e6e2      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b92:	0007      	movs	r7, r0
 8000b94:	e6e0      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b96:	2900      	cmp	r1, #0
 8000b98:	d100      	bne.n	8000b9c <__aeabi_fsub+0x46c>
 8000b9a:	e69e      	b.n	80008da <__aeabi_fsub+0x1aa>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	08cf      	lsrs	r7, r1, #3
 8000ba0:	e641      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000ba2:	0034      	movs	r4, r6
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	08ff      	lsrs	r7, r7, #3
 8000ba8:	e63d      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000baa:	2f00      	cmp	r7, #0
 8000bac:	d100      	bne.n	8000bb0 <__aeabi_fsub+0x480>
 8000bae:	e693      	b.n	80008d8 <__aeabi_fsub+0x1a8>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	08ff      	lsrs	r7, r7, #3
 8000bb4:	e637      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	08d7      	lsrs	r7, r2, #3
 8000bba:	e634      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	08cf      	lsrs	r7, r1, #3
 8000bc0:	e631      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000bc2:	2280      	movs	r2, #128	@ 0x80
 8000bc4:	000b      	movs	r3, r1
 8000bc6:	04d2      	lsls	r2, r2, #19
 8000bc8:	2001      	movs	r0, #1
 8000bca:	4013      	ands	r3, r2
 8000bcc:	4211      	tst	r1, r2
 8000bce:	d000      	beq.n	8000bd2 <__aeabi_fsub+0x4a2>
 8000bd0:	e6ae      	b.n	8000930 <__aeabi_fsub+0x200>
 8000bd2:	08cf      	lsrs	r7, r1, #3
 8000bd4:	e627      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_fsub+0x4ac>
 8000bda:	e75f      	b.n	8000a9c <__aeabi_fsub+0x36c>
 8000bdc:	1b56      	subs	r6, r2, r5
 8000bde:	2d00      	cmp	r5, #0
 8000be0:	d101      	bne.n	8000be6 <__aeabi_fsub+0x4b6>
 8000be2:	0033      	movs	r3, r6
 8000be4:	e6e7      	b.n	80009b6 <__aeabi_fsub+0x286>
 8000be6:	2380      	movs	r3, #128	@ 0x80
 8000be8:	4660      	mov	r0, ip
 8000bea:	04db      	lsls	r3, r3, #19
 8000bec:	4318      	orrs	r0, r3
 8000bee:	4684      	mov	ip, r0
 8000bf0:	e6eb      	b.n	80009ca <__aeabi_fsub+0x29a>
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	7dffffff 	.word	0x7dffffff

08000bf8 <__aeabi_f2iz>:
 8000bf8:	0241      	lsls	r1, r0, #9
 8000bfa:	0042      	lsls	r2, r0, #1
 8000bfc:	0fc3      	lsrs	r3, r0, #31
 8000bfe:	0a49      	lsrs	r1, r1, #9
 8000c00:	2000      	movs	r0, #0
 8000c02:	0e12      	lsrs	r2, r2, #24
 8000c04:	2a7e      	cmp	r2, #126	@ 0x7e
 8000c06:	dd03      	ble.n	8000c10 <__aeabi_f2iz+0x18>
 8000c08:	2a9d      	cmp	r2, #157	@ 0x9d
 8000c0a:	dd02      	ble.n	8000c12 <__aeabi_f2iz+0x1a>
 8000c0c:	4a09      	ldr	r2, [pc, #36]	@ (8000c34 <__aeabi_f2iz+0x3c>)
 8000c0e:	1898      	adds	r0, r3, r2
 8000c10:	4770      	bx	lr
 8000c12:	2080      	movs	r0, #128	@ 0x80
 8000c14:	0400      	lsls	r0, r0, #16
 8000c16:	4301      	orrs	r1, r0
 8000c18:	2a95      	cmp	r2, #149	@ 0x95
 8000c1a:	dc07      	bgt.n	8000c2c <__aeabi_f2iz+0x34>
 8000c1c:	2096      	movs	r0, #150	@ 0x96
 8000c1e:	1a82      	subs	r2, r0, r2
 8000c20:	40d1      	lsrs	r1, r2
 8000c22:	4248      	negs	r0, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1f3      	bne.n	8000c10 <__aeabi_f2iz+0x18>
 8000c28:	0008      	movs	r0, r1
 8000c2a:	e7f1      	b.n	8000c10 <__aeabi_f2iz+0x18>
 8000c2c:	3a96      	subs	r2, #150	@ 0x96
 8000c2e:	4091      	lsls	r1, r2
 8000c30:	e7f7      	b.n	8000c22 <__aeabi_f2iz+0x2a>
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	7fffffff 	.word	0x7fffffff

08000c38 <__aeabi_cfrcmple>:
 8000c38:	4684      	mov	ip, r0
 8000c3a:	0008      	movs	r0, r1
 8000c3c:	4661      	mov	r1, ip
 8000c3e:	e7ff      	b.n	8000c40 <__aeabi_cfcmpeq>

08000c40 <__aeabi_cfcmpeq>:
 8000c40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000c42:	f000 f8c1 	bl	8000dc8 <__lesf2>
 8000c46:	2800      	cmp	r0, #0
 8000c48:	d401      	bmi.n	8000c4e <__aeabi_cfcmpeq+0xe>
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	42c8      	cmn	r0, r1
 8000c4e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000c50 <__aeabi_fcmpeq>:
 8000c50:	b510      	push	{r4, lr}
 8000c52:	f000 f849 	bl	8000ce8 <__eqsf2>
 8000c56:	4240      	negs	r0, r0
 8000c58:	3001      	adds	r0, #1
 8000c5a:	bd10      	pop	{r4, pc}

08000c5c <__aeabi_fcmplt>:
 8000c5c:	b510      	push	{r4, lr}
 8000c5e:	f000 f8b3 	bl	8000dc8 <__lesf2>
 8000c62:	2800      	cmp	r0, #0
 8000c64:	db01      	blt.n	8000c6a <__aeabi_fcmplt+0xe>
 8000c66:	2000      	movs	r0, #0
 8000c68:	bd10      	pop	{r4, pc}
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	bd10      	pop	{r4, pc}
 8000c6e:	46c0      	nop			@ (mov r8, r8)

08000c70 <__aeabi_fcmple>:
 8000c70:	b510      	push	{r4, lr}
 8000c72:	f000 f8a9 	bl	8000dc8 <__lesf2>
 8000c76:	2800      	cmp	r0, #0
 8000c78:	dd01      	ble.n	8000c7e <__aeabi_fcmple+0xe>
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	bd10      	pop	{r4, pc}
 8000c7e:	2001      	movs	r0, #1
 8000c80:	bd10      	pop	{r4, pc}
 8000c82:	46c0      	nop			@ (mov r8, r8)

08000c84 <__aeabi_fcmpgt>:
 8000c84:	b510      	push	{r4, lr}
 8000c86:	f000 f857 	bl	8000d38 <__gesf2>
 8000c8a:	2800      	cmp	r0, #0
 8000c8c:	dc01      	bgt.n	8000c92 <__aeabi_fcmpgt+0xe>
 8000c8e:	2000      	movs	r0, #0
 8000c90:	bd10      	pop	{r4, pc}
 8000c92:	2001      	movs	r0, #1
 8000c94:	bd10      	pop	{r4, pc}
 8000c96:	46c0      	nop			@ (mov r8, r8)

08000c98 <__aeabi_fcmpge>:
 8000c98:	b510      	push	{r4, lr}
 8000c9a:	f000 f84d 	bl	8000d38 <__gesf2>
 8000c9e:	2800      	cmp	r0, #0
 8000ca0:	da01      	bge.n	8000ca6 <__aeabi_fcmpge+0xe>
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	bd10      	pop	{r4, pc}
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	bd10      	pop	{r4, pc}
 8000caa:	46c0      	nop			@ (mov r8, r8)

08000cac <__clzsi2>:
 8000cac:	211c      	movs	r1, #28
 8000cae:	2301      	movs	r3, #1
 8000cb0:	041b      	lsls	r3, r3, #16
 8000cb2:	4298      	cmp	r0, r3
 8000cb4:	d301      	bcc.n	8000cba <__clzsi2+0xe>
 8000cb6:	0c00      	lsrs	r0, r0, #16
 8000cb8:	3910      	subs	r1, #16
 8000cba:	0a1b      	lsrs	r3, r3, #8
 8000cbc:	4298      	cmp	r0, r3
 8000cbe:	d301      	bcc.n	8000cc4 <__clzsi2+0x18>
 8000cc0:	0a00      	lsrs	r0, r0, #8
 8000cc2:	3908      	subs	r1, #8
 8000cc4:	091b      	lsrs	r3, r3, #4
 8000cc6:	4298      	cmp	r0, r3
 8000cc8:	d301      	bcc.n	8000cce <__clzsi2+0x22>
 8000cca:	0900      	lsrs	r0, r0, #4
 8000ccc:	3904      	subs	r1, #4
 8000cce:	a202      	add	r2, pc, #8	@ (adr r2, 8000cd8 <__clzsi2+0x2c>)
 8000cd0:	5c10      	ldrb	r0, [r2, r0]
 8000cd2:	1840      	adds	r0, r0, r1
 8000cd4:	4770      	bx	lr
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	02020304 	.word	0x02020304
 8000cdc:	01010101 	.word	0x01010101
	...

08000ce8 <__eqsf2>:
 8000ce8:	b570      	push	{r4, r5, r6, lr}
 8000cea:	0042      	lsls	r2, r0, #1
 8000cec:	024e      	lsls	r6, r1, #9
 8000cee:	004c      	lsls	r4, r1, #1
 8000cf0:	0245      	lsls	r5, r0, #9
 8000cf2:	0a6d      	lsrs	r5, r5, #9
 8000cf4:	0e12      	lsrs	r2, r2, #24
 8000cf6:	0fc3      	lsrs	r3, r0, #31
 8000cf8:	0a76      	lsrs	r6, r6, #9
 8000cfa:	0e24      	lsrs	r4, r4, #24
 8000cfc:	0fc9      	lsrs	r1, r1, #31
 8000cfe:	2aff      	cmp	r2, #255	@ 0xff
 8000d00:	d010      	beq.n	8000d24 <__eqsf2+0x3c>
 8000d02:	2cff      	cmp	r4, #255	@ 0xff
 8000d04:	d00c      	beq.n	8000d20 <__eqsf2+0x38>
 8000d06:	2001      	movs	r0, #1
 8000d08:	42a2      	cmp	r2, r4
 8000d0a:	d10a      	bne.n	8000d22 <__eqsf2+0x3a>
 8000d0c:	42b5      	cmp	r5, r6
 8000d0e:	d108      	bne.n	8000d22 <__eqsf2+0x3a>
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d00f      	beq.n	8000d34 <__eqsf2+0x4c>
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	d104      	bne.n	8000d22 <__eqsf2+0x3a>
 8000d18:	0028      	movs	r0, r5
 8000d1a:	1e43      	subs	r3, r0, #1
 8000d1c:	4198      	sbcs	r0, r3
 8000d1e:	e000      	b.n	8000d22 <__eqsf2+0x3a>
 8000d20:	2001      	movs	r0, #1
 8000d22:	bd70      	pop	{r4, r5, r6, pc}
 8000d24:	2001      	movs	r0, #1
 8000d26:	2cff      	cmp	r4, #255	@ 0xff
 8000d28:	d1fb      	bne.n	8000d22 <__eqsf2+0x3a>
 8000d2a:	4335      	orrs	r5, r6
 8000d2c:	d1f9      	bne.n	8000d22 <__eqsf2+0x3a>
 8000d2e:	404b      	eors	r3, r1
 8000d30:	0018      	movs	r0, r3
 8000d32:	e7f6      	b.n	8000d22 <__eqsf2+0x3a>
 8000d34:	2000      	movs	r0, #0
 8000d36:	e7f4      	b.n	8000d22 <__eqsf2+0x3a>

08000d38 <__gesf2>:
 8000d38:	b530      	push	{r4, r5, lr}
 8000d3a:	0042      	lsls	r2, r0, #1
 8000d3c:	0244      	lsls	r4, r0, #9
 8000d3e:	024d      	lsls	r5, r1, #9
 8000d40:	0fc3      	lsrs	r3, r0, #31
 8000d42:	0048      	lsls	r0, r1, #1
 8000d44:	0a64      	lsrs	r4, r4, #9
 8000d46:	0e12      	lsrs	r2, r2, #24
 8000d48:	0a6d      	lsrs	r5, r5, #9
 8000d4a:	0e00      	lsrs	r0, r0, #24
 8000d4c:	0fc9      	lsrs	r1, r1, #31
 8000d4e:	2aff      	cmp	r2, #255	@ 0xff
 8000d50:	d018      	beq.n	8000d84 <__gesf2+0x4c>
 8000d52:	28ff      	cmp	r0, #255	@ 0xff
 8000d54:	d00a      	beq.n	8000d6c <__gesf2+0x34>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d11e      	bne.n	8000d98 <__gesf2+0x60>
 8000d5a:	2800      	cmp	r0, #0
 8000d5c:	d10a      	bne.n	8000d74 <__gesf2+0x3c>
 8000d5e:	2d00      	cmp	r5, #0
 8000d60:	d029      	beq.n	8000db6 <__gesf2+0x7e>
 8000d62:	2c00      	cmp	r4, #0
 8000d64:	d12d      	bne.n	8000dc2 <__gesf2+0x8a>
 8000d66:	0048      	lsls	r0, r1, #1
 8000d68:	3801      	subs	r0, #1
 8000d6a:	bd30      	pop	{r4, r5, pc}
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d125      	bne.n	8000dbc <__gesf2+0x84>
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	d101      	bne.n	8000d78 <__gesf2+0x40>
 8000d74:	2c00      	cmp	r4, #0
 8000d76:	d0f6      	beq.n	8000d66 <__gesf2+0x2e>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d019      	beq.n	8000db0 <__gesf2+0x78>
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	425b      	negs	r3, r3
 8000d80:	4318      	orrs	r0, r3
 8000d82:	e7f2      	b.n	8000d6a <__gesf2+0x32>
 8000d84:	2c00      	cmp	r4, #0
 8000d86:	d119      	bne.n	8000dbc <__gesf2+0x84>
 8000d88:	28ff      	cmp	r0, #255	@ 0xff
 8000d8a:	d1f7      	bne.n	8000d7c <__gesf2+0x44>
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d115      	bne.n	8000dbc <__gesf2+0x84>
 8000d90:	2000      	movs	r0, #0
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d1f2      	bne.n	8000d7c <__gesf2+0x44>
 8000d96:	e7e8      	b.n	8000d6a <__gesf2+0x32>
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	d0ef      	beq.n	8000d7c <__gesf2+0x44>
 8000d9c:	428b      	cmp	r3, r1
 8000d9e:	d1ed      	bne.n	8000d7c <__gesf2+0x44>
 8000da0:	4282      	cmp	r2, r0
 8000da2:	dceb      	bgt.n	8000d7c <__gesf2+0x44>
 8000da4:	db04      	blt.n	8000db0 <__gesf2+0x78>
 8000da6:	42ac      	cmp	r4, r5
 8000da8:	d8e8      	bhi.n	8000d7c <__gesf2+0x44>
 8000daa:	2000      	movs	r0, #0
 8000dac:	42ac      	cmp	r4, r5
 8000dae:	d2dc      	bcs.n	8000d6a <__gesf2+0x32>
 8000db0:	0058      	lsls	r0, r3, #1
 8000db2:	3801      	subs	r0, #1
 8000db4:	e7d9      	b.n	8000d6a <__gesf2+0x32>
 8000db6:	2c00      	cmp	r4, #0
 8000db8:	d0d7      	beq.n	8000d6a <__gesf2+0x32>
 8000dba:	e7df      	b.n	8000d7c <__gesf2+0x44>
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	e7d3      	b.n	8000d6a <__gesf2+0x32>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d1da      	bne.n	8000d7c <__gesf2+0x44>
 8000dc6:	e7ee      	b.n	8000da6 <__gesf2+0x6e>

08000dc8 <__lesf2>:
 8000dc8:	b530      	push	{r4, r5, lr}
 8000dca:	0042      	lsls	r2, r0, #1
 8000dcc:	0244      	lsls	r4, r0, #9
 8000dce:	024d      	lsls	r5, r1, #9
 8000dd0:	0fc3      	lsrs	r3, r0, #31
 8000dd2:	0048      	lsls	r0, r1, #1
 8000dd4:	0a64      	lsrs	r4, r4, #9
 8000dd6:	0e12      	lsrs	r2, r2, #24
 8000dd8:	0a6d      	lsrs	r5, r5, #9
 8000dda:	0e00      	lsrs	r0, r0, #24
 8000ddc:	0fc9      	lsrs	r1, r1, #31
 8000dde:	2aff      	cmp	r2, #255	@ 0xff
 8000de0:	d017      	beq.n	8000e12 <__lesf2+0x4a>
 8000de2:	28ff      	cmp	r0, #255	@ 0xff
 8000de4:	d00a      	beq.n	8000dfc <__lesf2+0x34>
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d11b      	bne.n	8000e22 <__lesf2+0x5a>
 8000dea:	2800      	cmp	r0, #0
 8000dec:	d10a      	bne.n	8000e04 <__lesf2+0x3c>
 8000dee:	2d00      	cmp	r5, #0
 8000df0:	d01d      	beq.n	8000e2e <__lesf2+0x66>
 8000df2:	2c00      	cmp	r4, #0
 8000df4:	d12d      	bne.n	8000e52 <__lesf2+0x8a>
 8000df6:	0048      	lsls	r0, r1, #1
 8000df8:	3801      	subs	r0, #1
 8000dfa:	e011      	b.n	8000e20 <__lesf2+0x58>
 8000dfc:	2d00      	cmp	r5, #0
 8000dfe:	d10e      	bne.n	8000e1e <__lesf2+0x56>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	d101      	bne.n	8000e08 <__lesf2+0x40>
 8000e04:	2c00      	cmp	r4, #0
 8000e06:	d0f6      	beq.n	8000df6 <__lesf2+0x2e>
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d10c      	bne.n	8000e26 <__lesf2+0x5e>
 8000e0c:	0058      	lsls	r0, r3, #1
 8000e0e:	3801      	subs	r0, #1
 8000e10:	e006      	b.n	8000e20 <__lesf2+0x58>
 8000e12:	2c00      	cmp	r4, #0
 8000e14:	d103      	bne.n	8000e1e <__lesf2+0x56>
 8000e16:	28ff      	cmp	r0, #255	@ 0xff
 8000e18:	d105      	bne.n	8000e26 <__lesf2+0x5e>
 8000e1a:	2d00      	cmp	r5, #0
 8000e1c:	d015      	beq.n	8000e4a <__lesf2+0x82>
 8000e1e:	2002      	movs	r0, #2
 8000e20:	bd30      	pop	{r4, r5, pc}
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d106      	bne.n	8000e34 <__lesf2+0x6c>
 8000e26:	2001      	movs	r0, #1
 8000e28:	425b      	negs	r3, r3
 8000e2a:	4318      	orrs	r0, r3
 8000e2c:	e7f8      	b.n	8000e20 <__lesf2+0x58>
 8000e2e:	2c00      	cmp	r4, #0
 8000e30:	d0f6      	beq.n	8000e20 <__lesf2+0x58>
 8000e32:	e7f8      	b.n	8000e26 <__lesf2+0x5e>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d1f6      	bne.n	8000e26 <__lesf2+0x5e>
 8000e38:	4282      	cmp	r2, r0
 8000e3a:	dcf4      	bgt.n	8000e26 <__lesf2+0x5e>
 8000e3c:	dbe6      	blt.n	8000e0c <__lesf2+0x44>
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	d8f1      	bhi.n	8000e26 <__lesf2+0x5e>
 8000e42:	2000      	movs	r0, #0
 8000e44:	42ac      	cmp	r4, r5
 8000e46:	d2eb      	bcs.n	8000e20 <__lesf2+0x58>
 8000e48:	e7e0      	b.n	8000e0c <__lesf2+0x44>
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d1ea      	bne.n	8000e26 <__lesf2+0x5e>
 8000e50:	e7e6      	b.n	8000e20 <__lesf2+0x58>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d1e7      	bne.n	8000e26 <__lesf2+0x5e>
 8000e56:	e7f2      	b.n	8000e3e <__lesf2+0x76>

08000e58 <main>:
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	f000 fdc6 	bl	80019ec <HAL_Init>
 8000e60:	f000 f820 	bl	8000ea4 <SystemClock_Config>
 8000e64:	f000 f8d8 	bl	8001018 <MX_GPIO_Init>
 8000e68:	f000 f8a6 	bl	8000fb8 <MX_USART2_UART_Init>
 8000e6c:	f000 f872 	bl	8000f54 <MX_USART1_UART_Init>
 8000e70:	4909      	ldr	r1, [pc, #36]	@ (8000e98 <main+0x40>)
 8000e72:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <main+0x44>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	0018      	movs	r0, r3
 8000e78:	f002 f813 	bl	8002ea2 <HAL_UART_Receive_IT>
 8000e7c:	f000 fb4a 	bl	8001514 <TTY_Init>
 8000e80:	4907      	ldr	r1, [pc, #28]	@ (8000ea0 <main+0x48>)
 8000e82:	4806      	ldr	r0, [pc, #24]	@ (8000e9c <main+0x44>)
 8000e84:	2314      	movs	r3, #20
 8000e86:	2203      	movs	r2, #3
 8000e88:	f001 ff6c 	bl	8002d64 <HAL_UART_Transmit>
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f000 fd5b 	bl	8001948 <setLoopback>
 8000e92:	f000 fb44 	bl	800151e <TTY_Fox>
 8000e96:	e7fc      	b.n	8000e92 <main+0x3a>
 8000e98:	20000194 	.word	0x20000194
 8000e9c:	2000010c 	.word	0x2000010c
 8000ea0:	20000000 	.word	0x20000000

08000ea4 <SystemClock_Config>:
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b099      	sub	sp, #100	@ 0x64
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	242c      	movs	r4, #44	@ 0x2c
 8000eac:	193b      	adds	r3, r7, r4
 8000eae:	0018      	movs	r0, r3
 8000eb0:	2334      	movs	r3, #52	@ 0x34
 8000eb2:	001a      	movs	r2, r3
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	f003 fa49 	bl	800434c <memset>
 8000eba:	231c      	movs	r3, #28
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	2310      	movs	r3, #16
 8000ec2:	001a      	movs	r2, r3
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	f003 fa41 	bl	800434c <memset>
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	0018      	movs	r0, r3
 8000ece:	2318      	movs	r3, #24
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	f003 fa3a 	bl	800434c <memset>
 8000ed8:	0021      	movs	r1, r4
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	2202      	movs	r2, #2
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2210      	movs	r2, #16
 8000eea:	611a      	str	r2, [r3, #16]
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2200      	movs	r2, #0
 8000ef0:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f001 f901 	bl	80020fc <HAL_RCC_OscConfig>
 8000efa:	1e03      	subs	r3, r0, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0x5e>
 8000efe:	f000 f939 	bl	8001174 <Error_Handler>
 8000f02:	211c      	movs	r1, #28
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	2207      	movs	r2, #7
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	2100      	movs	r1, #0
 8000f20:	0018      	movs	r0, r3
 8000f22:	f001 fc71 	bl	8002808 <HAL_RCC_ClockConfig>
 8000f26:	1e03      	subs	r3, r0, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0x8a>
 8000f2a:	f000 f923 	bl	8001174 <Error_Handler>
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2201      	movs	r2, #1
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f001 fdcf 	bl	8002ae0 <HAL_RCCEx_PeriphCLKConfig>
 8000f42:	1e03      	subs	r3, r0, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0xa6>
 8000f46:	f000 f915 	bl	8001174 <Error_Handler>
 8000f4a:	46c0      	nop			@ (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b019      	add	sp, #100	@ 0x64
 8000f50:	bd90      	pop	{r4, r7, pc}
	...

08000f54 <MX_USART1_UART_Init>:
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <MX_USART1_UART_Init+0x5c>)
 8000f5a:	4a16      	ldr	r2, [pc, #88]	@ (8000fb4 <MX_USART1_UART_Init+0x60>)
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <MX_USART1_UART_Init+0x5c>)
 8000f60:	2296      	movs	r2, #150	@ 0x96
 8000f62:	0192      	lsls	r2, r2, #6
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <MX_USART1_UART_Init+0x5c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <MX_USART1_UART_Init+0x5c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <MX_USART1_UART_Init+0x5c>)
 8000f74:	2280      	movs	r2, #128	@ 0x80
 8000f76:	00d2      	lsls	r2, r2, #3
 8000f78:	611a      	str	r2, [r3, #16]
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb0 <MX_USART1_UART_Init+0x5c>)
 8000f7c:	220c      	movs	r2, #12
 8000f7e:	615a      	str	r2, [r3, #20]
 8000f80:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <MX_USART1_UART_Init+0x5c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	619a      	str	r2, [r3, #24]
 8000f86:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <MX_USART1_UART_Init+0x5c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	61da      	str	r2, [r3, #28]
 8000f8c:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <MX_USART1_UART_Init+0x5c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	621a      	str	r2, [r3, #32]
 8000f92:	4b07      	ldr	r3, [pc, #28]	@ (8000fb0 <MX_USART1_UART_Init+0x5c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f98:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <MX_USART1_UART_Init+0x5c>)
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f001 fe8e 	bl	8002cbc <HAL_UART_Init>
 8000fa0:	1e03      	subs	r3, r0, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_USART1_UART_Init+0x54>
 8000fa4:	f000 f8e6 	bl	8001174 <Error_Handler>
 8000fa8:	46c0      	nop			@ (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	20000084 	.word	0x20000084
 8000fb4:	40013800 	.word	0x40013800

08000fb8 <MX_USART2_UART_Init>:
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000fbe:	4a15      	ldr	r2, [pc, #84]	@ (8001014 <MX_USART2_UART_Init+0x5c>)
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000fc4:	2296      	movs	r2, #150	@ 0x96
 8000fc6:	0212      	lsls	r2, r2, #8
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000fde:	220c      	movs	r2, #12
 8000fe0:	615a      	str	r2, [r3, #20]
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
 8000fe8:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
 8000fee:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ffa:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <MX_USART2_UART_Init+0x58>)
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f001 fe5d 	bl	8002cbc <HAL_UART_Init>
 8001002:	1e03      	subs	r3, r0, #0
 8001004:	d001      	beq.n	800100a <MX_USART2_UART_Init+0x52>
 8001006:	f000 f8b5 	bl	8001174 <Error_Handler>
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2000010c 	.word	0x2000010c
 8001014:	40004400 	.word	0x40004400

08001018 <MX_GPIO_Init>:
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b089      	sub	sp, #36	@ 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	240c      	movs	r4, #12
 8001020:	193b      	adds	r3, r7, r4
 8001022:	0018      	movs	r0, r3
 8001024:	2314      	movs	r3, #20
 8001026:	001a      	movs	r2, r3
 8001028:	2100      	movs	r1, #0
 800102a:	f003 f98f 	bl	800434c <memset>
 800102e:	4b43      	ldr	r3, [pc, #268]	@ (800113c <MX_GPIO_Init+0x124>)
 8001030:	695a      	ldr	r2, [r3, #20]
 8001032:	4b42      	ldr	r3, [pc, #264]	@ (800113c <MX_GPIO_Init+0x124>)
 8001034:	2180      	movs	r1, #128	@ 0x80
 8001036:	03c9      	lsls	r1, r1, #15
 8001038:	430a      	orrs	r2, r1
 800103a:	615a      	str	r2, [r3, #20]
 800103c:	4b3f      	ldr	r3, [pc, #252]	@ (800113c <MX_GPIO_Init+0x124>)
 800103e:	695a      	ldr	r2, [r3, #20]
 8001040:	2380      	movs	r3, #128	@ 0x80
 8001042:	03db      	lsls	r3, r3, #15
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	4b3c      	ldr	r3, [pc, #240]	@ (800113c <MX_GPIO_Init+0x124>)
 800104c:	695a      	ldr	r2, [r3, #20]
 800104e:	4b3b      	ldr	r3, [pc, #236]	@ (800113c <MX_GPIO_Init+0x124>)
 8001050:	2180      	movs	r1, #128	@ 0x80
 8001052:	0289      	lsls	r1, r1, #10
 8001054:	430a      	orrs	r2, r1
 8001056:	615a      	str	r2, [r3, #20]
 8001058:	4b38      	ldr	r3, [pc, #224]	@ (800113c <MX_GPIO_Init+0x124>)
 800105a:	695a      	ldr	r2, [r3, #20]
 800105c:	2380      	movs	r3, #128	@ 0x80
 800105e:	029b      	lsls	r3, r3, #10
 8001060:	4013      	ands	r3, r2
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4b35      	ldr	r3, [pc, #212]	@ (800113c <MX_GPIO_Init+0x124>)
 8001068:	695a      	ldr	r2, [r3, #20]
 800106a:	4b34      	ldr	r3, [pc, #208]	@ (800113c <MX_GPIO_Init+0x124>)
 800106c:	2180      	movs	r1, #128	@ 0x80
 800106e:	02c9      	lsls	r1, r1, #11
 8001070:	430a      	orrs	r2, r1
 8001072:	615a      	str	r2, [r3, #20]
 8001074:	4b31      	ldr	r3, [pc, #196]	@ (800113c <MX_GPIO_Init+0x124>)
 8001076:	695a      	ldr	r2, [r3, #20]
 8001078:	2380      	movs	r3, #128	@ 0x80
 800107a:	02db      	lsls	r3, r3, #11
 800107c:	4013      	ands	r3, r2
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2390      	movs	r3, #144	@ 0x90
 8001084:	05db      	lsls	r3, r3, #23
 8001086:	2200      	movs	r2, #0
 8001088:	213b      	movs	r1, #59	@ 0x3b
 800108a:	0018      	movs	r0, r3
 800108c:	f000 fff3 	bl	8002076 <HAL_GPIO_WritePin>
 8001090:	193b      	adds	r3, r7, r4
 8001092:	222b      	movs	r2, #43	@ 0x2b
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	193b      	adds	r3, r7, r4
 8001098:	2201      	movs	r2, #1
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	193b      	adds	r3, r7, r4
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	193b      	adds	r3, r7, r4
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	193a      	adds	r2, r7, r4
 80010aa:	2390      	movs	r3, #144	@ 0x90
 80010ac:	05db      	lsls	r3, r3, #23
 80010ae:	0011      	movs	r1, r2
 80010b0:	0018      	movs	r0, r3
 80010b2:	f000 fe5b 	bl	8001d6c <HAL_GPIO_Init>
 80010b6:	193b      	adds	r3, r7, r4
 80010b8:	2210      	movs	r2, #16
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	193b      	adds	r3, r7, r4
 80010be:	2201      	movs	r2, #1
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	193b      	adds	r3, r7, r4
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	193b      	adds	r3, r7, r4
 80010ca:	2203      	movs	r2, #3
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	193a      	adds	r2, r7, r4
 80010d0:	2390      	movs	r3, #144	@ 0x90
 80010d2:	05db      	lsls	r3, r3, #23
 80010d4:	0011      	movs	r1, r2
 80010d6:	0018      	movs	r0, r3
 80010d8:	f000 fe48 	bl	8001d6c <HAL_GPIO_Init>
 80010dc:	0021      	movs	r1, r4
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2201      	movs	r2, #1
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	2284      	movs	r2, #132	@ 0x84
 80010e8:	0392      	lsls	r2, r2, #14
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	187b      	adds	r3, r7, r1
 80010ee:	2201      	movs	r2, #1
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	000c      	movs	r4, r1
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <MX_GPIO_Init+0x128>)
 80010f8:	0019      	movs	r1, r3
 80010fa:	0010      	movs	r0, r2
 80010fc:	f000 fe36 	bl	8001d6c <HAL_GPIO_Init>
 8001100:	0021      	movs	r1, r4
 8001102:	187b      	adds	r3, r7, r1
 8001104:	2280      	movs	r2, #128	@ 0x80
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	187b      	adds	r3, r7, r1
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	187b      	adds	r3, r7, r1
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	187a      	adds	r2, r7, r1
 8001118:	2390      	movs	r3, #144	@ 0x90
 800111a:	05db      	lsls	r3, r3, #23
 800111c:	0011      	movs	r1, r2
 800111e:	0018      	movs	r0, r3
 8001120:	f000 fe24 	bl	8001d6c <HAL_GPIO_Init>
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	2005      	movs	r0, #5
 800112a:	f000 fd6f 	bl	8001c0c <HAL_NVIC_SetPriority>
 800112e:	2005      	movs	r0, #5
 8001130:	f000 fd81 	bl	8001c36 <HAL_NVIC_EnableIRQ>
 8001134:	46c0      	nop			@ (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b009      	add	sp, #36	@ 0x24
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	40021000 	.word	0x40021000
 8001140:	48000400 	.word	0x48000400

08001144 <HAL_UART_RxCpltCallback>:
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	4906      	ldr	r1, [pc, #24]	@ (8001168 <HAL_UART_RxCpltCallback+0x24>)
 800114e:	4b07      	ldr	r3, [pc, #28]	@ (800116c <HAL_UART_RxCpltCallback+0x28>)
 8001150:	2201      	movs	r2, #1
 8001152:	0018      	movs	r0, r3
 8001154:	f001 fea5 	bl	8002ea2 <HAL_UART_Receive_IT>
 8001158:	0003      	movs	r3, r0
 800115a:	001a      	movs	r2, r3
 800115c:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <HAL_UART_RxCpltCallback+0x2c>)
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	46c0      	nop			@ (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	b002      	add	sp, #8
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000194 	.word	0x20000194
 800116c:	2000010c 	.word	0x2000010c
 8001170:	20000195 	.word	0x20000195

08001174 <Error_Handler>:
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
 8001178:	b672      	cpsid	i
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	46c0      	nop			@ (mov r8, r8)
 800117e:	e7fd      	b.n	800117c <Error_Handler+0x8>

08001180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001186:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <HAL_MspInit+0x44>)
 8001188:	699a      	ldr	r2, [r3, #24]
 800118a:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <HAL_MspInit+0x44>)
 800118c:	2101      	movs	r1, #1
 800118e:	430a      	orrs	r2, r1
 8001190:	619a      	str	r2, [r3, #24]
 8001192:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <HAL_MspInit+0x44>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	2201      	movs	r2, #1
 8001198:	4013      	ands	r3, r2
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <HAL_MspInit+0x44>)
 80011a0:	69da      	ldr	r2, [r3, #28]
 80011a2:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <HAL_MspInit+0x44>)
 80011a4:	2180      	movs	r1, #128	@ 0x80
 80011a6:	0549      	lsls	r1, r1, #21
 80011a8:	430a      	orrs	r2, r1
 80011aa:	61da      	str	r2, [r3, #28]
 80011ac:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <HAL_MspInit+0x44>)
 80011ae:	69da      	ldr	r2, [r3, #28]
 80011b0:	2380      	movs	r3, #128	@ 0x80
 80011b2:	055b      	lsls	r3, r3, #21
 80011b4:	4013      	ands	r3, r2
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	b002      	add	sp, #8
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			@ (mov r8, r8)
 80011c4:	40021000 	.word	0x40021000

080011c8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b08d      	sub	sp, #52	@ 0x34
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	241c      	movs	r4, #28
 80011d2:	193b      	adds	r3, r7, r4
 80011d4:	0018      	movs	r0, r3
 80011d6:	2314      	movs	r3, #20
 80011d8:	001a      	movs	r2, r3
 80011da:	2100      	movs	r1, #0
 80011dc:	f003 f8b6 	bl	800434c <memset>
  if(huart->Instance==USART1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a3d      	ldr	r2, [pc, #244]	@ (80012dc <HAL_UART_MspInit+0x114>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d134      	bne.n	8001254 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011ea:	4b3d      	ldr	r3, [pc, #244]	@ (80012e0 <HAL_UART_MspInit+0x118>)
 80011ec:	699a      	ldr	r2, [r3, #24]
 80011ee:	4b3c      	ldr	r3, [pc, #240]	@ (80012e0 <HAL_UART_MspInit+0x118>)
 80011f0:	2180      	movs	r1, #128	@ 0x80
 80011f2:	01c9      	lsls	r1, r1, #7
 80011f4:	430a      	orrs	r2, r1
 80011f6:	619a      	str	r2, [r3, #24]
 80011f8:	4b39      	ldr	r3, [pc, #228]	@ (80012e0 <HAL_UART_MspInit+0x118>)
 80011fa:	699a      	ldr	r2, [r3, #24]
 80011fc:	2380      	movs	r3, #128	@ 0x80
 80011fe:	01db      	lsls	r3, r3, #7
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
 8001204:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b36      	ldr	r3, [pc, #216]	@ (80012e0 <HAL_UART_MspInit+0x118>)
 8001208:	695a      	ldr	r2, [r3, #20]
 800120a:	4b35      	ldr	r3, [pc, #212]	@ (80012e0 <HAL_UART_MspInit+0x118>)
 800120c:	2180      	movs	r1, #128	@ 0x80
 800120e:	0289      	lsls	r1, r1, #10
 8001210:	430a      	orrs	r2, r1
 8001212:	615a      	str	r2, [r3, #20]
 8001214:	4b32      	ldr	r3, [pc, #200]	@ (80012e0 <HAL_UART_MspInit+0x118>)
 8001216:	695a      	ldr	r2, [r3, #20]
 8001218:	2380      	movs	r3, #128	@ 0x80
 800121a:	029b      	lsls	r3, r3, #10
 800121c:	4013      	ands	r3, r2
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001222:	193b      	adds	r3, r7, r4
 8001224:	22c0      	movs	r2, #192	@ 0xc0
 8001226:	00d2      	lsls	r2, r2, #3
 8001228:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	0021      	movs	r1, r4
 800122c:	187b      	adds	r3, r7, r1
 800122e:	2202      	movs	r2, #2
 8001230:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	187b      	adds	r3, r7, r1
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001238:	187b      	adds	r3, r7, r1
 800123a:	2203      	movs	r2, #3
 800123c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800123e:	187b      	adds	r3, r7, r1
 8001240:	2201      	movs	r2, #1
 8001242:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	187a      	adds	r2, r7, r1
 8001246:	2390      	movs	r3, #144	@ 0x90
 8001248:	05db      	lsls	r3, r3, #23
 800124a:	0011      	movs	r1, r2
 800124c:	0018      	movs	r0, r3
 800124e:	f000 fd8d 	bl	8001d6c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001252:	e03f      	b.n	80012d4 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a22      	ldr	r2, [pc, #136]	@ (80012e4 <HAL_UART_MspInit+0x11c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d13a      	bne.n	80012d4 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800125e:	4b20      	ldr	r3, [pc, #128]	@ (80012e0 <HAL_UART_MspInit+0x118>)
 8001260:	69da      	ldr	r2, [r3, #28]
 8001262:	4b1f      	ldr	r3, [pc, #124]	@ (80012e0 <HAL_UART_MspInit+0x118>)
 8001264:	2180      	movs	r1, #128	@ 0x80
 8001266:	0289      	lsls	r1, r1, #10
 8001268:	430a      	orrs	r2, r1
 800126a:	61da      	str	r2, [r3, #28]
 800126c:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <HAL_UART_MspInit+0x118>)
 800126e:	69da      	ldr	r2, [r3, #28]
 8001270:	2380      	movs	r3, #128	@ 0x80
 8001272:	029b      	lsls	r3, r3, #10
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <HAL_UART_MspInit+0x118>)
 800127c:	695a      	ldr	r2, [r3, #20]
 800127e:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <HAL_UART_MspInit+0x118>)
 8001280:	2180      	movs	r1, #128	@ 0x80
 8001282:	0289      	lsls	r1, r1, #10
 8001284:	430a      	orrs	r2, r1
 8001286:	615a      	str	r2, [r3, #20]
 8001288:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <HAL_UART_MspInit+0x118>)
 800128a:	695a      	ldr	r2, [r3, #20]
 800128c:	2380      	movs	r3, #128	@ 0x80
 800128e:	029b      	lsls	r3, r3, #10
 8001290:	4013      	ands	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001296:	211c      	movs	r1, #28
 8001298:	187b      	adds	r3, r7, r1
 800129a:	4a13      	ldr	r2, [pc, #76]	@ (80012e8 <HAL_UART_MspInit+0x120>)
 800129c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	2202      	movs	r2, #2
 80012a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	187b      	adds	r3, r7, r1
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012aa:	187b      	adds	r3, r7, r1
 80012ac:	2203      	movs	r2, #3
 80012ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	2201      	movs	r2, #1
 80012b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	187a      	adds	r2, r7, r1
 80012b8:	2390      	movs	r3, #144	@ 0x90
 80012ba:	05db      	lsls	r3, r3, #23
 80012bc:	0011      	movs	r1, r2
 80012be:	0018      	movs	r0, r3
 80012c0:	f000 fd54 	bl	8001d6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2100      	movs	r1, #0
 80012c8:	201c      	movs	r0, #28
 80012ca:	f000 fc9f 	bl	8001c0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012ce:	201c      	movs	r0, #28
 80012d0:	f000 fcb1 	bl	8001c36 <HAL_NVIC_EnableIRQ>
}
 80012d4:	46c0      	nop			@ (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b00d      	add	sp, #52	@ 0x34
 80012da:	bd90      	pop	{r4, r7, pc}
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40004400 	.word	0x40004400
 80012e8:	00008004 	.word	0x00008004

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f0:	46c0      	nop			@ (mov r8, r8)
 80012f2:	e7fd      	b.n	80012f0 <NMI_Handler+0x4>

080012f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f8:	46c0      	nop			@ (mov r8, r8)
 80012fa:	e7fd      	b.n	80012f8 <HardFault_Handler+0x4>

080012fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001300:	46c0      	nop			@ (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130a:	46c0      	nop			@ (mov r8, r8)
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001314:	f000 fbb2 	bl	8001a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001318:	46c0      	nop			@ (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TTY_RECV_Pin);
 8001322:	2001      	movs	r0, #1
 8001324:	f000 fec4 	bl	80020b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001328:	46c0      	nop			@ (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001334:	4b03      	ldr	r3, [pc, #12]	@ (8001344 <USART2_IRQHandler+0x14>)
 8001336:	0018      	movs	r0, r3
 8001338:	f001 fe0a 	bl	8002f50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800133c:	46c0      	nop			@ (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			@ (mov r8, r8)
 8001344:	2000010c 	.word	0x2000010c

08001348 <sbf_len>:
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	e002      	b.n	800135c <sbf_len+0x14>
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	3301      	adds	r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	18d3      	adds	r3, r2, r3
 8001362:	2200      	movs	r2, #0
 8001364:	569a      	ldrsb	r2, [r3, r2]
 8001366:	2301      	movs	r3, #1
 8001368:	425b      	negs	r3, r3
 800136a:	429a      	cmp	r2, r3
 800136c:	d1f3      	bne.n	8001356 <sbf_len+0xe>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	0018      	movs	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	b004      	add	sp, #16
 8001376:	bd80      	pop	{r7, pc}

08001378 <sbf_createSymbolBuffer>:
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	2001      	movs	r0, #1
 8001380:	f002 ff1e 	bl	80041c0 <malloc>
 8001384:	0003      	movs	r3, r0
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <sbf_createSymbolBuffer+0x1a>
 800138e:	f000 fa47 	bl	8001820 <TTY_raiseMemoryError>
 8001392:	2301      	movs	r3, #1
 8001394:	425a      	negs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	701a      	strb	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	0018      	movs	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	b002      	add	sp, #8
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <sbf_appendSym>:
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	000a      	movs	r2, r1
 80013ae:	1cfb      	adds	r3, r7, #3
 80013b0:	701a      	strb	r2, [r3, #0]
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	2301      	movs	r3, #1
 80013b8:	425b      	negs	r3, r3
 80013ba:	1cfa      	adds	r2, r7, #3
 80013bc:	7812      	ldrb	r2, [r2, #0]
 80013be:	b252      	sxtb	r2, r2
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d101      	bne.n	80013c8 <sbf_appendSym+0x24>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	e053      	b.n	8001470 <sbf_appendSym+0xcc>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d114      	bne.n	80013f8 <sbf_appendSym+0x54>
 80013ce:	2002      	movs	r0, #2
 80013d0:	f002 fef6 	bl	80041c0 <malloc>
 80013d4:	0003      	movs	r3, r0
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <sbf_appendSym+0x3e>
 80013de:	f000 fa1f 	bl	8001820 <TTY_raiseMemoryError>
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	1cfa      	adds	r2, r7, #3
 80013e6:	7812      	ldrb	r2, [r2, #0]
 80013e8:	701a      	strb	r2, [r3, #0]
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	3301      	adds	r3, #1
 80013ee:	2201      	movs	r2, #1
 80013f0:	4252      	negs	r2, r2
 80013f2:	701a      	strb	r2, [r3, #0]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	e03b      	b.n	8001470 <sbf_appendSym+0xcc>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	0018      	movs	r0, r3
 80013fc:	f7ff ffa4 	bl	8001348 <sbf_len>
 8001400:	0003      	movs	r3, r0
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	3302      	adds	r3, #2
 8001408:	0018      	movs	r0, r3
 800140a:	f002 fed9 	bl	80041c0 <malloc>
 800140e:	0003      	movs	r3, r0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <sbf_appendSym+0x78>
 8001418:	f000 fa02 	bl	8001820 <TTY_raiseMemoryError>
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	e00b      	b.n	800143a <sbf_appendSym+0x96>
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	18d2      	adds	r2, r2, r3
 8001428:	68f9      	ldr	r1, [r7, #12]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	18cb      	adds	r3, r1, r3
 800142e:	7812      	ldrb	r2, [r2, #0]
 8001430:	b252      	sxtb	r2, r2
 8001432:	701a      	strb	r2, [r3, #0]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3301      	adds	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	18d3      	adds	r3, r2, r3
 8001440:	2200      	movs	r2, #0
 8001442:	569a      	ldrsb	r2, [r3, r2]
 8001444:	2301      	movs	r3, #1
 8001446:	425b      	negs	r3, r3
 8001448:	429a      	cmp	r2, r3
 800144a:	d1ea      	bne.n	8001422 <sbf_appendSym+0x7e>
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	18d3      	adds	r3, r2, r3
 8001452:	1cfa      	adds	r2, r7, #3
 8001454:	7812      	ldrb	r2, [r2, #0]
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	3301      	adds	r3, #1
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	18d3      	adds	r3, r2, r3
 8001460:	2201      	movs	r2, #1
 8001462:	4252      	negs	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	0018      	movs	r0, r3
 800146a:	f002 feb3 	bl	80041d4 <free>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	0018      	movs	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	b006      	add	sp, #24
 8001476:	bd80      	pop	{r7, pc}

08001478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001480:	4a14      	ldr	r2, [pc, #80]	@ (80014d4 <_sbrk+0x5c>)
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <_sbrk+0x60>)
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800148c:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <_sbrk+0x64>)
 8001496:	4a12      	ldr	r2, [pc, #72]	@ (80014e0 <_sbrk+0x68>)
 8001498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149a:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	18d3      	adds	r3, r2, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d207      	bcs.n	80014b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a8:	f002 ff6a 	bl	8004380 <__errno>
 80014ac:	0003      	movs	r3, r0
 80014ae:	220c      	movs	r2, #12
 80014b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b2:	2301      	movs	r3, #1
 80014b4:	425b      	negs	r3, r3
 80014b6:	e009      	b.n	80014cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b8:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014be:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	18d2      	adds	r2, r2, r3
 80014c6:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <_sbrk+0x64>)
 80014c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80014ca:	68fb      	ldr	r3, [r7, #12]
}
 80014cc:	0018      	movs	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b006      	add	sp, #24
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20001800 	.word	0x20001800
 80014d8:	00000400 	.word	0x00000400
 80014dc:	20000198 	.word	0x20000198
 80014e0:	200002f0 	.word	0x200002f0

080014e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80014e8:	46c0      	nop			@ (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014f4:	f3bf 8f4f 	dsb	sy
}
 80014f8:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fa:	4b04      	ldr	r3, [pc, #16]	@ (800150c <__NVIC_SystemReset+0x1c>)
 80014fc:	4a04      	ldr	r2, [pc, #16]	@ (8001510 <__NVIC_SystemReset+0x20>)
 80014fe:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001500:	f3bf 8f4f 	dsb	sy
}
 8001504:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	e7fd      	b.n	8001506 <__NVIC_SystemReset+0x16>
 800150a:	46c0      	nop			@ (mov r8, r8)
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	05fa0004 	.word	0x05fa0004

08001514 <TTY_Init>:
	cr, lf, ltrs, m, e, m, o, r, y, space, e, r, r, o, r, figs,
	comma, ltrs, space, r, e, s, e, t, t, i, n, g, space,
	c, p, u, figs, period, bell, bell, bell, bell, bell, -1
};

void TTY_Init(){
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	// this loads the contents from flash and sets the variables
}
 8001518:	46c0      	nop			@ (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <TTY_Fox>:

// -----------------------------------------------------------------
// Debug function prints a brown fox
void TTY_Fox(void){
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
	int8_t* cl = sbf_createSymbolBuffer();
 8001524:	f7ff ff28 	bl	8001378 <sbf_createSymbolBuffer>
 8001528:	0003      	movs	r3, r0
 800152a:	607b      	str	r3, [r7, #4]
	while(1) {
		// current issue: We read slower than we think
		uint8_t sym = readSymbol();
 800152c:	f000 f875 	bl	800161a <readSymbol>
 8001530:	0003      	movs	r3, r0
 8001532:	001a      	movs	r2, r3
 8001534:	1cfb      	adds	r3, r7, #3
 8001536:	701a      	strb	r2, [r3, #0]
		cl = sbf_appendSym(cl, sym);
 8001538:	1cfb      	adds	r3, r7, #3
 800153a:	2200      	movs	r2, #0
 800153c:	569a      	ldrsb	r2, [r3, r2]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	0011      	movs	r1, r2
 8001542:	0018      	movs	r0, r3
 8001544:	f7ff ff2e 	bl	80013a4 <sbf_appendSym>
 8001548:	0003      	movs	r3, r0
 800154a:	607b      	str	r3, [r7, #4]
	while(1) {
 800154c:	46c0      	nop			@ (mov r8, r8)
 800154e:	e7ed      	b.n	800152c <TTY_Fox+0xe>

08001550 <TTY_Write>:
    }
    out[0] = SBF_TERMINATOR;  // Null-terminate
    return out;
}

void TTY_Write(int8_t _sym){
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	0002      	movs	r2, r0
 8001558:	1dfb      	adds	r3, r7, #7
 800155a:	701a      	strb	r2, [r3, #0]
	if (_sym == -1) return;
 800155c:	1dfb      	adds	r3, r7, #7
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b25b      	sxtb	r3, r3
 8001562:	3301      	adds	r3, #1
 8001564:	d03a      	beq.n	80015dc <TTY_Write+0x8c>

	// Skip redundant ltrs/figs commands
	if (_sym == TTY_FIGURES || _sym == TTY_LETTERS)
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b25b      	sxtb	r3, r3
 800156c:	2b01      	cmp	r3, #1
 800156e:	d004      	beq.n	800157a <TTY_Write+0x2a>
 8001570:	1dfb      	adds	r3, r7, #7
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b25b      	sxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d102      	bne.n	8001580 <TTY_Write+0x30>
		tty_mode = TTY_FIGURES ?
 800157a:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <TTY_Write+0x94>)
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]
				TTY_FIGURES : TTY_LETTERS;

    // ---TRANSMIT--------------------------------------------------
	TTY_Startbit();
 8001580:	f000 f9ac 	bl	80018dc <TTY_Startbit>

	// LSB FIRST!
    for (uint8_t i = 0; i < 5; i++) {
 8001584:	230f      	movs	r3, #15
 8001586:	18fb      	adds	r3, r7, r3
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
 800158c:	e01e      	b.n	80015cc <TTY_Write+0x7c>
        uint8_t bit = ((_sym >> i) & 0x01) ^ 1;
 800158e:	1dfb      	adds	r3, r7, #7
 8001590:	2200      	movs	r2, #0
 8001592:	569a      	ldrsb	r2, [r3, r2]
 8001594:	240f      	movs	r4, #15
 8001596:	193b      	adds	r3, r7, r4
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	411a      	asrs	r2, r3
 800159c:	0013      	movs	r3, r2
 800159e:	2201      	movs	r2, #1
 80015a0:	4013      	ands	r3, r2
 80015a2:	425a      	negs	r2, r3
 80015a4:	4153      	adcs	r3, r2
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	210e      	movs	r1, #14
 80015aa:	187b      	adds	r3, r7, r1
 80015ac:	701a      	strb	r2, [r3, #0]
        setTTY(bit);
 80015ae:	187b      	adds	r3, r7, r1
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	0018      	movs	r0, r3
 80015b4:	f000 f91e 	bl	80017f4 <setTTY>
        TTY_Delay(1);
 80015b8:	23fe      	movs	r3, #254	@ 0xfe
 80015ba:	059b      	lsls	r3, r3, #22
 80015bc:	1c18      	adds	r0, r3, #0
 80015be:	f000 f96b 	bl	8001898 <TTY_Delay>
    for (uint8_t i = 0; i < 5; i++) {
 80015c2:	193b      	adds	r3, r7, r4
 80015c4:	781a      	ldrb	r2, [r3, #0]
 80015c6:	193b      	adds	r3, r7, r4
 80015c8:	3201      	adds	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]
 80015cc:	230f      	movs	r3, #15
 80015ce:	18fb      	adds	r3, r7, r3
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d9db      	bls.n	800158e <TTY_Write+0x3e>
    }
	// send those 5 bits
	TTY_Stopbit();
 80015d6:	f000 f98f 	bl	80018f8 <TTY_Stopbit>
 80015da:	e000      	b.n	80015de <TTY_Write+0x8e>
	if (_sym == -1) return;
 80015dc:	46c0      	nop			@ (mov r8, r8)
}
 80015de:	46bd      	mov	sp, r7
 80015e0:	b005      	add	sp, #20
 80015e2:	bd90      	pop	{r4, r7, pc}
 80015e4:	2000019c 	.word	0x2000019c

080015e8 <majority>:
	return _out;
}


// --- private -----------------------------------------------------
uint8_t majority(Databit d) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	6018      	str	r0, [r3, #0]
 80015f2:	6059      	str	r1, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
    return (d.s1 + d.s2 + d.s3) >= 2 ? 1 : 0;
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	18d2      	adds	r2, r2, r3
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	18d3      	adds	r3, r2, r3
 8001606:	2201      	movs	r2, #1
 8001608:	2b01      	cmp	r3, #1
 800160a:	dc01      	bgt.n	8001610 <majority+0x28>
 800160c:	2300      	movs	r3, #0
 800160e:	1c1a      	adds	r2, r3, #0
 8001610:	b2d3      	uxtb	r3, r2
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b004      	add	sp, #16
 8001618:	bd80      	pop	{r7, pc}

0800161a <readSymbol>:

int8_t readSymbol() {
 800161a:	b590      	push	{r4, r7, lr}
 800161c:	b091      	sub	sp, #68	@ 0x44
 800161e:	af00      	add	r7, sp, #0
	// wait for Symbol-Trigger
	while(1){
		if (readTTY() == 0) TTY_DelayMS(2);
 8001620:	f000 f8c4 	bl	80017ac <readTTY>
 8001624:	1e03      	subs	r3, r0, #0
 8001626:	d103      	bne.n	8001630 <readSymbol+0x16>
 8001628:	2002      	movs	r0, #2
 800162a:	f000 f91f 	bl	800186c <TTY_DelayMS>
 800162e:	e7f7      	b.n	8001620 <readSymbol+0x6>
		else break;
 8001630:	46c0      	nop			@ (mov r8, r8)
	}
	// read start-bit
	// pattern: 20ms startbit, 5x20ms Databit, 1.n stopbits
	// STARTBIT is 20ms HIGH
	TTY_DelayMS(10);	// Wait 10ms
 8001632:	200a      	movs	r0, #10
 8001634:	f000 f91a 	bl	800186c <TTY_DelayMS>
	uint8_t beg = readTTY();
 8001638:	f000 f8b8 	bl	80017ac <readTTY>
 800163c:	0003      	movs	r3, r0
 800163e:	001a      	movs	r2, r3
 8001640:	233d      	movs	r3, #61	@ 0x3d
 8001642:	18fb      	adds	r3, r7, r3
 8001644:	701a      	strb	r2, [r3, #0]
	TTY_DelayMS(15);	// Wait 5 + 10ms
 8001646:	200f      	movs	r0, #15
 8001648:	f000 f910 	bl	800186c <TTY_DelayMS>
	// NOTE: the additional delay (above) is the SAMPLING OFFSET!

	Databit databit[5];
	for (uint8_t i = 0; i < 5; i++){
 800164c:	233f      	movs	r3, #63	@ 0x3f
 800164e:	18fb      	adds	r3, r7, r3
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
 8001654:	e039      	b.n	80016ca <readSymbol+0xb0>
		databit[i].s1 = readTTY();
 8001656:	f000 f8a9 	bl	80017ac <readTTY>
 800165a:	0003      	movs	r3, r0
 800165c:	0019      	movs	r1, r3
 800165e:	243f      	movs	r4, #63	@ 0x3f
 8001660:	193b      	adds	r3, r7, r4
 8001662:	781a      	ldrb	r2, [r3, #0]
 8001664:	0008      	movs	r0, r1
 8001666:	0039      	movs	r1, r7
 8001668:	0013      	movs	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	189b      	adds	r3, r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	5058      	str	r0, [r3, r1]
		TTY_DelayMS(5); // 5ms Delay
 8001672:	2005      	movs	r0, #5
 8001674:	f000 f8fa 	bl	800186c <TTY_DelayMS>
		databit[i].s2 = readTTY();
 8001678:	f000 f898 	bl	80017ac <readTTY>
 800167c:	0003      	movs	r3, r0
 800167e:	0019      	movs	r1, r3
 8001680:	193b      	adds	r3, r7, r4
 8001682:	781a      	ldrb	r2, [r3, #0]
 8001684:	0008      	movs	r0, r1
 8001686:	0039      	movs	r1, r7
 8001688:	0013      	movs	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	189b      	adds	r3, r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	18cb      	adds	r3, r1, r3
 8001692:	3304      	adds	r3, #4
 8001694:	6018      	str	r0, [r3, #0]
		TTY_DelayMS(5); // 5ms Delay
 8001696:	2005      	movs	r0, #5
 8001698:	f000 f8e8 	bl	800186c <TTY_DelayMS>
		databit[i].s3 = readTTY();
 800169c:	f000 f886 	bl	80017ac <readTTY>
 80016a0:	0003      	movs	r3, r0
 80016a2:	0019      	movs	r1, r3
 80016a4:	193b      	adds	r3, r7, r4
 80016a6:	781a      	ldrb	r2, [r3, #0]
 80016a8:	0008      	movs	r0, r1
 80016aa:	0039      	movs	r1, r7
 80016ac:	0013      	movs	r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	189b      	adds	r3, r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	18cb      	adds	r3, r1, r3
 80016b6:	3308      	adds	r3, #8
 80016b8:	6018      	str	r0, [r3, #0]
		TTY_DelayMS(10); // 10ms delay
 80016ba:	200a      	movs	r0, #10
 80016bc:	f000 f8d6 	bl	800186c <TTY_DelayMS>
	for (uint8_t i = 0; i < 5; i++){
 80016c0:	193b      	adds	r3, r7, r4
 80016c2:	781a      	ldrb	r2, [r3, #0]
 80016c4:	193b      	adds	r3, r7, r4
 80016c6:	3201      	adds	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
 80016ca:	233f      	movs	r3, #63	@ 0x3f
 80016cc:	18fb      	adds	r3, r7, r3
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d9c0      	bls.n	8001656 <readSymbol+0x3c>
	}

	TTY_DelayMS(5);
 80016d4:	2005      	movs	r0, #5
 80016d6:	f000 f8c9 	bl	800186c <TTY_DelayMS>


	uint8_t end = readTTY();
 80016da:	f000 f867 	bl	80017ac <readTTY>
 80016de:	0003      	movs	r3, r0
 80016e0:	001a      	movs	r2, r3
 80016e2:	213c      	movs	r1, #60	@ 0x3c
 80016e4:	187b      	adds	r3, r7, r1
 80016e6:	701a      	strb	r2, [r3, #0]

	// Eval Bits
	if (beg == 0 || end != 0){
 80016e8:	233d      	movs	r3, #61	@ 0x3d
 80016ea:	18fb      	adds	r3, r7, r3
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <readSymbol+0xe0>
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d004      	beq.n	8001704 <readSymbol+0xea>
		setReadError();
 80016fa:	f000 f90d 	bl	8001918 <setReadError>
		return -1;
 80016fe:	2301      	movs	r3, #1
 8001700:	425b      	negs	r3, r3
 8001702:	e04e      	b.n	80017a2 <readSymbol+0x188>
	}

    uint8_t out = 0;
 8001704:	243e      	movs	r4, #62	@ 0x3e
 8001706:	193b      	adds	r3, r7, r4
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]

    if (majority(databit[0]) == 0) out += 1;
 800170c:	003b      	movs	r3, r7
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	6859      	ldr	r1, [r3, #4]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	f7ff ff68 	bl	80015e8 <majority>
 8001718:	1e03      	subs	r3, r0, #0
 800171a:	d104      	bne.n	8001726 <readSymbol+0x10c>
 800171c:	193b      	adds	r3, r7, r4
 800171e:	193a      	adds	r2, r7, r4
 8001720:	7812      	ldrb	r2, [r2, #0]
 8001722:	3201      	adds	r2, #1
 8001724:	701a      	strb	r2, [r3, #0]
    if (majority(databit[1]) == 0) out += 2;
 8001726:	003b      	movs	r3, r7
 8001728:	68d8      	ldr	r0, [r3, #12]
 800172a:	6919      	ldr	r1, [r3, #16]
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	f7ff ff5b 	bl	80015e8 <majority>
 8001732:	1e03      	subs	r3, r0, #0
 8001734:	d105      	bne.n	8001742 <readSymbol+0x128>
 8001736:	223e      	movs	r2, #62	@ 0x3e
 8001738:	18bb      	adds	r3, r7, r2
 800173a:	18ba      	adds	r2, r7, r2
 800173c:	7812      	ldrb	r2, [r2, #0]
 800173e:	3202      	adds	r2, #2
 8001740:	701a      	strb	r2, [r3, #0]
    if (majority(databit[2]) == 0) out += 4;
 8001742:	003b      	movs	r3, r7
 8001744:	6998      	ldr	r0, [r3, #24]
 8001746:	69d9      	ldr	r1, [r3, #28]
 8001748:	6a1a      	ldr	r2, [r3, #32]
 800174a:	f7ff ff4d 	bl	80015e8 <majority>
 800174e:	1e03      	subs	r3, r0, #0
 8001750:	d105      	bne.n	800175e <readSymbol+0x144>
 8001752:	223e      	movs	r2, #62	@ 0x3e
 8001754:	18bb      	adds	r3, r7, r2
 8001756:	18ba      	adds	r2, r7, r2
 8001758:	7812      	ldrb	r2, [r2, #0]
 800175a:	3204      	adds	r2, #4
 800175c:	701a      	strb	r2, [r3, #0]
    if (majority(databit[3]) == 0) out += 8;
 800175e:	003b      	movs	r3, r7
 8001760:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001762:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001766:	f7ff ff3f 	bl	80015e8 <majority>
 800176a:	1e03      	subs	r3, r0, #0
 800176c:	d105      	bne.n	800177a <readSymbol+0x160>
 800176e:	223e      	movs	r2, #62	@ 0x3e
 8001770:	18bb      	adds	r3, r7, r2
 8001772:	18ba      	adds	r2, r7, r2
 8001774:	7812      	ldrb	r2, [r2, #0]
 8001776:	3208      	adds	r2, #8
 8001778:	701a      	strb	r2, [r3, #0]
    if (majority(databit[4]) == 0) out += 16;
 800177a:	003b      	movs	r3, r7
 800177c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800177e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001780:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001782:	f7ff ff31 	bl	80015e8 <majority>
 8001786:	1e03      	subs	r3, r0, #0
 8001788:	d105      	bne.n	8001796 <readSymbol+0x17c>
 800178a:	223e      	movs	r2, #62	@ 0x3e
 800178c:	18bb      	adds	r3, r7, r2
 800178e:	18ba      	adds	r2, r7, r2
 8001790:	7812      	ldrb	r2, [r2, #0]
 8001792:	3210      	adds	r2, #16
 8001794:	701a      	strb	r2, [r3, #0]

    clearReadError();
 8001796:	f000 f8cb 	bl	8001930 <clearReadError>

    //HAL_Delay(10);	// Stobbit should be <20ms
    return out;
 800179a:	233e      	movs	r3, #62	@ 0x3e
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b25b      	sxtb	r3, r3
}
 80017a2:	0018      	movs	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b011      	add	sp, #68	@ 0x44
 80017a8:	bd90      	pop	{r4, r7, pc}
	...

080017ac <readTTY>:


// --- Hardware Interfaces -----------------------------------------
int8_t readTTY(){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
	int8_t out = -1;
 80017b2:	1dfb      	adds	r3, r7, #7
 80017b4:	22ff      	movs	r2, #255	@ 0xff
 80017b6:	701a      	strb	r2, [r3, #0]
	out = HAL_GPIO_ReadPin(GPIOB, TTY_RECV_Pin);
 80017b8:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <readTTY+0x40>)
 80017ba:	2101      	movs	r1, #1
 80017bc:	0018      	movs	r0, r3
 80017be:	f000 fc3d 	bl	800203c <HAL_GPIO_ReadPin>
 80017c2:	0003      	movs	r3, r0
 80017c4:	001a      	movs	r2, r3
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	701a      	strb	r2, [r3, #0]
	if (loopback != 0) setTTY(out);
 80017ca:	4b09      	ldr	r3, [pc, #36]	@ (80017f0 <readTTY+0x44>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d004      	beq.n	80017dc <readTTY+0x30>
 80017d2:	1dfb      	adds	r3, r7, #7
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	0018      	movs	r0, r3
 80017d8:	f000 f80c 	bl	80017f4 <setTTY>
	return out;
 80017dc:	1dfb      	adds	r3, r7, #7
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	b25b      	sxtb	r3, r3
}
 80017e2:	0018      	movs	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b002      	add	sp, #8
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	46c0      	nop			@ (mov r8, r8)
 80017ec:	48000400 	.word	0x48000400
 80017f0:	2000019e 	.word	0x2000019e

080017f4 <setTTY>:

void setTTY(uint8_t state){			// TTY @ A3
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	0002      	movs	r2, r0
 80017fc:	1dfb      	adds	r3, r7, #7
 80017fe:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,
 8001800:	1dfb      	adds	r3, r7, #7
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	1e5a      	subs	r2, r3, #1
 8001806:	4193      	sbcs	r3, r2
 8001808:	b2db      	uxtb	r3, r3
 800180a:	001a      	movs	r2, r3
 800180c:	2390      	movs	r3, #144	@ 0x90
 800180e:	05db      	lsls	r3, r3, #23
 8001810:	2110      	movs	r1, #16
 8001812:	0018      	movs	r0, r3
 8001814:	f000 fc2f 	bl	8002076 <HAL_GPIO_WritePin>
			state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001818:	46c0      	nop			@ (mov r8, r8)
 800181a:	46bd      	mov	sp, r7
 800181c:	b002      	add	sp, #8
 800181e:	bd80      	pop	{r7, pc}

08001820 <TTY_raiseMemoryError>:

void TTY_raiseMemoryError(void){
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	 *
	 * 1. Send SBF_MEM_ERROR[], symbol by symbol
	 * 2. Reset CPU
	 * 3. Hope for the best
	 */
	emerg_cnt = 0;
 8001824:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <TTY_raiseMemoryError+0x40>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
	while(SBF_MEM_ERROR[emerg_cnt] != SBF_TERMINATOR){
 800182a:	e00d      	b.n	8001848 <TTY_raiseMemoryError+0x28>
		TTY_Write(SBF_MEM_ERROR[emerg_cnt]);
 800182c:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <TTY_raiseMemoryError+0x40>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	001a      	movs	r2, r3
 8001832:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <TTY_raiseMemoryError+0x44>)
 8001834:	569b      	ldrsb	r3, [r3, r2]
 8001836:	0018      	movs	r0, r3
 8001838:	f7ff fe8a 	bl	8001550 <TTY_Write>
		emerg_cnt++;
 800183c:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <TTY_raiseMemoryError+0x40>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	3301      	adds	r3, #1
 8001842:	b2da      	uxtb	r2, r3
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <TTY_raiseMemoryError+0x40>)
 8001846:	701a      	strb	r2, [r3, #0]
	while(SBF_MEM_ERROR[emerg_cnt] != SBF_TERMINATOR){
 8001848:	4b05      	ldr	r3, [pc, #20]	@ (8001860 <TTY_raiseMemoryError+0x40>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	001a      	movs	r2, r3
 800184e:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <TTY_raiseMemoryError+0x44>)
 8001850:	569a      	ldrsb	r2, [r3, r2]
 8001852:	4b05      	ldr	r3, [pc, #20]	@ (8001868 <TTY_raiseMemoryError+0x48>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b25b      	sxtb	r3, r3
 8001858:	429a      	cmp	r2, r3
 800185a:	d1e7      	bne.n	800182c <TTY_raiseMemoryError+0xc>
	}
	NVIC_SystemReset();	// REBOOT CPU
 800185c:	f7ff fe48 	bl	80014f0 <__NVIC_SystemReset>
 8001860:	2000019d 	.word	0x2000019d
 8001864:	0800451c 	.word	0x0800451c
 8001868:	08004500 	.word	0x08004500

0800186c <TTY_DelayMS>:
}

// --- Timing ------------------------------------------------------
void TTY_DelayMS(uint32_t ms){
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	uint32_t start = HAL_GetTick();
 8001874:	f000 f914 	bl	8001aa0 <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	60fb      	str	r3, [r7, #12]
	while ((HAL_GetTick() - start) < ms);
 800187c:	46c0      	nop			@ (mov r8, r8)
 800187e:	f000 f90f 	bl	8001aa0 <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	429a      	cmp	r2, r3
 800188c:	d8f7      	bhi.n	800187e <TTY_DelayMS+0x12>
}
 800188e:	46c0      	nop			@ (mov r8, r8)
 8001890:	46c0      	nop			@ (mov r8, r8)
 8001892:	46bd      	mov	sp, r7
 8001894:	b004      	add	sp, #16
 8001896:	bd80      	pop	{r7, pc}

08001898 <TTY_Delay>:

void TTY_Delay(float cycles){
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	uint32_t delay_ms = (cycles * ( 1000 / baudrate));
 80018a0:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <TTY_Delay+0x3c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	1c19      	adds	r1, r3, #0
 80018a6:	480c      	ldr	r0, [pc, #48]	@ (80018d8 <TTY_Delay+0x40>)
 80018a8:	f7fe fcd2 	bl	8000250 <__aeabi_fdiv>
 80018ac:	1c03      	adds	r3, r0, #0
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	1c18      	adds	r0, r3, #0
 80018b2:	f7fe fde3 	bl	800047c <__aeabi_fmul>
 80018b6:	1c03      	adds	r3, r0, #0
 80018b8:	1c18      	adds	r0, r3, #0
 80018ba:	f7fe fcb1 	bl	8000220 <__aeabi_f2uiz>
 80018be:	0003      	movs	r3, r0
 80018c0:	60fb      	str	r3, [r7, #12]
	TTY_DelayMS(delay_ms);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	0018      	movs	r0, r3
 80018c6:	f7ff ffd1 	bl	800186c <TTY_DelayMS>
}
 80018ca:	46c0      	nop			@ (mov r8, r8)
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b004      	add	sp, #16
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	20000008 	.word	0x20000008
 80018d8:	447a0000 	.word	0x447a0000

080018dc <TTY_Startbit>:

void TTY_Startbit(){
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	setTTY(1);
 80018e0:	2001      	movs	r0, #1
 80018e2:	f7ff ff87 	bl	80017f4 <setTTY>
	TTY_Delay(1.0);
 80018e6:	23fe      	movs	r3, #254	@ 0xfe
 80018e8:	059b      	lsls	r3, r3, #22
 80018ea:	1c18      	adds	r0, r3, #0
 80018ec:	f7ff ffd4 	bl	8001898 <TTY_Delay>
}
 80018f0:	46c0      	nop			@ (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <TTY_Stopbit>:

void TTY_Stopbit(){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	setTTY(0);
 80018fc:	2000      	movs	r0, #0
 80018fe:	f7ff ff79 	bl	80017f4 <setTTY>
	TTY_Delay(stopbit_cnt);
 8001902:	4b04      	ldr	r3, [pc, #16]	@ (8001914 <TTY_Stopbit+0x1c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	1c18      	adds	r0, r3, #0
 8001908:	f7ff ffc6 	bl	8001898 <TTY_Delay>
}
 800190c:	46c0      	nop			@ (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	46c0      	nop			@ (mov r8, r8)
 8001914:	2000000c 	.word	0x2000000c

08001918 <setReadError>:

void setReadError(){ HAL_GPIO_WritePin(GPIOA, TTY_READERR_Pin, 1); }
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
 800191c:	2390      	movs	r3, #144	@ 0x90
 800191e:	05db      	lsls	r3, r3, #23
 8001920:	2201      	movs	r2, #1
 8001922:	2120      	movs	r1, #32
 8001924:	0018      	movs	r0, r3
 8001926:	f000 fba6 	bl	8002076 <HAL_GPIO_WritePin>
 800192a:	46c0      	nop			@ (mov r8, r8)
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <clearReadError>:
void clearReadError(){ HAL_GPIO_WritePin(GPIOA, TTY_READERR_Pin, 0); }
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
 8001934:	2390      	movs	r3, #144	@ 0x90
 8001936:	05db      	lsls	r3, r3, #23
 8001938:	2200      	movs	r2, #0
 800193a:	2120      	movs	r1, #32
 800193c:	0018      	movs	r0, r3
 800193e:	f000 fb9a 	bl	8002076 <HAL_GPIO_WritePin>
 8001942:	46c0      	nop			@ (mov r8, r8)
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <setLoopback>:

// --- System Properties -------------------------------------------
void setLoopback(uint8_t _loopback) {loopback = _loopback;}
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	0002      	movs	r2, r0
 8001950:	1dfb      	adds	r3, r7, #7
 8001952:	701a      	strb	r2, [r3, #0]
 8001954:	4b03      	ldr	r3, [pc, #12]	@ (8001964 <setLoopback+0x1c>)
 8001956:	1dfa      	adds	r2, r7, #7
 8001958:	7812      	ldrb	r2, [r2, #0]
 800195a:	701a      	strb	r2, [r3, #0]
 800195c:	46c0      	nop			@ (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	b002      	add	sp, #8
 8001962:	bd80      	pop	{r7, pc}
 8001964:	2000019e 	.word	0x2000019e

08001968 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001968:	4813      	ldr	r0, [pc, #76]	@ (80019b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800196a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800196c:	f7ff fdba 	bl	80014e4 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001970:	4812      	ldr	r0, [pc, #72]	@ (80019bc <LoopForever+0x6>)
    LDR R1, [R0]
 8001972:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001974:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001976:	4a12      	ldr	r2, [pc, #72]	@ (80019c0 <LoopForever+0xa>)
    CMP R1, R2
 8001978:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800197a:	d105      	bne.n	8001988 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800197c:	4811      	ldr	r0, [pc, #68]	@ (80019c4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800197e:	4912      	ldr	r1, [pc, #72]	@ (80019c8 <LoopForever+0x12>)
    STR R1, [R0]
 8001980:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001982:	4812      	ldr	r0, [pc, #72]	@ (80019cc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001984:	4912      	ldr	r1, [pc, #72]	@ (80019d0 <LoopForever+0x1a>)
    STR R1, [R0]
 8001986:	6001      	str	r1, [r0, #0]

08001988 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001988:	4812      	ldr	r0, [pc, #72]	@ (80019d4 <LoopForever+0x1e>)
  ldr r1, =_edata
 800198a:	4913      	ldr	r1, [pc, #76]	@ (80019d8 <LoopForever+0x22>)
  ldr r2, =_sidata
 800198c:	4a13      	ldr	r2, [pc, #76]	@ (80019dc <LoopForever+0x26>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001990:	e002      	b.n	8001998 <LoopCopyDataInit>

08001992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001996:	3304      	adds	r3, #4

08001998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800199c:	d3f9      	bcc.n	8001992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199e:	4a10      	ldr	r2, [pc, #64]	@ (80019e0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80019a0:	4c10      	ldr	r4, [pc, #64]	@ (80019e4 <LoopForever+0x2e>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a4:	e001      	b.n	80019aa <LoopFillZerobss>

080019a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a8:	3204      	adds	r2, #4

080019aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ac:	d3fb      	bcc.n	80019a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019ae:	f002 fced 	bl	800438c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019b2:	f7ff fa51 	bl	8000e58 <main>

080019b6 <LoopForever>:

LoopForever:
    b LoopForever
 80019b6:	e7fe      	b.n	80019b6 <LoopForever>
  ldr   r0, =_estack
 80019b8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80019bc:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80019c0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80019c4:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80019c8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80019cc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80019d0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80019dc:	0800456c 	.word	0x0800456c
  ldr r2, =_sbss
 80019e0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80019e4:	200002ec 	.word	0x200002ec

080019e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC1_IRQHandler>
	...

080019ec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f0:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <HAL_Init+0x24>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <HAL_Init+0x24>)
 80019f6:	2110      	movs	r1, #16
 80019f8:	430a      	orrs	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80019fc:	2000      	movs	r0, #0
 80019fe:	f000 f809 	bl	8001a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a02:	f7ff fbbd 	bl	8001180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	0018      	movs	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			@ (mov r8, r8)
 8001a10:	40022000 	.word	0x40022000

08001a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a1c:	4b14      	ldr	r3, [pc, #80]	@ (8001a70 <HAL_InitTick+0x5c>)
 8001a1e:	681c      	ldr	r4, [r3, #0]
 8001a20:	4b14      	ldr	r3, [pc, #80]	@ (8001a74 <HAL_InitTick+0x60>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	0019      	movs	r1, r3
 8001a26:	23fa      	movs	r3, #250	@ 0xfa
 8001a28:	0098      	lsls	r0, r3, #2
 8001a2a:	f7fe fb6d 	bl	8000108 <__udivsi3>
 8001a2e:	0003      	movs	r3, r0
 8001a30:	0019      	movs	r1, r3
 8001a32:	0020      	movs	r0, r4
 8001a34:	f7fe fb68 	bl	8000108 <__udivsi3>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f000 f90b 	bl	8001c56 <HAL_SYSTICK_Config>
 8001a40:	1e03      	subs	r3, r0, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e00f      	b.n	8001a68 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d80b      	bhi.n	8001a66 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	2301      	movs	r3, #1
 8001a52:	425b      	negs	r3, r3
 8001a54:	2200      	movs	r2, #0
 8001a56:	0018      	movs	r0, r3
 8001a58:	f000 f8d8 	bl	8001c0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <HAL_InitTick+0x64>)
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	0018      	movs	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b003      	add	sp, #12
 8001a6e:	bd90      	pop	{r4, r7, pc}
 8001a70:	20000004 	.word	0x20000004
 8001a74:	20000014 	.word	0x20000014
 8001a78:	20000010 	.word	0x20000010

08001a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a80:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <HAL_IncTick+0x1c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	001a      	movs	r2, r3
 8001a86:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <HAL_IncTick+0x20>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	18d2      	adds	r2, r2, r3
 8001a8c:	4b03      	ldr	r3, [pc, #12]	@ (8001a9c <HAL_IncTick+0x20>)
 8001a8e:	601a      	str	r2, [r3, #0]
}
 8001a90:	46c0      	nop			@ (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	20000014 	.word	0x20000014
 8001a9c:	200001a0 	.word	0x200001a0

08001aa0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa4:	4b02      	ldr	r3, [pc, #8]	@ (8001ab0 <HAL_GetTick+0x10>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	200001a0 	.word	0x200001a0

08001ab4 <__NVIC_EnableIRQ>:
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	0002      	movs	r2, r0
 8001abc:	1dfb      	adds	r3, r7, #7
 8001abe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ac0:	1dfb      	adds	r3, r7, #7
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ac6:	d809      	bhi.n	8001adc <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac8:	1dfb      	adds	r3, r7, #7
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	001a      	movs	r2, r3
 8001ace:	231f      	movs	r3, #31
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	4b04      	ldr	r3, [pc, #16]	@ (8001ae4 <__NVIC_EnableIRQ+0x30>)
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	4091      	lsls	r1, r2
 8001ad8:	000a      	movs	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]
}
 8001adc:	46c0      	nop			@ (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b002      	add	sp, #8
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <__NVIC_SetPriority>:
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	0002      	movs	r2, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	1dfb      	adds	r3, r7, #7
 8001af4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001af6:	1dfb      	adds	r3, r7, #7
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b7f      	cmp	r3, #127	@ 0x7f
 8001afc:	d828      	bhi.n	8001b50 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001afe:	4a2f      	ldr	r2, [pc, #188]	@ (8001bbc <__NVIC_SetPriority+0xd4>)
 8001b00:	1dfb      	adds	r3, r7, #7
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	089b      	lsrs	r3, r3, #2
 8001b08:	33c0      	adds	r3, #192	@ 0xc0
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	589b      	ldr	r3, [r3, r2]
 8001b0e:	1dfa      	adds	r2, r7, #7
 8001b10:	7812      	ldrb	r2, [r2, #0]
 8001b12:	0011      	movs	r1, r2
 8001b14:	2203      	movs	r2, #3
 8001b16:	400a      	ands	r2, r1
 8001b18:	00d2      	lsls	r2, r2, #3
 8001b1a:	21ff      	movs	r1, #255	@ 0xff
 8001b1c:	4091      	lsls	r1, r2
 8001b1e:	000a      	movs	r2, r1
 8001b20:	43d2      	mvns	r2, r2
 8001b22:	401a      	ands	r2, r3
 8001b24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	019b      	lsls	r3, r3, #6
 8001b2a:	22ff      	movs	r2, #255	@ 0xff
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	1dfb      	adds	r3, r7, #7
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	0018      	movs	r0, r3
 8001b34:	2303      	movs	r3, #3
 8001b36:	4003      	ands	r3, r0
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b3c:	481f      	ldr	r0, [pc, #124]	@ (8001bbc <__NVIC_SetPriority+0xd4>)
 8001b3e:	1dfb      	adds	r3, r7, #7
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b25b      	sxtb	r3, r3
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	430a      	orrs	r2, r1
 8001b48:	33c0      	adds	r3, #192	@ 0xc0
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	501a      	str	r2, [r3, r0]
}
 8001b4e:	e031      	b.n	8001bb4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b50:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc0 <__NVIC_SetPriority+0xd8>)
 8001b52:	1dfb      	adds	r3, r7, #7
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	0019      	movs	r1, r3
 8001b58:	230f      	movs	r3, #15
 8001b5a:	400b      	ands	r3, r1
 8001b5c:	3b08      	subs	r3, #8
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3306      	adds	r3, #6
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	18d3      	adds	r3, r2, r3
 8001b66:	3304      	adds	r3, #4
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	1dfa      	adds	r2, r7, #7
 8001b6c:	7812      	ldrb	r2, [r2, #0]
 8001b6e:	0011      	movs	r1, r2
 8001b70:	2203      	movs	r2, #3
 8001b72:	400a      	ands	r2, r1
 8001b74:	00d2      	lsls	r2, r2, #3
 8001b76:	21ff      	movs	r1, #255	@ 0xff
 8001b78:	4091      	lsls	r1, r2
 8001b7a:	000a      	movs	r2, r1
 8001b7c:	43d2      	mvns	r2, r2
 8001b7e:	401a      	ands	r2, r3
 8001b80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	019b      	lsls	r3, r3, #6
 8001b86:	22ff      	movs	r2, #255	@ 0xff
 8001b88:	401a      	ands	r2, r3
 8001b8a:	1dfb      	adds	r3, r7, #7
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	0018      	movs	r0, r3
 8001b90:	2303      	movs	r3, #3
 8001b92:	4003      	ands	r3, r0
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b98:	4809      	ldr	r0, [pc, #36]	@ (8001bc0 <__NVIC_SetPriority+0xd8>)
 8001b9a:	1dfb      	adds	r3, r7, #7
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	001c      	movs	r4, r3
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	4023      	ands	r3, r4
 8001ba4:	3b08      	subs	r3, #8
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	3306      	adds	r3, #6
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	18c3      	adds	r3, r0, r3
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	601a      	str	r2, [r3, #0]
}
 8001bb4:	46c0      	nop			@ (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b003      	add	sp, #12
 8001bba:	bd90      	pop	{r4, r7, pc}
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	1e5a      	subs	r2, r3, #1
 8001bd0:	2380      	movs	r3, #128	@ 0x80
 8001bd2:	045b      	lsls	r3, r3, #17
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d301      	bcc.n	8001bdc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e010      	b.n	8001bfe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <SysTick_Config+0x44>)
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	3a01      	subs	r2, #1
 8001be2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be4:	2301      	movs	r3, #1
 8001be6:	425b      	negs	r3, r3
 8001be8:	2103      	movs	r1, #3
 8001bea:	0018      	movs	r0, r3
 8001bec:	f7ff ff7c 	bl	8001ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf0:	4b05      	ldr	r3, [pc, #20]	@ (8001c08 <SysTick_Config+0x44>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf6:	4b04      	ldr	r3, [pc, #16]	@ (8001c08 <SysTick_Config+0x44>)
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	0018      	movs	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b002      	add	sp, #8
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			@ (mov r8, r8)
 8001c08:	e000e010 	.word	0xe000e010

08001c0c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	210f      	movs	r1, #15
 8001c18:	187b      	adds	r3, r7, r1
 8001c1a:	1c02      	adds	r2, r0, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b25b      	sxtb	r3, r3
 8001c26:	0011      	movs	r1, r2
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7ff ff5d 	bl	8001ae8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001c2e:	46c0      	nop			@ (mov r8, r8)
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b004      	add	sp, #16
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	1dfb      	adds	r3, r7, #7
 8001c40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c42:	1dfb      	adds	r3, r7, #7
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b25b      	sxtb	r3, r3
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f7ff ff33 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001c4e:	46c0      	nop			@ (mov r8, r8)
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b002      	add	sp, #8
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0018      	movs	r0, r3
 8001c62:	f7ff ffaf 	bl	8001bc4 <SysTick_Config>
 8001c66:	0003      	movs	r3, r0
}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b002      	add	sp, #8
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2221      	movs	r2, #33	@ 0x21
 8001c7c:	5c9b      	ldrb	r3, [r3, r2]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d008      	beq.n	8001c96 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2204      	movs	r2, #4
 8001c88:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	2100      	movs	r1, #0
 8001c90:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e020      	b.n	8001cd8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	210e      	movs	r1, #14
 8001ca2:	438a      	bics	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	438a      	bics	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	4091      	lsls	r1, r2
 8001cc2:	000a      	movs	r2, r1
 8001cc4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2221      	movs	r2, #33	@ 0x21
 8001cca:	2101      	movs	r1, #1
 8001ccc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	0018      	movs	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b002      	add	sp, #8
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce8:	210f      	movs	r1, #15
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2221      	movs	r2, #33	@ 0x21
 8001cf4:	5c9b      	ldrb	r3, [r3, r2]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d006      	beq.n	8001d0a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2204      	movs	r2, #4
 8001d00:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001d02:	187b      	adds	r3, r7, r1
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
 8001d08:	e028      	b.n	8001d5c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	210e      	movs	r1, #14
 8001d16:	438a      	bics	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2101      	movs	r1, #1
 8001d26:	438a      	bics	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d32:	2101      	movs	r1, #1
 8001d34:	4091      	lsls	r1, r2
 8001d36:	000a      	movs	r2, r1
 8001d38:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2221      	movs	r2, #33	@ 0x21
 8001d3e:	2101      	movs	r1, #1
 8001d40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2220      	movs	r2, #32
 8001d46:	2100      	movs	r1, #0
 8001d48:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d004      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	0010      	movs	r0, r2
 8001d5a:	4798      	blx	r3
    }
  }
  return status;
 8001d5c:	230f      	movs	r3, #15
 8001d5e:	18fb      	adds	r3, r7, r3
 8001d60:	781b      	ldrb	r3, [r3, #0]
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b004      	add	sp, #16
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7a:	e149      	b.n	8002010 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4091      	lsls	r1, r2
 8001d86:	000a      	movs	r2, r1
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d100      	bne.n	8001d94 <HAL_GPIO_Init+0x28>
 8001d92:	e13a      	b.n	800200a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2203      	movs	r2, #3
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d005      	beq.n	8001dac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2203      	movs	r2, #3
 8001da6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d130      	bne.n	8001e0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	409a      	lsls	r2, r3
 8001dba:	0013      	movs	r3, r2
 8001dbc:	43da      	mvns	r2, r3
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	409a      	lsls	r2, r3
 8001dce:	0013      	movs	r3, r2
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de2:	2201      	movs	r2, #1
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	409a      	lsls	r2, r3
 8001de8:	0013      	movs	r3, r2
 8001dea:	43da      	mvns	r2, r3
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	2201      	movs	r2, #1
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	409a      	lsls	r2, r3
 8001e00:	0013      	movs	r3, r2
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2203      	movs	r2, #3
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d017      	beq.n	8001e4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	2203      	movs	r2, #3
 8001e26:	409a      	lsls	r2, r3
 8001e28:	0013      	movs	r3, r2
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	0013      	movs	r3, r2
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2203      	movs	r2, #3
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d123      	bne.n	8001e9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	08da      	lsrs	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3208      	adds	r2, #8
 8001e5e:	0092      	lsls	r2, r2, #2
 8001e60:	58d3      	ldr	r3, [r2, r3]
 8001e62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2207      	movs	r2, #7
 8001e68:	4013      	ands	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	0013      	movs	r3, r2
 8001e72:	43da      	mvns	r2, r3
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	691a      	ldr	r2, [r3, #16]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2107      	movs	r1, #7
 8001e82:	400b      	ands	r3, r1
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	409a      	lsls	r2, r3
 8001e88:	0013      	movs	r3, r2
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	08da      	lsrs	r2, r3, #3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3208      	adds	r2, #8
 8001e98:	0092      	lsls	r2, r2, #2
 8001e9a:	6939      	ldr	r1, [r7, #16]
 8001e9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	0013      	movs	r3, r2
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2203      	movs	r2, #3
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	0013      	movs	r3, r2
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	23c0      	movs	r3, #192	@ 0xc0
 8001ed8:	029b      	lsls	r3, r3, #10
 8001eda:	4013      	ands	r3, r2
 8001edc:	d100      	bne.n	8001ee0 <HAL_GPIO_Init+0x174>
 8001ede:	e094      	b.n	800200a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee0:	4b51      	ldr	r3, [pc, #324]	@ (8002028 <HAL_GPIO_Init+0x2bc>)
 8001ee2:	699a      	ldr	r2, [r3, #24]
 8001ee4:	4b50      	ldr	r3, [pc, #320]	@ (8002028 <HAL_GPIO_Init+0x2bc>)
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	619a      	str	r2, [r3, #24]
 8001eec:	4b4e      	ldr	r3, [pc, #312]	@ (8002028 <HAL_GPIO_Init+0x2bc>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ef8:	4a4c      	ldr	r2, [pc, #304]	@ (800202c <HAL_GPIO_Init+0x2c0>)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	3302      	adds	r3, #2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	589b      	ldr	r3, [r3, r2]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2203      	movs	r2, #3
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	220f      	movs	r2, #15
 8001f10:	409a      	lsls	r2, r3
 8001f12:	0013      	movs	r3, r2
 8001f14:	43da      	mvns	r2, r3
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	2390      	movs	r3, #144	@ 0x90
 8001f20:	05db      	lsls	r3, r3, #23
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d00d      	beq.n	8001f42 <HAL_GPIO_Init+0x1d6>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a41      	ldr	r2, [pc, #260]	@ (8002030 <HAL_GPIO_Init+0x2c4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d007      	beq.n	8001f3e <HAL_GPIO_Init+0x1d2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a40      	ldr	r2, [pc, #256]	@ (8002034 <HAL_GPIO_Init+0x2c8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_GPIO_Init+0x1ce>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e004      	b.n	8001f44 <HAL_GPIO_Init+0x1d8>
 8001f3a:	2305      	movs	r3, #5
 8001f3c:	e002      	b.n	8001f44 <HAL_GPIO_Init+0x1d8>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <HAL_GPIO_Init+0x1d8>
 8001f42:	2300      	movs	r3, #0
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	2103      	movs	r1, #3
 8001f48:	400a      	ands	r2, r1
 8001f4a:	0092      	lsls	r2, r2, #2
 8001f4c:	4093      	lsls	r3, r2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f54:	4935      	ldr	r1, [pc, #212]	@ (800202c <HAL_GPIO_Init+0x2c0>)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f62:	4b35      	ldr	r3, [pc, #212]	@ (8002038 <HAL_GPIO_Init+0x2cc>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	2380      	movs	r3, #128	@ 0x80
 8001f78:	035b      	lsls	r3, r3, #13
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f86:	4b2c      	ldr	r3, [pc, #176]	@ (8002038 <HAL_GPIO_Init+0x2cc>)
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002038 <HAL_GPIO_Init+0x2cc>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	43da      	mvns	r2, r3
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	2380      	movs	r3, #128	@ 0x80
 8001fa2:	039b      	lsls	r3, r3, #14
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fb0:	4b21      	ldr	r3, [pc, #132]	@ (8002038 <HAL_GPIO_Init+0x2cc>)
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001fb6:	4b20      	ldr	r3, [pc, #128]	@ (8002038 <HAL_GPIO_Init+0x2cc>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	2380      	movs	r3, #128	@ 0x80
 8001fcc:	029b      	lsls	r3, r3, #10
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fda:	4b17      	ldr	r3, [pc, #92]	@ (8002038 <HAL_GPIO_Init+0x2cc>)
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001fe0:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <HAL_GPIO_Init+0x2cc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	43da      	mvns	r2, r3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	2380      	movs	r3, #128	@ 0x80
 8001ff6:	025b      	lsls	r3, r3, #9
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <HAL_GPIO_Init+0x2cc>)
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3301      	adds	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	40da      	lsrs	r2, r3
 8002018:	1e13      	subs	r3, r2, #0
 800201a:	d000      	beq.n	800201e <HAL_GPIO_Init+0x2b2>
 800201c:	e6ae      	b.n	8001d7c <HAL_GPIO_Init+0x10>
  } 
}
 800201e:	46c0      	nop			@ (mov r8, r8)
 8002020:	46c0      	nop			@ (mov r8, r8)
 8002022:	46bd      	mov	sp, r7
 8002024:	b006      	add	sp, #24
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000
 800202c:	40010000 	.word	0x40010000
 8002030:	48000400 	.word	0x48000400
 8002034:	48000800 	.word	0x48000800
 8002038:	40010400 	.word	0x40010400

0800203c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	000a      	movs	r2, r1
 8002046:	1cbb      	adds	r3, r7, #2
 8002048:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	1cba      	adds	r2, r7, #2
 8002050:	8812      	ldrh	r2, [r2, #0]
 8002052:	4013      	ands	r3, r2
 8002054:	d004      	beq.n	8002060 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002056:	230f      	movs	r3, #15
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
 800205e:	e003      	b.n	8002068 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002060:	230f      	movs	r3, #15
 8002062:	18fb      	adds	r3, r7, r3
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002068:	230f      	movs	r3, #15
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	781b      	ldrb	r3, [r3, #0]
  }
 800206e:	0018      	movs	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	b004      	add	sp, #16
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	0008      	movs	r0, r1
 8002080:	0011      	movs	r1, r2
 8002082:	1cbb      	adds	r3, r7, #2
 8002084:	1c02      	adds	r2, r0, #0
 8002086:	801a      	strh	r2, [r3, #0]
 8002088:	1c7b      	adds	r3, r7, #1
 800208a:	1c0a      	adds	r2, r1, #0
 800208c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800208e:	1c7b      	adds	r3, r7, #1
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d004      	beq.n	80020a0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002096:	1cbb      	adds	r3, r7, #2
 8002098:	881a      	ldrh	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800209e:	e003      	b.n	80020a8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020a0:	1cbb      	adds	r3, r7, #2
 80020a2:	881a      	ldrh	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020a8:	46c0      	nop			@ (mov r8, r8)
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b002      	add	sp, #8
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	0002      	movs	r2, r0
 80020b8:	1dbb      	adds	r3, r7, #6
 80020ba:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020bc:	4b09      	ldr	r3, [pc, #36]	@ (80020e4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	1dba      	adds	r2, r7, #6
 80020c2:	8812      	ldrh	r2, [r2, #0]
 80020c4:	4013      	ands	r3, r2
 80020c6:	d008      	beq.n	80020da <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020c8:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80020ca:	1dba      	adds	r2, r7, #6
 80020cc:	8812      	ldrh	r2, [r2, #0]
 80020ce:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020d0:	1dbb      	adds	r3, r7, #6
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	0018      	movs	r0, r3
 80020d6:	f000 f807 	bl	80020e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	46bd      	mov	sp, r7
 80020de:	b002      	add	sp, #8
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	46c0      	nop			@ (mov r8, r8)
 80020e4:	40010400 	.word	0x40010400

080020e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	0002      	movs	r2, r0
 80020f0:	1dbb      	adds	r3, r7, #6
 80020f2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80020f4:	46c0      	nop			@ (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b002      	add	sp, #8
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d102      	bne.n	8002110 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	f000 fb76 	bl	80027fc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2201      	movs	r2, #1
 8002116:	4013      	ands	r3, r2
 8002118:	d100      	bne.n	800211c <HAL_RCC_OscConfig+0x20>
 800211a:	e08e      	b.n	800223a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800211c:	4bc5      	ldr	r3, [pc, #788]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	220c      	movs	r2, #12
 8002122:	4013      	ands	r3, r2
 8002124:	2b04      	cmp	r3, #4
 8002126:	d00e      	beq.n	8002146 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002128:	4bc2      	ldr	r3, [pc, #776]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	220c      	movs	r2, #12
 800212e:	4013      	ands	r3, r2
 8002130:	2b08      	cmp	r3, #8
 8002132:	d117      	bne.n	8002164 <HAL_RCC_OscConfig+0x68>
 8002134:	4bbf      	ldr	r3, [pc, #764]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	23c0      	movs	r3, #192	@ 0xc0
 800213a:	025b      	lsls	r3, r3, #9
 800213c:	401a      	ands	r2, r3
 800213e:	2380      	movs	r3, #128	@ 0x80
 8002140:	025b      	lsls	r3, r3, #9
 8002142:	429a      	cmp	r2, r3
 8002144:	d10e      	bne.n	8002164 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002146:	4bbb      	ldr	r3, [pc, #748]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	2380      	movs	r3, #128	@ 0x80
 800214c:	029b      	lsls	r3, r3, #10
 800214e:	4013      	ands	r3, r2
 8002150:	d100      	bne.n	8002154 <HAL_RCC_OscConfig+0x58>
 8002152:	e071      	b.n	8002238 <HAL_RCC_OscConfig+0x13c>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d000      	beq.n	800215e <HAL_RCC_OscConfig+0x62>
 800215c:	e06c      	b.n	8002238 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	f000 fb4c 	bl	80027fc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d107      	bne.n	800217c <HAL_RCC_OscConfig+0x80>
 800216c:	4bb1      	ldr	r3, [pc, #708]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4bb0      	ldr	r3, [pc, #704]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 8002172:	2180      	movs	r1, #128	@ 0x80
 8002174:	0249      	lsls	r1, r1, #9
 8002176:	430a      	orrs	r2, r1
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	e02f      	b.n	80021dc <HAL_RCC_OscConfig+0xe0>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10c      	bne.n	800219e <HAL_RCC_OscConfig+0xa2>
 8002184:	4bab      	ldr	r3, [pc, #684]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4baa      	ldr	r3, [pc, #680]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 800218a:	49ab      	ldr	r1, [pc, #684]	@ (8002438 <HAL_RCC_OscConfig+0x33c>)
 800218c:	400a      	ands	r2, r1
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	4ba8      	ldr	r3, [pc, #672]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4ba7      	ldr	r3, [pc, #668]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 8002196:	49a9      	ldr	r1, [pc, #676]	@ (800243c <HAL_RCC_OscConfig+0x340>)
 8002198:	400a      	ands	r2, r1
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	e01e      	b.n	80021dc <HAL_RCC_OscConfig+0xe0>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b05      	cmp	r3, #5
 80021a4:	d10e      	bne.n	80021c4 <HAL_RCC_OscConfig+0xc8>
 80021a6:	4ba3      	ldr	r3, [pc, #652]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	4ba2      	ldr	r3, [pc, #648]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 80021ac:	2180      	movs	r1, #128	@ 0x80
 80021ae:	02c9      	lsls	r1, r1, #11
 80021b0:	430a      	orrs	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	4b9f      	ldr	r3, [pc, #636]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b9e      	ldr	r3, [pc, #632]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 80021ba:	2180      	movs	r1, #128	@ 0x80
 80021bc:	0249      	lsls	r1, r1, #9
 80021be:	430a      	orrs	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	e00b      	b.n	80021dc <HAL_RCC_OscConfig+0xe0>
 80021c4:	4b9b      	ldr	r3, [pc, #620]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b9a      	ldr	r3, [pc, #616]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 80021ca:	499b      	ldr	r1, [pc, #620]	@ (8002438 <HAL_RCC_OscConfig+0x33c>)
 80021cc:	400a      	ands	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	4b98      	ldr	r3, [pc, #608]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b97      	ldr	r3, [pc, #604]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 80021d6:	4999      	ldr	r1, [pc, #612]	@ (800243c <HAL_RCC_OscConfig+0x340>)
 80021d8:	400a      	ands	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d014      	beq.n	800220e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7ff fc5c 	bl	8001aa0 <HAL_GetTick>
 80021e8:	0003      	movs	r3, r0
 80021ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ee:	f7ff fc57 	bl	8001aa0 <HAL_GetTick>
 80021f2:	0002      	movs	r2, r0
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b64      	cmp	r3, #100	@ 0x64
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e2fd      	b.n	80027fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002200:	4b8c      	ldr	r3, [pc, #560]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	2380      	movs	r3, #128	@ 0x80
 8002206:	029b      	lsls	r3, r3, #10
 8002208:	4013      	ands	r3, r2
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0xf2>
 800220c:	e015      	b.n	800223a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220e:	f7ff fc47 	bl	8001aa0 <HAL_GetTick>
 8002212:	0003      	movs	r3, r0
 8002214:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002218:	f7ff fc42 	bl	8001aa0 <HAL_GetTick>
 800221c:	0002      	movs	r2, r0
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	@ 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e2e8      	b.n	80027fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222a:	4b82      	ldr	r3, [pc, #520]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	2380      	movs	r3, #128	@ 0x80
 8002230:	029b      	lsls	r3, r3, #10
 8002232:	4013      	ands	r3, r2
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x11c>
 8002236:	e000      	b.n	800223a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002238:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2202      	movs	r2, #2
 8002240:	4013      	ands	r3, r2
 8002242:	d100      	bne.n	8002246 <HAL_RCC_OscConfig+0x14a>
 8002244:	e06c      	b.n	8002320 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002246:	4b7b      	ldr	r3, [pc, #492]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	220c      	movs	r2, #12
 800224c:	4013      	ands	r3, r2
 800224e:	d00e      	beq.n	800226e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002250:	4b78      	ldr	r3, [pc, #480]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	220c      	movs	r2, #12
 8002256:	4013      	ands	r3, r2
 8002258:	2b08      	cmp	r3, #8
 800225a:	d11f      	bne.n	800229c <HAL_RCC_OscConfig+0x1a0>
 800225c:	4b75      	ldr	r3, [pc, #468]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	23c0      	movs	r3, #192	@ 0xc0
 8002262:	025b      	lsls	r3, r3, #9
 8002264:	401a      	ands	r2, r3
 8002266:	2380      	movs	r3, #128	@ 0x80
 8002268:	021b      	lsls	r3, r3, #8
 800226a:	429a      	cmp	r2, r3
 800226c:	d116      	bne.n	800229c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226e:	4b71      	ldr	r3, [pc, #452]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2202      	movs	r2, #2
 8002274:	4013      	ands	r3, r2
 8002276:	d005      	beq.n	8002284 <HAL_RCC_OscConfig+0x188>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d001      	beq.n	8002284 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e2bb      	b.n	80027fc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002284:	4b6b      	ldr	r3, [pc, #428]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	22f8      	movs	r2, #248	@ 0xf8
 800228a:	4393      	bics	r3, r2
 800228c:	0019      	movs	r1, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	00da      	lsls	r2, r3, #3
 8002294:	4b67      	ldr	r3, [pc, #412]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 8002296:	430a      	orrs	r2, r1
 8002298:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229a:	e041      	b.n	8002320 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d024      	beq.n	80022ee <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a4:	4b63      	ldr	r3, [pc, #396]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b62      	ldr	r3, [pc, #392]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 80022aa:	2101      	movs	r1, #1
 80022ac:	430a      	orrs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7ff fbf6 	bl	8001aa0 <HAL_GetTick>
 80022b4:	0003      	movs	r3, r0
 80022b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ba:	f7ff fbf1 	bl	8001aa0 <HAL_GetTick>
 80022be:	0002      	movs	r2, r0
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e297      	b.n	80027fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	4b59      	ldr	r3, [pc, #356]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2202      	movs	r2, #2
 80022d2:	4013      	ands	r3, r2
 80022d4:	d0f1      	beq.n	80022ba <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d6:	4b57      	ldr	r3, [pc, #348]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	22f8      	movs	r2, #248	@ 0xf8
 80022dc:	4393      	bics	r3, r2
 80022de:	0019      	movs	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	00da      	lsls	r2, r3, #3
 80022e6:	4b53      	ldr	r3, [pc, #332]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 80022e8:	430a      	orrs	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	e018      	b.n	8002320 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ee:	4b51      	ldr	r3, [pc, #324]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	4b50      	ldr	r3, [pc, #320]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 80022f4:	2101      	movs	r1, #1
 80022f6:	438a      	bics	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fa:	f7ff fbd1 	bl	8001aa0 <HAL_GetTick>
 80022fe:	0003      	movs	r3, r0
 8002300:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002304:	f7ff fbcc 	bl	8001aa0 <HAL_GetTick>
 8002308:	0002      	movs	r2, r0
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e272      	b.n	80027fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002316:	4b47      	ldr	r3, [pc, #284]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2202      	movs	r2, #2
 800231c:	4013      	ands	r3, r2
 800231e:	d1f1      	bne.n	8002304 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2208      	movs	r2, #8
 8002326:	4013      	ands	r3, r2
 8002328:	d036      	beq.n	8002398 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d019      	beq.n	8002366 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002332:	4b40      	ldr	r3, [pc, #256]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 8002334:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002336:	4b3f      	ldr	r3, [pc, #252]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 8002338:	2101      	movs	r1, #1
 800233a:	430a      	orrs	r2, r1
 800233c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233e:	f7ff fbaf 	bl	8001aa0 <HAL_GetTick>
 8002342:	0003      	movs	r3, r0
 8002344:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002348:	f7ff fbaa 	bl	8001aa0 <HAL_GetTick>
 800234c:	0002      	movs	r2, r0
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e250      	b.n	80027fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235a:	4b36      	ldr	r3, [pc, #216]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235e:	2202      	movs	r2, #2
 8002360:	4013      	ands	r3, r2
 8002362:	d0f1      	beq.n	8002348 <HAL_RCC_OscConfig+0x24c>
 8002364:	e018      	b.n	8002398 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002366:	4b33      	ldr	r3, [pc, #204]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 8002368:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800236a:	4b32      	ldr	r3, [pc, #200]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 800236c:	2101      	movs	r1, #1
 800236e:	438a      	bics	r2, r1
 8002370:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002372:	f7ff fb95 	bl	8001aa0 <HAL_GetTick>
 8002376:	0003      	movs	r3, r0
 8002378:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237c:	f7ff fb90 	bl	8001aa0 <HAL_GetTick>
 8002380:	0002      	movs	r2, r0
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e236      	b.n	80027fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238e:	4b29      	ldr	r3, [pc, #164]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 8002390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002392:	2202      	movs	r2, #2
 8002394:	4013      	ands	r3, r2
 8002396:	d1f1      	bne.n	800237c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2204      	movs	r2, #4
 800239e:	4013      	ands	r3, r2
 80023a0:	d100      	bne.n	80023a4 <HAL_RCC_OscConfig+0x2a8>
 80023a2:	e0b5      	b.n	8002510 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a4:	201f      	movs	r0, #31
 80023a6:	183b      	adds	r3, r7, r0
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ac:	4b21      	ldr	r3, [pc, #132]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 80023ae:	69da      	ldr	r2, [r3, #28]
 80023b0:	2380      	movs	r3, #128	@ 0x80
 80023b2:	055b      	lsls	r3, r3, #21
 80023b4:	4013      	ands	r3, r2
 80023b6:	d110      	bne.n	80023da <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 80023ba:	69da      	ldr	r2, [r3, #28]
 80023bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 80023be:	2180      	movs	r1, #128	@ 0x80
 80023c0:	0549      	lsls	r1, r1, #21
 80023c2:	430a      	orrs	r2, r1
 80023c4:	61da      	str	r2, [r3, #28]
 80023c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 80023c8:	69da      	ldr	r2, [r3, #28]
 80023ca:	2380      	movs	r3, #128	@ 0x80
 80023cc:	055b      	lsls	r3, r3, #21
 80023ce:	4013      	ands	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023d4:	183b      	adds	r3, r7, r0
 80023d6:	2201      	movs	r2, #1
 80023d8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023da:	4b19      	ldr	r3, [pc, #100]	@ (8002440 <HAL_RCC_OscConfig+0x344>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	2380      	movs	r3, #128	@ 0x80
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	4013      	ands	r3, r2
 80023e4:	d11a      	bne.n	800241c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e6:	4b16      	ldr	r3, [pc, #88]	@ (8002440 <HAL_RCC_OscConfig+0x344>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4b15      	ldr	r3, [pc, #84]	@ (8002440 <HAL_RCC_OscConfig+0x344>)
 80023ec:	2180      	movs	r1, #128	@ 0x80
 80023ee:	0049      	lsls	r1, r1, #1
 80023f0:	430a      	orrs	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f4:	f7ff fb54 	bl	8001aa0 <HAL_GetTick>
 80023f8:	0003      	movs	r3, r0
 80023fa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fe:	f7ff fb4f 	bl	8001aa0 <HAL_GetTick>
 8002402:	0002      	movs	r2, r0
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b64      	cmp	r3, #100	@ 0x64
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e1f5      	b.n	80027fc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002410:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <HAL_RCC_OscConfig+0x344>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	2380      	movs	r3, #128	@ 0x80
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	4013      	ands	r3, r2
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d10f      	bne.n	8002444 <HAL_RCC_OscConfig+0x348>
 8002424:	4b03      	ldr	r3, [pc, #12]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 8002426:	6a1a      	ldr	r2, [r3, #32]
 8002428:	4b02      	ldr	r3, [pc, #8]	@ (8002434 <HAL_RCC_OscConfig+0x338>)
 800242a:	2101      	movs	r1, #1
 800242c:	430a      	orrs	r2, r1
 800242e:	621a      	str	r2, [r3, #32]
 8002430:	e036      	b.n	80024a0 <HAL_RCC_OscConfig+0x3a4>
 8002432:	46c0      	nop			@ (mov r8, r8)
 8002434:	40021000 	.word	0x40021000
 8002438:	fffeffff 	.word	0xfffeffff
 800243c:	fffbffff 	.word	0xfffbffff
 8002440:	40007000 	.word	0x40007000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10c      	bne.n	8002466 <HAL_RCC_OscConfig+0x36a>
 800244c:	4bca      	ldr	r3, [pc, #808]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 800244e:	6a1a      	ldr	r2, [r3, #32]
 8002450:	4bc9      	ldr	r3, [pc, #804]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002452:	2101      	movs	r1, #1
 8002454:	438a      	bics	r2, r1
 8002456:	621a      	str	r2, [r3, #32]
 8002458:	4bc7      	ldr	r3, [pc, #796]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 800245a:	6a1a      	ldr	r2, [r3, #32]
 800245c:	4bc6      	ldr	r3, [pc, #792]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 800245e:	2104      	movs	r1, #4
 8002460:	438a      	bics	r2, r1
 8002462:	621a      	str	r2, [r3, #32]
 8002464:	e01c      	b.n	80024a0 <HAL_RCC_OscConfig+0x3a4>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b05      	cmp	r3, #5
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x38c>
 800246e:	4bc2      	ldr	r3, [pc, #776]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002470:	6a1a      	ldr	r2, [r3, #32]
 8002472:	4bc1      	ldr	r3, [pc, #772]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002474:	2104      	movs	r1, #4
 8002476:	430a      	orrs	r2, r1
 8002478:	621a      	str	r2, [r3, #32]
 800247a:	4bbf      	ldr	r3, [pc, #764]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 800247c:	6a1a      	ldr	r2, [r3, #32]
 800247e:	4bbe      	ldr	r3, [pc, #760]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002480:	2101      	movs	r1, #1
 8002482:	430a      	orrs	r2, r1
 8002484:	621a      	str	r2, [r3, #32]
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0x3a4>
 8002488:	4bbb      	ldr	r3, [pc, #748]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 800248a:	6a1a      	ldr	r2, [r3, #32]
 800248c:	4bba      	ldr	r3, [pc, #744]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 800248e:	2101      	movs	r1, #1
 8002490:	438a      	bics	r2, r1
 8002492:	621a      	str	r2, [r3, #32]
 8002494:	4bb8      	ldr	r3, [pc, #736]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002496:	6a1a      	ldr	r2, [r3, #32]
 8002498:	4bb7      	ldr	r3, [pc, #732]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 800249a:	2104      	movs	r1, #4
 800249c:	438a      	bics	r2, r1
 800249e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d014      	beq.n	80024d2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a8:	f7ff fafa 	bl	8001aa0 <HAL_GetTick>
 80024ac:	0003      	movs	r3, r0
 80024ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b0:	e009      	b.n	80024c6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b2:	f7ff faf5 	bl	8001aa0 <HAL_GetTick>
 80024b6:	0002      	movs	r2, r0
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	4aaf      	ldr	r2, [pc, #700]	@ (800277c <HAL_RCC_OscConfig+0x680>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e19a      	b.n	80027fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c6:	4bac      	ldr	r3, [pc, #688]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	2202      	movs	r2, #2
 80024cc:	4013      	ands	r3, r2
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x3b6>
 80024d0:	e013      	b.n	80024fa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d2:	f7ff fae5 	bl	8001aa0 <HAL_GetTick>
 80024d6:	0003      	movs	r3, r0
 80024d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024da:	e009      	b.n	80024f0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024dc:	f7ff fae0 	bl	8001aa0 <HAL_GetTick>
 80024e0:	0002      	movs	r2, r0
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	4aa5      	ldr	r2, [pc, #660]	@ (800277c <HAL_RCC_OscConfig+0x680>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e185      	b.n	80027fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f0:	4ba1      	ldr	r3, [pc, #644]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	2202      	movs	r2, #2
 80024f6:	4013      	ands	r3, r2
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024fa:	231f      	movs	r3, #31
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d105      	bne.n	8002510 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002504:	4b9c      	ldr	r3, [pc, #624]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002506:	69da      	ldr	r2, [r3, #28]
 8002508:	4b9b      	ldr	r3, [pc, #620]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 800250a:	499d      	ldr	r1, [pc, #628]	@ (8002780 <HAL_RCC_OscConfig+0x684>)
 800250c:	400a      	ands	r2, r1
 800250e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2210      	movs	r2, #16
 8002516:	4013      	ands	r3, r2
 8002518:	d063      	beq.n	80025e2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d12a      	bne.n	8002578 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002522:	4b95      	ldr	r3, [pc, #596]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002524:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002526:	4b94      	ldr	r3, [pc, #592]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002528:	2104      	movs	r1, #4
 800252a:	430a      	orrs	r2, r1
 800252c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800252e:	4b92      	ldr	r3, [pc, #584]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002530:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002532:	4b91      	ldr	r3, [pc, #580]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002534:	2101      	movs	r1, #1
 8002536:	430a      	orrs	r2, r1
 8002538:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253a:	f7ff fab1 	bl	8001aa0 <HAL_GetTick>
 800253e:	0003      	movs	r3, r0
 8002540:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002544:	f7ff faac 	bl	8001aa0 <HAL_GetTick>
 8002548:	0002      	movs	r2, r0
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e152      	b.n	80027fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002556:	4b88      	ldr	r3, [pc, #544]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800255a:	2202      	movs	r2, #2
 800255c:	4013      	ands	r3, r2
 800255e:	d0f1      	beq.n	8002544 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002560:	4b85      	ldr	r3, [pc, #532]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002564:	22f8      	movs	r2, #248	@ 0xf8
 8002566:	4393      	bics	r3, r2
 8002568:	0019      	movs	r1, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	00da      	lsls	r2, r3, #3
 8002570:	4b81      	ldr	r3, [pc, #516]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002572:	430a      	orrs	r2, r1
 8002574:	635a      	str	r2, [r3, #52]	@ 0x34
 8002576:	e034      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	3305      	adds	r3, #5
 800257e:	d111      	bne.n	80025a4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002580:	4b7d      	ldr	r3, [pc, #500]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002584:	4b7c      	ldr	r3, [pc, #496]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002586:	2104      	movs	r1, #4
 8002588:	438a      	bics	r2, r1
 800258a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800258c:	4b7a      	ldr	r3, [pc, #488]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 800258e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002590:	22f8      	movs	r2, #248	@ 0xf8
 8002592:	4393      	bics	r3, r2
 8002594:	0019      	movs	r1, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	00da      	lsls	r2, r3, #3
 800259c:	4b76      	ldr	r3, [pc, #472]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 800259e:	430a      	orrs	r2, r1
 80025a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80025a2:	e01e      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80025a4:	4b74      	ldr	r3, [pc, #464]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 80025a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025a8:	4b73      	ldr	r3, [pc, #460]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 80025aa:	2104      	movs	r1, #4
 80025ac:	430a      	orrs	r2, r1
 80025ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80025b0:	4b71      	ldr	r3, [pc, #452]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 80025b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025b4:	4b70      	ldr	r3, [pc, #448]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 80025b6:	2101      	movs	r1, #1
 80025b8:	438a      	bics	r2, r1
 80025ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025bc:	f7ff fa70 	bl	8001aa0 <HAL_GetTick>
 80025c0:	0003      	movs	r3, r0
 80025c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025c6:	f7ff fa6b 	bl	8001aa0 <HAL_GetTick>
 80025ca:	0002      	movs	r2, r0
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e111      	b.n	80027fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025d8:	4b67      	ldr	r3, [pc, #412]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 80025da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025dc:	2202      	movs	r2, #2
 80025de:	4013      	ands	r3, r2
 80025e0:	d1f1      	bne.n	80025c6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2220      	movs	r2, #32
 80025e8:	4013      	ands	r3, r2
 80025ea:	d05c      	beq.n	80026a6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80025ec:	4b62      	ldr	r3, [pc, #392]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	220c      	movs	r2, #12
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b0c      	cmp	r3, #12
 80025f6:	d00e      	beq.n	8002616 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80025f8:	4b5f      	ldr	r3, [pc, #380]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	220c      	movs	r2, #12
 80025fe:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002600:	2b08      	cmp	r3, #8
 8002602:	d114      	bne.n	800262e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002604:	4b5c      	ldr	r3, [pc, #368]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	23c0      	movs	r3, #192	@ 0xc0
 800260a:	025b      	lsls	r3, r3, #9
 800260c:	401a      	ands	r2, r3
 800260e:	23c0      	movs	r3, #192	@ 0xc0
 8002610:	025b      	lsls	r3, r3, #9
 8002612:	429a      	cmp	r2, r3
 8002614:	d10b      	bne.n	800262e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002616:	4b58      	ldr	r3, [pc, #352]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002618:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800261a:	2380      	movs	r3, #128	@ 0x80
 800261c:	029b      	lsls	r3, r3, #10
 800261e:	4013      	ands	r3, r2
 8002620:	d040      	beq.n	80026a4 <HAL_RCC_OscConfig+0x5a8>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d03c      	beq.n	80026a4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e0e6      	b.n	80027fc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d01b      	beq.n	800266e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002636:	4b50      	ldr	r3, [pc, #320]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002638:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800263a:	4b4f      	ldr	r3, [pc, #316]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 800263c:	2180      	movs	r1, #128	@ 0x80
 800263e:	0249      	lsls	r1, r1, #9
 8002640:	430a      	orrs	r2, r1
 8002642:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7ff fa2c 	bl	8001aa0 <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800264e:	f7ff fa27 	bl	8001aa0 <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e0cd      	b.n	80027fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002660:	4b45      	ldr	r3, [pc, #276]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002664:	2380      	movs	r3, #128	@ 0x80
 8002666:	029b      	lsls	r3, r3, #10
 8002668:	4013      	ands	r3, r2
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x552>
 800266c:	e01b      	b.n	80026a6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800266e:	4b42      	ldr	r3, [pc, #264]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002670:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002672:	4b41      	ldr	r3, [pc, #260]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002674:	4943      	ldr	r1, [pc, #268]	@ (8002784 <HAL_RCC_OscConfig+0x688>)
 8002676:	400a      	ands	r2, r1
 8002678:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267a:	f7ff fa11 	bl	8001aa0 <HAL_GetTick>
 800267e:	0003      	movs	r3, r0
 8002680:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002684:	f7ff fa0c 	bl	8001aa0 <HAL_GetTick>
 8002688:	0002      	movs	r2, r0
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e0b2      	b.n	80027fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002696:	4b38      	ldr	r3, [pc, #224]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800269a:	2380      	movs	r3, #128	@ 0x80
 800269c:	029b      	lsls	r3, r3, #10
 800269e:	4013      	ands	r3, r2
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x588>
 80026a2:	e000      	b.n	80026a6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80026a4:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d100      	bne.n	80026b0 <HAL_RCC_OscConfig+0x5b4>
 80026ae:	e0a4      	b.n	80027fa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026b0:	4b31      	ldr	r3, [pc, #196]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	220c      	movs	r2, #12
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d100      	bne.n	80026be <HAL_RCC_OscConfig+0x5c2>
 80026bc:	e078      	b.n	80027b0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d14c      	bne.n	8002760 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 80026cc:	492e      	ldr	r1, [pc, #184]	@ (8002788 <HAL_RCC_OscConfig+0x68c>)
 80026ce:	400a      	ands	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7ff f9e5 	bl	8001aa0 <HAL_GetTick>
 80026d6:	0003      	movs	r3, r0
 80026d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026dc:	f7ff f9e0 	bl	8001aa0 <HAL_GetTick>
 80026e0:	0002      	movs	r2, r0
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e086      	b.n	80027fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ee:	4b22      	ldr	r3, [pc, #136]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	2380      	movs	r3, #128	@ 0x80
 80026f4:	049b      	lsls	r3, r3, #18
 80026f6:	4013      	ands	r3, r2
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 80026fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fe:	220f      	movs	r2, #15
 8002700:	4393      	bics	r3, r2
 8002702:	0019      	movs	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002708:	4b1b      	ldr	r3, [pc, #108]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 800270a:	430a      	orrs	r2, r1
 800270c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800270e:	4b1a      	ldr	r3, [pc, #104]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4a1e      	ldr	r2, [pc, #120]	@ (800278c <HAL_RCC_OscConfig+0x690>)
 8002714:	4013      	ands	r3, r2
 8002716:	0019      	movs	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002720:	431a      	orrs	r2, r3
 8002722:	4b15      	ldr	r3, [pc, #84]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002724:	430a      	orrs	r2, r1
 8002726:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002728:	4b13      	ldr	r3, [pc, #76]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b12      	ldr	r3, [pc, #72]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 800272e:	2180      	movs	r1, #128	@ 0x80
 8002730:	0449      	lsls	r1, r1, #17
 8002732:	430a      	orrs	r2, r1
 8002734:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002736:	f7ff f9b3 	bl	8001aa0 <HAL_GetTick>
 800273a:	0003      	movs	r3, r0
 800273c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002740:	f7ff f9ae 	bl	8001aa0 <HAL_GetTick>
 8002744:	0002      	movs	r2, r0
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e054      	b.n	80027fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002752:	4b09      	ldr	r3, [pc, #36]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	2380      	movs	r3, #128	@ 0x80
 8002758:	049b      	lsls	r3, r3, #18
 800275a:	4013      	ands	r3, r2
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x644>
 800275e:	e04c      	b.n	80027fa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002760:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b04      	ldr	r3, [pc, #16]	@ (8002778 <HAL_RCC_OscConfig+0x67c>)
 8002766:	4908      	ldr	r1, [pc, #32]	@ (8002788 <HAL_RCC_OscConfig+0x68c>)
 8002768:	400a      	ands	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7ff f998 	bl	8001aa0 <HAL_GetTick>
 8002770:	0003      	movs	r3, r0
 8002772:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002774:	e015      	b.n	80027a2 <HAL_RCC_OscConfig+0x6a6>
 8002776:	46c0      	nop			@ (mov r8, r8)
 8002778:	40021000 	.word	0x40021000
 800277c:	00001388 	.word	0x00001388
 8002780:	efffffff 	.word	0xefffffff
 8002784:	fffeffff 	.word	0xfffeffff
 8002788:	feffffff 	.word	0xfeffffff
 800278c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002790:	f7ff f986 	bl	8001aa0 <HAL_GetTick>
 8002794:	0002      	movs	r2, r0
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e02c      	b.n	80027fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a2:	4b18      	ldr	r3, [pc, #96]	@ (8002804 <HAL_RCC_OscConfig+0x708>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	2380      	movs	r3, #128	@ 0x80
 80027a8:	049b      	lsls	r3, r3, #18
 80027aa:	4013      	ands	r3, r2
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x694>
 80027ae:	e024      	b.n	80027fa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e01f      	b.n	80027fc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80027bc:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <HAL_RCC_OscConfig+0x708>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80027c2:	4b10      	ldr	r3, [pc, #64]	@ (8002804 <HAL_RCC_OscConfig+0x708>)
 80027c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	23c0      	movs	r3, #192	@ 0xc0
 80027cc:	025b      	lsls	r3, r3, #9
 80027ce:	401a      	ands	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d10e      	bne.n	80027f6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	220f      	movs	r2, #15
 80027dc:	401a      	ands	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	23f0      	movs	r3, #240	@ 0xf0
 80027ea:	039b      	lsls	r3, r3, #14
 80027ec:	401a      	ands	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d001      	beq.n	80027fa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	0018      	movs	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	b008      	add	sp, #32
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000

08002808 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0bf      	b.n	800299c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800281c:	4b61      	ldr	r3, [pc, #388]	@ (80029a4 <HAL_RCC_ClockConfig+0x19c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2201      	movs	r2, #1
 8002822:	4013      	ands	r3, r2
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d911      	bls.n	800284e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b5e      	ldr	r3, [pc, #376]	@ (80029a4 <HAL_RCC_ClockConfig+0x19c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2201      	movs	r2, #1
 8002830:	4393      	bics	r3, r2
 8002832:	0019      	movs	r1, r3
 8002834:	4b5b      	ldr	r3, [pc, #364]	@ (80029a4 <HAL_RCC_ClockConfig+0x19c>)
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800283c:	4b59      	ldr	r3, [pc, #356]	@ (80029a4 <HAL_RCC_ClockConfig+0x19c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2201      	movs	r2, #1
 8002842:	4013      	ands	r3, r2
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d001      	beq.n	800284e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e0a6      	b.n	800299c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2202      	movs	r2, #2
 8002854:	4013      	ands	r3, r2
 8002856:	d015      	beq.n	8002884 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2204      	movs	r2, #4
 800285e:	4013      	ands	r3, r2
 8002860:	d006      	beq.n	8002870 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002862:	4b51      	ldr	r3, [pc, #324]	@ (80029a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	4b50      	ldr	r3, [pc, #320]	@ (80029a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002868:	21e0      	movs	r1, #224	@ 0xe0
 800286a:	00c9      	lsls	r1, r1, #3
 800286c:	430a      	orrs	r2, r1
 800286e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002870:	4b4d      	ldr	r3, [pc, #308]	@ (80029a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	22f0      	movs	r2, #240	@ 0xf0
 8002876:	4393      	bics	r3, r2
 8002878:	0019      	movs	r1, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	4b4a      	ldr	r3, [pc, #296]	@ (80029a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002880:	430a      	orrs	r2, r1
 8002882:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2201      	movs	r2, #1
 800288a:	4013      	ands	r3, r2
 800288c:	d04c      	beq.n	8002928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d107      	bne.n	80028a6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002896:	4b44      	ldr	r3, [pc, #272]	@ (80029a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	2380      	movs	r3, #128	@ 0x80
 800289c:	029b      	lsls	r3, r3, #10
 800289e:	4013      	ands	r3, r2
 80028a0:	d120      	bne.n	80028e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e07a      	b.n	800299c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d107      	bne.n	80028be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ae:	4b3e      	ldr	r3, [pc, #248]	@ (80029a8 <HAL_RCC_ClockConfig+0x1a0>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	2380      	movs	r3, #128	@ 0x80
 80028b4:	049b      	lsls	r3, r3, #18
 80028b6:	4013      	ands	r3, r2
 80028b8:	d114      	bne.n	80028e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e06e      	b.n	800299c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028c6:	4b38      	ldr	r3, [pc, #224]	@ (80029a8 <HAL_RCC_ClockConfig+0x1a0>)
 80028c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028ca:	2380      	movs	r3, #128	@ 0x80
 80028cc:	029b      	lsls	r3, r3, #10
 80028ce:	4013      	ands	r3, r2
 80028d0:	d108      	bne.n	80028e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e062      	b.n	800299c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d6:	4b34      	ldr	r3, [pc, #208]	@ (80029a8 <HAL_RCC_ClockConfig+0x1a0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2202      	movs	r2, #2
 80028dc:	4013      	ands	r3, r2
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e05b      	b.n	800299c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028e4:	4b30      	ldr	r3, [pc, #192]	@ (80029a8 <HAL_RCC_ClockConfig+0x1a0>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2203      	movs	r2, #3
 80028ea:	4393      	bics	r3, r2
 80028ec:	0019      	movs	r1, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	4b2d      	ldr	r3, [pc, #180]	@ (80029a8 <HAL_RCC_ClockConfig+0x1a0>)
 80028f4:	430a      	orrs	r2, r1
 80028f6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f8:	f7ff f8d2 	bl	8001aa0 <HAL_GetTick>
 80028fc:	0003      	movs	r3, r0
 80028fe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002900:	e009      	b.n	8002916 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002902:	f7ff f8cd 	bl	8001aa0 <HAL_GetTick>
 8002906:	0002      	movs	r2, r0
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	4a27      	ldr	r2, [pc, #156]	@ (80029ac <HAL_RCC_ClockConfig+0x1a4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e042      	b.n	800299c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002916:	4b24      	ldr	r3, [pc, #144]	@ (80029a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	220c      	movs	r2, #12
 800291c:	401a      	ands	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	429a      	cmp	r2, r3
 8002926:	d1ec      	bne.n	8002902 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002928:	4b1e      	ldr	r3, [pc, #120]	@ (80029a4 <HAL_RCC_ClockConfig+0x19c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2201      	movs	r2, #1
 800292e:	4013      	ands	r3, r2
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d211      	bcs.n	800295a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b1b      	ldr	r3, [pc, #108]	@ (80029a4 <HAL_RCC_ClockConfig+0x19c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2201      	movs	r2, #1
 800293c:	4393      	bics	r3, r2
 800293e:	0019      	movs	r1, r3
 8002940:	4b18      	ldr	r3, [pc, #96]	@ (80029a4 <HAL_RCC_ClockConfig+0x19c>)
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002948:	4b16      	ldr	r3, [pc, #88]	@ (80029a4 <HAL_RCC_ClockConfig+0x19c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2201      	movs	r2, #1
 800294e:	4013      	ands	r3, r2
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d001      	beq.n	800295a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e020      	b.n	800299c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2204      	movs	r2, #4
 8002960:	4013      	ands	r3, r2
 8002962:	d009      	beq.n	8002978 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002964:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	4a11      	ldr	r2, [pc, #68]	@ (80029b0 <HAL_RCC_ClockConfig+0x1a8>)
 800296a:	4013      	ands	r3, r2
 800296c:	0019      	movs	r1, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	4b0d      	ldr	r3, [pc, #52]	@ (80029a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002974:	430a      	orrs	r2, r1
 8002976:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002978:	f000 f820 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 800297c:	0001      	movs	r1, r0
 800297e:	4b0a      	ldr	r3, [pc, #40]	@ (80029a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	220f      	movs	r2, #15
 8002986:	4013      	ands	r3, r2
 8002988:	4a0a      	ldr	r2, [pc, #40]	@ (80029b4 <HAL_RCC_ClockConfig+0x1ac>)
 800298a:	5cd3      	ldrb	r3, [r2, r3]
 800298c:	000a      	movs	r2, r1
 800298e:	40da      	lsrs	r2, r3
 8002990:	4b09      	ldr	r3, [pc, #36]	@ (80029b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002992:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002994:	2000      	movs	r0, #0
 8002996:	f7ff f83d 	bl	8001a14 <HAL_InitTick>
  
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	0018      	movs	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	b004      	add	sp, #16
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40022000 	.word	0x40022000
 80029a8:	40021000 	.word	0x40021000
 80029ac:	00001388 	.word	0x00001388
 80029b0:	fffff8ff 	.word	0xfffff8ff
 80029b4:	08004504 	.word	0x08004504
 80029b8:	20000004 	.word	0x20000004

080029bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	2300      	movs	r3, #0
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	2300      	movs	r3, #0
 80029d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80029d6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0xd0>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	220c      	movs	r2, #12
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b0c      	cmp	r3, #12
 80029e4:	d046      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0xb8>
 80029e6:	d848      	bhi.n	8002a7a <HAL_RCC_GetSysClockFreq+0xbe>
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d002      	beq.n	80029f2 <HAL_RCC_GetSysClockFreq+0x36>
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d003      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0x3c>
 80029f0:	e043      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029f2:	4b27      	ldr	r3, [pc, #156]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0xd4>)
 80029f4:	613b      	str	r3, [r7, #16]
      break;
 80029f6:	e043      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	0c9b      	lsrs	r3, r3, #18
 80029fc:	220f      	movs	r2, #15
 80029fe:	4013      	ands	r3, r2
 8002a00:	4a24      	ldr	r2, [pc, #144]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002a02:	5cd3      	ldrb	r3, [r2, r3]
 8002a04:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002a06:	4b21      	ldr	r3, [pc, #132]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0a:	220f      	movs	r2, #15
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	4a22      	ldr	r2, [pc, #136]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002a10:	5cd3      	ldrb	r3, [r2, r3]
 8002a12:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	23c0      	movs	r3, #192	@ 0xc0
 8002a18:	025b      	lsls	r3, r3, #9
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	025b      	lsls	r3, r3, #9
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d109      	bne.n	8002a38 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	481a      	ldr	r0, [pc, #104]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a28:	f7fd fb6e 	bl	8000108 <__udivsi3>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	001a      	movs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4353      	muls	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	e01a      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	23c0      	movs	r3, #192	@ 0xc0
 8002a3c:	025b      	lsls	r3, r3, #9
 8002a3e:	401a      	ands	r2, r3
 8002a40:	23c0      	movs	r3, #192	@ 0xc0
 8002a42:	025b      	lsls	r3, r3, #9
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d109      	bne.n	8002a5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	4814      	ldr	r0, [pc, #80]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002a4c:	f7fd fb5c 	bl	8000108 <__udivsi3>
 8002a50:	0003      	movs	r3, r0
 8002a52:	001a      	movs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4353      	muls	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	480c      	ldr	r0, [pc, #48]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a60:	f7fd fb52 	bl	8000108 <__udivsi3>
 8002a64:	0003      	movs	r3, r0
 8002a66:	001a      	movs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4353      	muls	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	613b      	str	r3, [r7, #16]
      break;
 8002a72:	e005      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002a74:	4b09      	ldr	r3, [pc, #36]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002a76:	613b      	str	r3, [r7, #16]
      break;
 8002a78:	e002      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a7a:	4b05      	ldr	r3, [pc, #20]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a7c:	613b      	str	r3, [r7, #16]
      break;
 8002a7e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a80:	693b      	ldr	r3, [r7, #16]
}
 8002a82:	0018      	movs	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b006      	add	sp, #24
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			@ (mov r8, r8)
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	007a1200 	.word	0x007a1200
 8002a94:	08004544 	.word	0x08004544
 8002a98:	08004554 	.word	0x08004554
 8002a9c:	02dc6c00 	.word	0x02dc6c00

08002aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa4:	4b02      	ldr	r3, [pc, #8]	@ (8002ab0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	46c0      	nop			@ (mov r8, r8)
 8002ab0:	20000004 	.word	0x20000004

08002ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002ab8:	f7ff fff2 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002abc:	0001      	movs	r1, r0
 8002abe:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	2207      	movs	r2, #7
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	4a04      	ldr	r2, [pc, #16]	@ (8002adc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aca:	5cd3      	ldrb	r3, [r2, r3]
 8002acc:	40d9      	lsrs	r1, r3
 8002ace:	000b      	movs	r3, r1
}    
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	08004514 	.word	0x08004514

08002ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	2380      	movs	r3, #128	@ 0x80
 8002af6:	025b      	lsls	r3, r3, #9
 8002af8:	4013      	ands	r3, r2
 8002afa:	d100      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002afc:	e08e      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002afe:	2017      	movs	r0, #23
 8002b00:	183b      	adds	r3, r7, r0
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b06:	4b67      	ldr	r3, [pc, #412]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b08:	69da      	ldr	r2, [r3, #28]
 8002b0a:	2380      	movs	r3, #128	@ 0x80
 8002b0c:	055b      	lsls	r3, r3, #21
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d110      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b12:	4b64      	ldr	r3, [pc, #400]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	4b63      	ldr	r3, [pc, #396]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b18:	2180      	movs	r1, #128	@ 0x80
 8002b1a:	0549      	lsls	r1, r1, #21
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	61da      	str	r2, [r3, #28]
 8002b20:	4b60      	ldr	r3, [pc, #384]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b22:	69da      	ldr	r2, [r3, #28]
 8002b24:	2380      	movs	r3, #128	@ 0x80
 8002b26:	055b      	lsls	r3, r3, #21
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b2e:	183b      	adds	r3, r7, r0
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b34:	4b5c      	ldr	r3, [pc, #368]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2380      	movs	r3, #128	@ 0x80
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d11a      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b40:	4b59      	ldr	r3, [pc, #356]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b58      	ldr	r3, [pc, #352]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0049      	lsls	r1, r1, #1
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b4e:	f7fe ffa7 	bl	8001aa0 <HAL_GetTick>
 8002b52:	0003      	movs	r3, r0
 8002b54:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b56:	e008      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b58:	f7fe ffa2 	bl	8001aa0 <HAL_GetTick>
 8002b5c:	0002      	movs	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	@ 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e097      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	2380      	movs	r3, #128	@ 0x80
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4013      	ands	r3, r2
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b76:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b78:	6a1a      	ldr	r2, [r3, #32]
 8002b7a:	23c0      	movs	r3, #192	@ 0xc0
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4013      	ands	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d034      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	23c0      	movs	r3, #192	@ 0xc0
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4013      	ands	r3, r2
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d02c      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b98:	4b42      	ldr	r3, [pc, #264]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4a43      	ldr	r2, [pc, #268]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ba2:	4b40      	ldr	r3, [pc, #256]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ba4:	6a1a      	ldr	r2, [r3, #32]
 8002ba6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ba8:	2180      	movs	r1, #128	@ 0x80
 8002baa:	0249      	lsls	r1, r1, #9
 8002bac:	430a      	orrs	r2, r1
 8002bae:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bb0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bb2:	6a1a      	ldr	r2, [r3, #32]
 8002bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bb6:	493e      	ldr	r1, [pc, #248]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb8:	400a      	ands	r2, r1
 8002bba:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bbc:	4b39      	ldr	r3, [pc, #228]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bca:	f7fe ff69 	bl	8001aa0 <HAL_GetTick>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd2:	e009      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd4:	f7fe ff64 	bl	8001aa0 <HAL_GetTick>
 8002bd8:	0002      	movs	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	4a35      	ldr	r2, [pc, #212]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e058      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be8:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	2202      	movs	r2, #2
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	4a2d      	ldr	r2, [pc, #180]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	4b28      	ldr	r3, [pc, #160]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c02:	430a      	orrs	r2, r1
 8002c04:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c06:	2317      	movs	r3, #23
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d105      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c10:	4b24      	ldr	r3, [pc, #144]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c12:	69da      	ldr	r2, [r3, #28]
 8002c14:	4b23      	ldr	r3, [pc, #140]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c16:	4928      	ldr	r1, [pc, #160]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c18:	400a      	ands	r2, r1
 8002c1a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2201      	movs	r2, #1
 8002c22:	4013      	ands	r3, r2
 8002c24:	d009      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c26:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	4393      	bics	r3, r2
 8002c2e:	0019      	movs	r1, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c36:	430a      	orrs	r2, r1
 8002c38:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	4013      	ands	r3, r2
 8002c42:	d009      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c44:	4b17      	ldr	r3, [pc, #92]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c48:	2210      	movs	r2, #16
 8002c4a:	4393      	bics	r3, r2
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	4b14      	ldr	r3, [pc, #80]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c54:	430a      	orrs	r2, r1
 8002c56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	2380      	movs	r3, #128	@ 0x80
 8002c5e:	029b      	lsls	r3, r3, #10
 8002c60:	4013      	ands	r3, r2
 8002c62:	d009      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c64:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c68:	2280      	movs	r2, #128	@ 0x80
 8002c6a:	4393      	bics	r3, r2
 8002c6c:	0019      	movs	r1, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c74:	430a      	orrs	r2, r1
 8002c76:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	2380      	movs	r3, #128	@ 0x80
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4013      	ands	r3, r2
 8002c82:	d009      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c84:	4b07      	ldr	r3, [pc, #28]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	2240      	movs	r2, #64	@ 0x40
 8002c8a:	4393      	bics	r3, r2
 8002c8c:	0019      	movs	r1, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	4b04      	ldr	r3, [pc, #16]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c94:	430a      	orrs	r2, r1
 8002c96:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b006      	add	sp, #24
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	46c0      	nop			@ (mov r8, r8)
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40007000 	.word	0x40007000
 8002cac:	fffffcff 	.word	0xfffffcff
 8002cb0:	fffeffff 	.word	0xfffeffff
 8002cb4:	00001388 	.word	0x00001388
 8002cb8:	efffffff 	.word	0xefffffff

08002cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e044      	b.n	8002d58 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d107      	bne.n	8002ce6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2278      	movs	r2, #120	@ 0x78
 8002cda:	2100      	movs	r1, #0
 8002cdc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f7fe fa71 	bl	80011c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2224      	movs	r2, #36	@ 0x24
 8002cea:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	438a      	bics	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	0018      	movs	r0, r3
 8002d08:	f000 fd5e 	bl	80037c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f000 fc1a 	bl	8003548 <UART_SetConfig>
 8002d14:	0003      	movs	r3, r0
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e01c      	b.n	8002d58 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	490d      	ldr	r1, [pc, #52]	@ (8002d60 <HAL_UART_Init+0xa4>)
 8002d2a:	400a      	ands	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	212a      	movs	r1, #42	@ 0x2a
 8002d3a:	438a      	bics	r2, r1
 8002d3c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2101      	movs	r1, #1
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	0018      	movs	r0, r3
 8002d52:	f000 fded 	bl	8003930 <UART_CheckIdleState>
 8002d56:	0003      	movs	r3, r0
}
 8002d58:	0018      	movs	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b002      	add	sp, #8
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	ffffb7ff 	.word	0xffffb7ff

08002d64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	@ 0x28
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	1dbb      	adds	r3, r7, #6
 8002d72:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	d000      	beq.n	8002d7e <HAL_UART_Transmit+0x1a>
 8002d7c:	e08c      	b.n	8002e98 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_UART_Transmit+0x28>
 8002d84:	1dbb      	adds	r3, r7, #6
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e084      	b.n	8002e9a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	2380      	movs	r3, #128	@ 0x80
 8002d96:	015b      	lsls	r3, r3, #5
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d109      	bne.n	8002db0 <HAL_UART_Transmit+0x4c>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2201      	movs	r2, #1
 8002da8:	4013      	ands	r3, r2
 8002daa:	d001      	beq.n	8002db0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e074      	b.n	8002e9a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2284      	movs	r2, #132	@ 0x84
 8002db4:	2100      	movs	r1, #0
 8002db6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2221      	movs	r2, #33	@ 0x21
 8002dbc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dbe:	f7fe fe6f 	bl	8001aa0 <HAL_GetTick>
 8002dc2:	0003      	movs	r3, r0
 8002dc4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1dba      	adds	r2, r7, #6
 8002dca:	2150      	movs	r1, #80	@ 0x50
 8002dcc:	8812      	ldrh	r2, [r2, #0]
 8002dce:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1dba      	adds	r2, r7, #6
 8002dd4:	2152      	movs	r1, #82	@ 0x52
 8002dd6:	8812      	ldrh	r2, [r2, #0]
 8002dd8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	2380      	movs	r3, #128	@ 0x80
 8002de0:	015b      	lsls	r3, r3, #5
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d108      	bne.n	8002df8 <HAL_UART_Transmit+0x94>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d104      	bne.n	8002df8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	61bb      	str	r3, [r7, #24]
 8002df6:	e003      	b.n	8002e00 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e00:	e02f      	b.n	8002e62 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	0013      	movs	r3, r2
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2180      	movs	r1, #128	@ 0x80
 8002e10:	f000 fe36 	bl	8003a80 <UART_WaitOnFlagUntilTimeout>
 8002e14:	1e03      	subs	r3, r0, #0
 8002e16:	d004      	beq.n	8002e22 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e03b      	b.n	8002e9a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10b      	bne.n	8002e40 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	881a      	ldrh	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	05d2      	lsls	r2, r2, #23
 8002e32:	0dd2      	lsrs	r2, r2, #23
 8002e34:	b292      	uxth	r2, r2
 8002e36:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	3302      	adds	r3, #2
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	e007      	b.n	8002e50 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	781a      	ldrb	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2252      	movs	r2, #82	@ 0x52
 8002e54:	5a9b      	ldrh	r3, [r3, r2]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b299      	uxth	r1, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2252      	movs	r2, #82	@ 0x52
 8002e60:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2252      	movs	r2, #82	@ 0x52
 8002e66:	5a9b      	ldrh	r3, [r3, r2]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1c9      	bne.n	8002e02 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	0013      	movs	r3, r2
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2140      	movs	r1, #64	@ 0x40
 8002e7c:	f000 fe00 	bl	8003a80 <UART_WaitOnFlagUntilTimeout>
 8002e80:	1e03      	subs	r3, r0, #0
 8002e82:	d004      	beq.n	8002e8e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e005      	b.n	8002e9a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2220      	movs	r2, #32
 8002e92:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	e000      	b.n	8002e9a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002e98:	2302      	movs	r3, #2
  }
}
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b008      	add	sp, #32
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b088      	sub	sp, #32
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	1dbb      	adds	r3, r7, #6
 8002eae:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2280      	movs	r2, #128	@ 0x80
 8002eb4:	589b      	ldr	r3, [r3, r2]
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d145      	bne.n	8002f46 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_UART_Receive_IT+0x26>
 8002ec0:	1dbb      	adds	r3, r7, #6
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e03d      	b.n	8002f48 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	2380      	movs	r3, #128	@ 0x80
 8002ed2:	015b      	lsls	r3, r3, #5
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d109      	bne.n	8002eec <HAL_UART_Receive_IT+0x4a>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d105      	bne.n	8002eec <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d001      	beq.n	8002eec <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e02d      	b.n	8002f48 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	2380      	movs	r3, #128	@ 0x80
 8002efa:	041b      	lsls	r3, r3, #16
 8002efc:	4013      	ands	r3, r2
 8002efe:	d019      	beq.n	8002f34 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f00:	f3ef 8310 	mrs	r3, PRIMASK
 8002f04:	613b      	str	r3, [r7, #16]
  return(result);
 8002f06:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f383 8810 	msr	PRIMASK, r3
}
 8002f14:	46c0      	nop			@ (mov r8, r8)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2180      	movs	r1, #128	@ 0x80
 8002f22:	04c9      	lsls	r1, r1, #19
 8002f24:	430a      	orrs	r2, r1
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	f383 8810 	msr	PRIMASK, r3
}
 8002f32:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f34:	1dbb      	adds	r3, r7, #6
 8002f36:	881a      	ldrh	r2, [r3, #0]
 8002f38:	68b9      	ldr	r1, [r7, #8]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f000 fe0f 	bl	8003b60 <UART_Start_Receive_IT>
 8002f42:	0003      	movs	r3, r0
 8002f44:	e000      	b.n	8002f48 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002f46:	2302      	movs	r3, #2
  }
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b008      	add	sp, #32
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b0ab      	sub	sp, #172	@ 0xac
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	22a4      	movs	r2, #164	@ 0xa4
 8002f60:	18b9      	adds	r1, r7, r2
 8002f62:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	20a0      	movs	r0, #160	@ 0xa0
 8002f6c:	1839      	adds	r1, r7, r0
 8002f6e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	219c      	movs	r1, #156	@ 0x9c
 8002f78:	1879      	adds	r1, r7, r1
 8002f7a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f7c:	0011      	movs	r1, r2
 8002f7e:	18bb      	adds	r3, r7, r2
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a99      	ldr	r2, [pc, #612]	@ (80031e8 <HAL_UART_IRQHandler+0x298>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	2298      	movs	r2, #152	@ 0x98
 8002f88:	18bc      	adds	r4, r7, r2
 8002f8a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002f8c:	18bb      	adds	r3, r7, r2
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d114      	bne.n	8002fbe <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f94:	187b      	adds	r3, r7, r1
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d00f      	beq.n	8002fbe <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f9e:	183b      	adds	r3, r7, r0
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d00a      	beq.n	8002fbe <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d100      	bne.n	8002fb2 <HAL_UART_IRQHandler+0x62>
 8002fb0:	e29e      	b.n	80034f0 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	0010      	movs	r0, r2
 8002fba:	4798      	blx	r3
      }
      return;
 8002fbc:	e298      	b.n	80034f0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002fbe:	2398      	movs	r3, #152	@ 0x98
 8002fc0:	18fb      	adds	r3, r7, r3
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d100      	bne.n	8002fca <HAL_UART_IRQHandler+0x7a>
 8002fc8:	e114      	b.n	80031f4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002fca:	239c      	movs	r3, #156	@ 0x9c
 8002fcc:	18fb      	adds	r3, r7, r3
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d106      	bne.n	8002fe4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002fd6:	23a0      	movs	r3, #160	@ 0xa0
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a83      	ldr	r2, [pc, #524]	@ (80031ec <HAL_UART_IRQHandler+0x29c>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d100      	bne.n	8002fe4 <HAL_UART_IRQHandler+0x94>
 8002fe2:	e107      	b.n	80031f4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fe4:	23a4      	movs	r3, #164	@ 0xa4
 8002fe6:	18fb      	adds	r3, r7, r3
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2201      	movs	r2, #1
 8002fec:	4013      	ands	r3, r2
 8002fee:	d012      	beq.n	8003016 <HAL_UART_IRQHandler+0xc6>
 8002ff0:	23a0      	movs	r3, #160	@ 0xa0
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	2380      	movs	r3, #128	@ 0x80
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d00b      	beq.n	8003016 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2201      	movs	r2, #1
 8003004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2284      	movs	r2, #132	@ 0x84
 800300a:	589b      	ldr	r3, [r3, r2]
 800300c:	2201      	movs	r2, #1
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2184      	movs	r1, #132	@ 0x84
 8003014:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003016:	23a4      	movs	r3, #164	@ 0xa4
 8003018:	18fb      	adds	r3, r7, r3
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2202      	movs	r2, #2
 800301e:	4013      	ands	r3, r2
 8003020:	d011      	beq.n	8003046 <HAL_UART_IRQHandler+0xf6>
 8003022:	239c      	movs	r3, #156	@ 0x9c
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2201      	movs	r2, #1
 800302a:	4013      	ands	r3, r2
 800302c:	d00b      	beq.n	8003046 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2202      	movs	r2, #2
 8003034:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2284      	movs	r2, #132	@ 0x84
 800303a:	589b      	ldr	r3, [r3, r2]
 800303c:	2204      	movs	r2, #4
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2184      	movs	r1, #132	@ 0x84
 8003044:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003046:	23a4      	movs	r3, #164	@ 0xa4
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2204      	movs	r2, #4
 800304e:	4013      	ands	r3, r2
 8003050:	d011      	beq.n	8003076 <HAL_UART_IRQHandler+0x126>
 8003052:	239c      	movs	r3, #156	@ 0x9c
 8003054:	18fb      	adds	r3, r7, r3
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2201      	movs	r2, #1
 800305a:	4013      	ands	r3, r2
 800305c:	d00b      	beq.n	8003076 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2204      	movs	r2, #4
 8003064:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2284      	movs	r2, #132	@ 0x84
 800306a:	589b      	ldr	r3, [r3, r2]
 800306c:	2202      	movs	r2, #2
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2184      	movs	r1, #132	@ 0x84
 8003074:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003076:	23a4      	movs	r3, #164	@ 0xa4
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2208      	movs	r2, #8
 800307e:	4013      	ands	r3, r2
 8003080:	d017      	beq.n	80030b2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003082:	23a0      	movs	r3, #160	@ 0xa0
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2220      	movs	r2, #32
 800308a:	4013      	ands	r3, r2
 800308c:	d105      	bne.n	800309a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800308e:	239c      	movs	r3, #156	@ 0x9c
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2201      	movs	r2, #1
 8003096:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003098:	d00b      	beq.n	80030b2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2208      	movs	r2, #8
 80030a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2284      	movs	r2, #132	@ 0x84
 80030a6:	589b      	ldr	r3, [r3, r2]
 80030a8:	2208      	movs	r2, #8
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2184      	movs	r1, #132	@ 0x84
 80030b0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030b2:	23a4      	movs	r3, #164	@ 0xa4
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	2380      	movs	r3, #128	@ 0x80
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	4013      	ands	r3, r2
 80030be:	d013      	beq.n	80030e8 <HAL_UART_IRQHandler+0x198>
 80030c0:	23a0      	movs	r3, #160	@ 0xa0
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	2380      	movs	r3, #128	@ 0x80
 80030c8:	04db      	lsls	r3, r3, #19
 80030ca:	4013      	ands	r3, r2
 80030cc:	d00c      	beq.n	80030e8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2280      	movs	r2, #128	@ 0x80
 80030d4:	0112      	lsls	r2, r2, #4
 80030d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2284      	movs	r2, #132	@ 0x84
 80030dc:	589b      	ldr	r3, [r3, r2]
 80030de:	2220      	movs	r2, #32
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2184      	movs	r1, #132	@ 0x84
 80030e6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2284      	movs	r2, #132	@ 0x84
 80030ec:	589b      	ldr	r3, [r3, r2]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d100      	bne.n	80030f4 <HAL_UART_IRQHandler+0x1a4>
 80030f2:	e1ff      	b.n	80034f4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80030f4:	23a4      	movs	r3, #164	@ 0xa4
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2220      	movs	r2, #32
 80030fc:	4013      	ands	r3, r2
 80030fe:	d00e      	beq.n	800311e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003100:	23a0      	movs	r3, #160	@ 0xa0
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2220      	movs	r2, #32
 8003108:	4013      	ands	r3, r2
 800310a:	d008      	beq.n	800311e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003110:	2b00      	cmp	r3, #0
 8003112:	d004      	beq.n	800311e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	0010      	movs	r0, r2
 800311c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2284      	movs	r2, #132	@ 0x84
 8003122:	589b      	ldr	r3, [r3, r2]
 8003124:	2194      	movs	r1, #148	@ 0x94
 8003126:	187a      	adds	r2, r7, r1
 8003128:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2240      	movs	r2, #64	@ 0x40
 8003132:	4013      	ands	r3, r2
 8003134:	2b40      	cmp	r3, #64	@ 0x40
 8003136:	d004      	beq.n	8003142 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003138:	187b      	adds	r3, r7, r1
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2228      	movs	r2, #40	@ 0x28
 800313e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003140:	d047      	beq.n	80031d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	0018      	movs	r0, r3
 8003146:	f000 fdd5 	bl	8003cf4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	4013      	ands	r3, r2
 8003154:	2b40      	cmp	r3, #64	@ 0x40
 8003156:	d137      	bne.n	80031c8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003158:	f3ef 8310 	mrs	r3, PRIMASK
 800315c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800315e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003160:	2090      	movs	r0, #144	@ 0x90
 8003162:	183a      	adds	r2, r7, r0
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	2301      	movs	r3, #1
 8003168:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800316a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800316c:	f383 8810 	msr	PRIMASK, r3
}
 8003170:	46c0      	nop			@ (mov r8, r8)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2140      	movs	r1, #64	@ 0x40
 800317e:	438a      	bics	r2, r1
 8003180:	609a      	str	r2, [r3, #8]
 8003182:	183b      	adds	r3, r7, r0
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003188:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800318a:	f383 8810 	msr	PRIMASK, r3
}
 800318e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003194:	2b00      	cmp	r3, #0
 8003196:	d012      	beq.n	80031be <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800319c:	4a14      	ldr	r2, [pc, #80]	@ (80031f0 <HAL_UART_IRQHandler+0x2a0>)
 800319e:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031a4:	0018      	movs	r0, r3
 80031a6:	f7fe fd9b 	bl	8001ce0 <HAL_DMA_Abort_IT>
 80031aa:	1e03      	subs	r3, r0, #0
 80031ac:	d01a      	beq.n	80031e4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031b8:	0018      	movs	r0, r3
 80031ba:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031bc:	e012      	b.n	80031e4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	0018      	movs	r0, r3
 80031c2:	f000 f9ad 	bl	8003520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c6:	e00d      	b.n	80031e4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	0018      	movs	r0, r3
 80031cc:	f000 f9a8 	bl	8003520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d0:	e008      	b.n	80031e4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	0018      	movs	r0, r3
 80031d6:	f000 f9a3 	bl	8003520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2284      	movs	r2, #132	@ 0x84
 80031de:	2100      	movs	r1, #0
 80031e0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80031e2:	e187      	b.n	80034f4 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e4:	46c0      	nop			@ (mov r8, r8)
    return;
 80031e6:	e185      	b.n	80034f4 <HAL_UART_IRQHandler+0x5a4>
 80031e8:	0000080f 	.word	0x0000080f
 80031ec:	04000120 	.word	0x04000120
 80031f0:	08003dbd 	.word	0x08003dbd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d000      	beq.n	80031fe <HAL_UART_IRQHandler+0x2ae>
 80031fc:	e139      	b.n	8003472 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80031fe:	23a4      	movs	r3, #164	@ 0xa4
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2210      	movs	r2, #16
 8003206:	4013      	ands	r3, r2
 8003208:	d100      	bne.n	800320c <HAL_UART_IRQHandler+0x2bc>
 800320a:	e132      	b.n	8003472 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800320c:	23a0      	movs	r3, #160	@ 0xa0
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2210      	movs	r2, #16
 8003214:	4013      	ands	r3, r2
 8003216:	d100      	bne.n	800321a <HAL_UART_IRQHandler+0x2ca>
 8003218:	e12b      	b.n	8003472 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2210      	movs	r2, #16
 8003220:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2240      	movs	r2, #64	@ 0x40
 800322a:	4013      	ands	r3, r2
 800322c:	2b40      	cmp	r3, #64	@ 0x40
 800322e:	d000      	beq.n	8003232 <HAL_UART_IRQHandler+0x2e2>
 8003230:	e09f      	b.n	8003372 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	217e      	movs	r1, #126	@ 0x7e
 800323c:	187b      	adds	r3, r7, r1
 800323e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003240:	187b      	adds	r3, r7, r1
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d100      	bne.n	800324a <HAL_UART_IRQHandler+0x2fa>
 8003248:	e156      	b.n	80034f8 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2258      	movs	r2, #88	@ 0x58
 800324e:	5a9b      	ldrh	r3, [r3, r2]
 8003250:	187a      	adds	r2, r7, r1
 8003252:	8812      	ldrh	r2, [r2, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d300      	bcc.n	800325a <HAL_UART_IRQHandler+0x30a>
 8003258:	e14e      	b.n	80034f8 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	187a      	adds	r2, r7, r1
 800325e:	215a      	movs	r1, #90	@ 0x5a
 8003260:	8812      	ldrh	r2, [r2, #0]
 8003262:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b20      	cmp	r3, #32
 800326c:	d06f      	beq.n	800334e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800326e:	f3ef 8310 	mrs	r3, PRIMASK
 8003272:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003276:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003278:	2301      	movs	r3, #1
 800327a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800327e:	f383 8810 	msr	PRIMASK, r3
}
 8003282:	46c0      	nop			@ (mov r8, r8)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	499e      	ldr	r1, [pc, #632]	@ (8003508 <HAL_UART_IRQHandler+0x5b8>)
 8003290:	400a      	ands	r2, r1
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003296:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800329a:	f383 8810 	msr	PRIMASK, r3
}
 800329e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a0:	f3ef 8310 	mrs	r3, PRIMASK
 80032a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80032a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80032aa:	2301      	movs	r3, #1
 80032ac:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032b0:	f383 8810 	msr	PRIMASK, r3
}
 80032b4:	46c0      	nop			@ (mov r8, r8)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2101      	movs	r1, #1
 80032c2:	438a      	bics	r2, r1
 80032c4:	609a      	str	r2, [r3, #8]
 80032c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032c8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032cc:	f383 8810 	msr	PRIMASK, r3
}
 80032d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d2:	f3ef 8310 	mrs	r3, PRIMASK
 80032d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80032d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032da:	673b      	str	r3, [r7, #112]	@ 0x70
 80032dc:	2301      	movs	r3, #1
 80032de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032e2:	f383 8810 	msr	PRIMASK, r3
}
 80032e6:	46c0      	nop			@ (mov r8, r8)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2140      	movs	r1, #64	@ 0x40
 80032f4:	438a      	bics	r2, r1
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032fa:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032fe:	f383 8810 	msr	PRIMASK, r3
}
 8003302:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2280      	movs	r2, #128	@ 0x80
 8003308:	2120      	movs	r1, #32
 800330a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003312:	f3ef 8310 	mrs	r3, PRIMASK
 8003316:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800331a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800331c:	2301      	movs	r3, #1
 800331e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003320:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003322:	f383 8810 	msr	PRIMASK, r3
}
 8003326:	46c0      	nop			@ (mov r8, r8)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2110      	movs	r1, #16
 8003334:	438a      	bics	r2, r1
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800333a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800333e:	f383 8810 	msr	PRIMASK, r3
}
 8003342:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003348:	0018      	movs	r0, r3
 800334a:	f7fe fc91 	bl	8001c70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2202      	movs	r2, #2
 8003352:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2258      	movs	r2, #88	@ 0x58
 8003358:	5a9a      	ldrh	r2, [r3, r2]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	215a      	movs	r1, #90	@ 0x5a
 800335e:	5a5b      	ldrh	r3, [r3, r1]
 8003360:	b29b      	uxth	r3, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	b29a      	uxth	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	0011      	movs	r1, r2
 800336a:	0018      	movs	r0, r3
 800336c:	f000 f8e0 	bl	8003530 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003370:	e0c2      	b.n	80034f8 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2258      	movs	r2, #88	@ 0x58
 8003376:	5a99      	ldrh	r1, [r3, r2]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	225a      	movs	r2, #90	@ 0x5a
 800337c:	5a9b      	ldrh	r3, [r3, r2]
 800337e:	b29a      	uxth	r2, r3
 8003380:	208e      	movs	r0, #142	@ 0x8e
 8003382:	183b      	adds	r3, r7, r0
 8003384:	1a8a      	subs	r2, r1, r2
 8003386:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	225a      	movs	r2, #90	@ 0x5a
 800338c:	5a9b      	ldrh	r3, [r3, r2]
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d100      	bne.n	8003396 <HAL_UART_IRQHandler+0x446>
 8003394:	e0b2      	b.n	80034fc <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8003396:	183b      	adds	r3, r7, r0
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d100      	bne.n	80033a0 <HAL_UART_IRQHandler+0x450>
 800339e:	e0ad      	b.n	80034fc <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a0:	f3ef 8310 	mrs	r3, PRIMASK
 80033a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80033a6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033a8:	2488      	movs	r4, #136	@ 0x88
 80033aa:	193a      	adds	r2, r7, r4
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	2301      	movs	r3, #1
 80033b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f383 8810 	msr	PRIMASK, r3
}
 80033b8:	46c0      	nop			@ (mov r8, r8)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4951      	ldr	r1, [pc, #324]	@ (800350c <HAL_UART_IRQHandler+0x5bc>)
 80033c6:	400a      	ands	r2, r1
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	193b      	adds	r3, r7, r4
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f383 8810 	msr	PRIMASK, r3
}
 80033d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d8:	f3ef 8310 	mrs	r3, PRIMASK
 80033dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80033de:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e0:	2484      	movs	r4, #132	@ 0x84
 80033e2:	193a      	adds	r2, r7, r4
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	2301      	movs	r3, #1
 80033e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f383 8810 	msr	PRIMASK, r3
}
 80033f0:	46c0      	nop			@ (mov r8, r8)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2101      	movs	r1, #1
 80033fe:	438a      	bics	r2, r1
 8003400:	609a      	str	r2, [r3, #8]
 8003402:	193b      	adds	r3, r7, r4
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	f383 8810 	msr	PRIMASK, r3
}
 800340e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2280      	movs	r2, #128	@ 0x80
 8003414:	2120      	movs	r1, #32
 8003416:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003424:	f3ef 8310 	mrs	r3, PRIMASK
 8003428:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800342a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800342c:	2480      	movs	r4, #128	@ 0x80
 800342e:	193a      	adds	r2, r7, r4
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	2301      	movs	r3, #1
 8003434:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003438:	f383 8810 	msr	PRIMASK, r3
}
 800343c:	46c0      	nop			@ (mov r8, r8)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2110      	movs	r1, #16
 800344a:	438a      	bics	r2, r1
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	193b      	adds	r3, r7, r4
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003456:	f383 8810 	msr	PRIMASK, r3
}
 800345a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003462:	183b      	adds	r3, r7, r0
 8003464:	881a      	ldrh	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	0011      	movs	r1, r2
 800346a:	0018      	movs	r0, r3
 800346c:	f000 f860 	bl	8003530 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003470:	e044      	b.n	80034fc <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003472:	23a4      	movs	r3, #164	@ 0xa4
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	2380      	movs	r3, #128	@ 0x80
 800347a:	035b      	lsls	r3, r3, #13
 800347c:	4013      	ands	r3, r2
 800347e:	d010      	beq.n	80034a2 <HAL_UART_IRQHandler+0x552>
 8003480:	239c      	movs	r3, #156	@ 0x9c
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	2380      	movs	r3, #128	@ 0x80
 8003488:	03db      	lsls	r3, r3, #15
 800348a:	4013      	ands	r3, r2
 800348c:	d009      	beq.n	80034a2 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2280      	movs	r2, #128	@ 0x80
 8003494:	0352      	lsls	r2, r2, #13
 8003496:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	0018      	movs	r0, r3
 800349c:	f000 fe88 	bl	80041b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034a0:	e02f      	b.n	8003502 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80034a2:	23a4      	movs	r3, #164	@ 0xa4
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2280      	movs	r2, #128	@ 0x80
 80034aa:	4013      	ands	r3, r2
 80034ac:	d00f      	beq.n	80034ce <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80034ae:	23a0      	movs	r3, #160	@ 0xa0
 80034b0:	18fb      	adds	r3, r7, r3
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2280      	movs	r2, #128	@ 0x80
 80034b6:	4013      	ands	r3, r2
 80034b8:	d009      	beq.n	80034ce <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d01e      	beq.n	8003500 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	0010      	movs	r0, r2
 80034ca:	4798      	blx	r3
    }
    return;
 80034cc:	e018      	b.n	8003500 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034ce:	23a4      	movs	r3, #164	@ 0xa4
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2240      	movs	r2, #64	@ 0x40
 80034d6:	4013      	ands	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_UART_IRQHandler+0x5b2>
 80034da:	23a0      	movs	r3, #160	@ 0xa0
 80034dc:	18fb      	adds	r3, r7, r3
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2240      	movs	r2, #64	@ 0x40
 80034e2:	4013      	ands	r3, r2
 80034e4:	d00d      	beq.n	8003502 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	0018      	movs	r0, r3
 80034ea:	f000 fc7e 	bl	8003dea <UART_EndTransmit_IT>
    return;
 80034ee:	e008      	b.n	8003502 <HAL_UART_IRQHandler+0x5b2>
      return;
 80034f0:	46c0      	nop			@ (mov r8, r8)
 80034f2:	e006      	b.n	8003502 <HAL_UART_IRQHandler+0x5b2>
    return;
 80034f4:	46c0      	nop			@ (mov r8, r8)
 80034f6:	e004      	b.n	8003502 <HAL_UART_IRQHandler+0x5b2>
      return;
 80034f8:	46c0      	nop			@ (mov r8, r8)
 80034fa:	e002      	b.n	8003502 <HAL_UART_IRQHandler+0x5b2>
      return;
 80034fc:	46c0      	nop			@ (mov r8, r8)
 80034fe:	e000      	b.n	8003502 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003500:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003502:	46bd      	mov	sp, r7
 8003504:	b02b      	add	sp, #172	@ 0xac
 8003506:	bd90      	pop	{r4, r7, pc}
 8003508:	fffffeff 	.word	0xfffffeff
 800350c:	fffffedf 	.word	0xfffffedf

08003510 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003518:	46c0      	nop			@ (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	b002      	add	sp, #8
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003528:	46c0      	nop			@ (mov r8, r8)
 800352a:	46bd      	mov	sp, r7
 800352c:	b002      	add	sp, #8
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	000a      	movs	r2, r1
 800353a:	1cbb      	adds	r3, r7, #2
 800353c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800353e:	46c0      	nop			@ (mov r8, r8)
 8003540:	46bd      	mov	sp, r7
 8003542:	b002      	add	sp, #8
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003550:	231e      	movs	r3, #30
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a8d      	ldr	r2, [pc, #564]	@ (80037ac <UART_SetConfig+0x264>)
 8003578:	4013      	ands	r3, r2
 800357a:	0019      	movs	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	430a      	orrs	r2, r1
 8003584:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4a88      	ldr	r2, [pc, #544]	@ (80037b0 <UART_SetConfig+0x268>)
 800358e:	4013      	ands	r3, r2
 8003590:	0019      	movs	r1, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	4a7f      	ldr	r2, [pc, #508]	@ (80037b4 <UART_SetConfig+0x26c>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	0019      	movs	r1, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a7b      	ldr	r2, [pc, #492]	@ (80037b8 <UART_SetConfig+0x270>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d127      	bne.n	800361e <UART_SetConfig+0xd6>
 80035ce:	4b7b      	ldr	r3, [pc, #492]	@ (80037bc <UART_SetConfig+0x274>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d2:	2203      	movs	r2, #3
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d00d      	beq.n	80035f6 <UART_SetConfig+0xae>
 80035da:	d81b      	bhi.n	8003614 <UART_SetConfig+0xcc>
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d014      	beq.n	800360a <UART_SetConfig+0xc2>
 80035e0:	d818      	bhi.n	8003614 <UART_SetConfig+0xcc>
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <UART_SetConfig+0xa4>
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d00a      	beq.n	8003600 <UART_SetConfig+0xb8>
 80035ea:	e013      	b.n	8003614 <UART_SetConfig+0xcc>
 80035ec:	231f      	movs	r3, #31
 80035ee:	18fb      	adds	r3, r7, r3
 80035f0:	2200      	movs	r2, #0
 80035f2:	701a      	strb	r2, [r3, #0]
 80035f4:	e021      	b.n	800363a <UART_SetConfig+0xf2>
 80035f6:	231f      	movs	r3, #31
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	2202      	movs	r2, #2
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	e01c      	b.n	800363a <UART_SetConfig+0xf2>
 8003600:	231f      	movs	r3, #31
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	2204      	movs	r2, #4
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	e017      	b.n	800363a <UART_SetConfig+0xf2>
 800360a:	231f      	movs	r3, #31
 800360c:	18fb      	adds	r3, r7, r3
 800360e:	2208      	movs	r2, #8
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	e012      	b.n	800363a <UART_SetConfig+0xf2>
 8003614:	231f      	movs	r3, #31
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	2210      	movs	r2, #16
 800361a:	701a      	strb	r2, [r3, #0]
 800361c:	e00d      	b.n	800363a <UART_SetConfig+0xf2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a67      	ldr	r2, [pc, #412]	@ (80037c0 <UART_SetConfig+0x278>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d104      	bne.n	8003632 <UART_SetConfig+0xea>
 8003628:	231f      	movs	r3, #31
 800362a:	18fb      	adds	r3, r7, r3
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]
 8003630:	e003      	b.n	800363a <UART_SetConfig+0xf2>
 8003632:	231f      	movs	r3, #31
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	2210      	movs	r2, #16
 8003638:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69da      	ldr	r2, [r3, #28]
 800363e:	2380      	movs	r3, #128	@ 0x80
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	429a      	cmp	r2, r3
 8003644:	d15c      	bne.n	8003700 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003646:	231f      	movs	r3, #31
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b08      	cmp	r3, #8
 800364e:	d015      	beq.n	800367c <UART_SetConfig+0x134>
 8003650:	dc18      	bgt.n	8003684 <UART_SetConfig+0x13c>
 8003652:	2b04      	cmp	r3, #4
 8003654:	d00d      	beq.n	8003672 <UART_SetConfig+0x12a>
 8003656:	dc15      	bgt.n	8003684 <UART_SetConfig+0x13c>
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <UART_SetConfig+0x11a>
 800365c:	2b02      	cmp	r3, #2
 800365e:	d005      	beq.n	800366c <UART_SetConfig+0x124>
 8003660:	e010      	b.n	8003684 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003662:	f7ff fa27 	bl	8002ab4 <HAL_RCC_GetPCLK1Freq>
 8003666:	0003      	movs	r3, r0
 8003668:	61bb      	str	r3, [r7, #24]
        break;
 800366a:	e012      	b.n	8003692 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800366c:	4b55      	ldr	r3, [pc, #340]	@ (80037c4 <UART_SetConfig+0x27c>)
 800366e:	61bb      	str	r3, [r7, #24]
        break;
 8003670:	e00f      	b.n	8003692 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003672:	f7ff f9a3 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 8003676:	0003      	movs	r3, r0
 8003678:	61bb      	str	r3, [r7, #24]
        break;
 800367a:	e00a      	b.n	8003692 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800367c:	2380      	movs	r3, #128	@ 0x80
 800367e:	021b      	lsls	r3, r3, #8
 8003680:	61bb      	str	r3, [r7, #24]
        break;
 8003682:	e006      	b.n	8003692 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003688:	231e      	movs	r3, #30
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	2201      	movs	r2, #1
 800368e:	701a      	strb	r2, [r3, #0]
        break;
 8003690:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d100      	bne.n	800369a <UART_SetConfig+0x152>
 8003698:	e07a      	b.n	8003790 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	005a      	lsls	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	085b      	lsrs	r3, r3, #1
 80036a4:	18d2      	adds	r2, r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	0019      	movs	r1, r3
 80036ac:	0010      	movs	r0, r2
 80036ae:	f7fc fd2b 	bl	8000108 <__udivsi3>
 80036b2:	0003      	movs	r3, r0
 80036b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b0f      	cmp	r3, #15
 80036ba:	d91c      	bls.n	80036f6 <UART_SetConfig+0x1ae>
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	2380      	movs	r3, #128	@ 0x80
 80036c0:	025b      	lsls	r3, r3, #9
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d217      	bcs.n	80036f6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	200e      	movs	r0, #14
 80036cc:	183b      	adds	r3, r7, r0
 80036ce:	210f      	movs	r1, #15
 80036d0:	438a      	bics	r2, r1
 80036d2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	085b      	lsrs	r3, r3, #1
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2207      	movs	r2, #7
 80036dc:	4013      	ands	r3, r2
 80036de:	b299      	uxth	r1, r3
 80036e0:	183b      	adds	r3, r7, r0
 80036e2:	183a      	adds	r2, r7, r0
 80036e4:	8812      	ldrh	r2, [r2, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	183a      	adds	r2, r7, r0
 80036f0:	8812      	ldrh	r2, [r2, #0]
 80036f2:	60da      	str	r2, [r3, #12]
 80036f4:	e04c      	b.n	8003790 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80036f6:	231e      	movs	r3, #30
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	2201      	movs	r2, #1
 80036fc:	701a      	strb	r2, [r3, #0]
 80036fe:	e047      	b.n	8003790 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003700:	231f      	movs	r3, #31
 8003702:	18fb      	adds	r3, r7, r3
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b08      	cmp	r3, #8
 8003708:	d015      	beq.n	8003736 <UART_SetConfig+0x1ee>
 800370a:	dc18      	bgt.n	800373e <UART_SetConfig+0x1f6>
 800370c:	2b04      	cmp	r3, #4
 800370e:	d00d      	beq.n	800372c <UART_SetConfig+0x1e4>
 8003710:	dc15      	bgt.n	800373e <UART_SetConfig+0x1f6>
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <UART_SetConfig+0x1d4>
 8003716:	2b02      	cmp	r3, #2
 8003718:	d005      	beq.n	8003726 <UART_SetConfig+0x1de>
 800371a:	e010      	b.n	800373e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800371c:	f7ff f9ca 	bl	8002ab4 <HAL_RCC_GetPCLK1Freq>
 8003720:	0003      	movs	r3, r0
 8003722:	61bb      	str	r3, [r7, #24]
        break;
 8003724:	e012      	b.n	800374c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003726:	4b27      	ldr	r3, [pc, #156]	@ (80037c4 <UART_SetConfig+0x27c>)
 8003728:	61bb      	str	r3, [r7, #24]
        break;
 800372a:	e00f      	b.n	800374c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800372c:	f7ff f946 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 8003730:	0003      	movs	r3, r0
 8003732:	61bb      	str	r3, [r7, #24]
        break;
 8003734:	e00a      	b.n	800374c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003736:	2380      	movs	r3, #128	@ 0x80
 8003738:	021b      	lsls	r3, r3, #8
 800373a:	61bb      	str	r3, [r7, #24]
        break;
 800373c:	e006      	b.n	800374c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003742:	231e      	movs	r3, #30
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	2201      	movs	r2, #1
 8003748:	701a      	strb	r2, [r3, #0]
        break;
 800374a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d01e      	beq.n	8003790 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	085a      	lsrs	r2, r3, #1
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	18d2      	adds	r2, r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	0019      	movs	r1, r3
 8003762:	0010      	movs	r0, r2
 8003764:	f7fc fcd0 	bl	8000108 <__udivsi3>
 8003768:	0003      	movs	r3, r0
 800376a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b0f      	cmp	r3, #15
 8003770:	d90a      	bls.n	8003788 <UART_SetConfig+0x240>
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	2380      	movs	r3, #128	@ 0x80
 8003776:	025b      	lsls	r3, r3, #9
 8003778:	429a      	cmp	r2, r3
 800377a:	d205      	bcs.n	8003788 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	b29a      	uxth	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60da      	str	r2, [r3, #12]
 8003786:	e003      	b.n	8003790 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003788:	231e      	movs	r3, #30
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	2201      	movs	r2, #1
 800378e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800379c:	231e      	movs	r3, #30
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	781b      	ldrb	r3, [r3, #0]
}
 80037a2:	0018      	movs	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	b008      	add	sp, #32
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	46c0      	nop			@ (mov r8, r8)
 80037ac:	efff69f3 	.word	0xefff69f3
 80037b0:	ffffcfff 	.word	0xffffcfff
 80037b4:	fffff4ff 	.word	0xfffff4ff
 80037b8:	40013800 	.word	0x40013800
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40004400 	.word	0x40004400
 80037c4:	007a1200 	.word	0x007a1200

080037c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d4:	2208      	movs	r2, #8
 80037d6:	4013      	ands	r3, r2
 80037d8:	d00b      	beq.n	80037f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	4a4a      	ldr	r2, [pc, #296]	@ (800390c <UART_AdvFeatureConfig+0x144>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	0019      	movs	r1, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f6:	2201      	movs	r2, #1
 80037f8:	4013      	ands	r3, r2
 80037fa:	d00b      	beq.n	8003814 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4a43      	ldr	r2, [pc, #268]	@ (8003910 <UART_AdvFeatureConfig+0x148>)
 8003804:	4013      	ands	r3, r2
 8003806:	0019      	movs	r1, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003818:	2202      	movs	r2, #2
 800381a:	4013      	ands	r3, r2
 800381c:	d00b      	beq.n	8003836 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	4a3b      	ldr	r2, [pc, #236]	@ (8003914 <UART_AdvFeatureConfig+0x14c>)
 8003826:	4013      	ands	r3, r2
 8003828:	0019      	movs	r1, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383a:	2204      	movs	r2, #4
 800383c:	4013      	ands	r3, r2
 800383e:	d00b      	beq.n	8003858 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4a34      	ldr	r2, [pc, #208]	@ (8003918 <UART_AdvFeatureConfig+0x150>)
 8003848:	4013      	ands	r3, r2
 800384a:	0019      	movs	r1, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385c:	2210      	movs	r2, #16
 800385e:	4013      	ands	r3, r2
 8003860:	d00b      	beq.n	800387a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4a2c      	ldr	r2, [pc, #176]	@ (800391c <UART_AdvFeatureConfig+0x154>)
 800386a:	4013      	ands	r3, r2
 800386c:	0019      	movs	r1, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	2220      	movs	r2, #32
 8003880:	4013      	ands	r3, r2
 8003882:	d00b      	beq.n	800389c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	4a25      	ldr	r2, [pc, #148]	@ (8003920 <UART_AdvFeatureConfig+0x158>)
 800388c:	4013      	ands	r3, r2
 800388e:	0019      	movs	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	2240      	movs	r2, #64	@ 0x40
 80038a2:	4013      	ands	r3, r2
 80038a4:	d01d      	beq.n	80038e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003924 <UART_AdvFeatureConfig+0x15c>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	0019      	movs	r1, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038c2:	2380      	movs	r3, #128	@ 0x80
 80038c4:	035b      	lsls	r3, r3, #13
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d10b      	bne.n	80038e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4a15      	ldr	r2, [pc, #84]	@ (8003928 <UART_AdvFeatureConfig+0x160>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	0019      	movs	r1, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e6:	2280      	movs	r2, #128	@ 0x80
 80038e8:	4013      	ands	r3, r2
 80038ea:	d00b      	beq.n	8003904 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	4a0e      	ldr	r2, [pc, #56]	@ (800392c <UART_AdvFeatureConfig+0x164>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	0019      	movs	r1, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	605a      	str	r2, [r3, #4]
  }
}
 8003904:	46c0      	nop			@ (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	b002      	add	sp, #8
 800390a:	bd80      	pop	{r7, pc}
 800390c:	ffff7fff 	.word	0xffff7fff
 8003910:	fffdffff 	.word	0xfffdffff
 8003914:	fffeffff 	.word	0xfffeffff
 8003918:	fffbffff 	.word	0xfffbffff
 800391c:	ffffefff 	.word	0xffffefff
 8003920:	ffffdfff 	.word	0xffffdfff
 8003924:	ffefffff 	.word	0xffefffff
 8003928:	ff9fffff 	.word	0xff9fffff
 800392c:	fff7ffff 	.word	0xfff7ffff

08003930 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b092      	sub	sp, #72	@ 0x48
 8003934:	af02      	add	r7, sp, #8
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2284      	movs	r2, #132	@ 0x84
 800393c:	2100      	movs	r1, #0
 800393e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003940:	f7fe f8ae 	bl	8001aa0 <HAL_GetTick>
 8003944:	0003      	movs	r3, r0
 8003946:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2208      	movs	r2, #8
 8003950:	4013      	ands	r3, r2
 8003952:	2b08      	cmp	r3, #8
 8003954:	d12c      	bne.n	80039b0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003958:	2280      	movs	r2, #128	@ 0x80
 800395a:	0391      	lsls	r1, r2, #14
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	4a46      	ldr	r2, [pc, #280]	@ (8003a78 <UART_CheckIdleState+0x148>)
 8003960:	9200      	str	r2, [sp, #0]
 8003962:	2200      	movs	r2, #0
 8003964:	f000 f88c 	bl	8003a80 <UART_WaitOnFlagUntilTimeout>
 8003968:	1e03      	subs	r3, r0, #0
 800396a:	d021      	beq.n	80039b0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800396c:	f3ef 8310 	mrs	r3, PRIMASK
 8003970:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003974:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003976:	2301      	movs	r3, #1
 8003978:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800397a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397c:	f383 8810 	msr	PRIMASK, r3
}
 8003980:	46c0      	nop			@ (mov r8, r8)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2180      	movs	r1, #128	@ 0x80
 800398e:	438a      	bics	r2, r1
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003998:	f383 8810 	msr	PRIMASK, r3
}
 800399c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2278      	movs	r2, #120	@ 0x78
 80039a8:	2100      	movs	r1, #0
 80039aa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e05f      	b.n	8003a70 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2204      	movs	r2, #4
 80039b8:	4013      	ands	r3, r2
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d146      	bne.n	8003a4c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039c0:	2280      	movs	r2, #128	@ 0x80
 80039c2:	03d1      	lsls	r1, r2, #15
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003a78 <UART_CheckIdleState+0x148>)
 80039c8:	9200      	str	r2, [sp, #0]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f000 f858 	bl	8003a80 <UART_WaitOnFlagUntilTimeout>
 80039d0:	1e03      	subs	r3, r0, #0
 80039d2:	d03b      	beq.n	8003a4c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d4:	f3ef 8310 	mrs	r3, PRIMASK
 80039d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80039da:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80039de:	2301      	movs	r3, #1
 80039e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f383 8810 	msr	PRIMASK, r3
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4921      	ldr	r1, [pc, #132]	@ (8003a7c <UART_CheckIdleState+0x14c>)
 80039f6:	400a      	ands	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f383 8810 	msr	PRIMASK, r3
}
 8003a04:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a06:	f3ef 8310 	mrs	r3, PRIMASK
 8003a0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a0c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a10:	2301      	movs	r3, #1
 8003a12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f383 8810 	msr	PRIMASK, r3
}
 8003a1a:	46c0      	nop			@ (mov r8, r8)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2101      	movs	r1, #1
 8003a28:	438a      	bics	r2, r1
 8003a2a:	609a      	str	r2, [r3, #8]
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	f383 8810 	msr	PRIMASK, r3
}
 8003a36:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2280      	movs	r2, #128	@ 0x80
 8003a3c:	2120      	movs	r1, #32
 8003a3e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2278      	movs	r2, #120	@ 0x78
 8003a44:	2100      	movs	r1, #0
 8003a46:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e011      	b.n	8003a70 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2280      	movs	r2, #128	@ 0x80
 8003a56:	2120      	movs	r1, #32
 8003a58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2278      	movs	r2, #120	@ 0x78
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	0018      	movs	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b010      	add	sp, #64	@ 0x40
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	01ffffff 	.word	0x01ffffff
 8003a7c:	fffffedf 	.word	0xfffffedf

08003a80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	1dfb      	adds	r3, r7, #7
 8003a8e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a90:	e051      	b.n	8003b36 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	3301      	adds	r3, #1
 8003a96:	d04e      	beq.n	8003b36 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a98:	f7fe f802 	bl	8001aa0 <HAL_GetTick>
 8003a9c:	0002      	movs	r2, r0
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d302      	bcc.n	8003aae <UART_WaitOnFlagUntilTimeout+0x2e>
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e051      	b.n	8003b56 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2204      	movs	r2, #4
 8003aba:	4013      	ands	r3, r2
 8003abc:	d03b      	beq.n	8003b36 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b80      	cmp	r3, #128	@ 0x80
 8003ac2:	d038      	beq.n	8003b36 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b40      	cmp	r3, #64	@ 0x40
 8003ac8:	d035      	beq.n	8003b36 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	2208      	movs	r2, #8
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d111      	bne.n	8003afc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2208      	movs	r2, #8
 8003ade:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f000 f906 	bl	8003cf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2284      	movs	r2, #132	@ 0x84
 8003aec:	2108      	movs	r1, #8
 8003aee:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2278      	movs	r2, #120	@ 0x78
 8003af4:	2100      	movs	r1, #0
 8003af6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e02c      	b.n	8003b56 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	69da      	ldr	r2, [r3, #28]
 8003b02:	2380      	movs	r3, #128	@ 0x80
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	401a      	ands	r2, r3
 8003b08:	2380      	movs	r3, #128	@ 0x80
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d112      	bne.n	8003b36 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2280      	movs	r2, #128	@ 0x80
 8003b16:	0112      	lsls	r2, r2, #4
 8003b18:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f000 f8e9 	bl	8003cf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2284      	movs	r2, #132	@ 0x84
 8003b26:	2120      	movs	r1, #32
 8003b28:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2278      	movs	r2, #120	@ 0x78
 8003b2e:	2100      	movs	r1, #0
 8003b30:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e00f      	b.n	8003b56 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	425a      	negs	r2, r3
 8003b46:	4153      	adcs	r3, r2
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	001a      	movs	r2, r3
 8003b4c:	1dfb      	adds	r3, r7, #7
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d09e      	beq.n	8003a92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	0018      	movs	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b004      	add	sp, #16
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b090      	sub	sp, #64	@ 0x40
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	1dbb      	adds	r3, r7, #6
 8003b6c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1dba      	adds	r2, r7, #6
 8003b78:	2158      	movs	r1, #88	@ 0x58
 8003b7a:	8812      	ldrh	r2, [r2, #0]
 8003b7c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1dba      	adds	r2, r7, #6
 8003b82:	215a      	movs	r1, #90	@ 0x5a
 8003b84:	8812      	ldrh	r2, [r2, #0]
 8003b86:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	2380      	movs	r3, #128	@ 0x80
 8003b94:	015b      	lsls	r3, r3, #5
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d10d      	bne.n	8003bb6 <UART_Start_Receive_IT+0x56>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d104      	bne.n	8003bac <UART_Start_Receive_IT+0x4c>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	225c      	movs	r2, #92	@ 0x5c
 8003ba6:	4950      	ldr	r1, [pc, #320]	@ (8003ce8 <UART_Start_Receive_IT+0x188>)
 8003ba8:	5299      	strh	r1, [r3, r2]
 8003baa:	e02e      	b.n	8003c0a <UART_Start_Receive_IT+0xaa>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	225c      	movs	r2, #92	@ 0x5c
 8003bb0:	21ff      	movs	r1, #255	@ 0xff
 8003bb2:	5299      	strh	r1, [r3, r2]
 8003bb4:	e029      	b.n	8003c0a <UART_Start_Receive_IT+0xaa>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10d      	bne.n	8003bda <UART_Start_Receive_IT+0x7a>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d104      	bne.n	8003bd0 <UART_Start_Receive_IT+0x70>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	225c      	movs	r2, #92	@ 0x5c
 8003bca:	21ff      	movs	r1, #255	@ 0xff
 8003bcc:	5299      	strh	r1, [r3, r2]
 8003bce:	e01c      	b.n	8003c0a <UART_Start_Receive_IT+0xaa>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	225c      	movs	r2, #92	@ 0x5c
 8003bd4:	217f      	movs	r1, #127	@ 0x7f
 8003bd6:	5299      	strh	r1, [r3, r2]
 8003bd8:	e017      	b.n	8003c0a <UART_Start_Receive_IT+0xaa>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	2380      	movs	r3, #128	@ 0x80
 8003be0:	055b      	lsls	r3, r3, #21
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d10d      	bne.n	8003c02 <UART_Start_Receive_IT+0xa2>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d104      	bne.n	8003bf8 <UART_Start_Receive_IT+0x98>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	225c      	movs	r2, #92	@ 0x5c
 8003bf2:	217f      	movs	r1, #127	@ 0x7f
 8003bf4:	5299      	strh	r1, [r3, r2]
 8003bf6:	e008      	b.n	8003c0a <UART_Start_Receive_IT+0xaa>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	225c      	movs	r2, #92	@ 0x5c
 8003bfc:	213f      	movs	r1, #63	@ 0x3f
 8003bfe:	5299      	strh	r1, [r3, r2]
 8003c00:	e003      	b.n	8003c0a <UART_Start_Receive_IT+0xaa>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	225c      	movs	r2, #92	@ 0x5c
 8003c06:	2100      	movs	r1, #0
 8003c08:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2284      	movs	r2, #132	@ 0x84
 8003c0e:	2100      	movs	r1, #0
 8003c10:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2280      	movs	r2, #128	@ 0x80
 8003c16:	2122      	movs	r1, #34	@ 0x22
 8003c18:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c24:	2301      	movs	r3, #1
 8003c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c2a:	f383 8810 	msr	PRIMASK, r3
}
 8003c2e:	46c0      	nop			@ (mov r8, r8)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	609a      	str	r2, [r3, #8]
 8003c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c42:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c46:	f383 8810 	msr	PRIMASK, r3
}
 8003c4a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	2380      	movs	r3, #128	@ 0x80
 8003c52:	015b      	lsls	r3, r3, #5
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d107      	bne.n	8003c68 <UART_Start_Receive_IT+0x108>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d103      	bne.n	8003c68 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4a22      	ldr	r2, [pc, #136]	@ (8003cec <UART_Start_Receive_IT+0x18c>)
 8003c64:	669a      	str	r2, [r3, #104]	@ 0x68
 8003c66:	e002      	b.n	8003c6e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a21      	ldr	r2, [pc, #132]	@ (8003cf0 <UART_Start_Receive_IT+0x190>)
 8003c6c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d019      	beq.n	8003caa <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c76:	f3ef 8310 	mrs	r3, PRIMASK
 8003c7a:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c7c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003c7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c80:	2301      	movs	r3, #1
 8003c82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	f383 8810 	msr	PRIMASK, r3
}
 8003c8a:	46c0      	nop			@ (mov r8, r8)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2190      	movs	r1, #144	@ 0x90
 8003c98:	0049      	lsls	r1, r1, #1
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca4:	f383 8810 	msr	PRIMASK, r3
}
 8003ca8:	e018      	b.n	8003cdc <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003caa:	f3ef 8310 	mrs	r3, PRIMASK
 8003cae:	613b      	str	r3, [r7, #16]
  return(result);
 8003cb0:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f383 8810 	msr	PRIMASK, r3
}
 8003cbe:	46c0      	nop			@ (mov r8, r8)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2120      	movs	r1, #32
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f383 8810 	msr	PRIMASK, r3
}
 8003cda:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	0018      	movs	r0, r3
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b010      	add	sp, #64	@ 0x40
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	46c0      	nop			@ (mov r8, r8)
 8003ce8:	000001ff 	.word	0x000001ff
 8003cec:	08003ff9 	.word	0x08003ff9
 8003cf0:	08003e41 	.word	0x08003e41

08003cf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08e      	sub	sp, #56	@ 0x38
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8003d00:	617b      	str	r3, [r7, #20]
  return(result);
 8003d02:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d04:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d06:	2301      	movs	r3, #1
 8003d08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f383 8810 	msr	PRIMASK, r3
}
 8003d10:	46c0      	nop			@ (mov r8, r8)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4926      	ldr	r1, [pc, #152]	@ (8003db8 <UART_EndRxTransfer+0xc4>)
 8003d1e:	400a      	ands	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f383 8810 	msr	PRIMASK, r3
}
 8003d2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d32:	623b      	str	r3, [r7, #32]
  return(result);
 8003d34:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d36:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d38:	2301      	movs	r3, #1
 8003d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3e:	f383 8810 	msr	PRIMASK, r3
}
 8003d42:	46c0      	nop			@ (mov r8, r8)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2101      	movs	r1, #1
 8003d50:	438a      	bics	r2, r1
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5a:	f383 8810 	msr	PRIMASK, r3
}
 8003d5e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d118      	bne.n	8003d9a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d68:	f3ef 8310 	mrs	r3, PRIMASK
 8003d6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d6e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d72:	2301      	movs	r3, #1
 8003d74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f383 8810 	msr	PRIMASK, r3
}
 8003d7c:	46c0      	nop			@ (mov r8, r8)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2110      	movs	r1, #16
 8003d8a:	438a      	bics	r2, r1
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f383 8810 	msr	PRIMASK, r3
}
 8003d98:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2280      	movs	r2, #128	@ 0x80
 8003d9e:	2120      	movs	r1, #32
 8003da0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b00e      	add	sp, #56	@ 0x38
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	46c0      	nop			@ (mov r8, r8)
 8003db8:	fffffedf 	.word	0xfffffedf

08003dbc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	225a      	movs	r2, #90	@ 0x5a
 8003dce:	2100      	movs	r1, #0
 8003dd0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2252      	movs	r2, #82	@ 0x52
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f7ff fb9f 	bl	8003520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003de2:	46c0      	nop			@ (mov r8, r8)
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b004      	add	sp, #16
 8003de8:	bd80      	pop	{r7, pc}

08003dea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b086      	sub	sp, #24
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df2:	f3ef 8310 	mrs	r3, PRIMASK
 8003df6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003df8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f383 8810 	msr	PRIMASK, r3
}
 8003e06:	46c0      	nop			@ (mov r8, r8)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2140      	movs	r1, #64	@ 0x40
 8003e14:	438a      	bics	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f383 8810 	msr	PRIMASK, r3
}
 8003e22:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	0018      	movs	r0, r3
 8003e34:	f7ff fb6c 	bl	8003510 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e38:	46c0      	nop			@ (mov r8, r8)
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b006      	add	sp, #24
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b094      	sub	sp, #80	@ 0x50
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003e48:	204e      	movs	r0, #78	@ 0x4e
 8003e4a:	183b      	adds	r3, r7, r0
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	215c      	movs	r1, #92	@ 0x5c
 8003e50:	5a52      	ldrh	r2, [r2, r1]
 8003e52:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2280      	movs	r2, #128	@ 0x80
 8003e58:	589b      	ldr	r3, [r3, r2]
 8003e5a:	2b22      	cmp	r3, #34	@ 0x22
 8003e5c:	d000      	beq.n	8003e60 <UART_RxISR_8BIT+0x20>
 8003e5e:	e0ba      	b.n	8003fd6 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	214c      	movs	r1, #76	@ 0x4c
 8003e66:	187b      	adds	r3, r7, r1
 8003e68:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8003e6a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e6c:	187b      	adds	r3, r7, r1
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	183b      	adds	r3, r7, r0
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	b2d9      	uxtb	r1, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7c:	400a      	ands	r2, r1
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	225a      	movs	r2, #90	@ 0x5a
 8003e90:	5a9b      	ldrh	r3, [r3, r2]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b299      	uxth	r1, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	225a      	movs	r2, #90	@ 0x5a
 8003e9c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	225a      	movs	r2, #90	@ 0x5a
 8003ea2:	5a9b      	ldrh	r3, [r3, r2]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d000      	beq.n	8003eac <UART_RxISR_8BIT+0x6c>
 8003eaa:	e09c      	b.n	8003fe6 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eac:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebc:	f383 8810 	msr	PRIMASK, r3
}
 8003ec0:	46c0      	nop			@ (mov r8, r8)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4948      	ldr	r1, [pc, #288]	@ (8003ff0 <UART_RxISR_8BIT+0x1b0>)
 8003ece:	400a      	ands	r2, r1
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed8:	f383 8810 	msr	PRIMASK, r3
}
 8003edc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ede:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ee8:	2301      	movs	r3, #1
 8003eea:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eee:	f383 8810 	msr	PRIMASK, r3
}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2101      	movs	r1, #1
 8003f00:	438a      	bics	r2, r1
 8003f02:	609a      	str	r2, [r3, #8]
 8003f04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f06:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f0a:	f383 8810 	msr	PRIMASK, r3
}
 8003f0e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2280      	movs	r2, #128	@ 0x80
 8003f14:	2120      	movs	r1, #32
 8003f16:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	2380      	movs	r3, #128	@ 0x80
 8003f2c:	041b      	lsls	r3, r3, #16
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d018      	beq.n	8003f64 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f32:	f3ef 8310 	mrs	r3, PRIMASK
 8003f36:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f38:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f383 8810 	msr	PRIMASK, r3
}
 8003f46:	46c0      	nop			@ (mov r8, r8)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4928      	ldr	r1, [pc, #160]	@ (8003ff4 <UART_RxISR_8BIT+0x1b4>)
 8003f54:	400a      	ands	r2, r1
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f5a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	f383 8810 	msr	PRIMASK, r3
}
 8003f62:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d12f      	bne.n	8003fcc <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f72:	f3ef 8310 	mrs	r3, PRIMASK
 8003f76:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f78:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f383 8810 	msr	PRIMASK, r3
}
 8003f86:	46c0      	nop			@ (mov r8, r8)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2110      	movs	r1, #16
 8003f94:	438a      	bics	r2, r1
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f383 8810 	msr	PRIMASK, r3
}
 8003fa2:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	2210      	movs	r2, #16
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b10      	cmp	r3, #16
 8003fb0:	d103      	bne.n	8003fba <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2210      	movs	r2, #16
 8003fb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2258      	movs	r2, #88	@ 0x58
 8003fbe:	5a9a      	ldrh	r2, [r3, r2]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	0011      	movs	r1, r2
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f7ff fab3 	bl	8003530 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fca:	e00c      	b.n	8003fe6 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f7fd f8b8 	bl	8001144 <HAL_UART_RxCpltCallback>
}
 8003fd4:	e007      	b.n	8003fe6 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699a      	ldr	r2, [r3, #24]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2108      	movs	r1, #8
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	619a      	str	r2, [r3, #24]
}
 8003fe6:	46c0      	nop			@ (mov r8, r8)
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	b014      	add	sp, #80	@ 0x50
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			@ (mov r8, r8)
 8003ff0:	fffffedf 	.word	0xfffffedf
 8003ff4:	fbffffff 	.word	0xfbffffff

08003ff8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b094      	sub	sp, #80	@ 0x50
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004000:	204e      	movs	r0, #78	@ 0x4e
 8004002:	183b      	adds	r3, r7, r0
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	215c      	movs	r1, #92	@ 0x5c
 8004008:	5a52      	ldrh	r2, [r2, r1]
 800400a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2280      	movs	r2, #128	@ 0x80
 8004010:	589b      	ldr	r3, [r3, r2]
 8004012:	2b22      	cmp	r3, #34	@ 0x22
 8004014:	d000      	beq.n	8004018 <UART_RxISR_16BIT+0x20>
 8004016:	e0ba      	b.n	800418e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	214c      	movs	r1, #76	@ 0x4c
 800401e:	187b      	adds	r3, r7, r1
 8004020:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8004022:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004028:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800402a:	187b      	adds	r3, r7, r1
 800402c:	183a      	adds	r2, r7, r0
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	8812      	ldrh	r2, [r2, #0]
 8004032:	4013      	ands	r3, r2
 8004034:	b29a      	uxth	r2, r3
 8004036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004038:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403e:	1c9a      	adds	r2, r3, #2
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	225a      	movs	r2, #90	@ 0x5a
 8004048:	5a9b      	ldrh	r3, [r3, r2]
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b299      	uxth	r1, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	225a      	movs	r2, #90	@ 0x5a
 8004054:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	225a      	movs	r2, #90	@ 0x5a
 800405a:	5a9b      	ldrh	r3, [r3, r2]
 800405c:	b29b      	uxth	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d000      	beq.n	8004064 <UART_RxISR_16BIT+0x6c>
 8004062:	e09c      	b.n	800419e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004064:	f3ef 8310 	mrs	r3, PRIMASK
 8004068:	623b      	str	r3, [r7, #32]
  return(result);
 800406a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800406c:	647b      	str	r3, [r7, #68]	@ 0x44
 800406e:	2301      	movs	r3, #1
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004074:	f383 8810 	msr	PRIMASK, r3
}
 8004078:	46c0      	nop			@ (mov r8, r8)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4948      	ldr	r1, [pc, #288]	@ (80041a8 <UART_RxISR_16BIT+0x1b0>)
 8004086:	400a      	ands	r2, r1
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800408c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004090:	f383 8810 	msr	PRIMASK, r3
}
 8004094:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004096:	f3ef 8310 	mrs	r3, PRIMASK
 800409a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800409c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409e:	643b      	str	r3, [r7, #64]	@ 0x40
 80040a0:	2301      	movs	r3, #1
 80040a2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a6:	f383 8810 	msr	PRIMASK, r3
}
 80040aa:	46c0      	nop			@ (mov r8, r8)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2101      	movs	r1, #1
 80040b8:	438a      	bics	r2, r1
 80040ba:	609a      	str	r2, [r3, #8]
 80040bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040be:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c2:	f383 8810 	msr	PRIMASK, r3
}
 80040c6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2280      	movs	r2, #128	@ 0x80
 80040cc:	2120      	movs	r1, #32
 80040ce:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	2380      	movs	r3, #128	@ 0x80
 80040e4:	041b      	lsls	r3, r3, #16
 80040e6:	4013      	ands	r3, r2
 80040e8:	d018      	beq.n	800411c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ea:	f3ef 8310 	mrs	r3, PRIMASK
 80040ee:	617b      	str	r3, [r7, #20]
  return(result);
 80040f0:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040f4:	2301      	movs	r3, #1
 80040f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f383 8810 	msr	PRIMASK, r3
}
 80040fe:	46c0      	nop			@ (mov r8, r8)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4928      	ldr	r1, [pc, #160]	@ (80041ac <UART_RxISR_16BIT+0x1b4>)
 800410c:	400a      	ands	r2, r1
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004112:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f383 8810 	msr	PRIMASK, r3
}
 800411a:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004120:	2b01      	cmp	r3, #1
 8004122:	d12f      	bne.n	8004184 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800412a:	f3ef 8310 	mrs	r3, PRIMASK
 800412e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004130:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004132:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004134:	2301      	movs	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f383 8810 	msr	PRIMASK, r3
}
 800413e:	46c0      	nop			@ (mov r8, r8)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2110      	movs	r1, #16
 800414c:	438a      	bics	r2, r1
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004152:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f383 8810 	msr	PRIMASK, r3
}
 800415a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	2210      	movs	r2, #16
 8004164:	4013      	ands	r3, r2
 8004166:	2b10      	cmp	r3, #16
 8004168:	d103      	bne.n	8004172 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2210      	movs	r2, #16
 8004170:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2258      	movs	r2, #88	@ 0x58
 8004176:	5a9a      	ldrh	r2, [r3, r2]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	0011      	movs	r1, r2
 800417c:	0018      	movs	r0, r3
 800417e:	f7ff f9d7 	bl	8003530 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004182:	e00c      	b.n	800419e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	0018      	movs	r0, r3
 8004188:	f7fc ffdc 	bl	8001144 <HAL_UART_RxCpltCallback>
}
 800418c:	e007      	b.n	800419e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699a      	ldr	r2, [r3, #24]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2108      	movs	r1, #8
 800419a:	430a      	orrs	r2, r1
 800419c:	619a      	str	r2, [r3, #24]
}
 800419e:	46c0      	nop			@ (mov r8, r8)
 80041a0:	46bd      	mov	sp, r7
 80041a2:	b014      	add	sp, #80	@ 0x50
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	46c0      	nop			@ (mov r8, r8)
 80041a8:	fffffedf 	.word	0xfffffedf
 80041ac:	fbffffff 	.word	0xfbffffff

080041b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041b8:	46c0      	nop			@ (mov r8, r8)
 80041ba:	46bd      	mov	sp, r7
 80041bc:	b002      	add	sp, #8
 80041be:	bd80      	pop	{r7, pc}

080041c0 <malloc>:
 80041c0:	b510      	push	{r4, lr}
 80041c2:	4b03      	ldr	r3, [pc, #12]	@ (80041d0 <malloc+0x10>)
 80041c4:	0001      	movs	r1, r0
 80041c6:	6818      	ldr	r0, [r3, #0]
 80041c8:	f000 f830 	bl	800422c <_malloc_r>
 80041cc:	bd10      	pop	{r4, pc}
 80041ce:	46c0      	nop			@ (mov r8, r8)
 80041d0:	20000018 	.word	0x20000018

080041d4 <free>:
 80041d4:	b510      	push	{r4, lr}
 80041d6:	4b03      	ldr	r3, [pc, #12]	@ (80041e4 <free+0x10>)
 80041d8:	0001      	movs	r1, r0
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	f000 f8fc 	bl	80043d8 <_free_r>
 80041e0:	bd10      	pop	{r4, pc}
 80041e2:	46c0      	nop			@ (mov r8, r8)
 80041e4:	20000018 	.word	0x20000018

080041e8 <sbrk_aligned>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	4e0f      	ldr	r6, [pc, #60]	@ (8004228 <sbrk_aligned+0x40>)
 80041ec:	000d      	movs	r5, r1
 80041ee:	6831      	ldr	r1, [r6, #0]
 80041f0:	0004      	movs	r4, r0
 80041f2:	2900      	cmp	r1, #0
 80041f4:	d102      	bne.n	80041fc <sbrk_aligned+0x14>
 80041f6:	f000 f8b1 	bl	800435c <_sbrk_r>
 80041fa:	6030      	str	r0, [r6, #0]
 80041fc:	0029      	movs	r1, r5
 80041fe:	0020      	movs	r0, r4
 8004200:	f000 f8ac 	bl	800435c <_sbrk_r>
 8004204:	1c43      	adds	r3, r0, #1
 8004206:	d103      	bne.n	8004210 <sbrk_aligned+0x28>
 8004208:	2501      	movs	r5, #1
 800420a:	426d      	negs	r5, r5
 800420c:	0028      	movs	r0, r5
 800420e:	bd70      	pop	{r4, r5, r6, pc}
 8004210:	2303      	movs	r3, #3
 8004212:	1cc5      	adds	r5, r0, #3
 8004214:	439d      	bics	r5, r3
 8004216:	42a8      	cmp	r0, r5
 8004218:	d0f8      	beq.n	800420c <sbrk_aligned+0x24>
 800421a:	1a29      	subs	r1, r5, r0
 800421c:	0020      	movs	r0, r4
 800421e:	f000 f89d 	bl	800435c <_sbrk_r>
 8004222:	3001      	adds	r0, #1
 8004224:	d1f2      	bne.n	800420c <sbrk_aligned+0x24>
 8004226:	e7ef      	b.n	8004208 <sbrk_aligned+0x20>
 8004228:	200001a4 	.word	0x200001a4

0800422c <_malloc_r>:
 800422c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800422e:	2203      	movs	r2, #3
 8004230:	1ccb      	adds	r3, r1, #3
 8004232:	4393      	bics	r3, r2
 8004234:	3308      	adds	r3, #8
 8004236:	0005      	movs	r5, r0
 8004238:	001f      	movs	r7, r3
 800423a:	2b0c      	cmp	r3, #12
 800423c:	d234      	bcs.n	80042a8 <_malloc_r+0x7c>
 800423e:	270c      	movs	r7, #12
 8004240:	42b9      	cmp	r1, r7
 8004242:	d833      	bhi.n	80042ac <_malloc_r+0x80>
 8004244:	0028      	movs	r0, r5
 8004246:	f000 f871 	bl	800432c <__malloc_lock>
 800424a:	4e37      	ldr	r6, [pc, #220]	@ (8004328 <_malloc_r+0xfc>)
 800424c:	6833      	ldr	r3, [r6, #0]
 800424e:	001c      	movs	r4, r3
 8004250:	2c00      	cmp	r4, #0
 8004252:	d12f      	bne.n	80042b4 <_malloc_r+0x88>
 8004254:	0039      	movs	r1, r7
 8004256:	0028      	movs	r0, r5
 8004258:	f7ff ffc6 	bl	80041e8 <sbrk_aligned>
 800425c:	0004      	movs	r4, r0
 800425e:	1c43      	adds	r3, r0, #1
 8004260:	d15f      	bne.n	8004322 <_malloc_r+0xf6>
 8004262:	6834      	ldr	r4, [r6, #0]
 8004264:	9400      	str	r4, [sp, #0]
 8004266:	9b00      	ldr	r3, [sp, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d14a      	bne.n	8004302 <_malloc_r+0xd6>
 800426c:	2c00      	cmp	r4, #0
 800426e:	d052      	beq.n	8004316 <_malloc_r+0xea>
 8004270:	6823      	ldr	r3, [r4, #0]
 8004272:	0028      	movs	r0, r5
 8004274:	18e3      	adds	r3, r4, r3
 8004276:	9900      	ldr	r1, [sp, #0]
 8004278:	9301      	str	r3, [sp, #4]
 800427a:	f000 f86f 	bl	800435c <_sbrk_r>
 800427e:	9b01      	ldr	r3, [sp, #4]
 8004280:	4283      	cmp	r3, r0
 8004282:	d148      	bne.n	8004316 <_malloc_r+0xea>
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	0028      	movs	r0, r5
 8004288:	1aff      	subs	r7, r7, r3
 800428a:	0039      	movs	r1, r7
 800428c:	f7ff ffac 	bl	80041e8 <sbrk_aligned>
 8004290:	3001      	adds	r0, #1
 8004292:	d040      	beq.n	8004316 <_malloc_r+0xea>
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	19db      	adds	r3, r3, r7
 8004298:	6023      	str	r3, [r4, #0]
 800429a:	6833      	ldr	r3, [r6, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	2a00      	cmp	r2, #0
 80042a0:	d133      	bne.n	800430a <_malloc_r+0xde>
 80042a2:	9b00      	ldr	r3, [sp, #0]
 80042a4:	6033      	str	r3, [r6, #0]
 80042a6:	e019      	b.n	80042dc <_malloc_r+0xb0>
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	dac9      	bge.n	8004240 <_malloc_r+0x14>
 80042ac:	230c      	movs	r3, #12
 80042ae:	602b      	str	r3, [r5, #0]
 80042b0:	2000      	movs	r0, #0
 80042b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80042b4:	6821      	ldr	r1, [r4, #0]
 80042b6:	1bc9      	subs	r1, r1, r7
 80042b8:	d420      	bmi.n	80042fc <_malloc_r+0xd0>
 80042ba:	290b      	cmp	r1, #11
 80042bc:	d90a      	bls.n	80042d4 <_malloc_r+0xa8>
 80042be:	19e2      	adds	r2, r4, r7
 80042c0:	6027      	str	r7, [r4, #0]
 80042c2:	42a3      	cmp	r3, r4
 80042c4:	d104      	bne.n	80042d0 <_malloc_r+0xa4>
 80042c6:	6032      	str	r2, [r6, #0]
 80042c8:	6863      	ldr	r3, [r4, #4]
 80042ca:	6011      	str	r1, [r2, #0]
 80042cc:	6053      	str	r3, [r2, #4]
 80042ce:	e005      	b.n	80042dc <_malloc_r+0xb0>
 80042d0:	605a      	str	r2, [r3, #4]
 80042d2:	e7f9      	b.n	80042c8 <_malloc_r+0x9c>
 80042d4:	6862      	ldr	r2, [r4, #4]
 80042d6:	42a3      	cmp	r3, r4
 80042d8:	d10e      	bne.n	80042f8 <_malloc_r+0xcc>
 80042da:	6032      	str	r2, [r6, #0]
 80042dc:	0028      	movs	r0, r5
 80042de:	f000 f82d 	bl	800433c <__malloc_unlock>
 80042e2:	0020      	movs	r0, r4
 80042e4:	2207      	movs	r2, #7
 80042e6:	300b      	adds	r0, #11
 80042e8:	1d23      	adds	r3, r4, #4
 80042ea:	4390      	bics	r0, r2
 80042ec:	1ac2      	subs	r2, r0, r3
 80042ee:	4298      	cmp	r0, r3
 80042f0:	d0df      	beq.n	80042b2 <_malloc_r+0x86>
 80042f2:	1a1b      	subs	r3, r3, r0
 80042f4:	50a3      	str	r3, [r4, r2]
 80042f6:	e7dc      	b.n	80042b2 <_malloc_r+0x86>
 80042f8:	605a      	str	r2, [r3, #4]
 80042fa:	e7ef      	b.n	80042dc <_malloc_r+0xb0>
 80042fc:	0023      	movs	r3, r4
 80042fe:	6864      	ldr	r4, [r4, #4]
 8004300:	e7a6      	b.n	8004250 <_malloc_r+0x24>
 8004302:	9c00      	ldr	r4, [sp, #0]
 8004304:	6863      	ldr	r3, [r4, #4]
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	e7ad      	b.n	8004266 <_malloc_r+0x3a>
 800430a:	001a      	movs	r2, r3
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	42a3      	cmp	r3, r4
 8004310:	d1fb      	bne.n	800430a <_malloc_r+0xde>
 8004312:	2300      	movs	r3, #0
 8004314:	e7da      	b.n	80042cc <_malloc_r+0xa0>
 8004316:	230c      	movs	r3, #12
 8004318:	0028      	movs	r0, r5
 800431a:	602b      	str	r3, [r5, #0]
 800431c:	f000 f80e 	bl	800433c <__malloc_unlock>
 8004320:	e7c6      	b.n	80042b0 <_malloc_r+0x84>
 8004322:	6007      	str	r7, [r0, #0]
 8004324:	e7da      	b.n	80042dc <_malloc_r+0xb0>
 8004326:	46c0      	nop			@ (mov r8, r8)
 8004328:	200001a8 	.word	0x200001a8

0800432c <__malloc_lock>:
 800432c:	b510      	push	{r4, lr}
 800432e:	4802      	ldr	r0, [pc, #8]	@ (8004338 <__malloc_lock+0xc>)
 8004330:	f000 f850 	bl	80043d4 <__retarget_lock_acquire_recursive>
 8004334:	bd10      	pop	{r4, pc}
 8004336:	46c0      	nop			@ (mov r8, r8)
 8004338:	200002e8 	.word	0x200002e8

0800433c <__malloc_unlock>:
 800433c:	b510      	push	{r4, lr}
 800433e:	4802      	ldr	r0, [pc, #8]	@ (8004348 <__malloc_unlock+0xc>)
 8004340:	f000 f849 	bl	80043d6 <__retarget_lock_release_recursive>
 8004344:	bd10      	pop	{r4, pc}
 8004346:	46c0      	nop			@ (mov r8, r8)
 8004348:	200002e8 	.word	0x200002e8

0800434c <memset>:
 800434c:	0003      	movs	r3, r0
 800434e:	1882      	adds	r2, r0, r2
 8004350:	4293      	cmp	r3, r2
 8004352:	d100      	bne.n	8004356 <memset+0xa>
 8004354:	4770      	bx	lr
 8004356:	7019      	strb	r1, [r3, #0]
 8004358:	3301      	adds	r3, #1
 800435a:	e7f9      	b.n	8004350 <memset+0x4>

0800435c <_sbrk_r>:
 800435c:	2300      	movs	r3, #0
 800435e:	b570      	push	{r4, r5, r6, lr}
 8004360:	4d06      	ldr	r5, [pc, #24]	@ (800437c <_sbrk_r+0x20>)
 8004362:	0004      	movs	r4, r0
 8004364:	0008      	movs	r0, r1
 8004366:	602b      	str	r3, [r5, #0]
 8004368:	f7fd f886 	bl	8001478 <_sbrk>
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	d103      	bne.n	8004378 <_sbrk_r+0x1c>
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d000      	beq.n	8004378 <_sbrk_r+0x1c>
 8004376:	6023      	str	r3, [r4, #0]
 8004378:	bd70      	pop	{r4, r5, r6, pc}
 800437a:	46c0      	nop			@ (mov r8, r8)
 800437c:	200002e4 	.word	0x200002e4

08004380 <__errno>:
 8004380:	4b01      	ldr	r3, [pc, #4]	@ (8004388 <__errno+0x8>)
 8004382:	6818      	ldr	r0, [r3, #0]
 8004384:	4770      	bx	lr
 8004386:	46c0      	nop			@ (mov r8, r8)
 8004388:	20000018 	.word	0x20000018

0800438c <__libc_init_array>:
 800438c:	b570      	push	{r4, r5, r6, lr}
 800438e:	2600      	movs	r6, #0
 8004390:	4c0c      	ldr	r4, [pc, #48]	@ (80043c4 <__libc_init_array+0x38>)
 8004392:	4d0d      	ldr	r5, [pc, #52]	@ (80043c8 <__libc_init_array+0x3c>)
 8004394:	1b64      	subs	r4, r4, r5
 8004396:	10a4      	asrs	r4, r4, #2
 8004398:	42a6      	cmp	r6, r4
 800439a:	d109      	bne.n	80043b0 <__libc_init_array+0x24>
 800439c:	2600      	movs	r6, #0
 800439e:	f000 f865 	bl	800446c <_init>
 80043a2:	4c0a      	ldr	r4, [pc, #40]	@ (80043cc <__libc_init_array+0x40>)
 80043a4:	4d0a      	ldr	r5, [pc, #40]	@ (80043d0 <__libc_init_array+0x44>)
 80043a6:	1b64      	subs	r4, r4, r5
 80043a8:	10a4      	asrs	r4, r4, #2
 80043aa:	42a6      	cmp	r6, r4
 80043ac:	d105      	bne.n	80043ba <__libc_init_array+0x2e>
 80043ae:	bd70      	pop	{r4, r5, r6, pc}
 80043b0:	00b3      	lsls	r3, r6, #2
 80043b2:	58eb      	ldr	r3, [r5, r3]
 80043b4:	4798      	blx	r3
 80043b6:	3601      	adds	r6, #1
 80043b8:	e7ee      	b.n	8004398 <__libc_init_array+0xc>
 80043ba:	00b3      	lsls	r3, r6, #2
 80043bc:	58eb      	ldr	r3, [r5, r3]
 80043be:	4798      	blx	r3
 80043c0:	3601      	adds	r6, #1
 80043c2:	e7f2      	b.n	80043aa <__libc_init_array+0x1e>
 80043c4:	08004564 	.word	0x08004564
 80043c8:	08004564 	.word	0x08004564
 80043cc:	08004568 	.word	0x08004568
 80043d0:	08004564 	.word	0x08004564

080043d4 <__retarget_lock_acquire_recursive>:
 80043d4:	4770      	bx	lr

080043d6 <__retarget_lock_release_recursive>:
 80043d6:	4770      	bx	lr

080043d8 <_free_r>:
 80043d8:	b570      	push	{r4, r5, r6, lr}
 80043da:	0005      	movs	r5, r0
 80043dc:	1e0c      	subs	r4, r1, #0
 80043de:	d010      	beq.n	8004402 <_free_r+0x2a>
 80043e0:	3c04      	subs	r4, #4
 80043e2:	6823      	ldr	r3, [r4, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	da00      	bge.n	80043ea <_free_r+0x12>
 80043e8:	18e4      	adds	r4, r4, r3
 80043ea:	0028      	movs	r0, r5
 80043ec:	f7ff ff9e 	bl	800432c <__malloc_lock>
 80043f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004468 <_free_r+0x90>)
 80043f2:	6813      	ldr	r3, [r2, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d105      	bne.n	8004404 <_free_r+0x2c>
 80043f8:	6063      	str	r3, [r4, #4]
 80043fa:	6014      	str	r4, [r2, #0]
 80043fc:	0028      	movs	r0, r5
 80043fe:	f7ff ff9d 	bl	800433c <__malloc_unlock>
 8004402:	bd70      	pop	{r4, r5, r6, pc}
 8004404:	42a3      	cmp	r3, r4
 8004406:	d908      	bls.n	800441a <_free_r+0x42>
 8004408:	6820      	ldr	r0, [r4, #0]
 800440a:	1821      	adds	r1, r4, r0
 800440c:	428b      	cmp	r3, r1
 800440e:	d1f3      	bne.n	80043f8 <_free_r+0x20>
 8004410:	6819      	ldr	r1, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	1809      	adds	r1, r1, r0
 8004416:	6021      	str	r1, [r4, #0]
 8004418:	e7ee      	b.n	80043f8 <_free_r+0x20>
 800441a:	001a      	movs	r2, r3
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <_free_r+0x4e>
 8004422:	42a3      	cmp	r3, r4
 8004424:	d9f9      	bls.n	800441a <_free_r+0x42>
 8004426:	6811      	ldr	r1, [r2, #0]
 8004428:	1850      	adds	r0, r2, r1
 800442a:	42a0      	cmp	r0, r4
 800442c:	d10b      	bne.n	8004446 <_free_r+0x6e>
 800442e:	6820      	ldr	r0, [r4, #0]
 8004430:	1809      	adds	r1, r1, r0
 8004432:	1850      	adds	r0, r2, r1
 8004434:	6011      	str	r1, [r2, #0]
 8004436:	4283      	cmp	r3, r0
 8004438:	d1e0      	bne.n	80043fc <_free_r+0x24>
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	1841      	adds	r1, r0, r1
 8004440:	6011      	str	r1, [r2, #0]
 8004442:	6053      	str	r3, [r2, #4]
 8004444:	e7da      	b.n	80043fc <_free_r+0x24>
 8004446:	42a0      	cmp	r0, r4
 8004448:	d902      	bls.n	8004450 <_free_r+0x78>
 800444a:	230c      	movs	r3, #12
 800444c:	602b      	str	r3, [r5, #0]
 800444e:	e7d5      	b.n	80043fc <_free_r+0x24>
 8004450:	6820      	ldr	r0, [r4, #0]
 8004452:	1821      	adds	r1, r4, r0
 8004454:	428b      	cmp	r3, r1
 8004456:	d103      	bne.n	8004460 <_free_r+0x88>
 8004458:	6819      	ldr	r1, [r3, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	1809      	adds	r1, r1, r0
 800445e:	6021      	str	r1, [r4, #0]
 8004460:	6063      	str	r3, [r4, #4]
 8004462:	6054      	str	r4, [r2, #4]
 8004464:	e7ca      	b.n	80043fc <_free_r+0x24>
 8004466:	46c0      	nop			@ (mov r8, r8)
 8004468:	200001a8 	.word	0x200001a8

0800446c <_init>:
 800446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446e:	46c0      	nop			@ (mov r8, r8)
 8004470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004472:	bc08      	pop	{r3}
 8004474:	469e      	mov	lr, r3
 8004476:	4770      	bx	lr

08004478 <_fini>:
 8004478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447a:	46c0      	nop			@ (mov r8, r8)
 800447c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447e:	bc08      	pop	{r3}
 8004480:	469e      	mov	lr, r3
 8004482:	4770      	bx	lr
