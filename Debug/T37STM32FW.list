
T37STM32FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043bc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  0800447c  0800447c  0000547c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800465c  0800465c  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800465c  0800465c  00006068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800465c  0800465c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800465c  0800465c  0000565c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004660  08004660  00005660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004664  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000068  080046cc  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  080046cc  000062ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6e3  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fcd  00000000  00000000  00010773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  00012740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000686  00000000  00000000  00012fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020bf  00000000  00000000  00013656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b322  00000000  00000000  00015715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089f4c  00000000  00000000  00020a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa983  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002164  00000000  00000000  000aa9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000acb2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004464 	.word	0x08004464

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08004464 	.word	0x08004464

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	@ 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 fd36 	bl	8000c98 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fce1 	bl	8000bf8 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	@ 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 fa77 	bl	8000730 <__aeabi_fsub>
 8000242:	f000 fcd9 	bl	8000bf8 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	@ 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fdiv>:
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	4646      	mov	r6, r8
 8000254:	464f      	mov	r7, r9
 8000256:	46d6      	mov	lr, sl
 8000258:	0245      	lsls	r5, r0, #9
 800025a:	b5c0      	push	{r6, r7, lr}
 800025c:	0fc3      	lsrs	r3, r0, #31
 800025e:	0047      	lsls	r7, r0, #1
 8000260:	4698      	mov	r8, r3
 8000262:	1c0e      	adds	r6, r1, #0
 8000264:	0a6d      	lsrs	r5, r5, #9
 8000266:	0e3f      	lsrs	r7, r7, #24
 8000268:	d05b      	beq.n	8000322 <__aeabi_fdiv+0xd2>
 800026a:	2fff      	cmp	r7, #255	@ 0xff
 800026c:	d021      	beq.n	80002b2 <__aeabi_fdiv+0x62>
 800026e:	2380      	movs	r3, #128	@ 0x80
 8000270:	00ed      	lsls	r5, r5, #3
 8000272:	04db      	lsls	r3, r3, #19
 8000274:	431d      	orrs	r5, r3
 8000276:	2300      	movs	r3, #0
 8000278:	4699      	mov	r9, r3
 800027a:	469a      	mov	sl, r3
 800027c:	3f7f      	subs	r7, #127	@ 0x7f
 800027e:	0274      	lsls	r4, r6, #9
 8000280:	0073      	lsls	r3, r6, #1
 8000282:	0a64      	lsrs	r4, r4, #9
 8000284:	0e1b      	lsrs	r3, r3, #24
 8000286:	0ff6      	lsrs	r6, r6, #31
 8000288:	2b00      	cmp	r3, #0
 800028a:	d020      	beq.n	80002ce <__aeabi_fdiv+0x7e>
 800028c:	2bff      	cmp	r3, #255	@ 0xff
 800028e:	d043      	beq.n	8000318 <__aeabi_fdiv+0xc8>
 8000290:	2280      	movs	r2, #128	@ 0x80
 8000292:	2000      	movs	r0, #0
 8000294:	00e4      	lsls	r4, r4, #3
 8000296:	04d2      	lsls	r2, r2, #19
 8000298:	4314      	orrs	r4, r2
 800029a:	3b7f      	subs	r3, #127	@ 0x7f
 800029c:	4642      	mov	r2, r8
 800029e:	1aff      	subs	r7, r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4072      	eors	r2, r6
 80002a4:	2b0f      	cmp	r3, #15
 80002a6:	d900      	bls.n	80002aa <__aeabi_fdiv+0x5a>
 80002a8:	e09d      	b.n	80003e6 <__aeabi_fdiv+0x196>
 80002aa:	4971      	ldr	r1, [pc, #452]	@ (8000470 <__aeabi_fdiv+0x220>)
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	58cb      	ldr	r3, [r1, r3]
 80002b0:	469f      	mov	pc, r3
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	d15a      	bne.n	800036c <__aeabi_fdiv+0x11c>
 80002b6:	2308      	movs	r3, #8
 80002b8:	4699      	mov	r9, r3
 80002ba:	3b06      	subs	r3, #6
 80002bc:	0274      	lsls	r4, r6, #9
 80002be:	469a      	mov	sl, r3
 80002c0:	0073      	lsls	r3, r6, #1
 80002c2:	27ff      	movs	r7, #255	@ 0xff
 80002c4:	0a64      	lsrs	r4, r4, #9
 80002c6:	0e1b      	lsrs	r3, r3, #24
 80002c8:	0ff6      	lsrs	r6, r6, #31
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d1de      	bne.n	800028c <__aeabi_fdiv+0x3c>
 80002ce:	2c00      	cmp	r4, #0
 80002d0:	d13b      	bne.n	800034a <__aeabi_fdiv+0xfa>
 80002d2:	2301      	movs	r3, #1
 80002d4:	4642      	mov	r2, r8
 80002d6:	4649      	mov	r1, r9
 80002d8:	4072      	eors	r2, r6
 80002da:	4319      	orrs	r1, r3
 80002dc:	290e      	cmp	r1, #14
 80002de:	d818      	bhi.n	8000312 <__aeabi_fdiv+0xc2>
 80002e0:	4864      	ldr	r0, [pc, #400]	@ (8000474 <__aeabi_fdiv+0x224>)
 80002e2:	0089      	lsls	r1, r1, #2
 80002e4:	5841      	ldr	r1, [r0, r1]
 80002e6:	468f      	mov	pc, r1
 80002e8:	4653      	mov	r3, sl
 80002ea:	2b02      	cmp	r3, #2
 80002ec:	d100      	bne.n	80002f0 <__aeabi_fdiv+0xa0>
 80002ee:	e0b8      	b.n	8000462 <__aeabi_fdiv+0x212>
 80002f0:	2b03      	cmp	r3, #3
 80002f2:	d06e      	beq.n	80003d2 <__aeabi_fdiv+0x182>
 80002f4:	4642      	mov	r2, r8
 80002f6:	002c      	movs	r4, r5
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d140      	bne.n	800037e <__aeabi_fdiv+0x12e>
 80002fc:	2000      	movs	r0, #0
 80002fe:	2400      	movs	r4, #0
 8000300:	05c0      	lsls	r0, r0, #23
 8000302:	4320      	orrs	r0, r4
 8000304:	07d2      	lsls	r2, r2, #31
 8000306:	4310      	orrs	r0, r2
 8000308:	bce0      	pop	{r5, r6, r7}
 800030a:	46ba      	mov	sl, r7
 800030c:	46b1      	mov	r9, r6
 800030e:	46a8      	mov	r8, r5
 8000310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000312:	20ff      	movs	r0, #255	@ 0xff
 8000314:	2400      	movs	r4, #0
 8000316:	e7f3      	b.n	8000300 <__aeabi_fdiv+0xb0>
 8000318:	2c00      	cmp	r4, #0
 800031a:	d120      	bne.n	800035e <__aeabi_fdiv+0x10e>
 800031c:	2302      	movs	r3, #2
 800031e:	3fff      	subs	r7, #255	@ 0xff
 8000320:	e7d8      	b.n	80002d4 <__aeabi_fdiv+0x84>
 8000322:	2d00      	cmp	r5, #0
 8000324:	d105      	bne.n	8000332 <__aeabi_fdiv+0xe2>
 8000326:	2304      	movs	r3, #4
 8000328:	4699      	mov	r9, r3
 800032a:	3b03      	subs	r3, #3
 800032c:	2700      	movs	r7, #0
 800032e:	469a      	mov	sl, r3
 8000330:	e7a5      	b.n	800027e <__aeabi_fdiv+0x2e>
 8000332:	0028      	movs	r0, r5
 8000334:	f000 fcba 	bl	8000cac <__clzsi2>
 8000338:	2776      	movs	r7, #118	@ 0x76
 800033a:	1f43      	subs	r3, r0, #5
 800033c:	409d      	lsls	r5, r3
 800033e:	2300      	movs	r3, #0
 8000340:	427f      	negs	r7, r7
 8000342:	4699      	mov	r9, r3
 8000344:	469a      	mov	sl, r3
 8000346:	1a3f      	subs	r7, r7, r0
 8000348:	e799      	b.n	800027e <__aeabi_fdiv+0x2e>
 800034a:	0020      	movs	r0, r4
 800034c:	f000 fcae 	bl	8000cac <__clzsi2>
 8000350:	1f43      	subs	r3, r0, #5
 8000352:	409c      	lsls	r4, r3
 8000354:	2376      	movs	r3, #118	@ 0x76
 8000356:	425b      	negs	r3, r3
 8000358:	1a1b      	subs	r3, r3, r0
 800035a:	2000      	movs	r0, #0
 800035c:	e79e      	b.n	800029c <__aeabi_fdiv+0x4c>
 800035e:	2303      	movs	r3, #3
 8000360:	464a      	mov	r2, r9
 8000362:	431a      	orrs	r2, r3
 8000364:	4691      	mov	r9, r2
 8000366:	2003      	movs	r0, #3
 8000368:	33fc      	adds	r3, #252	@ 0xfc
 800036a:	e797      	b.n	800029c <__aeabi_fdiv+0x4c>
 800036c:	230c      	movs	r3, #12
 800036e:	4699      	mov	r9, r3
 8000370:	3b09      	subs	r3, #9
 8000372:	27ff      	movs	r7, #255	@ 0xff
 8000374:	469a      	mov	sl, r3
 8000376:	e782      	b.n	800027e <__aeabi_fdiv+0x2e>
 8000378:	2803      	cmp	r0, #3
 800037a:	d02c      	beq.n	80003d6 <__aeabi_fdiv+0x186>
 800037c:	0032      	movs	r2, r6
 800037e:	0038      	movs	r0, r7
 8000380:	307f      	adds	r0, #127	@ 0x7f
 8000382:	2800      	cmp	r0, #0
 8000384:	dd47      	ble.n	8000416 <__aeabi_fdiv+0x1c6>
 8000386:	0763      	lsls	r3, r4, #29
 8000388:	d004      	beq.n	8000394 <__aeabi_fdiv+0x144>
 800038a:	230f      	movs	r3, #15
 800038c:	4023      	ands	r3, r4
 800038e:	2b04      	cmp	r3, #4
 8000390:	d000      	beq.n	8000394 <__aeabi_fdiv+0x144>
 8000392:	3404      	adds	r4, #4
 8000394:	0123      	lsls	r3, r4, #4
 8000396:	d503      	bpl.n	80003a0 <__aeabi_fdiv+0x150>
 8000398:	0038      	movs	r0, r7
 800039a:	4b37      	ldr	r3, [pc, #220]	@ (8000478 <__aeabi_fdiv+0x228>)
 800039c:	3080      	adds	r0, #128	@ 0x80
 800039e:	401c      	ands	r4, r3
 80003a0:	28fe      	cmp	r0, #254	@ 0xfe
 80003a2:	dcb6      	bgt.n	8000312 <__aeabi_fdiv+0xc2>
 80003a4:	01a4      	lsls	r4, r4, #6
 80003a6:	0a64      	lsrs	r4, r4, #9
 80003a8:	b2c0      	uxtb	r0, r0
 80003aa:	e7a9      	b.n	8000300 <__aeabi_fdiv+0xb0>
 80003ac:	2480      	movs	r4, #128	@ 0x80
 80003ae:	2200      	movs	r2, #0
 80003b0:	20ff      	movs	r0, #255	@ 0xff
 80003b2:	03e4      	lsls	r4, r4, #15
 80003b4:	e7a4      	b.n	8000300 <__aeabi_fdiv+0xb0>
 80003b6:	2380      	movs	r3, #128	@ 0x80
 80003b8:	03db      	lsls	r3, r3, #15
 80003ba:	421d      	tst	r5, r3
 80003bc:	d001      	beq.n	80003c2 <__aeabi_fdiv+0x172>
 80003be:	421c      	tst	r4, r3
 80003c0:	d00b      	beq.n	80003da <__aeabi_fdiv+0x18a>
 80003c2:	2480      	movs	r4, #128	@ 0x80
 80003c4:	03e4      	lsls	r4, r4, #15
 80003c6:	432c      	orrs	r4, r5
 80003c8:	0264      	lsls	r4, r4, #9
 80003ca:	4642      	mov	r2, r8
 80003cc:	20ff      	movs	r0, #255	@ 0xff
 80003ce:	0a64      	lsrs	r4, r4, #9
 80003d0:	e796      	b.n	8000300 <__aeabi_fdiv+0xb0>
 80003d2:	4646      	mov	r6, r8
 80003d4:	002c      	movs	r4, r5
 80003d6:	2380      	movs	r3, #128	@ 0x80
 80003d8:	03db      	lsls	r3, r3, #15
 80003da:	431c      	orrs	r4, r3
 80003dc:	0264      	lsls	r4, r4, #9
 80003de:	0032      	movs	r2, r6
 80003e0:	20ff      	movs	r0, #255	@ 0xff
 80003e2:	0a64      	lsrs	r4, r4, #9
 80003e4:	e78c      	b.n	8000300 <__aeabi_fdiv+0xb0>
 80003e6:	016d      	lsls	r5, r5, #5
 80003e8:	0160      	lsls	r0, r4, #5
 80003ea:	4285      	cmp	r5, r0
 80003ec:	d22d      	bcs.n	800044a <__aeabi_fdiv+0x1fa>
 80003ee:	231b      	movs	r3, #27
 80003f0:	2400      	movs	r4, #0
 80003f2:	3f01      	subs	r7, #1
 80003f4:	2601      	movs	r6, #1
 80003f6:	0029      	movs	r1, r5
 80003f8:	0064      	lsls	r4, r4, #1
 80003fa:	006d      	lsls	r5, r5, #1
 80003fc:	2900      	cmp	r1, #0
 80003fe:	db01      	blt.n	8000404 <__aeabi_fdiv+0x1b4>
 8000400:	4285      	cmp	r5, r0
 8000402:	d301      	bcc.n	8000408 <__aeabi_fdiv+0x1b8>
 8000404:	1a2d      	subs	r5, r5, r0
 8000406:	4334      	orrs	r4, r6
 8000408:	3b01      	subs	r3, #1
 800040a:	2b00      	cmp	r3, #0
 800040c:	d1f3      	bne.n	80003f6 <__aeabi_fdiv+0x1a6>
 800040e:	1e6b      	subs	r3, r5, #1
 8000410:	419d      	sbcs	r5, r3
 8000412:	432c      	orrs	r4, r5
 8000414:	e7b3      	b.n	800037e <__aeabi_fdiv+0x12e>
 8000416:	2301      	movs	r3, #1
 8000418:	1a1b      	subs	r3, r3, r0
 800041a:	2b1b      	cmp	r3, #27
 800041c:	dd00      	ble.n	8000420 <__aeabi_fdiv+0x1d0>
 800041e:	e76d      	b.n	80002fc <__aeabi_fdiv+0xac>
 8000420:	0021      	movs	r1, r4
 8000422:	379e      	adds	r7, #158	@ 0x9e
 8000424:	40d9      	lsrs	r1, r3
 8000426:	40bc      	lsls	r4, r7
 8000428:	000b      	movs	r3, r1
 800042a:	1e61      	subs	r1, r4, #1
 800042c:	418c      	sbcs	r4, r1
 800042e:	4323      	orrs	r3, r4
 8000430:	0759      	lsls	r1, r3, #29
 8000432:	d004      	beq.n	800043e <__aeabi_fdiv+0x1ee>
 8000434:	210f      	movs	r1, #15
 8000436:	4019      	ands	r1, r3
 8000438:	2904      	cmp	r1, #4
 800043a:	d000      	beq.n	800043e <__aeabi_fdiv+0x1ee>
 800043c:	3304      	adds	r3, #4
 800043e:	0159      	lsls	r1, r3, #5
 8000440:	d413      	bmi.n	800046a <__aeabi_fdiv+0x21a>
 8000442:	019b      	lsls	r3, r3, #6
 8000444:	2000      	movs	r0, #0
 8000446:	0a5c      	lsrs	r4, r3, #9
 8000448:	e75a      	b.n	8000300 <__aeabi_fdiv+0xb0>
 800044a:	231a      	movs	r3, #26
 800044c:	2401      	movs	r4, #1
 800044e:	1a2d      	subs	r5, r5, r0
 8000450:	e7d0      	b.n	80003f4 <__aeabi_fdiv+0x1a4>
 8000452:	1e98      	subs	r0, r3, #2
 8000454:	4243      	negs	r3, r0
 8000456:	4158      	adcs	r0, r3
 8000458:	4240      	negs	r0, r0
 800045a:	0032      	movs	r2, r6
 800045c:	2400      	movs	r4, #0
 800045e:	b2c0      	uxtb	r0, r0
 8000460:	e74e      	b.n	8000300 <__aeabi_fdiv+0xb0>
 8000462:	4642      	mov	r2, r8
 8000464:	20ff      	movs	r0, #255	@ 0xff
 8000466:	2400      	movs	r4, #0
 8000468:	e74a      	b.n	8000300 <__aeabi_fdiv+0xb0>
 800046a:	2001      	movs	r0, #1
 800046c:	2400      	movs	r4, #0
 800046e:	e747      	b.n	8000300 <__aeabi_fdiv+0xb0>
 8000470:	0800447c 	.word	0x0800447c
 8000474:	080044bc 	.word	0x080044bc
 8000478:	f7ffffff 	.word	0xf7ffffff

0800047c <__aeabi_fmul>:
 800047c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800047e:	464f      	mov	r7, r9
 8000480:	4646      	mov	r6, r8
 8000482:	46d6      	mov	lr, sl
 8000484:	0044      	lsls	r4, r0, #1
 8000486:	b5c0      	push	{r6, r7, lr}
 8000488:	0246      	lsls	r6, r0, #9
 800048a:	1c0f      	adds	r7, r1, #0
 800048c:	0a76      	lsrs	r6, r6, #9
 800048e:	0e24      	lsrs	r4, r4, #24
 8000490:	0fc5      	lsrs	r5, r0, #31
 8000492:	2c00      	cmp	r4, #0
 8000494:	d100      	bne.n	8000498 <__aeabi_fmul+0x1c>
 8000496:	e0da      	b.n	800064e <__aeabi_fmul+0x1d2>
 8000498:	2cff      	cmp	r4, #255	@ 0xff
 800049a:	d074      	beq.n	8000586 <__aeabi_fmul+0x10a>
 800049c:	2380      	movs	r3, #128	@ 0x80
 800049e:	00f6      	lsls	r6, r6, #3
 80004a0:	04db      	lsls	r3, r3, #19
 80004a2:	431e      	orrs	r6, r3
 80004a4:	2300      	movs	r3, #0
 80004a6:	4699      	mov	r9, r3
 80004a8:	469a      	mov	sl, r3
 80004aa:	3c7f      	subs	r4, #127	@ 0x7f
 80004ac:	027b      	lsls	r3, r7, #9
 80004ae:	0a5b      	lsrs	r3, r3, #9
 80004b0:	4698      	mov	r8, r3
 80004b2:	007b      	lsls	r3, r7, #1
 80004b4:	0e1b      	lsrs	r3, r3, #24
 80004b6:	0fff      	lsrs	r7, r7, #31
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d074      	beq.n	80005a6 <__aeabi_fmul+0x12a>
 80004bc:	2bff      	cmp	r3, #255	@ 0xff
 80004be:	d100      	bne.n	80004c2 <__aeabi_fmul+0x46>
 80004c0:	e08e      	b.n	80005e0 <__aeabi_fmul+0x164>
 80004c2:	4642      	mov	r2, r8
 80004c4:	2180      	movs	r1, #128	@ 0x80
 80004c6:	00d2      	lsls	r2, r2, #3
 80004c8:	04c9      	lsls	r1, r1, #19
 80004ca:	4311      	orrs	r1, r2
 80004cc:	3b7f      	subs	r3, #127	@ 0x7f
 80004ce:	002a      	movs	r2, r5
 80004d0:	18e4      	adds	r4, r4, r3
 80004d2:	464b      	mov	r3, r9
 80004d4:	407a      	eors	r2, r7
 80004d6:	4688      	mov	r8, r1
 80004d8:	b2d2      	uxtb	r2, r2
 80004da:	2b0a      	cmp	r3, #10
 80004dc:	dc75      	bgt.n	80005ca <__aeabi_fmul+0x14e>
 80004de:	464b      	mov	r3, r9
 80004e0:	2000      	movs	r0, #0
 80004e2:	2b02      	cmp	r3, #2
 80004e4:	dd0f      	ble.n	8000506 <__aeabi_fmul+0x8a>
 80004e6:	4649      	mov	r1, r9
 80004e8:	2301      	movs	r3, #1
 80004ea:	408b      	lsls	r3, r1
 80004ec:	21a6      	movs	r1, #166	@ 0xa6
 80004ee:	00c9      	lsls	r1, r1, #3
 80004f0:	420b      	tst	r3, r1
 80004f2:	d169      	bne.n	80005c8 <__aeabi_fmul+0x14c>
 80004f4:	2190      	movs	r1, #144	@ 0x90
 80004f6:	0089      	lsls	r1, r1, #2
 80004f8:	420b      	tst	r3, r1
 80004fa:	d000      	beq.n	80004fe <__aeabi_fmul+0x82>
 80004fc:	e100      	b.n	8000700 <__aeabi_fmul+0x284>
 80004fe:	2188      	movs	r1, #136	@ 0x88
 8000500:	4219      	tst	r1, r3
 8000502:	d000      	beq.n	8000506 <__aeabi_fmul+0x8a>
 8000504:	e0f5      	b.n	80006f2 <__aeabi_fmul+0x276>
 8000506:	4641      	mov	r1, r8
 8000508:	0409      	lsls	r1, r1, #16
 800050a:	0c09      	lsrs	r1, r1, #16
 800050c:	4643      	mov	r3, r8
 800050e:	0008      	movs	r0, r1
 8000510:	0c35      	lsrs	r5, r6, #16
 8000512:	0436      	lsls	r6, r6, #16
 8000514:	0c1b      	lsrs	r3, r3, #16
 8000516:	0c36      	lsrs	r6, r6, #16
 8000518:	4370      	muls	r0, r6
 800051a:	4369      	muls	r1, r5
 800051c:	435e      	muls	r6, r3
 800051e:	435d      	muls	r5, r3
 8000520:	1876      	adds	r6, r6, r1
 8000522:	0c03      	lsrs	r3, r0, #16
 8000524:	199b      	adds	r3, r3, r6
 8000526:	4299      	cmp	r1, r3
 8000528:	d903      	bls.n	8000532 <__aeabi_fmul+0xb6>
 800052a:	2180      	movs	r1, #128	@ 0x80
 800052c:	0249      	lsls	r1, r1, #9
 800052e:	468c      	mov	ip, r1
 8000530:	4465      	add	r5, ip
 8000532:	0400      	lsls	r0, r0, #16
 8000534:	0419      	lsls	r1, r3, #16
 8000536:	0c00      	lsrs	r0, r0, #16
 8000538:	1809      	adds	r1, r1, r0
 800053a:	018e      	lsls	r6, r1, #6
 800053c:	1e70      	subs	r0, r6, #1
 800053e:	4186      	sbcs	r6, r0
 8000540:	0c1b      	lsrs	r3, r3, #16
 8000542:	0e89      	lsrs	r1, r1, #26
 8000544:	195b      	adds	r3, r3, r5
 8000546:	430e      	orrs	r6, r1
 8000548:	019b      	lsls	r3, r3, #6
 800054a:	431e      	orrs	r6, r3
 800054c:	011b      	lsls	r3, r3, #4
 800054e:	d46c      	bmi.n	800062a <__aeabi_fmul+0x1ae>
 8000550:	0023      	movs	r3, r4
 8000552:	337f      	adds	r3, #127	@ 0x7f
 8000554:	2b00      	cmp	r3, #0
 8000556:	dc00      	bgt.n	800055a <__aeabi_fmul+0xde>
 8000558:	e0b1      	b.n	80006be <__aeabi_fmul+0x242>
 800055a:	0015      	movs	r5, r2
 800055c:	0771      	lsls	r1, r6, #29
 800055e:	d00b      	beq.n	8000578 <__aeabi_fmul+0xfc>
 8000560:	200f      	movs	r0, #15
 8000562:	0021      	movs	r1, r4
 8000564:	4030      	ands	r0, r6
 8000566:	2804      	cmp	r0, #4
 8000568:	d006      	beq.n	8000578 <__aeabi_fmul+0xfc>
 800056a:	3604      	adds	r6, #4
 800056c:	0132      	lsls	r2, r6, #4
 800056e:	d503      	bpl.n	8000578 <__aeabi_fmul+0xfc>
 8000570:	4b6e      	ldr	r3, [pc, #440]	@ (800072c <__aeabi_fmul+0x2b0>)
 8000572:	401e      	ands	r6, r3
 8000574:	000b      	movs	r3, r1
 8000576:	3380      	adds	r3, #128	@ 0x80
 8000578:	2bfe      	cmp	r3, #254	@ 0xfe
 800057a:	dd00      	ble.n	800057e <__aeabi_fmul+0x102>
 800057c:	e0bd      	b.n	80006fa <__aeabi_fmul+0x27e>
 800057e:	01b2      	lsls	r2, r6, #6
 8000580:	0a52      	lsrs	r2, r2, #9
 8000582:	b2db      	uxtb	r3, r3
 8000584:	e048      	b.n	8000618 <__aeabi_fmul+0x19c>
 8000586:	2e00      	cmp	r6, #0
 8000588:	d000      	beq.n	800058c <__aeabi_fmul+0x110>
 800058a:	e092      	b.n	80006b2 <__aeabi_fmul+0x236>
 800058c:	2308      	movs	r3, #8
 800058e:	4699      	mov	r9, r3
 8000590:	3b06      	subs	r3, #6
 8000592:	469a      	mov	sl, r3
 8000594:	027b      	lsls	r3, r7, #9
 8000596:	0a5b      	lsrs	r3, r3, #9
 8000598:	4698      	mov	r8, r3
 800059a:	007b      	lsls	r3, r7, #1
 800059c:	24ff      	movs	r4, #255	@ 0xff
 800059e:	0e1b      	lsrs	r3, r3, #24
 80005a0:	0fff      	lsrs	r7, r7, #31
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d18a      	bne.n	80004bc <__aeabi_fmul+0x40>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2a00      	cmp	r2, #0
 80005aa:	d164      	bne.n	8000676 <__aeabi_fmul+0x1fa>
 80005ac:	4649      	mov	r1, r9
 80005ae:	3201      	adds	r2, #1
 80005b0:	4311      	orrs	r1, r2
 80005b2:	4689      	mov	r9, r1
 80005b4:	290a      	cmp	r1, #10
 80005b6:	dc08      	bgt.n	80005ca <__aeabi_fmul+0x14e>
 80005b8:	407d      	eors	r5, r7
 80005ba:	2001      	movs	r0, #1
 80005bc:	b2ea      	uxtb	r2, r5
 80005be:	2902      	cmp	r1, #2
 80005c0:	dc91      	bgt.n	80004e6 <__aeabi_fmul+0x6a>
 80005c2:	0015      	movs	r5, r2
 80005c4:	2200      	movs	r2, #0
 80005c6:	e027      	b.n	8000618 <__aeabi_fmul+0x19c>
 80005c8:	0015      	movs	r5, r2
 80005ca:	4653      	mov	r3, sl
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d100      	bne.n	80005d2 <__aeabi_fmul+0x156>
 80005d0:	e093      	b.n	80006fa <__aeabi_fmul+0x27e>
 80005d2:	2b03      	cmp	r3, #3
 80005d4:	d01a      	beq.n	800060c <__aeabi_fmul+0x190>
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d12c      	bne.n	8000634 <__aeabi_fmul+0x1b8>
 80005da:	2300      	movs	r3, #0
 80005dc:	2200      	movs	r2, #0
 80005de:	e01b      	b.n	8000618 <__aeabi_fmul+0x19c>
 80005e0:	4643      	mov	r3, r8
 80005e2:	34ff      	adds	r4, #255	@ 0xff
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d055      	beq.n	8000694 <__aeabi_fmul+0x218>
 80005e8:	2103      	movs	r1, #3
 80005ea:	464b      	mov	r3, r9
 80005ec:	430b      	orrs	r3, r1
 80005ee:	0019      	movs	r1, r3
 80005f0:	2b0a      	cmp	r3, #10
 80005f2:	dc00      	bgt.n	80005f6 <__aeabi_fmul+0x17a>
 80005f4:	e092      	b.n	800071c <__aeabi_fmul+0x2a0>
 80005f6:	2b0f      	cmp	r3, #15
 80005f8:	d000      	beq.n	80005fc <__aeabi_fmul+0x180>
 80005fa:	e08c      	b.n	8000716 <__aeabi_fmul+0x29a>
 80005fc:	2280      	movs	r2, #128	@ 0x80
 80005fe:	03d2      	lsls	r2, r2, #15
 8000600:	4216      	tst	r6, r2
 8000602:	d003      	beq.n	800060c <__aeabi_fmul+0x190>
 8000604:	4643      	mov	r3, r8
 8000606:	4213      	tst	r3, r2
 8000608:	d100      	bne.n	800060c <__aeabi_fmul+0x190>
 800060a:	e07d      	b.n	8000708 <__aeabi_fmul+0x28c>
 800060c:	2280      	movs	r2, #128	@ 0x80
 800060e:	03d2      	lsls	r2, r2, #15
 8000610:	4332      	orrs	r2, r6
 8000612:	0252      	lsls	r2, r2, #9
 8000614:	0a52      	lsrs	r2, r2, #9
 8000616:	23ff      	movs	r3, #255	@ 0xff
 8000618:	05d8      	lsls	r0, r3, #23
 800061a:	07ed      	lsls	r5, r5, #31
 800061c:	4310      	orrs	r0, r2
 800061e:	4328      	orrs	r0, r5
 8000620:	bce0      	pop	{r5, r6, r7}
 8000622:	46ba      	mov	sl, r7
 8000624:	46b1      	mov	r9, r6
 8000626:	46a8      	mov	r8, r5
 8000628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062a:	2301      	movs	r3, #1
 800062c:	0015      	movs	r5, r2
 800062e:	0871      	lsrs	r1, r6, #1
 8000630:	401e      	ands	r6, r3
 8000632:	430e      	orrs	r6, r1
 8000634:	0023      	movs	r3, r4
 8000636:	3380      	adds	r3, #128	@ 0x80
 8000638:	1c61      	adds	r1, r4, #1
 800063a:	2b00      	cmp	r3, #0
 800063c:	dd41      	ble.n	80006c2 <__aeabi_fmul+0x246>
 800063e:	0772      	lsls	r2, r6, #29
 8000640:	d094      	beq.n	800056c <__aeabi_fmul+0xf0>
 8000642:	220f      	movs	r2, #15
 8000644:	4032      	ands	r2, r6
 8000646:	2a04      	cmp	r2, #4
 8000648:	d000      	beq.n	800064c <__aeabi_fmul+0x1d0>
 800064a:	e78e      	b.n	800056a <__aeabi_fmul+0xee>
 800064c:	e78e      	b.n	800056c <__aeabi_fmul+0xf0>
 800064e:	2e00      	cmp	r6, #0
 8000650:	d105      	bne.n	800065e <__aeabi_fmul+0x1e2>
 8000652:	2304      	movs	r3, #4
 8000654:	4699      	mov	r9, r3
 8000656:	3b03      	subs	r3, #3
 8000658:	2400      	movs	r4, #0
 800065a:	469a      	mov	sl, r3
 800065c:	e726      	b.n	80004ac <__aeabi_fmul+0x30>
 800065e:	0030      	movs	r0, r6
 8000660:	f000 fb24 	bl	8000cac <__clzsi2>
 8000664:	2476      	movs	r4, #118	@ 0x76
 8000666:	1f43      	subs	r3, r0, #5
 8000668:	409e      	lsls	r6, r3
 800066a:	2300      	movs	r3, #0
 800066c:	4264      	negs	r4, r4
 800066e:	4699      	mov	r9, r3
 8000670:	469a      	mov	sl, r3
 8000672:	1a24      	subs	r4, r4, r0
 8000674:	e71a      	b.n	80004ac <__aeabi_fmul+0x30>
 8000676:	4640      	mov	r0, r8
 8000678:	f000 fb18 	bl	8000cac <__clzsi2>
 800067c:	464b      	mov	r3, r9
 800067e:	1a24      	subs	r4, r4, r0
 8000680:	3c76      	subs	r4, #118	@ 0x76
 8000682:	2b0a      	cmp	r3, #10
 8000684:	dca1      	bgt.n	80005ca <__aeabi_fmul+0x14e>
 8000686:	4643      	mov	r3, r8
 8000688:	3805      	subs	r0, #5
 800068a:	4083      	lsls	r3, r0
 800068c:	407d      	eors	r5, r7
 800068e:	4698      	mov	r8, r3
 8000690:	b2ea      	uxtb	r2, r5
 8000692:	e724      	b.n	80004de <__aeabi_fmul+0x62>
 8000694:	464a      	mov	r2, r9
 8000696:	3302      	adds	r3, #2
 8000698:	4313      	orrs	r3, r2
 800069a:	002a      	movs	r2, r5
 800069c:	407a      	eors	r2, r7
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	2b0a      	cmp	r3, #10
 80006a2:	dc92      	bgt.n	80005ca <__aeabi_fmul+0x14e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	0015      	movs	r5, r2
 80006a8:	2900      	cmp	r1, #0
 80006aa:	d026      	beq.n	80006fa <__aeabi_fmul+0x27e>
 80006ac:	4699      	mov	r9, r3
 80006ae:	2002      	movs	r0, #2
 80006b0:	e719      	b.n	80004e6 <__aeabi_fmul+0x6a>
 80006b2:	230c      	movs	r3, #12
 80006b4:	4699      	mov	r9, r3
 80006b6:	3b09      	subs	r3, #9
 80006b8:	24ff      	movs	r4, #255	@ 0xff
 80006ba:	469a      	mov	sl, r3
 80006bc:	e6f6      	b.n	80004ac <__aeabi_fmul+0x30>
 80006be:	0015      	movs	r5, r2
 80006c0:	0021      	movs	r1, r4
 80006c2:	2201      	movs	r2, #1
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	2b1b      	cmp	r3, #27
 80006c8:	dd00      	ble.n	80006cc <__aeabi_fmul+0x250>
 80006ca:	e786      	b.n	80005da <__aeabi_fmul+0x15e>
 80006cc:	319e      	adds	r1, #158	@ 0x9e
 80006ce:	0032      	movs	r2, r6
 80006d0:	408e      	lsls	r6, r1
 80006d2:	40da      	lsrs	r2, r3
 80006d4:	1e73      	subs	r3, r6, #1
 80006d6:	419e      	sbcs	r6, r3
 80006d8:	4332      	orrs	r2, r6
 80006da:	0753      	lsls	r3, r2, #29
 80006dc:	d004      	beq.n	80006e8 <__aeabi_fmul+0x26c>
 80006de:	230f      	movs	r3, #15
 80006e0:	4013      	ands	r3, r2
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	d000      	beq.n	80006e8 <__aeabi_fmul+0x26c>
 80006e6:	3204      	adds	r2, #4
 80006e8:	0153      	lsls	r3, r2, #5
 80006ea:	d510      	bpl.n	800070e <__aeabi_fmul+0x292>
 80006ec:	2301      	movs	r3, #1
 80006ee:	2200      	movs	r2, #0
 80006f0:	e792      	b.n	8000618 <__aeabi_fmul+0x19c>
 80006f2:	003d      	movs	r5, r7
 80006f4:	4646      	mov	r6, r8
 80006f6:	4682      	mov	sl, r0
 80006f8:	e767      	b.n	80005ca <__aeabi_fmul+0x14e>
 80006fa:	23ff      	movs	r3, #255	@ 0xff
 80006fc:	2200      	movs	r2, #0
 80006fe:	e78b      	b.n	8000618 <__aeabi_fmul+0x19c>
 8000700:	2280      	movs	r2, #128	@ 0x80
 8000702:	2500      	movs	r5, #0
 8000704:	03d2      	lsls	r2, r2, #15
 8000706:	e786      	b.n	8000616 <__aeabi_fmul+0x19a>
 8000708:	003d      	movs	r5, r7
 800070a:	431a      	orrs	r2, r3
 800070c:	e783      	b.n	8000616 <__aeabi_fmul+0x19a>
 800070e:	0192      	lsls	r2, r2, #6
 8000710:	2300      	movs	r3, #0
 8000712:	0a52      	lsrs	r2, r2, #9
 8000714:	e780      	b.n	8000618 <__aeabi_fmul+0x19c>
 8000716:	003d      	movs	r5, r7
 8000718:	4646      	mov	r6, r8
 800071a:	e777      	b.n	800060c <__aeabi_fmul+0x190>
 800071c:	002a      	movs	r2, r5
 800071e:	2301      	movs	r3, #1
 8000720:	407a      	eors	r2, r7
 8000722:	408b      	lsls	r3, r1
 8000724:	2003      	movs	r0, #3
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	e6e9      	b.n	80004fe <__aeabi_fmul+0x82>
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	f7ffffff 	.word	0xf7ffffff

08000730 <__aeabi_fsub>:
 8000730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000732:	4647      	mov	r7, r8
 8000734:	46ce      	mov	lr, r9
 8000736:	0243      	lsls	r3, r0, #9
 8000738:	b580      	push	{r7, lr}
 800073a:	0a5f      	lsrs	r7, r3, #9
 800073c:	099b      	lsrs	r3, r3, #6
 800073e:	0045      	lsls	r5, r0, #1
 8000740:	004a      	lsls	r2, r1, #1
 8000742:	469c      	mov	ip, r3
 8000744:	024b      	lsls	r3, r1, #9
 8000746:	0fc4      	lsrs	r4, r0, #31
 8000748:	0fce      	lsrs	r6, r1, #31
 800074a:	0e2d      	lsrs	r5, r5, #24
 800074c:	0a58      	lsrs	r0, r3, #9
 800074e:	0e12      	lsrs	r2, r2, #24
 8000750:	0999      	lsrs	r1, r3, #6
 8000752:	2aff      	cmp	r2, #255	@ 0xff
 8000754:	d06b      	beq.n	800082e <__aeabi_fsub+0xfe>
 8000756:	2301      	movs	r3, #1
 8000758:	405e      	eors	r6, r3
 800075a:	1aab      	subs	r3, r5, r2
 800075c:	42b4      	cmp	r4, r6
 800075e:	d04b      	beq.n	80007f8 <__aeabi_fsub+0xc8>
 8000760:	2b00      	cmp	r3, #0
 8000762:	dc00      	bgt.n	8000766 <__aeabi_fsub+0x36>
 8000764:	e0ff      	b.n	8000966 <__aeabi_fsub+0x236>
 8000766:	2a00      	cmp	r2, #0
 8000768:	d100      	bne.n	800076c <__aeabi_fsub+0x3c>
 800076a:	e088      	b.n	800087e <__aeabi_fsub+0x14e>
 800076c:	2dff      	cmp	r5, #255	@ 0xff
 800076e:	d100      	bne.n	8000772 <__aeabi_fsub+0x42>
 8000770:	e0ef      	b.n	8000952 <__aeabi_fsub+0x222>
 8000772:	2280      	movs	r2, #128	@ 0x80
 8000774:	04d2      	lsls	r2, r2, #19
 8000776:	4311      	orrs	r1, r2
 8000778:	2001      	movs	r0, #1
 800077a:	2b1b      	cmp	r3, #27
 800077c:	dc08      	bgt.n	8000790 <__aeabi_fsub+0x60>
 800077e:	0008      	movs	r0, r1
 8000780:	2220      	movs	r2, #32
 8000782:	40d8      	lsrs	r0, r3
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	4099      	lsls	r1, r3
 8000788:	000b      	movs	r3, r1
 800078a:	1e5a      	subs	r2, r3, #1
 800078c:	4193      	sbcs	r3, r2
 800078e:	4318      	orrs	r0, r3
 8000790:	4663      	mov	r3, ip
 8000792:	1a1b      	subs	r3, r3, r0
 8000794:	469c      	mov	ip, r3
 8000796:	4663      	mov	r3, ip
 8000798:	015b      	lsls	r3, r3, #5
 800079a:	d400      	bmi.n	800079e <__aeabi_fsub+0x6e>
 800079c:	e0cd      	b.n	800093a <__aeabi_fsub+0x20a>
 800079e:	4663      	mov	r3, ip
 80007a0:	019f      	lsls	r7, r3, #6
 80007a2:	09bf      	lsrs	r7, r7, #6
 80007a4:	0038      	movs	r0, r7
 80007a6:	f000 fa81 	bl	8000cac <__clzsi2>
 80007aa:	003b      	movs	r3, r7
 80007ac:	3805      	subs	r0, #5
 80007ae:	4083      	lsls	r3, r0
 80007b0:	4285      	cmp	r5, r0
 80007b2:	dc00      	bgt.n	80007b6 <__aeabi_fsub+0x86>
 80007b4:	e0a2      	b.n	80008fc <__aeabi_fsub+0x1cc>
 80007b6:	4ab7      	ldr	r2, [pc, #732]	@ (8000a94 <__aeabi_fsub+0x364>)
 80007b8:	1a2d      	subs	r5, r5, r0
 80007ba:	401a      	ands	r2, r3
 80007bc:	4694      	mov	ip, r2
 80007be:	075a      	lsls	r2, r3, #29
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fsub+0x94>
 80007c2:	e0c3      	b.n	800094c <__aeabi_fsub+0x21c>
 80007c4:	220f      	movs	r2, #15
 80007c6:	4013      	ands	r3, r2
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	d100      	bne.n	80007ce <__aeabi_fsub+0x9e>
 80007cc:	e0be      	b.n	800094c <__aeabi_fsub+0x21c>
 80007ce:	2304      	movs	r3, #4
 80007d0:	4698      	mov	r8, r3
 80007d2:	44c4      	add	ip, r8
 80007d4:	4663      	mov	r3, ip
 80007d6:	015b      	lsls	r3, r3, #5
 80007d8:	d400      	bmi.n	80007dc <__aeabi_fsub+0xac>
 80007da:	e0b7      	b.n	800094c <__aeabi_fsub+0x21c>
 80007dc:	1c68      	adds	r0, r5, #1
 80007de:	2dfe      	cmp	r5, #254	@ 0xfe
 80007e0:	d000      	beq.n	80007e4 <__aeabi_fsub+0xb4>
 80007e2:	e0a5      	b.n	8000930 <__aeabi_fsub+0x200>
 80007e4:	20ff      	movs	r0, #255	@ 0xff
 80007e6:	2200      	movs	r2, #0
 80007e8:	05c0      	lsls	r0, r0, #23
 80007ea:	4310      	orrs	r0, r2
 80007ec:	07e4      	lsls	r4, r4, #31
 80007ee:	4320      	orrs	r0, r4
 80007f0:	bcc0      	pop	{r6, r7}
 80007f2:	46b9      	mov	r9, r7
 80007f4:	46b0      	mov	r8, r6
 80007f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	dc00      	bgt.n	80007fe <__aeabi_fsub+0xce>
 80007fc:	e1eb      	b.n	8000bd6 <__aeabi_fsub+0x4a6>
 80007fe:	2a00      	cmp	r2, #0
 8000800:	d046      	beq.n	8000890 <__aeabi_fsub+0x160>
 8000802:	2dff      	cmp	r5, #255	@ 0xff
 8000804:	d100      	bne.n	8000808 <__aeabi_fsub+0xd8>
 8000806:	e0a4      	b.n	8000952 <__aeabi_fsub+0x222>
 8000808:	2280      	movs	r2, #128	@ 0x80
 800080a:	04d2      	lsls	r2, r2, #19
 800080c:	4311      	orrs	r1, r2
 800080e:	2b1b      	cmp	r3, #27
 8000810:	dc00      	bgt.n	8000814 <__aeabi_fsub+0xe4>
 8000812:	e0fb      	b.n	8000a0c <__aeabi_fsub+0x2dc>
 8000814:	2305      	movs	r3, #5
 8000816:	4698      	mov	r8, r3
 8000818:	002b      	movs	r3, r5
 800081a:	44c4      	add	ip, r8
 800081c:	4662      	mov	r2, ip
 800081e:	08d7      	lsrs	r7, r2, #3
 8000820:	2bff      	cmp	r3, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fsub+0xf6>
 8000824:	e095      	b.n	8000952 <__aeabi_fsub+0x222>
 8000826:	027a      	lsls	r2, r7, #9
 8000828:	0a52      	lsrs	r2, r2, #9
 800082a:	b2d8      	uxtb	r0, r3
 800082c:	e7dc      	b.n	80007e8 <__aeabi_fsub+0xb8>
 800082e:	002b      	movs	r3, r5
 8000830:	3bff      	subs	r3, #255	@ 0xff
 8000832:	4699      	mov	r9, r3
 8000834:	2900      	cmp	r1, #0
 8000836:	d118      	bne.n	800086a <__aeabi_fsub+0x13a>
 8000838:	2301      	movs	r3, #1
 800083a:	405e      	eors	r6, r3
 800083c:	42b4      	cmp	r4, r6
 800083e:	d100      	bne.n	8000842 <__aeabi_fsub+0x112>
 8000840:	e0ca      	b.n	80009d8 <__aeabi_fsub+0x2a8>
 8000842:	464b      	mov	r3, r9
 8000844:	2b00      	cmp	r3, #0
 8000846:	d02d      	beq.n	80008a4 <__aeabi_fsub+0x174>
 8000848:	2d00      	cmp	r5, #0
 800084a:	d000      	beq.n	800084e <__aeabi_fsub+0x11e>
 800084c:	e13c      	b.n	8000ac8 <__aeabi_fsub+0x398>
 800084e:	23ff      	movs	r3, #255	@ 0xff
 8000850:	4664      	mov	r4, ip
 8000852:	2c00      	cmp	r4, #0
 8000854:	d100      	bne.n	8000858 <__aeabi_fsub+0x128>
 8000856:	e15f      	b.n	8000b18 <__aeabi_fsub+0x3e8>
 8000858:	1e5d      	subs	r5, r3, #1
 800085a:	2b01      	cmp	r3, #1
 800085c:	d100      	bne.n	8000860 <__aeabi_fsub+0x130>
 800085e:	e174      	b.n	8000b4a <__aeabi_fsub+0x41a>
 8000860:	0034      	movs	r4, r6
 8000862:	2bff      	cmp	r3, #255	@ 0xff
 8000864:	d074      	beq.n	8000950 <__aeabi_fsub+0x220>
 8000866:	002b      	movs	r3, r5
 8000868:	e103      	b.n	8000a72 <__aeabi_fsub+0x342>
 800086a:	42b4      	cmp	r4, r6
 800086c:	d100      	bne.n	8000870 <__aeabi_fsub+0x140>
 800086e:	e09c      	b.n	80009aa <__aeabi_fsub+0x27a>
 8000870:	2b00      	cmp	r3, #0
 8000872:	d017      	beq.n	80008a4 <__aeabi_fsub+0x174>
 8000874:	2d00      	cmp	r5, #0
 8000876:	d0ea      	beq.n	800084e <__aeabi_fsub+0x11e>
 8000878:	0007      	movs	r7, r0
 800087a:	0034      	movs	r4, r6
 800087c:	e06c      	b.n	8000958 <__aeabi_fsub+0x228>
 800087e:	2900      	cmp	r1, #0
 8000880:	d0cc      	beq.n	800081c <__aeabi_fsub+0xec>
 8000882:	1e5a      	subs	r2, r3, #1
 8000884:	2b01      	cmp	r3, #1
 8000886:	d02b      	beq.n	80008e0 <__aeabi_fsub+0x1b0>
 8000888:	2bff      	cmp	r3, #255	@ 0xff
 800088a:	d062      	beq.n	8000952 <__aeabi_fsub+0x222>
 800088c:	0013      	movs	r3, r2
 800088e:	e773      	b.n	8000778 <__aeabi_fsub+0x48>
 8000890:	2900      	cmp	r1, #0
 8000892:	d0c3      	beq.n	800081c <__aeabi_fsub+0xec>
 8000894:	1e5a      	subs	r2, r3, #1
 8000896:	2b01      	cmp	r3, #1
 8000898:	d100      	bne.n	800089c <__aeabi_fsub+0x16c>
 800089a:	e11e      	b.n	8000ada <__aeabi_fsub+0x3aa>
 800089c:	2bff      	cmp	r3, #255	@ 0xff
 800089e:	d058      	beq.n	8000952 <__aeabi_fsub+0x222>
 80008a0:	0013      	movs	r3, r2
 80008a2:	e7b4      	b.n	800080e <__aeabi_fsub+0xde>
 80008a4:	22fe      	movs	r2, #254	@ 0xfe
 80008a6:	1c6b      	adds	r3, r5, #1
 80008a8:	421a      	tst	r2, r3
 80008aa:	d10d      	bne.n	80008c8 <__aeabi_fsub+0x198>
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	d060      	beq.n	8000972 <__aeabi_fsub+0x242>
 80008b0:	4663      	mov	r3, ip
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d000      	beq.n	80008b8 <__aeabi_fsub+0x188>
 80008b6:	e120      	b.n	8000afa <__aeabi_fsub+0x3ca>
 80008b8:	2900      	cmp	r1, #0
 80008ba:	d000      	beq.n	80008be <__aeabi_fsub+0x18e>
 80008bc:	e128      	b.n	8000b10 <__aeabi_fsub+0x3e0>
 80008be:	2280      	movs	r2, #128	@ 0x80
 80008c0:	2400      	movs	r4, #0
 80008c2:	20ff      	movs	r0, #255	@ 0xff
 80008c4:	03d2      	lsls	r2, r2, #15
 80008c6:	e78f      	b.n	80007e8 <__aeabi_fsub+0xb8>
 80008c8:	4663      	mov	r3, ip
 80008ca:	1a5f      	subs	r7, r3, r1
 80008cc:	017b      	lsls	r3, r7, #5
 80008ce:	d500      	bpl.n	80008d2 <__aeabi_fsub+0x1a2>
 80008d0:	e0fe      	b.n	8000ad0 <__aeabi_fsub+0x3a0>
 80008d2:	2f00      	cmp	r7, #0
 80008d4:	d000      	beq.n	80008d8 <__aeabi_fsub+0x1a8>
 80008d6:	e765      	b.n	80007a4 <__aeabi_fsub+0x74>
 80008d8:	2400      	movs	r4, #0
 80008da:	2000      	movs	r0, #0
 80008dc:	2200      	movs	r2, #0
 80008de:	e783      	b.n	80007e8 <__aeabi_fsub+0xb8>
 80008e0:	4663      	mov	r3, ip
 80008e2:	1a59      	subs	r1, r3, r1
 80008e4:	014b      	lsls	r3, r1, #5
 80008e6:	d400      	bmi.n	80008ea <__aeabi_fsub+0x1ba>
 80008e8:	e119      	b.n	8000b1e <__aeabi_fsub+0x3ee>
 80008ea:	018f      	lsls	r7, r1, #6
 80008ec:	09bf      	lsrs	r7, r7, #6
 80008ee:	0038      	movs	r0, r7
 80008f0:	f000 f9dc 	bl	8000cac <__clzsi2>
 80008f4:	003b      	movs	r3, r7
 80008f6:	3805      	subs	r0, #5
 80008f8:	4083      	lsls	r3, r0
 80008fa:	2501      	movs	r5, #1
 80008fc:	2220      	movs	r2, #32
 80008fe:	1b40      	subs	r0, r0, r5
 8000900:	3001      	adds	r0, #1
 8000902:	1a12      	subs	r2, r2, r0
 8000904:	0019      	movs	r1, r3
 8000906:	4093      	lsls	r3, r2
 8000908:	40c1      	lsrs	r1, r0
 800090a:	1e5a      	subs	r2, r3, #1
 800090c:	4193      	sbcs	r3, r2
 800090e:	4319      	orrs	r1, r3
 8000910:	468c      	mov	ip, r1
 8000912:	1e0b      	subs	r3, r1, #0
 8000914:	d0e1      	beq.n	80008da <__aeabi_fsub+0x1aa>
 8000916:	075b      	lsls	r3, r3, #29
 8000918:	d100      	bne.n	800091c <__aeabi_fsub+0x1ec>
 800091a:	e152      	b.n	8000bc2 <__aeabi_fsub+0x492>
 800091c:	230f      	movs	r3, #15
 800091e:	2500      	movs	r5, #0
 8000920:	400b      	ands	r3, r1
 8000922:	2b04      	cmp	r3, #4
 8000924:	d000      	beq.n	8000928 <__aeabi_fsub+0x1f8>
 8000926:	e752      	b.n	80007ce <__aeabi_fsub+0x9e>
 8000928:	2001      	movs	r0, #1
 800092a:	014a      	lsls	r2, r1, #5
 800092c:	d400      	bmi.n	8000930 <__aeabi_fsub+0x200>
 800092e:	e092      	b.n	8000a56 <__aeabi_fsub+0x326>
 8000930:	b2c0      	uxtb	r0, r0
 8000932:	4663      	mov	r3, ip
 8000934:	019a      	lsls	r2, r3, #6
 8000936:	0a52      	lsrs	r2, r2, #9
 8000938:	e756      	b.n	80007e8 <__aeabi_fsub+0xb8>
 800093a:	4663      	mov	r3, ip
 800093c:	075b      	lsls	r3, r3, #29
 800093e:	d005      	beq.n	800094c <__aeabi_fsub+0x21c>
 8000940:	230f      	movs	r3, #15
 8000942:	4662      	mov	r2, ip
 8000944:	4013      	ands	r3, r2
 8000946:	2b04      	cmp	r3, #4
 8000948:	d000      	beq.n	800094c <__aeabi_fsub+0x21c>
 800094a:	e740      	b.n	80007ce <__aeabi_fsub+0x9e>
 800094c:	002b      	movs	r3, r5
 800094e:	e765      	b.n	800081c <__aeabi_fsub+0xec>
 8000950:	0007      	movs	r7, r0
 8000952:	2f00      	cmp	r7, #0
 8000954:	d100      	bne.n	8000958 <__aeabi_fsub+0x228>
 8000956:	e745      	b.n	80007e4 <__aeabi_fsub+0xb4>
 8000958:	2280      	movs	r2, #128	@ 0x80
 800095a:	03d2      	lsls	r2, r2, #15
 800095c:	433a      	orrs	r2, r7
 800095e:	0252      	lsls	r2, r2, #9
 8000960:	20ff      	movs	r0, #255	@ 0xff
 8000962:	0a52      	lsrs	r2, r2, #9
 8000964:	e740      	b.n	80007e8 <__aeabi_fsub+0xb8>
 8000966:	2b00      	cmp	r3, #0
 8000968:	d179      	bne.n	8000a5e <__aeabi_fsub+0x32e>
 800096a:	22fe      	movs	r2, #254	@ 0xfe
 800096c:	1c6b      	adds	r3, r5, #1
 800096e:	421a      	tst	r2, r3
 8000970:	d1aa      	bne.n	80008c8 <__aeabi_fsub+0x198>
 8000972:	4663      	mov	r3, ip
 8000974:	2b00      	cmp	r3, #0
 8000976:	d100      	bne.n	800097a <__aeabi_fsub+0x24a>
 8000978:	e0f5      	b.n	8000b66 <__aeabi_fsub+0x436>
 800097a:	2900      	cmp	r1, #0
 800097c:	d100      	bne.n	8000980 <__aeabi_fsub+0x250>
 800097e:	e0d1      	b.n	8000b24 <__aeabi_fsub+0x3f4>
 8000980:	1a5f      	subs	r7, r3, r1
 8000982:	2380      	movs	r3, #128	@ 0x80
 8000984:	04db      	lsls	r3, r3, #19
 8000986:	421f      	tst	r7, r3
 8000988:	d100      	bne.n	800098c <__aeabi_fsub+0x25c>
 800098a:	e10e      	b.n	8000baa <__aeabi_fsub+0x47a>
 800098c:	4662      	mov	r2, ip
 800098e:	2401      	movs	r4, #1
 8000990:	1a8a      	subs	r2, r1, r2
 8000992:	4694      	mov	ip, r2
 8000994:	2000      	movs	r0, #0
 8000996:	4034      	ands	r4, r6
 8000998:	2a00      	cmp	r2, #0
 800099a:	d100      	bne.n	800099e <__aeabi_fsub+0x26e>
 800099c:	e724      	b.n	80007e8 <__aeabi_fsub+0xb8>
 800099e:	2001      	movs	r0, #1
 80009a0:	421a      	tst	r2, r3
 80009a2:	d1c6      	bne.n	8000932 <__aeabi_fsub+0x202>
 80009a4:	2300      	movs	r3, #0
 80009a6:	08d7      	lsrs	r7, r2, #3
 80009a8:	e73d      	b.n	8000826 <__aeabi_fsub+0xf6>
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d017      	beq.n	80009de <__aeabi_fsub+0x2ae>
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	d000      	beq.n	80009b4 <__aeabi_fsub+0x284>
 80009b2:	e0af      	b.n	8000b14 <__aeabi_fsub+0x3e4>
 80009b4:	23ff      	movs	r3, #255	@ 0xff
 80009b6:	4665      	mov	r5, ip
 80009b8:	2d00      	cmp	r5, #0
 80009ba:	d100      	bne.n	80009be <__aeabi_fsub+0x28e>
 80009bc:	e0ad      	b.n	8000b1a <__aeabi_fsub+0x3ea>
 80009be:	1e5e      	subs	r6, r3, #1
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fsub+0x296>
 80009c4:	e089      	b.n	8000ada <__aeabi_fsub+0x3aa>
 80009c6:	2bff      	cmp	r3, #255	@ 0xff
 80009c8:	d0c2      	beq.n	8000950 <__aeabi_fsub+0x220>
 80009ca:	2e1b      	cmp	r6, #27
 80009cc:	dc00      	bgt.n	80009d0 <__aeabi_fsub+0x2a0>
 80009ce:	e0ab      	b.n	8000b28 <__aeabi_fsub+0x3f8>
 80009d0:	1d4b      	adds	r3, r1, #5
 80009d2:	469c      	mov	ip, r3
 80009d4:	0013      	movs	r3, r2
 80009d6:	e721      	b.n	800081c <__aeabi_fsub+0xec>
 80009d8:	464b      	mov	r3, r9
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d170      	bne.n	8000ac0 <__aeabi_fsub+0x390>
 80009de:	22fe      	movs	r2, #254	@ 0xfe
 80009e0:	1c6b      	adds	r3, r5, #1
 80009e2:	421a      	tst	r2, r3
 80009e4:	d15e      	bne.n	8000aa4 <__aeabi_fsub+0x374>
 80009e6:	2d00      	cmp	r5, #0
 80009e8:	d000      	beq.n	80009ec <__aeabi_fsub+0x2bc>
 80009ea:	e0c3      	b.n	8000b74 <__aeabi_fsub+0x444>
 80009ec:	4663      	mov	r3, ip
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_fsub+0x2c4>
 80009f2:	e0d0      	b.n	8000b96 <__aeabi_fsub+0x466>
 80009f4:	2900      	cmp	r1, #0
 80009f6:	d100      	bne.n	80009fa <__aeabi_fsub+0x2ca>
 80009f8:	e094      	b.n	8000b24 <__aeabi_fsub+0x3f4>
 80009fa:	000a      	movs	r2, r1
 80009fc:	4462      	add	r2, ip
 80009fe:	0153      	lsls	r3, r2, #5
 8000a00:	d400      	bmi.n	8000a04 <__aeabi_fsub+0x2d4>
 8000a02:	e0d8      	b.n	8000bb6 <__aeabi_fsub+0x486>
 8000a04:	0192      	lsls	r2, r2, #6
 8000a06:	2001      	movs	r0, #1
 8000a08:	0a52      	lsrs	r2, r2, #9
 8000a0a:	e6ed      	b.n	80007e8 <__aeabi_fsub+0xb8>
 8000a0c:	0008      	movs	r0, r1
 8000a0e:	2220      	movs	r2, #32
 8000a10:	40d8      	lsrs	r0, r3
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	4099      	lsls	r1, r3
 8000a16:	000b      	movs	r3, r1
 8000a18:	1e5a      	subs	r2, r3, #1
 8000a1a:	4193      	sbcs	r3, r2
 8000a1c:	4303      	orrs	r3, r0
 8000a1e:	449c      	add	ip, r3
 8000a20:	4663      	mov	r3, ip
 8000a22:	015b      	lsls	r3, r3, #5
 8000a24:	d589      	bpl.n	800093a <__aeabi_fsub+0x20a>
 8000a26:	3501      	adds	r5, #1
 8000a28:	2dff      	cmp	r5, #255	@ 0xff
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_fsub+0x2fe>
 8000a2c:	e6da      	b.n	80007e4 <__aeabi_fsub+0xb4>
 8000a2e:	4662      	mov	r2, ip
 8000a30:	2301      	movs	r3, #1
 8000a32:	4919      	ldr	r1, [pc, #100]	@ (8000a98 <__aeabi_fsub+0x368>)
 8000a34:	4013      	ands	r3, r2
 8000a36:	0852      	lsrs	r2, r2, #1
 8000a38:	400a      	ands	r2, r1
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	0013      	movs	r3, r2
 8000a3e:	4694      	mov	ip, r2
 8000a40:	075b      	lsls	r3, r3, #29
 8000a42:	d004      	beq.n	8000a4e <__aeabi_fsub+0x31e>
 8000a44:	230f      	movs	r3, #15
 8000a46:	4013      	ands	r3, r2
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_fsub+0x31e>
 8000a4c:	e6bf      	b.n	80007ce <__aeabi_fsub+0x9e>
 8000a4e:	4663      	mov	r3, ip
 8000a50:	015b      	lsls	r3, r3, #5
 8000a52:	d500      	bpl.n	8000a56 <__aeabi_fsub+0x326>
 8000a54:	e6c2      	b.n	80007dc <__aeabi_fsub+0xac>
 8000a56:	4663      	mov	r3, ip
 8000a58:	08df      	lsrs	r7, r3, #3
 8000a5a:	002b      	movs	r3, r5
 8000a5c:	e6e3      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000a5e:	1b53      	subs	r3, r2, r5
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d100      	bne.n	8000a66 <__aeabi_fsub+0x336>
 8000a64:	e6f4      	b.n	8000850 <__aeabi_fsub+0x120>
 8000a66:	2080      	movs	r0, #128	@ 0x80
 8000a68:	4664      	mov	r4, ip
 8000a6a:	04c0      	lsls	r0, r0, #19
 8000a6c:	4304      	orrs	r4, r0
 8000a6e:	46a4      	mov	ip, r4
 8000a70:	0034      	movs	r4, r6
 8000a72:	2001      	movs	r0, #1
 8000a74:	2b1b      	cmp	r3, #27
 8000a76:	dc09      	bgt.n	8000a8c <__aeabi_fsub+0x35c>
 8000a78:	2520      	movs	r5, #32
 8000a7a:	4660      	mov	r0, ip
 8000a7c:	40d8      	lsrs	r0, r3
 8000a7e:	1aeb      	subs	r3, r5, r3
 8000a80:	4665      	mov	r5, ip
 8000a82:	409d      	lsls	r5, r3
 8000a84:	002b      	movs	r3, r5
 8000a86:	1e5d      	subs	r5, r3, #1
 8000a88:	41ab      	sbcs	r3, r5
 8000a8a:	4318      	orrs	r0, r3
 8000a8c:	1a0b      	subs	r3, r1, r0
 8000a8e:	469c      	mov	ip, r3
 8000a90:	0015      	movs	r5, r2
 8000a92:	e680      	b.n	8000796 <__aeabi_fsub+0x66>
 8000a94:	fbffffff 	.word	0xfbffffff
 8000a98:	7dffffff 	.word	0x7dffffff
 8000a9c:	22fe      	movs	r2, #254	@ 0xfe
 8000a9e:	1c6b      	adds	r3, r5, #1
 8000aa0:	4213      	tst	r3, r2
 8000aa2:	d0a3      	beq.n	80009ec <__aeabi_fsub+0x2bc>
 8000aa4:	2bff      	cmp	r3, #255	@ 0xff
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_fsub+0x37a>
 8000aa8:	e69c      	b.n	80007e4 <__aeabi_fsub+0xb4>
 8000aaa:	4461      	add	r1, ip
 8000aac:	0849      	lsrs	r1, r1, #1
 8000aae:	074a      	lsls	r2, r1, #29
 8000ab0:	d049      	beq.n	8000b46 <__aeabi_fsub+0x416>
 8000ab2:	220f      	movs	r2, #15
 8000ab4:	400a      	ands	r2, r1
 8000ab6:	2a04      	cmp	r2, #4
 8000ab8:	d045      	beq.n	8000b46 <__aeabi_fsub+0x416>
 8000aba:	1d0a      	adds	r2, r1, #4
 8000abc:	4694      	mov	ip, r2
 8000abe:	e6ad      	b.n	800081c <__aeabi_fsub+0xec>
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_fsub+0x396>
 8000ac4:	e776      	b.n	80009b4 <__aeabi_fsub+0x284>
 8000ac6:	e68d      	b.n	80007e4 <__aeabi_fsub+0xb4>
 8000ac8:	0034      	movs	r4, r6
 8000aca:	20ff      	movs	r0, #255	@ 0xff
 8000acc:	2200      	movs	r2, #0
 8000ace:	e68b      	b.n	80007e8 <__aeabi_fsub+0xb8>
 8000ad0:	4663      	mov	r3, ip
 8000ad2:	2401      	movs	r4, #1
 8000ad4:	1acf      	subs	r7, r1, r3
 8000ad6:	4034      	ands	r4, r6
 8000ad8:	e664      	b.n	80007a4 <__aeabi_fsub+0x74>
 8000ada:	4461      	add	r1, ip
 8000adc:	014b      	lsls	r3, r1, #5
 8000ade:	d56d      	bpl.n	8000bbc <__aeabi_fsub+0x48c>
 8000ae0:	0848      	lsrs	r0, r1, #1
 8000ae2:	4944      	ldr	r1, [pc, #272]	@ (8000bf4 <__aeabi_fsub+0x4c4>)
 8000ae4:	4001      	ands	r1, r0
 8000ae6:	0743      	lsls	r3, r0, #29
 8000ae8:	d02c      	beq.n	8000b44 <__aeabi_fsub+0x414>
 8000aea:	230f      	movs	r3, #15
 8000aec:	4003      	ands	r3, r0
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	d028      	beq.n	8000b44 <__aeabi_fsub+0x414>
 8000af2:	1d0b      	adds	r3, r1, #4
 8000af4:	469c      	mov	ip, r3
 8000af6:	2302      	movs	r3, #2
 8000af8:	e690      	b.n	800081c <__aeabi_fsub+0xec>
 8000afa:	2900      	cmp	r1, #0
 8000afc:	d100      	bne.n	8000b00 <__aeabi_fsub+0x3d0>
 8000afe:	e72b      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b00:	2380      	movs	r3, #128	@ 0x80
 8000b02:	03db      	lsls	r3, r3, #15
 8000b04:	429f      	cmp	r7, r3
 8000b06:	d200      	bcs.n	8000b0a <__aeabi_fsub+0x3da>
 8000b08:	e726      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b0a:	4298      	cmp	r0, r3
 8000b0c:	d300      	bcc.n	8000b10 <__aeabi_fsub+0x3e0>
 8000b0e:	e723      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b10:	2401      	movs	r4, #1
 8000b12:	4034      	ands	r4, r6
 8000b14:	0007      	movs	r7, r0
 8000b16:	e71f      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b18:	0034      	movs	r4, r6
 8000b1a:	468c      	mov	ip, r1
 8000b1c:	e67e      	b.n	800081c <__aeabi_fsub+0xec>
 8000b1e:	2301      	movs	r3, #1
 8000b20:	08cf      	lsrs	r7, r1, #3
 8000b22:	e680      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000b24:	2300      	movs	r3, #0
 8000b26:	e67e      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000b28:	2020      	movs	r0, #32
 8000b2a:	4665      	mov	r5, ip
 8000b2c:	1b80      	subs	r0, r0, r6
 8000b2e:	4085      	lsls	r5, r0
 8000b30:	4663      	mov	r3, ip
 8000b32:	0028      	movs	r0, r5
 8000b34:	40f3      	lsrs	r3, r6
 8000b36:	1e45      	subs	r5, r0, #1
 8000b38:	41a8      	sbcs	r0, r5
 8000b3a:	4303      	orrs	r3, r0
 8000b3c:	469c      	mov	ip, r3
 8000b3e:	0015      	movs	r5, r2
 8000b40:	448c      	add	ip, r1
 8000b42:	e76d      	b.n	8000a20 <__aeabi_fsub+0x2f0>
 8000b44:	2302      	movs	r3, #2
 8000b46:	08cf      	lsrs	r7, r1, #3
 8000b48:	e66d      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000b4a:	1b0f      	subs	r7, r1, r4
 8000b4c:	017b      	lsls	r3, r7, #5
 8000b4e:	d528      	bpl.n	8000ba2 <__aeabi_fsub+0x472>
 8000b50:	01bf      	lsls	r7, r7, #6
 8000b52:	09bf      	lsrs	r7, r7, #6
 8000b54:	0038      	movs	r0, r7
 8000b56:	f000 f8a9 	bl	8000cac <__clzsi2>
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	3805      	subs	r0, #5
 8000b5e:	4083      	lsls	r3, r0
 8000b60:	0034      	movs	r4, r6
 8000b62:	2501      	movs	r5, #1
 8000b64:	e6ca      	b.n	80008fc <__aeabi_fsub+0x1cc>
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d100      	bne.n	8000b6c <__aeabi_fsub+0x43c>
 8000b6a:	e6b5      	b.n	80008d8 <__aeabi_fsub+0x1a8>
 8000b6c:	2401      	movs	r4, #1
 8000b6e:	0007      	movs	r7, r0
 8000b70:	4034      	ands	r4, r6
 8000b72:	e658      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000b74:	4663      	mov	r3, ip
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d100      	bne.n	8000b7c <__aeabi_fsub+0x44c>
 8000b7a:	e6e9      	b.n	8000950 <__aeabi_fsub+0x220>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_fsub+0x452>
 8000b80:	e6ea      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b82:	2380      	movs	r3, #128	@ 0x80
 8000b84:	03db      	lsls	r3, r3, #15
 8000b86:	429f      	cmp	r7, r3
 8000b88:	d200      	bcs.n	8000b8c <__aeabi_fsub+0x45c>
 8000b8a:	e6e5      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b8c:	4298      	cmp	r0, r3
 8000b8e:	d300      	bcc.n	8000b92 <__aeabi_fsub+0x462>
 8000b90:	e6e2      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b92:	0007      	movs	r7, r0
 8000b94:	e6e0      	b.n	8000958 <__aeabi_fsub+0x228>
 8000b96:	2900      	cmp	r1, #0
 8000b98:	d100      	bne.n	8000b9c <__aeabi_fsub+0x46c>
 8000b9a:	e69e      	b.n	80008da <__aeabi_fsub+0x1aa>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	08cf      	lsrs	r7, r1, #3
 8000ba0:	e641      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000ba2:	0034      	movs	r4, r6
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	08ff      	lsrs	r7, r7, #3
 8000ba8:	e63d      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000baa:	2f00      	cmp	r7, #0
 8000bac:	d100      	bne.n	8000bb0 <__aeabi_fsub+0x480>
 8000bae:	e693      	b.n	80008d8 <__aeabi_fsub+0x1a8>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	08ff      	lsrs	r7, r7, #3
 8000bb4:	e637      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	08d7      	lsrs	r7, r2, #3
 8000bba:	e634      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	08cf      	lsrs	r7, r1, #3
 8000bc0:	e631      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000bc2:	2280      	movs	r2, #128	@ 0x80
 8000bc4:	000b      	movs	r3, r1
 8000bc6:	04d2      	lsls	r2, r2, #19
 8000bc8:	2001      	movs	r0, #1
 8000bca:	4013      	ands	r3, r2
 8000bcc:	4211      	tst	r1, r2
 8000bce:	d000      	beq.n	8000bd2 <__aeabi_fsub+0x4a2>
 8000bd0:	e6ae      	b.n	8000930 <__aeabi_fsub+0x200>
 8000bd2:	08cf      	lsrs	r7, r1, #3
 8000bd4:	e627      	b.n	8000826 <__aeabi_fsub+0xf6>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_fsub+0x4ac>
 8000bda:	e75f      	b.n	8000a9c <__aeabi_fsub+0x36c>
 8000bdc:	1b56      	subs	r6, r2, r5
 8000bde:	2d00      	cmp	r5, #0
 8000be0:	d101      	bne.n	8000be6 <__aeabi_fsub+0x4b6>
 8000be2:	0033      	movs	r3, r6
 8000be4:	e6e7      	b.n	80009b6 <__aeabi_fsub+0x286>
 8000be6:	2380      	movs	r3, #128	@ 0x80
 8000be8:	4660      	mov	r0, ip
 8000bea:	04db      	lsls	r3, r3, #19
 8000bec:	4318      	orrs	r0, r3
 8000bee:	4684      	mov	ip, r0
 8000bf0:	e6eb      	b.n	80009ca <__aeabi_fsub+0x29a>
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	7dffffff 	.word	0x7dffffff

08000bf8 <__aeabi_f2iz>:
 8000bf8:	0241      	lsls	r1, r0, #9
 8000bfa:	0042      	lsls	r2, r0, #1
 8000bfc:	0fc3      	lsrs	r3, r0, #31
 8000bfe:	0a49      	lsrs	r1, r1, #9
 8000c00:	2000      	movs	r0, #0
 8000c02:	0e12      	lsrs	r2, r2, #24
 8000c04:	2a7e      	cmp	r2, #126	@ 0x7e
 8000c06:	dd03      	ble.n	8000c10 <__aeabi_f2iz+0x18>
 8000c08:	2a9d      	cmp	r2, #157	@ 0x9d
 8000c0a:	dd02      	ble.n	8000c12 <__aeabi_f2iz+0x1a>
 8000c0c:	4a09      	ldr	r2, [pc, #36]	@ (8000c34 <__aeabi_f2iz+0x3c>)
 8000c0e:	1898      	adds	r0, r3, r2
 8000c10:	4770      	bx	lr
 8000c12:	2080      	movs	r0, #128	@ 0x80
 8000c14:	0400      	lsls	r0, r0, #16
 8000c16:	4301      	orrs	r1, r0
 8000c18:	2a95      	cmp	r2, #149	@ 0x95
 8000c1a:	dc07      	bgt.n	8000c2c <__aeabi_f2iz+0x34>
 8000c1c:	2096      	movs	r0, #150	@ 0x96
 8000c1e:	1a82      	subs	r2, r0, r2
 8000c20:	40d1      	lsrs	r1, r2
 8000c22:	4248      	negs	r0, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1f3      	bne.n	8000c10 <__aeabi_f2iz+0x18>
 8000c28:	0008      	movs	r0, r1
 8000c2a:	e7f1      	b.n	8000c10 <__aeabi_f2iz+0x18>
 8000c2c:	3a96      	subs	r2, #150	@ 0x96
 8000c2e:	4091      	lsls	r1, r2
 8000c30:	e7f7      	b.n	8000c22 <__aeabi_f2iz+0x2a>
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	7fffffff 	.word	0x7fffffff

08000c38 <__aeabi_cfrcmple>:
 8000c38:	4684      	mov	ip, r0
 8000c3a:	0008      	movs	r0, r1
 8000c3c:	4661      	mov	r1, ip
 8000c3e:	e7ff      	b.n	8000c40 <__aeabi_cfcmpeq>

08000c40 <__aeabi_cfcmpeq>:
 8000c40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000c42:	f000 f8c1 	bl	8000dc8 <__lesf2>
 8000c46:	2800      	cmp	r0, #0
 8000c48:	d401      	bmi.n	8000c4e <__aeabi_cfcmpeq+0xe>
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	42c8      	cmn	r0, r1
 8000c4e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000c50 <__aeabi_fcmpeq>:
 8000c50:	b510      	push	{r4, lr}
 8000c52:	f000 f849 	bl	8000ce8 <__eqsf2>
 8000c56:	4240      	negs	r0, r0
 8000c58:	3001      	adds	r0, #1
 8000c5a:	bd10      	pop	{r4, pc}

08000c5c <__aeabi_fcmplt>:
 8000c5c:	b510      	push	{r4, lr}
 8000c5e:	f000 f8b3 	bl	8000dc8 <__lesf2>
 8000c62:	2800      	cmp	r0, #0
 8000c64:	db01      	blt.n	8000c6a <__aeabi_fcmplt+0xe>
 8000c66:	2000      	movs	r0, #0
 8000c68:	bd10      	pop	{r4, pc}
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	bd10      	pop	{r4, pc}
 8000c6e:	46c0      	nop			@ (mov r8, r8)

08000c70 <__aeabi_fcmple>:
 8000c70:	b510      	push	{r4, lr}
 8000c72:	f000 f8a9 	bl	8000dc8 <__lesf2>
 8000c76:	2800      	cmp	r0, #0
 8000c78:	dd01      	ble.n	8000c7e <__aeabi_fcmple+0xe>
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	bd10      	pop	{r4, pc}
 8000c7e:	2001      	movs	r0, #1
 8000c80:	bd10      	pop	{r4, pc}
 8000c82:	46c0      	nop			@ (mov r8, r8)

08000c84 <__aeabi_fcmpgt>:
 8000c84:	b510      	push	{r4, lr}
 8000c86:	f000 f857 	bl	8000d38 <__gesf2>
 8000c8a:	2800      	cmp	r0, #0
 8000c8c:	dc01      	bgt.n	8000c92 <__aeabi_fcmpgt+0xe>
 8000c8e:	2000      	movs	r0, #0
 8000c90:	bd10      	pop	{r4, pc}
 8000c92:	2001      	movs	r0, #1
 8000c94:	bd10      	pop	{r4, pc}
 8000c96:	46c0      	nop			@ (mov r8, r8)

08000c98 <__aeabi_fcmpge>:
 8000c98:	b510      	push	{r4, lr}
 8000c9a:	f000 f84d 	bl	8000d38 <__gesf2>
 8000c9e:	2800      	cmp	r0, #0
 8000ca0:	da01      	bge.n	8000ca6 <__aeabi_fcmpge+0xe>
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	bd10      	pop	{r4, pc}
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	bd10      	pop	{r4, pc}
 8000caa:	46c0      	nop			@ (mov r8, r8)

08000cac <__clzsi2>:
 8000cac:	211c      	movs	r1, #28
 8000cae:	2301      	movs	r3, #1
 8000cb0:	041b      	lsls	r3, r3, #16
 8000cb2:	4298      	cmp	r0, r3
 8000cb4:	d301      	bcc.n	8000cba <__clzsi2+0xe>
 8000cb6:	0c00      	lsrs	r0, r0, #16
 8000cb8:	3910      	subs	r1, #16
 8000cba:	0a1b      	lsrs	r3, r3, #8
 8000cbc:	4298      	cmp	r0, r3
 8000cbe:	d301      	bcc.n	8000cc4 <__clzsi2+0x18>
 8000cc0:	0a00      	lsrs	r0, r0, #8
 8000cc2:	3908      	subs	r1, #8
 8000cc4:	091b      	lsrs	r3, r3, #4
 8000cc6:	4298      	cmp	r0, r3
 8000cc8:	d301      	bcc.n	8000cce <__clzsi2+0x22>
 8000cca:	0900      	lsrs	r0, r0, #4
 8000ccc:	3904      	subs	r1, #4
 8000cce:	a202      	add	r2, pc, #8	@ (adr r2, 8000cd8 <__clzsi2+0x2c>)
 8000cd0:	5c10      	ldrb	r0, [r2, r0]
 8000cd2:	1840      	adds	r0, r0, r1
 8000cd4:	4770      	bx	lr
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	02020304 	.word	0x02020304
 8000cdc:	01010101 	.word	0x01010101
	...

08000ce8 <__eqsf2>:
 8000ce8:	b570      	push	{r4, r5, r6, lr}
 8000cea:	0042      	lsls	r2, r0, #1
 8000cec:	024e      	lsls	r6, r1, #9
 8000cee:	004c      	lsls	r4, r1, #1
 8000cf0:	0245      	lsls	r5, r0, #9
 8000cf2:	0a6d      	lsrs	r5, r5, #9
 8000cf4:	0e12      	lsrs	r2, r2, #24
 8000cf6:	0fc3      	lsrs	r3, r0, #31
 8000cf8:	0a76      	lsrs	r6, r6, #9
 8000cfa:	0e24      	lsrs	r4, r4, #24
 8000cfc:	0fc9      	lsrs	r1, r1, #31
 8000cfe:	2aff      	cmp	r2, #255	@ 0xff
 8000d00:	d010      	beq.n	8000d24 <__eqsf2+0x3c>
 8000d02:	2cff      	cmp	r4, #255	@ 0xff
 8000d04:	d00c      	beq.n	8000d20 <__eqsf2+0x38>
 8000d06:	2001      	movs	r0, #1
 8000d08:	42a2      	cmp	r2, r4
 8000d0a:	d10a      	bne.n	8000d22 <__eqsf2+0x3a>
 8000d0c:	42b5      	cmp	r5, r6
 8000d0e:	d108      	bne.n	8000d22 <__eqsf2+0x3a>
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d00f      	beq.n	8000d34 <__eqsf2+0x4c>
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	d104      	bne.n	8000d22 <__eqsf2+0x3a>
 8000d18:	0028      	movs	r0, r5
 8000d1a:	1e43      	subs	r3, r0, #1
 8000d1c:	4198      	sbcs	r0, r3
 8000d1e:	e000      	b.n	8000d22 <__eqsf2+0x3a>
 8000d20:	2001      	movs	r0, #1
 8000d22:	bd70      	pop	{r4, r5, r6, pc}
 8000d24:	2001      	movs	r0, #1
 8000d26:	2cff      	cmp	r4, #255	@ 0xff
 8000d28:	d1fb      	bne.n	8000d22 <__eqsf2+0x3a>
 8000d2a:	4335      	orrs	r5, r6
 8000d2c:	d1f9      	bne.n	8000d22 <__eqsf2+0x3a>
 8000d2e:	404b      	eors	r3, r1
 8000d30:	0018      	movs	r0, r3
 8000d32:	e7f6      	b.n	8000d22 <__eqsf2+0x3a>
 8000d34:	2000      	movs	r0, #0
 8000d36:	e7f4      	b.n	8000d22 <__eqsf2+0x3a>

08000d38 <__gesf2>:
 8000d38:	b530      	push	{r4, r5, lr}
 8000d3a:	0042      	lsls	r2, r0, #1
 8000d3c:	0244      	lsls	r4, r0, #9
 8000d3e:	024d      	lsls	r5, r1, #9
 8000d40:	0fc3      	lsrs	r3, r0, #31
 8000d42:	0048      	lsls	r0, r1, #1
 8000d44:	0a64      	lsrs	r4, r4, #9
 8000d46:	0e12      	lsrs	r2, r2, #24
 8000d48:	0a6d      	lsrs	r5, r5, #9
 8000d4a:	0e00      	lsrs	r0, r0, #24
 8000d4c:	0fc9      	lsrs	r1, r1, #31
 8000d4e:	2aff      	cmp	r2, #255	@ 0xff
 8000d50:	d018      	beq.n	8000d84 <__gesf2+0x4c>
 8000d52:	28ff      	cmp	r0, #255	@ 0xff
 8000d54:	d00a      	beq.n	8000d6c <__gesf2+0x34>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d11e      	bne.n	8000d98 <__gesf2+0x60>
 8000d5a:	2800      	cmp	r0, #0
 8000d5c:	d10a      	bne.n	8000d74 <__gesf2+0x3c>
 8000d5e:	2d00      	cmp	r5, #0
 8000d60:	d029      	beq.n	8000db6 <__gesf2+0x7e>
 8000d62:	2c00      	cmp	r4, #0
 8000d64:	d12d      	bne.n	8000dc2 <__gesf2+0x8a>
 8000d66:	0048      	lsls	r0, r1, #1
 8000d68:	3801      	subs	r0, #1
 8000d6a:	bd30      	pop	{r4, r5, pc}
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d125      	bne.n	8000dbc <__gesf2+0x84>
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	d101      	bne.n	8000d78 <__gesf2+0x40>
 8000d74:	2c00      	cmp	r4, #0
 8000d76:	d0f6      	beq.n	8000d66 <__gesf2+0x2e>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d019      	beq.n	8000db0 <__gesf2+0x78>
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	425b      	negs	r3, r3
 8000d80:	4318      	orrs	r0, r3
 8000d82:	e7f2      	b.n	8000d6a <__gesf2+0x32>
 8000d84:	2c00      	cmp	r4, #0
 8000d86:	d119      	bne.n	8000dbc <__gesf2+0x84>
 8000d88:	28ff      	cmp	r0, #255	@ 0xff
 8000d8a:	d1f7      	bne.n	8000d7c <__gesf2+0x44>
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d115      	bne.n	8000dbc <__gesf2+0x84>
 8000d90:	2000      	movs	r0, #0
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d1f2      	bne.n	8000d7c <__gesf2+0x44>
 8000d96:	e7e8      	b.n	8000d6a <__gesf2+0x32>
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	d0ef      	beq.n	8000d7c <__gesf2+0x44>
 8000d9c:	428b      	cmp	r3, r1
 8000d9e:	d1ed      	bne.n	8000d7c <__gesf2+0x44>
 8000da0:	4282      	cmp	r2, r0
 8000da2:	dceb      	bgt.n	8000d7c <__gesf2+0x44>
 8000da4:	db04      	blt.n	8000db0 <__gesf2+0x78>
 8000da6:	42ac      	cmp	r4, r5
 8000da8:	d8e8      	bhi.n	8000d7c <__gesf2+0x44>
 8000daa:	2000      	movs	r0, #0
 8000dac:	42ac      	cmp	r4, r5
 8000dae:	d2dc      	bcs.n	8000d6a <__gesf2+0x32>
 8000db0:	0058      	lsls	r0, r3, #1
 8000db2:	3801      	subs	r0, #1
 8000db4:	e7d9      	b.n	8000d6a <__gesf2+0x32>
 8000db6:	2c00      	cmp	r4, #0
 8000db8:	d0d7      	beq.n	8000d6a <__gesf2+0x32>
 8000dba:	e7df      	b.n	8000d7c <__gesf2+0x44>
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	e7d3      	b.n	8000d6a <__gesf2+0x32>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d1da      	bne.n	8000d7c <__gesf2+0x44>
 8000dc6:	e7ee      	b.n	8000da6 <__gesf2+0x6e>

08000dc8 <__lesf2>:
 8000dc8:	b530      	push	{r4, r5, lr}
 8000dca:	0042      	lsls	r2, r0, #1
 8000dcc:	0244      	lsls	r4, r0, #9
 8000dce:	024d      	lsls	r5, r1, #9
 8000dd0:	0fc3      	lsrs	r3, r0, #31
 8000dd2:	0048      	lsls	r0, r1, #1
 8000dd4:	0a64      	lsrs	r4, r4, #9
 8000dd6:	0e12      	lsrs	r2, r2, #24
 8000dd8:	0a6d      	lsrs	r5, r5, #9
 8000dda:	0e00      	lsrs	r0, r0, #24
 8000ddc:	0fc9      	lsrs	r1, r1, #31
 8000dde:	2aff      	cmp	r2, #255	@ 0xff
 8000de0:	d017      	beq.n	8000e12 <__lesf2+0x4a>
 8000de2:	28ff      	cmp	r0, #255	@ 0xff
 8000de4:	d00a      	beq.n	8000dfc <__lesf2+0x34>
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d11b      	bne.n	8000e22 <__lesf2+0x5a>
 8000dea:	2800      	cmp	r0, #0
 8000dec:	d10a      	bne.n	8000e04 <__lesf2+0x3c>
 8000dee:	2d00      	cmp	r5, #0
 8000df0:	d01d      	beq.n	8000e2e <__lesf2+0x66>
 8000df2:	2c00      	cmp	r4, #0
 8000df4:	d12d      	bne.n	8000e52 <__lesf2+0x8a>
 8000df6:	0048      	lsls	r0, r1, #1
 8000df8:	3801      	subs	r0, #1
 8000dfa:	e011      	b.n	8000e20 <__lesf2+0x58>
 8000dfc:	2d00      	cmp	r5, #0
 8000dfe:	d10e      	bne.n	8000e1e <__lesf2+0x56>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	d101      	bne.n	8000e08 <__lesf2+0x40>
 8000e04:	2c00      	cmp	r4, #0
 8000e06:	d0f6      	beq.n	8000df6 <__lesf2+0x2e>
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d10c      	bne.n	8000e26 <__lesf2+0x5e>
 8000e0c:	0058      	lsls	r0, r3, #1
 8000e0e:	3801      	subs	r0, #1
 8000e10:	e006      	b.n	8000e20 <__lesf2+0x58>
 8000e12:	2c00      	cmp	r4, #0
 8000e14:	d103      	bne.n	8000e1e <__lesf2+0x56>
 8000e16:	28ff      	cmp	r0, #255	@ 0xff
 8000e18:	d105      	bne.n	8000e26 <__lesf2+0x5e>
 8000e1a:	2d00      	cmp	r5, #0
 8000e1c:	d015      	beq.n	8000e4a <__lesf2+0x82>
 8000e1e:	2002      	movs	r0, #2
 8000e20:	bd30      	pop	{r4, r5, pc}
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d106      	bne.n	8000e34 <__lesf2+0x6c>
 8000e26:	2001      	movs	r0, #1
 8000e28:	425b      	negs	r3, r3
 8000e2a:	4318      	orrs	r0, r3
 8000e2c:	e7f8      	b.n	8000e20 <__lesf2+0x58>
 8000e2e:	2c00      	cmp	r4, #0
 8000e30:	d0f6      	beq.n	8000e20 <__lesf2+0x58>
 8000e32:	e7f8      	b.n	8000e26 <__lesf2+0x5e>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d1f6      	bne.n	8000e26 <__lesf2+0x5e>
 8000e38:	4282      	cmp	r2, r0
 8000e3a:	dcf4      	bgt.n	8000e26 <__lesf2+0x5e>
 8000e3c:	dbe6      	blt.n	8000e0c <__lesf2+0x44>
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	d8f1      	bhi.n	8000e26 <__lesf2+0x5e>
 8000e42:	2000      	movs	r0, #0
 8000e44:	42ac      	cmp	r4, r5
 8000e46:	d2eb      	bcs.n	8000e20 <__lesf2+0x58>
 8000e48:	e7e0      	b.n	8000e0c <__lesf2+0x44>
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d1ea      	bne.n	8000e26 <__lesf2+0x5e>
 8000e50:	e7e6      	b.n	8000e20 <__lesf2+0x58>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d1e7      	bne.n	8000e26 <__lesf2+0x5e>
 8000e56:	e7f2      	b.n	8000e3e <__lesf2+0x76>

08000e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5c:	f000 fdba 	bl	80019d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e60:	f000 f834 	bl	8000ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e64:	f000 f8ec 	bl	8001040 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e68:	f000 f8ba 	bl	8000fe0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000e6c:	f000 f886 	bl	8000f7c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, UART2_Buffer, 1);
 8000e70:	4912      	ldr	r1, [pc, #72]	@ (8000ebc <main+0x64>)
 8000e72:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <main+0x68>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	0018      	movs	r0, r3
 8000e78:	f002 f80f 	bl	8002e9a <HAL_UART_Receive_IT>
  TTY_Init();
 8000e7c:	f000 fc26 	bl	80016cc <TTY_Init>
  HAL_UART_Transmit(&huart2, rdyMSG, 3, 20);
 8000e80:	4910      	ldr	r1, [pc, #64]	@ (8000ec4 <main+0x6c>)
 8000e82:	480f      	ldr	r0, [pc, #60]	@ (8000ec0 <main+0x68>)
 8000e84:	2314      	movs	r3, #20
 8000e86:	2203      	movs	r2, #3
 8000e88:	f001 ff68 	bl	8002d5c <HAL_UART_Transmit>
  setLoopback(1);
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f000 fcf9 	bl	8001884 <setLoopback>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (lastStatus != HAL_TIMEOUT){
 8000e92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <main+0x70>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d00b      	beq.n	8000eb2 <main+0x5a>
		if (UART2_Buffer[0] != '\0'){
 8000e9a:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <main+0x64>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d007      	beq.n	8000eb2 <main+0x5a>
			TTY_WriteKey(UART2_Buffer[0]);
 8000ea2:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <main+0x64>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f000 fc16 	bl	80016d8 <TTY_WriteKey>
			UART2_Buffer[0] = '\0';
 8000eac:	4b03      	ldr	r3, [pc, #12]	@ (8000ebc <main+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_Delay(1);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f000 fdf2 	bl	8001a9c <HAL_Delay>
	if (lastStatus != HAL_TIMEOUT){
 8000eb8:	e7eb      	b.n	8000e92 <main+0x3a>
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	20000194 	.word	0x20000194
 8000ec0:	2000010c 	.word	0x2000010c
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000195 	.word	0x20000195

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b099      	sub	sp, #100	@ 0x64
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	242c      	movs	r4, #44	@ 0x2c
 8000ed4:	193b      	adds	r3, r7, r4
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	2334      	movs	r3, #52	@ 0x34
 8000eda:	001a      	movs	r2, r3
 8000edc:	2100      	movs	r1, #0
 8000ede:	f003 fa31 	bl	8004344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee2:	231c      	movs	r3, #28
 8000ee4:	18fb      	adds	r3, r7, r3
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	2310      	movs	r3, #16
 8000eea:	001a      	movs	r2, r3
 8000eec:	2100      	movs	r1, #0
 8000eee:	f003 fa29 	bl	8004344 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	2318      	movs	r3, #24
 8000ef8:	001a      	movs	r2, r3
 8000efa:	2100      	movs	r1, #0
 8000efc:	f003 fa22 	bl	8004344 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f00:	0021      	movs	r1, r4
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	2202      	movs	r2, #2
 8000f06:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	2210      	movs	r2, #16
 8000f12:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2200      	movs	r2, #0
 8000f18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f001 f8e9 	bl	80020f4 <HAL_RCC_OscConfig>
 8000f22:	1e03      	subs	r3, r0, #0
 8000f24:	d001      	beq.n	8000f2a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000f26:	f000 f939 	bl	800119c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2a:	211c      	movs	r1, #28
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	2207      	movs	r2, #7
 8000f30:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	2100      	movs	r1, #0
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f001 fc59 	bl	8002800 <HAL_RCC_ClockConfig>
 8000f4e:	1e03      	subs	r3, r0, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000f52:	f000 f923 	bl	800119c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2201      	movs	r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	0018      	movs	r0, r3
 8000f66:	f001 fdb7 	bl	8002ad8 <HAL_RCCEx_PeriphCLKConfig>
 8000f6a:	1e03      	subs	r3, r0, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f6e:	f000 f915 	bl	800119c <Error_Handler>
  }
}
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b019      	add	sp, #100	@ 0x64
 8000f78:	bd90      	pop	{r4, r7, pc}
	...

08000f7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f80:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000f82:	4a16      	ldr	r2, [pc, #88]	@ (8000fdc <MX_USART1_UART_Init+0x60>)
 8000f84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f86:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000f88:	2296      	movs	r2, #150	@ 0x96
 8000f8a:	0192      	lsls	r2, r2, #6
 8000f8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8e:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f94:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000f9c:	2280      	movs	r2, #128	@ 0x80
 8000f9e:	00d2      	lsls	r2, r2, #3
 8000fa0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000fa4:	220c      	movs	r2, #12
 8000fa6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fae:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fba:	4b07      	ldr	r3, [pc, #28]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fc0:	4b05      	ldr	r3, [pc, #20]	@ (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f001 fe76 	bl	8002cb4 <HAL_UART_Init>
 8000fc8:	1e03      	subs	r3, r0, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000fcc:	f000 f8e6 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fd0:	46c0      	nop			@ (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	20000084 	.word	0x20000084
 8000fdc:	40013800 	.word	0x40013800

08000fe0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 8000fe6:	4a15      	ldr	r2, [pc, #84]	@ (800103c <MX_USART2_UART_Init+0x5c>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000fea:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 8000fec:	2296      	movs	r2, #150	@ 0x96
 8000fee:	0212      	lsls	r2, r2, #8
 8000ff0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 8001006:	220c      	movs	r2, #12
 8001008:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001010:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 800101e:	2200      	movs	r2, #0
 8001020:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001022:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 8001024:	0018      	movs	r0, r3
 8001026:	f001 fe45 	bl	8002cb4 <HAL_UART_Init>
 800102a:	1e03      	subs	r3, r0, #0
 800102c:	d001      	beq.n	8001032 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800102e:	f000 f8b5 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001032:	46c0      	nop			@ (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000010c 	.word	0x2000010c
 800103c:	40004400 	.word	0x40004400

08001040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b089      	sub	sp, #36	@ 0x24
 8001044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	240c      	movs	r4, #12
 8001048:	193b      	adds	r3, r7, r4
 800104a:	0018      	movs	r0, r3
 800104c:	2314      	movs	r3, #20
 800104e:	001a      	movs	r2, r3
 8001050:	2100      	movs	r1, #0
 8001052:	f003 f977 	bl	8004344 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001056:	4b43      	ldr	r3, [pc, #268]	@ (8001164 <MX_GPIO_Init+0x124>)
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	4b42      	ldr	r3, [pc, #264]	@ (8001164 <MX_GPIO_Init+0x124>)
 800105c:	2180      	movs	r1, #128	@ 0x80
 800105e:	03c9      	lsls	r1, r1, #15
 8001060:	430a      	orrs	r2, r1
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	4b3f      	ldr	r3, [pc, #252]	@ (8001164 <MX_GPIO_Init+0x124>)
 8001066:	695a      	ldr	r2, [r3, #20]
 8001068:	2380      	movs	r3, #128	@ 0x80
 800106a:	03db      	lsls	r3, r3, #15
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b3c      	ldr	r3, [pc, #240]	@ (8001164 <MX_GPIO_Init+0x124>)
 8001074:	695a      	ldr	r2, [r3, #20]
 8001076:	4b3b      	ldr	r3, [pc, #236]	@ (8001164 <MX_GPIO_Init+0x124>)
 8001078:	2180      	movs	r1, #128	@ 0x80
 800107a:	0289      	lsls	r1, r1, #10
 800107c:	430a      	orrs	r2, r1
 800107e:	615a      	str	r2, [r3, #20]
 8001080:	4b38      	ldr	r3, [pc, #224]	@ (8001164 <MX_GPIO_Init+0x124>)
 8001082:	695a      	ldr	r2, [r3, #20]
 8001084:	2380      	movs	r3, #128	@ 0x80
 8001086:	029b      	lsls	r3, r3, #10
 8001088:	4013      	ands	r3, r2
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	4b35      	ldr	r3, [pc, #212]	@ (8001164 <MX_GPIO_Init+0x124>)
 8001090:	695a      	ldr	r2, [r3, #20]
 8001092:	4b34      	ldr	r3, [pc, #208]	@ (8001164 <MX_GPIO_Init+0x124>)
 8001094:	2180      	movs	r1, #128	@ 0x80
 8001096:	02c9      	lsls	r1, r1, #11
 8001098:	430a      	orrs	r2, r1
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	4b31      	ldr	r3, [pc, #196]	@ (8001164 <MX_GPIO_Init+0x124>)
 800109e:	695a      	ldr	r2, [r3, #20]
 80010a0:	2380      	movs	r3, #128	@ 0x80
 80010a2:	02db      	lsls	r3, r3, #11
 80010a4:	4013      	ands	r3, r2
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_MLOCAL_Pin|LED_MSERIAL_Pin|LED_BSY_Pin|TTY_SEND_Pin
 80010aa:	2390      	movs	r3, #144	@ 0x90
 80010ac:	05db      	lsls	r3, r3, #23
 80010ae:	2200      	movs	r2, #0
 80010b0:	213b      	movs	r1, #59	@ 0x3b
 80010b2:	0018      	movs	r0, r3
 80010b4:	f000 ffda 	bl	800206c <HAL_GPIO_WritePin>
                          |TTY_READERR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_MLOCAL_Pin LED_MSERIAL_Pin LED_BSY_Pin TTY_READERR_Pin */
  GPIO_InitStruct.Pin = LED_MLOCAL_Pin|LED_MSERIAL_Pin|LED_BSY_Pin|TTY_READERR_Pin;
 80010b8:	193b      	adds	r3, r7, r4
 80010ba:	222b      	movs	r2, #43	@ 0x2b
 80010bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	193b      	adds	r3, r7, r4
 80010c0:	2201      	movs	r2, #1
 80010c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	193b      	adds	r3, r7, r4
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	193b      	adds	r3, r7, r4
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	193a      	adds	r2, r7, r4
 80010d2:	2390      	movs	r3, #144	@ 0x90
 80010d4:	05db      	lsls	r3, r3, #23
 80010d6:	0011      	movs	r1, r2
 80010d8:	0018      	movs	r0, r3
 80010da:	f000 fe5f 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : TTY_SEND_Pin */
  GPIO_InitStruct.Pin = TTY_SEND_Pin;
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	2210      	movs	r2, #16
 80010e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	193b      	adds	r3, r7, r4
 80010e6:	2201      	movs	r2, #1
 80010e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	193b      	adds	r3, r7, r4
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f0:	193b      	adds	r3, r7, r4
 80010f2:	2203      	movs	r2, #3
 80010f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TTY_SEND_GPIO_Port, &GPIO_InitStruct);
 80010f6:	193a      	adds	r2, r7, r4
 80010f8:	2390      	movs	r3, #144	@ 0x90
 80010fa:	05db      	lsls	r3, r3, #23
 80010fc:	0011      	movs	r1, r2
 80010fe:	0018      	movs	r0, r3
 8001100:	f000 fe4c 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : TTY_RECV_Pin */
  GPIO_InitStruct.Pin = TTY_RECV_Pin;
 8001104:	0021      	movs	r1, r4
 8001106:	187b      	adds	r3, r7, r1
 8001108:	2201      	movs	r2, #1
 800110a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800110c:	187b      	adds	r3, r7, r1
 800110e:	2284      	movs	r2, #132	@ 0x84
 8001110:	0392      	lsls	r2, r2, #14
 8001112:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001114:	187b      	adds	r3, r7, r1
 8001116:	2201      	movs	r2, #1
 8001118:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TTY_RECV_GPIO_Port, &GPIO_InitStruct);
 800111a:	000c      	movs	r4, r1
 800111c:	187b      	adds	r3, r7, r1
 800111e:	4a12      	ldr	r2, [pc, #72]	@ (8001168 <MX_GPIO_Init+0x128>)
 8001120:	0019      	movs	r1, r3
 8001122:	0010      	movs	r0, r2
 8001124:	f000 fe3a 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_MODE_Pin */
  GPIO_InitStruct.Pin = BT_MODE_Pin;
 8001128:	0021      	movs	r1, r4
 800112a:	187b      	adds	r3, r7, r1
 800112c:	2280      	movs	r2, #128	@ 0x80
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001132:	187b      	adds	r3, r7, r1
 8001134:	2200      	movs	r2, #0
 8001136:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	187b      	adds	r3, r7, r1
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BT_MODE_GPIO_Port, &GPIO_InitStruct);
 800113e:	187a      	adds	r2, r7, r1
 8001140:	2390      	movs	r3, #144	@ 0x90
 8001142:	05db      	lsls	r3, r3, #23
 8001144:	0011      	movs	r1, r2
 8001146:	0018      	movs	r0, r3
 8001148:	f000 fe28 	bl	8001d9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	2005      	movs	r0, #5
 8001152:	f000 fd73 	bl	8001c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001156:	2005      	movs	r0, #5
 8001158:	f000 fd85 	bl	8001c66 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800115c:	46c0      	nop			@ (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	b009      	add	sp, #36	@ 0x24
 8001162:	bd90      	pop	{r4, r7, pc}
 8001164:	40021000 	.word	0x40021000
 8001168:	48000400 	.word	0x48000400

0800116c <HAL_UART_RxCpltCallback>:
    }
    out[pos] = '\0';
    return out;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	lastStatus = HAL_UART_Receive_IT(&huart2, UART2_Buffer, 1);
 8001174:	4906      	ldr	r1, [pc, #24]	@ (8001190 <HAL_UART_RxCpltCallback+0x24>)
 8001176:	4b07      	ldr	r3, [pc, #28]	@ (8001194 <HAL_UART_RxCpltCallback+0x28>)
 8001178:	2201      	movs	r2, #1
 800117a:	0018      	movs	r0, r3
 800117c:	f001 fe8d 	bl	8002e9a <HAL_UART_Receive_IT>
 8001180:	0003      	movs	r3, r0
 8001182:	001a      	movs	r2, r3
 8001184:	4b04      	ldr	r3, [pc, #16]	@ (8001198 <HAL_UART_RxCpltCallback+0x2c>)
 8001186:	701a      	strb	r2, [r3, #0]
}
 8001188:	46c0      	nop			@ (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	b002      	add	sp, #8
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000194 	.word	0x20000194
 8001194:	2000010c 	.word	0x2000010c
 8001198:	20000195 	.word	0x20000195

0800119c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a0:	b672      	cpsid	i
}
 80011a2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80011a4:	46c0      	nop			@ (mov r8, r8)
 80011a6:	e7fd      	b.n	80011a4 <Error_Handler+0x8>

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <HAL_MspInit+0x44>)
 80011b0:	699a      	ldr	r2, [r3, #24]
 80011b2:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <HAL_MspInit+0x44>)
 80011b4:	2101      	movs	r1, #1
 80011b6:	430a      	orrs	r2, r1
 80011b8:	619a      	str	r2, [r3, #24]
 80011ba:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <HAL_MspInit+0x44>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	2201      	movs	r2, #1
 80011c0:	4013      	ands	r3, r2
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <HAL_MspInit+0x44>)
 80011c8:	69da      	ldr	r2, [r3, #28]
 80011ca:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <HAL_MspInit+0x44>)
 80011cc:	2180      	movs	r1, #128	@ 0x80
 80011ce:	0549      	lsls	r1, r1, #21
 80011d0:	430a      	orrs	r2, r1
 80011d2:	61da      	str	r2, [r3, #28]
 80011d4:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <HAL_MspInit+0x44>)
 80011d6:	69da      	ldr	r2, [r3, #28]
 80011d8:	2380      	movs	r3, #128	@ 0x80
 80011da:	055b      	lsls	r3, r3, #21
 80011dc:	4013      	ands	r3, r2
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b002      	add	sp, #8
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	40021000 	.word	0x40021000

080011f0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b08d      	sub	sp, #52	@ 0x34
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	241c      	movs	r4, #28
 80011fa:	193b      	adds	r3, r7, r4
 80011fc:	0018      	movs	r0, r3
 80011fe:	2314      	movs	r3, #20
 8001200:	001a      	movs	r2, r3
 8001202:	2100      	movs	r1, #0
 8001204:	f003 f89e 	bl	8004344 <memset>
  if(huart->Instance==USART1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a3d      	ldr	r2, [pc, #244]	@ (8001304 <HAL_UART_MspInit+0x114>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d134      	bne.n	800127c <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001212:	4b3d      	ldr	r3, [pc, #244]	@ (8001308 <HAL_UART_MspInit+0x118>)
 8001214:	699a      	ldr	r2, [r3, #24]
 8001216:	4b3c      	ldr	r3, [pc, #240]	@ (8001308 <HAL_UART_MspInit+0x118>)
 8001218:	2180      	movs	r1, #128	@ 0x80
 800121a:	01c9      	lsls	r1, r1, #7
 800121c:	430a      	orrs	r2, r1
 800121e:	619a      	str	r2, [r3, #24]
 8001220:	4b39      	ldr	r3, [pc, #228]	@ (8001308 <HAL_UART_MspInit+0x118>)
 8001222:	699a      	ldr	r2, [r3, #24]
 8001224:	2380      	movs	r3, #128	@ 0x80
 8001226:	01db      	lsls	r3, r3, #7
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
 800122c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b36      	ldr	r3, [pc, #216]	@ (8001308 <HAL_UART_MspInit+0x118>)
 8001230:	695a      	ldr	r2, [r3, #20]
 8001232:	4b35      	ldr	r3, [pc, #212]	@ (8001308 <HAL_UART_MspInit+0x118>)
 8001234:	2180      	movs	r1, #128	@ 0x80
 8001236:	0289      	lsls	r1, r1, #10
 8001238:	430a      	orrs	r2, r1
 800123a:	615a      	str	r2, [r3, #20]
 800123c:	4b32      	ldr	r3, [pc, #200]	@ (8001308 <HAL_UART_MspInit+0x118>)
 800123e:	695a      	ldr	r2, [r3, #20]
 8001240:	2380      	movs	r3, #128	@ 0x80
 8001242:	029b      	lsls	r3, r3, #10
 8001244:	4013      	ands	r3, r2
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800124a:	193b      	adds	r3, r7, r4
 800124c:	22c0      	movs	r2, #192	@ 0xc0
 800124e:	00d2      	lsls	r2, r2, #3
 8001250:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	0021      	movs	r1, r4
 8001254:	187b      	adds	r3, r7, r1
 8001256:	2202      	movs	r2, #2
 8001258:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	187b      	adds	r3, r7, r1
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001260:	187b      	adds	r3, r7, r1
 8001262:	2203      	movs	r2, #3
 8001264:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001266:	187b      	adds	r3, r7, r1
 8001268:	2201      	movs	r2, #1
 800126a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	187a      	adds	r2, r7, r1
 800126e:	2390      	movs	r3, #144	@ 0x90
 8001270:	05db      	lsls	r3, r3, #23
 8001272:	0011      	movs	r1, r2
 8001274:	0018      	movs	r0, r3
 8001276:	f000 fd91 	bl	8001d9c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800127a:	e03f      	b.n	80012fc <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a22      	ldr	r2, [pc, #136]	@ (800130c <HAL_UART_MspInit+0x11c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d13a      	bne.n	80012fc <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001286:	4b20      	ldr	r3, [pc, #128]	@ (8001308 <HAL_UART_MspInit+0x118>)
 8001288:	69da      	ldr	r2, [r3, #28]
 800128a:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <HAL_UART_MspInit+0x118>)
 800128c:	2180      	movs	r1, #128	@ 0x80
 800128e:	0289      	lsls	r1, r1, #10
 8001290:	430a      	orrs	r2, r1
 8001292:	61da      	str	r2, [r3, #28]
 8001294:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <HAL_UART_MspInit+0x118>)
 8001296:	69da      	ldr	r2, [r3, #28]
 8001298:	2380      	movs	r3, #128	@ 0x80
 800129a:	029b      	lsls	r3, r3, #10
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <HAL_UART_MspInit+0x118>)
 80012a4:	695a      	ldr	r2, [r3, #20]
 80012a6:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <HAL_UART_MspInit+0x118>)
 80012a8:	2180      	movs	r1, #128	@ 0x80
 80012aa:	0289      	lsls	r1, r1, #10
 80012ac:	430a      	orrs	r2, r1
 80012ae:	615a      	str	r2, [r3, #20]
 80012b0:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <HAL_UART_MspInit+0x118>)
 80012b2:	695a      	ldr	r2, [r3, #20]
 80012b4:	2380      	movs	r3, #128	@ 0x80
 80012b6:	029b      	lsls	r3, r3, #10
 80012b8:	4013      	ands	r3, r2
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80012be:	211c      	movs	r1, #28
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	4a13      	ldr	r2, [pc, #76]	@ (8001310 <HAL_UART_MspInit+0x120>)
 80012c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	187b      	adds	r3, r7, r1
 80012c8:	2202      	movs	r2, #2
 80012ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	187b      	adds	r3, r7, r1
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	2203      	movs	r2, #3
 80012d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	2201      	movs	r2, #1
 80012dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012de:	187a      	adds	r2, r7, r1
 80012e0:	2390      	movs	r3, #144	@ 0x90
 80012e2:	05db      	lsls	r3, r3, #23
 80012e4:	0011      	movs	r1, r2
 80012e6:	0018      	movs	r0, r3
 80012e8:	f000 fd58 	bl	8001d9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	201c      	movs	r0, #28
 80012f2:	f000 fca3 	bl	8001c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012f6:	201c      	movs	r0, #28
 80012f8:	f000 fcb5 	bl	8001c66 <HAL_NVIC_EnableIRQ>
}
 80012fc:	46c0      	nop			@ (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b00d      	add	sp, #52	@ 0x34
 8001302:	bd90      	pop	{r4, r7, pc}
 8001304:	40013800 	.word	0x40013800
 8001308:	40021000 	.word	0x40021000
 800130c:	40004400 	.word	0x40004400
 8001310:	00008004 	.word	0x00008004

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001318:	46c0      	nop			@ (mov r8, r8)
 800131a:	e7fd      	b.n	8001318 <NMI_Handler+0x4>

0800131c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001320:	46c0      	nop			@ (mov r8, r8)
 8001322:	e7fd      	b.n	8001320 <HardFault_Handler+0x4>

08001324 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001328:	46c0      	nop			@ (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001332:	46c0      	nop			@ (mov r8, r8)
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133c:	f000 fb92 	bl	8001a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001340:	46c0      	nop			@ (mov r8, r8)
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TTY_RECV_Pin);
 800134a:	2001      	movs	r0, #1
 800134c:	f000 feac 	bl	80020a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001350:	46c0      	nop			@ (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800135c:	4b03      	ldr	r3, [pc, #12]	@ (800136c <USART2_IRQHandler+0x14>)
 800135e:	0018      	movs	r0, r3
 8001360:	f001 fdf2 	bl	8002f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001364:	46c0      	nop			@ (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			@ (mov r8, r8)
 800136c:	2000010c 	.word	0x2000010c

08001370 <sbf_len>:

// --- Private functions -------------------------------------------
tty_mode_t _findInitialMode(sbf_t _inSbf);

// --- Basic manipulation ------------------------------------------
uint32_t sbf_len(sbf_t _sbf){
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	uint32_t out = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
	while(_sbf[out] != SBF_TERMINATOR) out++;
 800137c:	e002      	b.n	8001384 <sbf_len+0x14>
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	3301      	adds	r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	18d3      	adds	r3, r2, r3
 800138a:	2200      	movs	r2, #0
 800138c:	569a      	ldrsb	r2, [r3, r2]
 800138e:	2301      	movs	r3, #1
 8001390:	425b      	negs	r3, r3
 8001392:	429a      	cmp	r2, r3
 8001394:	d1f3      	bne.n	800137e <sbf_len+0xe>
	return out;
 8001396:	68fb      	ldr	r3, [r7, #12]
}
 8001398:	0018      	movs	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	b004      	add	sp, #16
 800139e:	bd80      	pop	{r7, pc}

080013a0 <sbf_createSymbolBuffer>:

sbf_t sbf_createSymbolBuffer(void){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
	// This returns a valid and correct terminated Symbol Buffer
	sbf_t _out = malloc((sizeof(symbol_t)) * 1);
 80013a6:	2001      	movs	r0, #1
 80013a8:	f002 ff06 	bl	80041b8 <malloc>
 80013ac:	0003      	movs	r3, r0
 80013ae:	607b      	str	r3, [r7, #4]
	if (!_out) TTY_raiseMemoryError();
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <sbf_createSymbolBuffer+0x1a>
 80013b6:	f000 fa3f 	bl	8001838 <TTY_raiseMemoryError>
	_out[0] = SBF_TERMINATOR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	425a      	negs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	701a      	strb	r2, [r3, #0]
	return _out;
 80013c2:	687b      	ldr	r3, [r7, #4]
}
 80013c4:	0018      	movs	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}

080013cc <sbf_appendSym>:

sbf_t sbf_appendSym(sbf_t head, symbol_t sym){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	000a      	movs	r2, r1
 80013d6:	1cfb      	adds	r3, r7, #3
 80013d8:	701a      	strb	r2, [r3, #0]
	uint32_t head_len = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]

	if (sym == SBF_TERMINATOR) return head;
 80013de:	2301      	movs	r3, #1
 80013e0:	425b      	negs	r3, r3
 80013e2:	1cfa      	adds	r2, r7, #3
 80013e4:	7812      	ldrb	r2, [r2, #0]
 80013e6:	b252      	sxtb	r2, r2
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d101      	bne.n	80013f0 <sbf_appendSym+0x24>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	e053      	b.n	8001498 <sbf_appendSym+0xcc>
	// When head NULL, create a single symbolbuffer
	if (head == NULL) {
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d114      	bne.n	8001420 <sbf_appendSym+0x54>
		sbf_t tail = (sbf_t) malloc(2 * sizeof(symbol_t));
 80013f6:	2002      	movs	r0, #2
 80013f8:	f002 fede 	bl	80041b8 <malloc>
 80013fc:	0003      	movs	r3, r0
 80013fe:	60bb      	str	r3, [r7, #8]
		if (tail == NULL) TTY_raiseMemoryError();
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <sbf_appendSym+0x3e>
 8001406:	f000 fa17 	bl	8001838 <TTY_raiseMemoryError>
		tail[0] = sym;
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	1cfa      	adds	r2, r7, #3
 800140e:	7812      	ldrb	r2, [r2, #0]
 8001410:	701a      	strb	r2, [r3, #0]
		tail[1] = SBF_TERMINATOR;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	3301      	adds	r3, #1
 8001416:	2201      	movs	r2, #1
 8001418:	4252      	negs	r2, r2
 800141a:	701a      	strb	r2, [r3, #0]
		return tail;
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	e03b      	b.n	8001498 <sbf_appendSym+0xcc>
	}

	// Create a tail with correct length
	head_len = sbf_len(head);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	0018      	movs	r0, r3
 8001424:	f7ff ffa4 	bl	8001370 <sbf_len>
 8001428:	0003      	movs	r3, r0
 800142a:	613b      	str	r3, [r7, #16]
	sbf_t tail = (sbf_t) malloc((head_len + 2) * sizeof(symbol_t));
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	3302      	adds	r3, #2
 8001430:	0018      	movs	r0, r3
 8001432:	f002 fec1 	bl	80041b8 <malloc>
 8001436:	0003      	movs	r3, r0
 8001438:	60fb      	str	r3, [r7, #12]
	if (tail == NULL) TTY_raiseMemoryError();
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <sbf_appendSym+0x78>
 8001440:	f000 f9fa 	bl	8001838 <TTY_raiseMemoryError>

	// Populate tail
	uint32_t i = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
	while (head[i] != SBF_TERMINATOR) {
 8001448:	e00b      	b.n	8001462 <sbf_appendSym+0x96>
		tail[i] = head[i];
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	18d2      	adds	r2, r2, r3
 8001450:	68f9      	ldr	r1, [r7, #12]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	18cb      	adds	r3, r1, r3
 8001456:	7812      	ldrb	r2, [r2, #0]
 8001458:	b252      	sxtb	r2, r2
 800145a:	701a      	strb	r2, [r3, #0]
		i++;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	3301      	adds	r3, #1
 8001460:	617b      	str	r3, [r7, #20]
	while (head[i] != SBF_TERMINATOR) {
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	18d3      	adds	r3, r2, r3
 8001468:	2200      	movs	r2, #0
 800146a:	569a      	ldrsb	r2, [r3, r2]
 800146c:	2301      	movs	r3, #1
 800146e:	425b      	negs	r3, r3
 8001470:	429a      	cmp	r2, r3
 8001472:	d1ea      	bne.n	800144a <sbf_appendSym+0x7e>
	}
	// Append Symbol
	tail[i] = sym;
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	18d3      	adds	r3, r2, r3
 800147a:	1cfa      	adds	r2, r7, #3
 800147c:	7812      	ldrb	r2, [r2, #0]
 800147e:	701a      	strb	r2, [r3, #0]
	tail[i+1] = SBF_TERMINATOR;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	3301      	adds	r3, #1
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	18d3      	adds	r3, r2, r3
 8001488:	2201      	movs	r2, #1
 800148a:	4252      	negs	r2, r2
 800148c:	701a      	strb	r2, [r3, #0]
	free(head);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	0018      	movs	r0, r3
 8001492:	f002 fe9b 	bl	80041cc <free>
	return tail;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	0018      	movs	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	b006      	add	sp, #24
 800149e:	bd80      	pop	{r7, pc}

080014a0 <sbf_charToSymbolBuffer>:

	if (keepBuffer == 0) free(_inSbf);
	return _out;
}

sbf_t sbf_charToSymbolBuffer(sbf_t _out, char _c, tty_mode_t* _currentMode){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	200b      	movs	r0, #11
 80014ac:	183b      	adds	r3, r7, r0
 80014ae:	1c0a      	adds	r2, r1, #0
 80014b0:	701a      	strb	r2, [r3, #0]
	if (_c <= 0x20){
 80014b2:	0002      	movs	r2, r0
 80014b4:	18bb      	adds	r3, r7, r2
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b20      	cmp	r3, #32
 80014ba:	d861      	bhi.n	8001580 <sbf_charToSymbolBuffer+0xe0>
		if (_c == 0x09){
 80014bc:	18bb      	adds	r3, r7, r2
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b09      	cmp	r3, #9
 80014c2:	d116      	bne.n	80014f2 <sbf_charToSymbolBuffer+0x52>
			for (uint8_t t = 0; t < 4; t++)
 80014c4:	2317      	movs	r3, #23
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
 80014cc:	e00c      	b.n	80014e8 <sbf_charToSymbolBuffer+0x48>
				_out = sbf_appendSym(_out, space);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2104      	movs	r1, #4
 80014d2:	0018      	movs	r0, r3
 80014d4:	f7ff ff7a 	bl	80013cc <sbf_appendSym>
 80014d8:	0003      	movs	r3, r0
 80014da:	60fb      	str	r3, [r7, #12]
			for (uint8_t t = 0; t < 4; t++)
 80014dc:	2117      	movs	r1, #23
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	781a      	ldrb	r2, [r3, #0]
 80014e2:	187b      	adds	r3, r7, r1
 80014e4:	3201      	adds	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
 80014e8:	2317      	movs	r3, #23
 80014ea:	18fb      	adds	r3, r7, r3
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d9ed      	bls.n	80014ce <sbf_charToSymbolBuffer+0x2e>
		}
		if(_c == 0x0A) _out = sbf_appendSym(_out, lf);
 80014f2:	230b      	movs	r3, #11
 80014f4:	18fb      	adds	r3, r7, r3
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b0a      	cmp	r3, #10
 80014fa:	d106      	bne.n	800150a <sbf_charToSymbolBuffer+0x6a>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2102      	movs	r1, #2
 8001500:	0018      	movs	r0, r3
 8001502:	f7ff ff63 	bl	80013cc <sbf_appendSym>
 8001506:	0003      	movs	r3, r0
 8001508:	60fb      	str	r3, [r7, #12]
		if(_c == 0x0C){
 800150a:	230b      	movs	r3, #11
 800150c:	18fb      	adds	r3, r7, r3
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b0c      	cmp	r3, #12
 8001512:	d11d      	bne.n	8001550 <sbf_charToSymbolBuffer+0xb0>
			_out = sbf_appendSym(_out, cr);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2108      	movs	r1, #8
 8001518:	0018      	movs	r0, r3
 800151a:	f7ff ff57 	bl	80013cc <sbf_appendSym>
 800151e:	0003      	movs	r3, r0
 8001520:	60fb      	str	r3, [r7, #12]
			for (uint8_t f = 0; f < 10; f++)
 8001522:	2316      	movs	r3, #22
 8001524:	18fb      	adds	r3, r7, r3
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
 800152a:	e00c      	b.n	8001546 <sbf_charToSymbolBuffer+0xa6>
				_out = sbf_appendSym(_out, lf);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2102      	movs	r1, #2
 8001530:	0018      	movs	r0, r3
 8001532:	f7ff ff4b 	bl	80013cc <sbf_appendSym>
 8001536:	0003      	movs	r3, r0
 8001538:	60fb      	str	r3, [r7, #12]
			for (uint8_t f = 0; f < 10; f++)
 800153a:	2116      	movs	r1, #22
 800153c:	187b      	adds	r3, r7, r1
 800153e:	781a      	ldrb	r2, [r3, #0]
 8001540:	187b      	adds	r3, r7, r1
 8001542:	3201      	adds	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]
 8001546:	2316      	movs	r3, #22
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b09      	cmp	r3, #9
 800154e:	d9ed      	bls.n	800152c <sbf_charToSymbolBuffer+0x8c>
		}
		if(_c == 0x0D) _out = sbf_appendSym(_out, cr);
 8001550:	230b      	movs	r3, #11
 8001552:	18fb      	adds	r3, r7, r3
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b0d      	cmp	r3, #13
 8001558:	d106      	bne.n	8001568 <sbf_charToSymbolBuffer+0xc8>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2108      	movs	r1, #8
 800155e:	0018      	movs	r0, r3
 8001560:	f7ff ff34 	bl	80013cc <sbf_appendSym>
 8001564:	0003      	movs	r3, r0
 8001566:	60fb      	str	r3, [r7, #12]
		if(_c == 0x20) _out = sbf_appendSym(_out, space);
 8001568:	230b      	movs	r3, #11
 800156a:	18fb      	adds	r3, r7, r3
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b20      	cmp	r3, #32
 8001570:	d106      	bne.n	8001580 <sbf_charToSymbolBuffer+0xe0>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2104      	movs	r1, #4
 8001576:	0018      	movs	r0, r3
 8001578:	f7ff ff28 	bl	80013cc <sbf_appendSym>
 800157c:	0003      	movs	r3, r0
 800157e:	60fb      	str	r3, [r7, #12]
	}
	if ((_c > 0x20 && _c < 'A') || _c == 0x07 || _c > 'z'){
 8001580:	220b      	movs	r2, #11
 8001582:	18bb      	adds	r3, r7, r2
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b20      	cmp	r3, #32
 8001588:	d903      	bls.n	8001592 <sbf_charToSymbolBuffer+0xf2>
 800158a:	18bb      	adds	r3, r7, r2
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b40      	cmp	r3, #64	@ 0x40
 8001590:	d908      	bls.n	80015a4 <sbf_charToSymbolBuffer+0x104>
 8001592:	220b      	movs	r2, #11
 8001594:	18bb      	adds	r3, r7, r2
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b07      	cmp	r3, #7
 800159a:	d003      	beq.n	80015a4 <sbf_charToSymbolBuffer+0x104>
 800159c:	18bb      	adds	r3, r7, r2
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b7a      	cmp	r3, #122	@ 0x7a
 80015a2:	d919      	bls.n	80015d8 <sbf_charToSymbolBuffer+0x138>
		if (*_currentMode != TTY_FIGURES){
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d009      	beq.n	80015c0 <sbf_charToSymbolBuffer+0x120>
			_out = sbf_appendSym(_out, figs);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	211b      	movs	r1, #27
 80015b0:	0018      	movs	r0, r3
 80015b2:	f7ff ff0b 	bl	80013cc <sbf_appendSym>
 80015b6:	0003      	movs	r3, r0
 80015b8:	60fb      	str	r3, [r7, #12]
			*_currentMode = TTY_FIGURES;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]
		}
		_out = sbf_appendSym(_out, char_to_symFIGS[(uint8_t)_c]);
 80015c0:	230b      	movs	r3, #11
 80015c2:	18fb      	adds	r3, r7, r3
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	4a18      	ldr	r2, [pc, #96]	@ (8001628 <sbf_charToSymbolBuffer+0x188>)
 80015c8:	56d2      	ldrsb	r2, [r2, r3]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	0011      	movs	r1, r2
 80015ce:	0018      	movs	r0, r3
 80015d0:	f7ff fefc 	bl	80013cc <sbf_appendSym>
 80015d4:	0003      	movs	r3, r0
 80015d6:	60fb      	str	r3, [r7, #12]
	}
	if (_c >= 'A' && _c <= 'z'){
 80015d8:	220b      	movs	r2, #11
 80015da:	18bb      	adds	r3, r7, r2
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b40      	cmp	r3, #64	@ 0x40
 80015e0:	d91d      	bls.n	800161e <sbf_charToSymbolBuffer+0x17e>
 80015e2:	18bb      	adds	r3, r7, r2
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b7a      	cmp	r3, #122	@ 0x7a
 80015e8:	d819      	bhi.n	800161e <sbf_charToSymbolBuffer+0x17e>
		if (*_currentMode != TTY_LETTERS){
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d009      	beq.n	8001606 <sbf_charToSymbolBuffer+0x166>
			_out = sbf_appendSym(_out, ltrs);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	211f      	movs	r1, #31
 80015f6:	0018      	movs	r0, r3
 80015f8:	f7ff fee8 	bl	80013cc <sbf_appendSym>
 80015fc:	0003      	movs	r3, r0
 80015fe:	60fb      	str	r3, [r7, #12]
			*_currentMode = TTY_LETTERS;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
		}
		_out = sbf_appendSym(_out, char_to_symLTRS[(uint8_t)_c]);
 8001606:	230b      	movs	r3, #11
 8001608:	18fb      	adds	r3, r7, r3
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4a07      	ldr	r2, [pc, #28]	@ (800162c <sbf_charToSymbolBuffer+0x18c>)
 800160e:	56d2      	ldrsb	r2, [r2, r3]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	0011      	movs	r1, r2
 8001614:	0018      	movs	r0, r3
 8001616:	f7ff fed9 	bl	80013cc <sbf_appendSym>
 800161a:	0003      	movs	r3, r0
 800161c:	60fb      	str	r3, [r7, #12]
	}
	return _out;
 800161e:	68fb      	ldr	r3, [r7, #12]
}
 8001620:	0018      	movs	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	b006      	add	sp, #24
 8001626:	bd80      	pop	{r7, pc}
 8001628:	080044f8 	.word	0x080044f8
 800162c:	08004578 	.word	0x08004578

08001630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001638:	4a14      	ldr	r2, [pc, #80]	@ (800168c <_sbrk+0x5c>)
 800163a:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <_sbrk+0x60>)
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001644:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800164c:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <_sbrk+0x64>)
 800164e:	4a12      	ldr	r2, [pc, #72]	@ (8001698 <_sbrk+0x68>)
 8001650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001652:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <_sbrk+0x64>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	18d3      	adds	r3, r2, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	429a      	cmp	r2, r3
 800165e:	d207      	bcs.n	8001670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001660:	f002 fe8a 	bl	8004378 <__errno>
 8001664:	0003      	movs	r3, r0
 8001666:	220c      	movs	r2, #12
 8001668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800166a:	2301      	movs	r3, #1
 800166c:	425b      	negs	r3, r3
 800166e:	e009      	b.n	8001684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001676:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	18d2      	adds	r2, r2, r3
 800167e:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <_sbrk+0x64>)
 8001680:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001682:	68fb      	ldr	r3, [r7, #12]
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	b006      	add	sp, #24
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20001800 	.word	0x20001800
 8001690:	00000400 	.word	0x00000400
 8001694:	20000198 	.word	0x20000198
 8001698:	200002f0 	.word	0x200002f0

0800169c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80016a0:	46c0      	nop			@ (mov r8, r8)
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016ac:	f3bf 8f4f 	dsb	sy
}
 80016b0:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b2:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <__NVIC_SystemReset+0x1c>)
 80016b4:	4a04      	ldr	r2, [pc, #16]	@ (80016c8 <__NVIC_SystemReset+0x20>)
 80016b6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80016b8:	f3bf 8f4f 	dsb	sy
}
 80016bc:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80016be:	46c0      	nop			@ (mov r8, r8)
 80016c0:	e7fd      	b.n	80016be <__NVIC_SystemReset+0x16>
 80016c2:	46c0      	nop			@ (mov r8, r8)
 80016c4:	e000ed00 	.word	0xe000ed00
 80016c8:	05fa0004 	.word	0x05fa0004

080016cc <TTY_Init>:
void setReadError();
void clearReadError();

// -----------------------------------------------------------------

void TTY_Init(void){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	// this loads the contents from flash and sets the variables
}
 80016d0:	46c0      	nop			@ (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <TTY_WriteKey>:
	//TTY_WriteString(fox, 1);
}


// === WRITE SECTION ===============================================
void TTY_WriteKey(char key){
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	0002      	movs	r2, r0
 80016e0:	1dfb      	adds	r3, r7, #7
 80016e2:	701a      	strb	r2, [r3, #0]
	sbf_t _sbf = sbf_createSymbolBuffer();
 80016e4:	f7ff fe5c 	bl	80013a0 <sbf_createSymbolBuffer>
 80016e8:	0003      	movs	r3, r0
 80016ea:	60fb      	str	r3, [r7, #12]
	_sbf = sbf_charToSymbolBuffer(_sbf, key, &tty_mode);
 80016ec:	4a08      	ldr	r2, [pc, #32]	@ (8001710 <TTY_WriteKey+0x38>)
 80016ee:	1dfb      	adds	r3, r7, #7
 80016f0:	7819      	ldrb	r1, [r3, #0]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	0018      	movs	r0, r3
 80016f6:	f7ff fed3 	bl	80014a0 <sbf_charToSymbolBuffer>
 80016fa:	0003      	movs	r3, r0
 80016fc:	60fb      	str	r3, [r7, #12]
	TTY_WriteBuffer(_sbf);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	0018      	movs	r0, r3
 8001702:	f000 f807 	bl	8001714 <TTY_WriteBuffer>
}
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	46bd      	mov	sp, r7
 800170a:	b004      	add	sp, #16
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			@ (mov r8, r8)
 8001710:	2000019c 	.word	0x2000019c

08001714 <TTY_WriteBuffer>:
    writebuffer = TTY_WriteBuffer(writebuffer);
    if (keepStr == 0)
    	free(str);
}

sbf_t TTY_WriteBuffer(sbf_t buffer){
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
    
    // Write all symbols in buffer
    for (uint8_t i = 0; buffer[i] != SBF_TERMINATOR; i++) {
 800171c:	230f      	movs	r3, #15
 800171e:	18fb      	adds	r3, r7, r3
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
 8001724:	e00e      	b.n	8001744 <TTY_WriteBuffer+0x30>
        TTY_Write(buffer[i]);
 8001726:	240f      	movs	r4, #15
 8001728:	193b      	adds	r3, r7, r4
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	18d3      	adds	r3, r2, r3
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b25b      	sxtb	r3, r3
 8001734:	0018      	movs	r0, r3
 8001736:	f000 f82b 	bl	8001790 <TTY_Write>
    for (uint8_t i = 0; buffer[i] != SBF_TERMINATOR; i++) {
 800173a:	193b      	adds	r3, r7, r4
 800173c:	781a      	ldrb	r2, [r3, #0]
 800173e:	193b      	adds	r3, r7, r4
 8001740:	3201      	adds	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
 8001744:	230f      	movs	r3, #15
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	18d3      	adds	r3, r2, r3
 800174e:	2200      	movs	r2, #0
 8001750:	569a      	ldrsb	r2, [r3, r2]
 8001752:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <TTY_WriteBuffer+0x78>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	b25b      	sxtb	r3, r3
 8001758:	429a      	cmp	r2, r3
 800175a:	d1e4      	bne.n	8001726 <TTY_WriteBuffer+0x12>
    }

    // Free the input buffer
    free(buffer);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	0018      	movs	r0, r3
 8001760:	f002 fd34 	bl	80041cc <free>
    
    // Create new empty buffer
    sbf_t out = (sbf_t)malloc(sizeof(symbol_t));
 8001764:	2001      	movs	r0, #1
 8001766:	f002 fd27 	bl	80041b8 <malloc>
 800176a:	0003      	movs	r3, r0
 800176c:	60bb      	str	r3, [r7, #8]
    if (out == NULL) {
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <TTY_WriteBuffer+0x64>
        TTY_raiseMemoryError();
 8001774:	f000 f860 	bl	8001838 <TTY_raiseMemoryError>
    }
    out[0] = SBF_TERMINATOR;  // Null-terminate
 8001778:	4b04      	ldr	r3, [pc, #16]	@ (800178c <TTY_WriteBuffer+0x78>)
 800177a:	2200      	movs	r2, #0
 800177c:	569a      	ldrsb	r2, [r3, r2]
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	701a      	strb	r2, [r3, #0]
    return out;
 8001782:	68bb      	ldr	r3, [r7, #8]
}
 8001784:	0018      	movs	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	b005      	add	sp, #20
 800178a:	bd90      	pop	{r4, r7, pc}
 800178c:	080045f8 	.word	0x080045f8

08001790 <TTY_Write>:

void TTY_Write(symbol_t _sym){
 8001790:	b590      	push	{r4, r7, lr}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	0002      	movs	r2, r0
 8001798:	1dfb      	adds	r3, r7, #7
 800179a:	701a      	strb	r2, [r3, #0]
	if (_sym == -1) return;
 800179c:	1dfb      	adds	r3, r7, #7
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	3301      	adds	r3, #1
 80017a4:	d02d      	beq.n	8001802 <TTY_Write+0x72>

	TTY_Startbit();
 80017a6:	f000 f8b5 	bl	8001914 <TTY_Startbit>

    for (uint8_t i = 0; i < 5; i++) {	// send data, bit by bit
 80017aa:	230f      	movs	r3, #15
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
 80017b2:	e01e      	b.n	80017f2 <TTY_Write+0x62>
        uint8_t bit = ((_sym >> i) & 0x01) ^ 1;
 80017b4:	1dfb      	adds	r3, r7, #7
 80017b6:	2200      	movs	r2, #0
 80017b8:	569a      	ldrsb	r2, [r3, r2]
 80017ba:	240f      	movs	r4, #15
 80017bc:	193b      	adds	r3, r7, r4
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	411a      	asrs	r2, r3
 80017c2:	0013      	movs	r3, r2
 80017c4:	2201      	movs	r2, #1
 80017c6:	4013      	ands	r3, r2
 80017c8:	425a      	negs	r2, r3
 80017ca:	4153      	adcs	r3, r2
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	210e      	movs	r1, #14
 80017d0:	187b      	adds	r3, r7, r1
 80017d2:	701a      	strb	r2, [r3, #0]
        setTTY(bit);
 80017d4:	187b      	adds	r3, r7, r1
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	0018      	movs	r0, r3
 80017da:	f000 f816 	bl	800180a <setTTY>
        TTY_Delay(1);
 80017de:	23fe      	movs	r3, #254	@ 0xfe
 80017e0:	059b      	lsls	r3, r3, #22
 80017e2:	1c18      	adds	r0, r3, #0
 80017e4:	f000 f874 	bl	80018d0 <TTY_Delay>
    for (uint8_t i = 0; i < 5; i++) {	// send data, bit by bit
 80017e8:	193b      	adds	r3, r7, r4
 80017ea:	781a      	ldrb	r2, [r3, #0]
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	3201      	adds	r2, #1
 80017f0:	701a      	strb	r2, [r3, #0]
 80017f2:	230f      	movs	r3, #15
 80017f4:	18fb      	adds	r3, r7, r3
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d9db      	bls.n	80017b4 <TTY_Write+0x24>
    }

	TTY_Stopbit();
 80017fc:	f000 f898 	bl	8001930 <TTY_Stopbit>
 8001800:	e000      	b.n	8001804 <TTY_Write+0x74>
	if (_sym == -1) return;
 8001802:	46c0      	nop			@ (mov r8, r8)
}
 8001804:	46bd      	mov	sp, r7
 8001806:	b005      	add	sp, #20
 8001808:	bd90      	pop	{r4, r7, pc}

0800180a <setTTY>:

void setTTY(uint8_t state){			// TTY @ A3
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	0002      	movs	r2, r0
 8001812:	1dfb      	adds	r3, r7, #7
 8001814:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,
 8001816:	1dfb      	adds	r3, r7, #7
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	1e5a      	subs	r2, r3, #1
 800181c:	4193      	sbcs	r3, r2
 800181e:	b2db      	uxtb	r3, r3
 8001820:	001a      	movs	r2, r3
 8001822:	2390      	movs	r3, #144	@ 0x90
 8001824:	05db      	lsls	r3, r3, #23
 8001826:	2110      	movs	r1, #16
 8001828:	0018      	movs	r0, r3
 800182a:	f000 fc1f 	bl	800206c <HAL_GPIO_WritePin>
			state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 800182e:	46c0      	nop			@ (mov r8, r8)
 8001830:	46bd      	mov	sp, r7
 8001832:	b002      	add	sp, #8
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <TTY_raiseMemoryError>:
	return out;
}


// === System Functions ============================================
void TTY_raiseMemoryError(void){
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	 *
	 * 1. Send SBF_MEM_ERROR[], symbol by symbol
	 * 2. Reset CPU
	 * 3. Hope for the best
	 */
	emerg_cnt = 0;
 800183c:	4b0e      	ldr	r3, [pc, #56]	@ (8001878 <TTY_raiseMemoryError+0x40>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
	while(SBF_MEM_ERROR[emerg_cnt] != SBF_TERMINATOR){
 8001842:	e00d      	b.n	8001860 <TTY_raiseMemoryError+0x28>
		TTY_Write(SBF_MEM_ERROR[emerg_cnt]);
 8001844:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <TTY_raiseMemoryError+0x40>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	001a      	movs	r2, r3
 800184a:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <TTY_raiseMemoryError+0x44>)
 800184c:	569b      	ldrsb	r3, [r3, r2]
 800184e:	0018      	movs	r0, r3
 8001850:	f7ff ff9e 	bl	8001790 <TTY_Write>
		emerg_cnt++;
 8001854:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <TTY_raiseMemoryError+0x40>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	b2da      	uxtb	r2, r3
 800185c:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <TTY_raiseMemoryError+0x40>)
 800185e:	701a      	strb	r2, [r3, #0]
	while(SBF_MEM_ERROR[emerg_cnt] != SBF_TERMINATOR){
 8001860:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <TTY_raiseMemoryError+0x40>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	001a      	movs	r2, r3
 8001866:	4b05      	ldr	r3, [pc, #20]	@ (800187c <TTY_raiseMemoryError+0x44>)
 8001868:	569a      	ldrsb	r2, [r3, r2]
 800186a:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <TTY_raiseMemoryError+0x48>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b25b      	sxtb	r3, r3
 8001870:	429a      	cmp	r2, r3
 8001872:	d1e7      	bne.n	8001844 <TTY_raiseMemoryError+0xc>
	}
	NVIC_SystemReset();	// REBOOT CPU
 8001874:	f7ff ff18 	bl	80016a8 <__NVIC_SystemReset>
 8001878:	2000019d 	.word	0x2000019d
 800187c:	08004614 	.word	0x08004614
 8001880:	080045f8 	.word	0x080045f8

08001884 <setLoopback>:
}

void setLoopback(uint8_t _loopback) {loopback = _loopback;}
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	0002      	movs	r2, r0
 800188c:	1dfb      	adds	r3, r7, #7
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	4b03      	ldr	r3, [pc, #12]	@ (80018a0 <setLoopback+0x1c>)
 8001892:	1dfa      	adds	r2, r7, #7
 8001894:	7812      	ldrb	r2, [r2, #0]
 8001896:	701a      	strb	r2, [r3, #0]
 8001898:	46c0      	nop			@ (mov r8, r8)
 800189a:	46bd      	mov	sp, r7
 800189c:	b002      	add	sp, #8
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	2000019e 	.word	0x2000019e

080018a4 <TTY_DelayMS>:
// ReadError-LED
void setReadError(){ HAL_GPIO_WritePin(GPIOA, TTY_READERR_Pin, 1); }
void clearReadError(){ HAL_GPIO_WritePin(GPIOA, TTY_READERR_Pin, 0); }

// --- Timing ------------------------------------------------------
void TTY_DelayMS(uint32_t ms){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	uint32_t start = HAL_GetTick();
 80018ac:	f000 f8ec 	bl	8001a88 <HAL_GetTick>
 80018b0:	0003      	movs	r3, r0
 80018b2:	60fb      	str	r3, [r7, #12]
	while ((HAL_GetTick() - start) < ms);
 80018b4:	46c0      	nop			@ (mov r8, r8)
 80018b6:	f000 f8e7 	bl	8001a88 <HAL_GetTick>
 80018ba:	0002      	movs	r2, r0
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d8f7      	bhi.n	80018b6 <TTY_DelayMS+0x12>
}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	46c0      	nop			@ (mov r8, r8)
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b004      	add	sp, #16
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <TTY_Delay>:

void TTY_Delay(float cycles){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	uint32_t delay_ms = (cycles * ( 1000 / baudrate));
 80018d8:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <TTY_Delay+0x3c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	1c19      	adds	r1, r3, #0
 80018de:	480c      	ldr	r0, [pc, #48]	@ (8001910 <TTY_Delay+0x40>)
 80018e0:	f7fe fcb6 	bl	8000250 <__aeabi_fdiv>
 80018e4:	1c03      	adds	r3, r0, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	1c18      	adds	r0, r3, #0
 80018ea:	f7fe fdc7 	bl	800047c <__aeabi_fmul>
 80018ee:	1c03      	adds	r3, r0, #0
 80018f0:	1c18      	adds	r0, r3, #0
 80018f2:	f7fe fc95 	bl	8000220 <__aeabi_f2uiz>
 80018f6:	0003      	movs	r3, r0
 80018f8:	60fb      	str	r3, [r7, #12]
	TTY_DelayMS(delay_ms);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	0018      	movs	r0, r3
 80018fe:	f7ff ffd1 	bl	80018a4 <TTY_DelayMS>
}
 8001902:	46c0      	nop			@ (mov r8, r8)
 8001904:	46bd      	mov	sp, r7
 8001906:	b004      	add	sp, #16
 8001908:	bd80      	pop	{r7, pc}
 800190a:	46c0      	nop			@ (mov r8, r8)
 800190c:	20000008 	.word	0x20000008
 8001910:	447a0000 	.word	0x447a0000

08001914 <TTY_Startbit>:

void TTY_Startbit(){
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
	setTTY(1);
 8001918:	2001      	movs	r0, #1
 800191a:	f7ff ff76 	bl	800180a <setTTY>
	TTY_Delay(1.0);
 800191e:	23fe      	movs	r3, #254	@ 0xfe
 8001920:	059b      	lsls	r3, r3, #22
 8001922:	1c18      	adds	r0, r3, #0
 8001924:	f7ff ffd4 	bl	80018d0 <TTY_Delay>
}
 8001928:	46c0      	nop			@ (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <TTY_Stopbit>:

void TTY_Stopbit(){
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	setTTY(0);
 8001934:	2000      	movs	r0, #0
 8001936:	f7ff ff68 	bl	800180a <setTTY>
	TTY_Delay(stopbit_cnt);
 800193a:	4b04      	ldr	r3, [pc, #16]	@ (800194c <TTY_Stopbit+0x1c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	1c18      	adds	r0, r3, #0
 8001940:	f7ff ffc6 	bl	80018d0 <TTY_Delay>
}
 8001944:	46c0      	nop			@ (mov r8, r8)
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	46c0      	nop			@ (mov r8, r8)
 800194c:	2000000c 	.word	0x2000000c

08001950 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001950:	4813      	ldr	r0, [pc, #76]	@ (80019a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001952:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001954:	f7ff fea2 	bl	800169c <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001958:	4812      	ldr	r0, [pc, #72]	@ (80019a4 <LoopForever+0x6>)
    LDR R1, [R0]
 800195a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800195c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800195e:	4a12      	ldr	r2, [pc, #72]	@ (80019a8 <LoopForever+0xa>)
    CMP R1, R2
 8001960:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001962:	d105      	bne.n	8001970 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001964:	4811      	ldr	r0, [pc, #68]	@ (80019ac <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001966:	4912      	ldr	r1, [pc, #72]	@ (80019b0 <LoopForever+0x12>)
    STR R1, [R0]
 8001968:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800196a:	4812      	ldr	r0, [pc, #72]	@ (80019b4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800196c:	4912      	ldr	r1, [pc, #72]	@ (80019b8 <LoopForever+0x1a>)
    STR R1, [R0]
 800196e:	6001      	str	r1, [r0, #0]

08001970 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001970:	4812      	ldr	r0, [pc, #72]	@ (80019bc <LoopForever+0x1e>)
  ldr r1, =_edata
 8001972:	4913      	ldr	r1, [pc, #76]	@ (80019c0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001974:	4a13      	ldr	r2, [pc, #76]	@ (80019c4 <LoopForever+0x26>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001978:	e002      	b.n	8001980 <LoopCopyDataInit>

0800197a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800197c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197e:	3304      	adds	r3, #4

08001980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001984:	d3f9      	bcc.n	800197a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001986:	4a10      	ldr	r2, [pc, #64]	@ (80019c8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001988:	4c10      	ldr	r4, [pc, #64]	@ (80019cc <LoopForever+0x2e>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800198c:	e001      	b.n	8001992 <LoopFillZerobss>

0800198e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001990:	3204      	adds	r2, #4

08001992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001994:	d3fb      	bcc.n	800198e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001996:	f002 fcf5 	bl	8004384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800199a:	f7ff fa5d 	bl	8000e58 <main>

0800199e <LoopForever>:

LoopForever:
    b LoopForever
 800199e:	e7fe      	b.n	800199e <LoopForever>
  ldr   r0, =_estack
 80019a0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80019a4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80019a8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80019ac:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80019b0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80019b4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80019b8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80019c4:	08004664 	.word	0x08004664
  ldr r2, =_sbss
 80019c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80019cc:	200002ec 	.word	0x200002ec

080019d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC1_IRQHandler>
	...

080019d4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d8:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <HAL_Init+0x24>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_Init+0x24>)
 80019de:	2110      	movs	r1, #16
 80019e0:	430a      	orrs	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80019e4:	2000      	movs	r0, #0
 80019e6:	f000 f809 	bl	80019fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ea:	f7ff fbdd 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	0018      	movs	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	46c0      	nop			@ (mov r8, r8)
 80019f8:	40022000 	.word	0x40022000

080019fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a04:	4b14      	ldr	r3, [pc, #80]	@ (8001a58 <HAL_InitTick+0x5c>)
 8001a06:	681c      	ldr	r4, [r3, #0]
 8001a08:	4b14      	ldr	r3, [pc, #80]	@ (8001a5c <HAL_InitTick+0x60>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	23fa      	movs	r3, #250	@ 0xfa
 8001a10:	0098      	lsls	r0, r3, #2
 8001a12:	f7fe fb79 	bl	8000108 <__udivsi3>
 8001a16:	0003      	movs	r3, r0
 8001a18:	0019      	movs	r1, r3
 8001a1a:	0020      	movs	r0, r4
 8001a1c:	f7fe fb74 	bl	8000108 <__udivsi3>
 8001a20:	0003      	movs	r3, r0
 8001a22:	0018      	movs	r0, r3
 8001a24:	f000 f92f 	bl	8001c86 <HAL_SYSTICK_Config>
 8001a28:	1e03      	subs	r3, r0, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e00f      	b.n	8001a50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d80b      	bhi.n	8001a4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	2301      	movs	r3, #1
 8001a3a:	425b      	negs	r3, r3
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 f8fc 	bl	8001c3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a44:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <HAL_InitTick+0x64>)
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e000      	b.n	8001a50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	0018      	movs	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b003      	add	sp, #12
 8001a56:	bd90      	pop	{r4, r7, pc}
 8001a58:	20000004 	.word	0x20000004
 8001a5c:	20000014 	.word	0x20000014
 8001a60:	20000010 	.word	0x20000010

08001a64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a68:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <HAL_IncTick+0x1c>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	001a      	movs	r2, r3
 8001a6e:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <HAL_IncTick+0x20>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	18d2      	adds	r2, r2, r3
 8001a74:	4b03      	ldr	r3, [pc, #12]	@ (8001a84 <HAL_IncTick+0x20>)
 8001a76:	601a      	str	r2, [r3, #0]
}
 8001a78:	46c0      	nop			@ (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	46c0      	nop			@ (mov r8, r8)
 8001a80:	20000014 	.word	0x20000014
 8001a84:	200001a0 	.word	0x200001a0

08001a88 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a8c:	4b02      	ldr	r3, [pc, #8]	@ (8001a98 <HAL_GetTick+0x10>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	0018      	movs	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	200001a0 	.word	0x200001a0

08001a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff fff0 	bl	8001a88 <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	d005      	beq.n	8001ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <HAL_Delay+0x44>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	001a      	movs	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	189b      	adds	r3, r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ac2:	46c0      	nop			@ (mov r8, r8)
 8001ac4:	f7ff ffe0 	bl	8001a88 <HAL_GetTick>
 8001ac8:	0002      	movs	r2, r0
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d8f7      	bhi.n	8001ac4 <HAL_Delay+0x28>
  {
  }
}
 8001ad4:	46c0      	nop			@ (mov r8, r8)
 8001ad6:	46c0      	nop			@ (mov r8, r8)
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b004      	add	sp, #16
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			@ (mov r8, r8)
 8001ae0:	20000014 	.word	0x20000014

08001ae4 <__NVIC_EnableIRQ>:
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	0002      	movs	r2, r0
 8001aec:	1dfb      	adds	r3, r7, #7
 8001aee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001af0:	1dfb      	adds	r3, r7, #7
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001af6:	d809      	bhi.n	8001b0c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af8:	1dfb      	adds	r3, r7, #7
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	001a      	movs	r2, r3
 8001afe:	231f      	movs	r3, #31
 8001b00:	401a      	ands	r2, r3
 8001b02:	4b04      	ldr	r3, [pc, #16]	@ (8001b14 <__NVIC_EnableIRQ+0x30>)
 8001b04:	2101      	movs	r1, #1
 8001b06:	4091      	lsls	r1, r2
 8001b08:	000a      	movs	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]
}
 8001b0c:	46c0      	nop			@ (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b002      	add	sp, #8
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	e000e100 	.word	0xe000e100

08001b18 <__NVIC_SetPriority>:
{
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	0002      	movs	r2, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	1dfb      	adds	r3, r7, #7
 8001b24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b26:	1dfb      	adds	r3, r7, #7
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b2c:	d828      	bhi.n	8001b80 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b2e:	4a2f      	ldr	r2, [pc, #188]	@ (8001bec <__NVIC_SetPriority+0xd4>)
 8001b30:	1dfb      	adds	r3, r7, #7
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	b25b      	sxtb	r3, r3
 8001b36:	089b      	lsrs	r3, r3, #2
 8001b38:	33c0      	adds	r3, #192	@ 0xc0
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	589b      	ldr	r3, [r3, r2]
 8001b3e:	1dfa      	adds	r2, r7, #7
 8001b40:	7812      	ldrb	r2, [r2, #0]
 8001b42:	0011      	movs	r1, r2
 8001b44:	2203      	movs	r2, #3
 8001b46:	400a      	ands	r2, r1
 8001b48:	00d2      	lsls	r2, r2, #3
 8001b4a:	21ff      	movs	r1, #255	@ 0xff
 8001b4c:	4091      	lsls	r1, r2
 8001b4e:	000a      	movs	r2, r1
 8001b50:	43d2      	mvns	r2, r2
 8001b52:	401a      	ands	r2, r3
 8001b54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	019b      	lsls	r3, r3, #6
 8001b5a:	22ff      	movs	r2, #255	@ 0xff
 8001b5c:	401a      	ands	r2, r3
 8001b5e:	1dfb      	adds	r3, r7, #7
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	0018      	movs	r0, r3
 8001b64:	2303      	movs	r3, #3
 8001b66:	4003      	ands	r3, r0
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b6c:	481f      	ldr	r0, [pc, #124]	@ (8001bec <__NVIC_SetPriority+0xd4>)
 8001b6e:	1dfb      	adds	r3, r7, #7
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b25b      	sxtb	r3, r3
 8001b74:	089b      	lsrs	r3, r3, #2
 8001b76:	430a      	orrs	r2, r1
 8001b78:	33c0      	adds	r3, #192	@ 0xc0
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	501a      	str	r2, [r3, r0]
}
 8001b7e:	e031      	b.n	8001be4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b80:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf0 <__NVIC_SetPriority+0xd8>)
 8001b82:	1dfb      	adds	r3, r7, #7
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	0019      	movs	r1, r3
 8001b88:	230f      	movs	r3, #15
 8001b8a:	400b      	ands	r3, r1
 8001b8c:	3b08      	subs	r3, #8
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	3306      	adds	r3, #6
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	18d3      	adds	r3, r2, r3
 8001b96:	3304      	adds	r3, #4
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	1dfa      	adds	r2, r7, #7
 8001b9c:	7812      	ldrb	r2, [r2, #0]
 8001b9e:	0011      	movs	r1, r2
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	400a      	ands	r2, r1
 8001ba4:	00d2      	lsls	r2, r2, #3
 8001ba6:	21ff      	movs	r1, #255	@ 0xff
 8001ba8:	4091      	lsls	r1, r2
 8001baa:	000a      	movs	r2, r1
 8001bac:	43d2      	mvns	r2, r2
 8001bae:	401a      	ands	r2, r3
 8001bb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	019b      	lsls	r3, r3, #6
 8001bb6:	22ff      	movs	r2, #255	@ 0xff
 8001bb8:	401a      	ands	r2, r3
 8001bba:	1dfb      	adds	r3, r7, #7
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	4003      	ands	r3, r0
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bc8:	4809      	ldr	r0, [pc, #36]	@ (8001bf0 <__NVIC_SetPriority+0xd8>)
 8001bca:	1dfb      	adds	r3, r7, #7
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	001c      	movs	r4, r3
 8001bd0:	230f      	movs	r3, #15
 8001bd2:	4023      	ands	r3, r4
 8001bd4:	3b08      	subs	r3, #8
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	3306      	adds	r3, #6
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	18c3      	adds	r3, r0, r3
 8001be0:	3304      	adds	r3, #4
 8001be2:	601a      	str	r2, [r3, #0]
}
 8001be4:	46c0      	nop			@ (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b003      	add	sp, #12
 8001bea:	bd90      	pop	{r4, r7, pc}
 8001bec:	e000e100 	.word	0xe000e100
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	1e5a      	subs	r2, r3, #1
 8001c00:	2380      	movs	r3, #128	@ 0x80
 8001c02:	045b      	lsls	r3, r3, #17
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d301      	bcc.n	8001c0c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e010      	b.n	8001c2e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <SysTick_Config+0x44>)
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	3a01      	subs	r2, #1
 8001c12:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c14:	2301      	movs	r3, #1
 8001c16:	425b      	negs	r3, r3
 8001c18:	2103      	movs	r1, #3
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f7ff ff7c 	bl	8001b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c20:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <SysTick_Config+0x44>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c26:	4b04      	ldr	r3, [pc, #16]	@ (8001c38 <SysTick_Config+0x44>)
 8001c28:	2207      	movs	r2, #7
 8001c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	0018      	movs	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b002      	add	sp, #8
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	46c0      	nop			@ (mov r8, r8)
 8001c38:	e000e010 	.word	0xe000e010

08001c3c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	210f      	movs	r1, #15
 8001c48:	187b      	adds	r3, r7, r1
 8001c4a:	1c02      	adds	r2, r0, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	187b      	adds	r3, r7, r1
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	b25b      	sxtb	r3, r3
 8001c56:	0011      	movs	r1, r2
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f7ff ff5d 	bl	8001b18 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001c5e:	46c0      	nop			@ (mov r8, r8)
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b004      	add	sp, #16
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	0002      	movs	r2, r0
 8001c6e:	1dfb      	adds	r3, r7, #7
 8001c70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c72:	1dfb      	adds	r3, r7, #7
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	b25b      	sxtb	r3, r3
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f7ff ff33 	bl	8001ae4 <__NVIC_EnableIRQ>
}
 8001c7e:	46c0      	nop			@ (mov r8, r8)
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b002      	add	sp, #8
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	0018      	movs	r0, r3
 8001c92:	f7ff ffaf 	bl	8001bf4 <SysTick_Config>
 8001c96:	0003      	movs	r3, r0
}
 8001c98:	0018      	movs	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b002      	add	sp, #8
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2221      	movs	r2, #33	@ 0x21
 8001cac:	5c9b      	ldrb	r3, [r3, r2]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d008      	beq.n	8001cc6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2204      	movs	r2, #4
 8001cb8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e020      	b.n	8001d08 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	210e      	movs	r1, #14
 8001cd2:	438a      	bics	r2, r1
 8001cd4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	438a      	bics	r2, r1
 8001ce4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cee:	2101      	movs	r1, #1
 8001cf0:	4091      	lsls	r1, r2
 8001cf2:	000a      	movs	r2, r1
 8001cf4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2221      	movs	r2, #33	@ 0x21
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2220      	movs	r2, #32
 8001d02:	2100      	movs	r1, #0
 8001d04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d18:	210f      	movs	r1, #15
 8001d1a:	187b      	adds	r3, r7, r1
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2221      	movs	r2, #33	@ 0x21
 8001d24:	5c9b      	ldrb	r3, [r3, r2]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d006      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2204      	movs	r2, #4
 8001d30:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001d32:	187b      	adds	r3, r7, r1
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
 8001d38:	e028      	b.n	8001d8c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	210e      	movs	r1, #14
 8001d46:	438a      	bics	r2, r1
 8001d48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2101      	movs	r1, #1
 8001d56:	438a      	bics	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d62:	2101      	movs	r1, #1
 8001d64:	4091      	lsls	r1, r2
 8001d66:	000a      	movs	r2, r1
 8001d68:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2221      	movs	r2, #33	@ 0x21
 8001d6e:	2101      	movs	r1, #1
 8001d70:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2220      	movs	r2, #32
 8001d76:	2100      	movs	r1, #0
 8001d78:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d004      	beq.n	8001d8c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	0010      	movs	r0, r2
 8001d8a:	4798      	blx	r3
    }
  }
  return status;
 8001d8c:	230f      	movs	r3, #15
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	781b      	ldrb	r3, [r3, #0]
}
 8001d92:	0018      	movs	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b004      	add	sp, #16
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001daa:	e149      	b.n	8002040 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2101      	movs	r1, #1
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4091      	lsls	r1, r2
 8001db6:	000a      	movs	r2, r1
 8001db8:	4013      	ands	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d100      	bne.n	8001dc4 <HAL_GPIO_Init+0x28>
 8001dc2:	e13a      	b.n	800203a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2203      	movs	r2, #3
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d005      	beq.n	8001ddc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d130      	bne.n	8001e3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	409a      	lsls	r2, r3
 8001dea:	0013      	movs	r3, r2
 8001dec:	43da      	mvns	r2, r3
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	0013      	movs	r3, r2
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e12:	2201      	movs	r2, #1
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	409a      	lsls	r2, r3
 8001e18:	0013      	movs	r3, r2
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	091b      	lsrs	r3, r3, #4
 8001e28:	2201      	movs	r2, #1
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	0013      	movs	r3, r2
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2203      	movs	r2, #3
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d017      	beq.n	8001e7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	2203      	movs	r2, #3
 8001e56:	409a      	lsls	r2, r3
 8001e58:	0013      	movs	r3, r2
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	0013      	movs	r3, r2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2203      	movs	r2, #3
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d123      	bne.n	8001ece <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	08da      	lsrs	r2, r3, #3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3208      	adds	r2, #8
 8001e8e:	0092      	lsls	r2, r2, #2
 8001e90:	58d3      	ldr	r3, [r2, r3]
 8001e92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2207      	movs	r2, #7
 8001e98:	4013      	ands	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	220f      	movs	r2, #15
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	0013      	movs	r3, r2
 8001ea2:	43da      	mvns	r2, r3
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	691a      	ldr	r2, [r3, #16]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2107      	movs	r1, #7
 8001eb2:	400b      	ands	r3, r1
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	0013      	movs	r3, r2
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	08da      	lsrs	r2, r3, #3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3208      	adds	r2, #8
 8001ec8:	0092      	lsls	r2, r2, #2
 8001eca:	6939      	ldr	r1, [r7, #16]
 8001ecc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	409a      	lsls	r2, r3
 8001edc:	0013      	movs	r3, r2
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2203      	movs	r2, #3
 8001eec:	401a      	ands	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	0013      	movs	r3, r2
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	23c0      	movs	r3, #192	@ 0xc0
 8001f08:	029b      	lsls	r3, r3, #10
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d100      	bne.n	8001f10 <HAL_GPIO_Init+0x174>
 8001f0e:	e094      	b.n	800203a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f10:	4b51      	ldr	r3, [pc, #324]	@ (8002058 <HAL_GPIO_Init+0x2bc>)
 8001f12:	699a      	ldr	r2, [r3, #24]
 8001f14:	4b50      	ldr	r3, [pc, #320]	@ (8002058 <HAL_GPIO_Init+0x2bc>)
 8001f16:	2101      	movs	r1, #1
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	619a      	str	r2, [r3, #24]
 8001f1c:	4b4e      	ldr	r3, [pc, #312]	@ (8002058 <HAL_GPIO_Init+0x2bc>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	2201      	movs	r2, #1
 8001f22:	4013      	ands	r3, r2
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f28:	4a4c      	ldr	r2, [pc, #304]	@ (800205c <HAL_GPIO_Init+0x2c0>)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	3302      	adds	r3, #2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	589b      	ldr	r3, [r3, r2]
 8001f34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2203      	movs	r2, #3
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	220f      	movs	r2, #15
 8001f40:	409a      	lsls	r2, r3
 8001f42:	0013      	movs	r3, r2
 8001f44:	43da      	mvns	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	2390      	movs	r3, #144	@ 0x90
 8001f50:	05db      	lsls	r3, r3, #23
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d00d      	beq.n	8001f72 <HAL_GPIO_Init+0x1d6>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a41      	ldr	r2, [pc, #260]	@ (8002060 <HAL_GPIO_Init+0x2c4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <HAL_GPIO_Init+0x1d2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a40      	ldr	r2, [pc, #256]	@ (8002064 <HAL_GPIO_Init+0x2c8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d101      	bne.n	8001f6a <HAL_GPIO_Init+0x1ce>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e004      	b.n	8001f74 <HAL_GPIO_Init+0x1d8>
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	e002      	b.n	8001f74 <HAL_GPIO_Init+0x1d8>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_GPIO_Init+0x1d8>
 8001f72:	2300      	movs	r3, #0
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	2103      	movs	r1, #3
 8001f78:	400a      	ands	r2, r1
 8001f7a:	0092      	lsls	r2, r2, #2
 8001f7c:	4093      	lsls	r3, r2
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f84:	4935      	ldr	r1, [pc, #212]	@ (800205c <HAL_GPIO_Init+0x2c0>)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f92:	4b35      	ldr	r3, [pc, #212]	@ (8002068 <HAL_GPIO_Init+0x2cc>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	43da      	mvns	r2, r3
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	2380      	movs	r3, #128	@ 0x80
 8001fa8:	035b      	lsls	r3, r3, #13
 8001faa:	4013      	ands	r3, r2
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fb6:	4b2c      	ldr	r3, [pc, #176]	@ (8002068 <HAL_GPIO_Init+0x2cc>)
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8002068 <HAL_GPIO_Init+0x2cc>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	43da      	mvns	r2, r3
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	2380      	movs	r3, #128	@ 0x80
 8001fd2:	039b      	lsls	r3, r3, #14
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fe0:	4b21      	ldr	r3, [pc, #132]	@ (8002068 <HAL_GPIO_Init+0x2cc>)
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001fe6:	4b20      	ldr	r3, [pc, #128]	@ (8002068 <HAL_GPIO_Init+0x2cc>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	2380      	movs	r3, #128	@ 0x80
 8001ffc:	029b      	lsls	r3, r3, #10
 8001ffe:	4013      	ands	r3, r2
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800200a:	4b17      	ldr	r3, [pc, #92]	@ (8002068 <HAL_GPIO_Init+0x2cc>)
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002010:	4b15      	ldr	r3, [pc, #84]	@ (8002068 <HAL_GPIO_Init+0x2cc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	43da      	mvns	r2, r3
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	2380      	movs	r3, #128	@ 0x80
 8002026:	025b      	lsls	r3, r3, #9
 8002028:	4013      	ands	r3, r2
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002034:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <HAL_GPIO_Init+0x2cc>)
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	40da      	lsrs	r2, r3
 8002048:	1e13      	subs	r3, r2, #0
 800204a:	d000      	beq.n	800204e <HAL_GPIO_Init+0x2b2>
 800204c:	e6ae      	b.n	8001dac <HAL_GPIO_Init+0x10>
  } 
}
 800204e:	46c0      	nop			@ (mov r8, r8)
 8002050:	46c0      	nop			@ (mov r8, r8)
 8002052:	46bd      	mov	sp, r7
 8002054:	b006      	add	sp, #24
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021000 	.word	0x40021000
 800205c:	40010000 	.word	0x40010000
 8002060:	48000400 	.word	0x48000400
 8002064:	48000800 	.word	0x48000800
 8002068:	40010400 	.word	0x40010400

0800206c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	0008      	movs	r0, r1
 8002076:	0011      	movs	r1, r2
 8002078:	1cbb      	adds	r3, r7, #2
 800207a:	1c02      	adds	r2, r0, #0
 800207c:	801a      	strh	r2, [r3, #0]
 800207e:	1c7b      	adds	r3, r7, #1
 8002080:	1c0a      	adds	r2, r1, #0
 8002082:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002084:	1c7b      	adds	r3, r7, #1
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800208c:	1cbb      	adds	r3, r7, #2
 800208e:	881a      	ldrh	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002094:	e003      	b.n	800209e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002096:	1cbb      	adds	r3, r7, #2
 8002098:	881a      	ldrh	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800209e:	46c0      	nop			@ (mov r8, r8)
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b002      	add	sp, #8
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	0002      	movs	r2, r0
 80020b0:	1dbb      	adds	r3, r7, #6
 80020b2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020b4:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	1dba      	adds	r2, r7, #6
 80020ba:	8812      	ldrh	r2, [r2, #0]
 80020bc:	4013      	ands	r3, r2
 80020be:	d008      	beq.n	80020d2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020c0:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80020c2:	1dba      	adds	r2, r7, #6
 80020c4:	8812      	ldrh	r2, [r2, #0]
 80020c6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020c8:	1dbb      	adds	r3, r7, #6
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f000 f807 	bl	80020e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80020d2:	46c0      	nop			@ (mov r8, r8)
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b002      	add	sp, #8
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	40010400 	.word	0x40010400

080020e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	0002      	movs	r2, r0
 80020e8:	1dbb      	adds	r3, r7, #6
 80020ea:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80020ec:	46c0      	nop			@ (mov r8, r8)
 80020ee:	46bd      	mov	sp, r7
 80020f0:	b002      	add	sp, #8
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d102      	bne.n	8002108 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	f000 fb76 	bl	80027f4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2201      	movs	r2, #1
 800210e:	4013      	ands	r3, r2
 8002110:	d100      	bne.n	8002114 <HAL_RCC_OscConfig+0x20>
 8002112:	e08e      	b.n	8002232 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002114:	4bc5      	ldr	r3, [pc, #788]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	220c      	movs	r2, #12
 800211a:	4013      	ands	r3, r2
 800211c:	2b04      	cmp	r3, #4
 800211e:	d00e      	beq.n	800213e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002120:	4bc2      	ldr	r3, [pc, #776]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	220c      	movs	r2, #12
 8002126:	4013      	ands	r3, r2
 8002128:	2b08      	cmp	r3, #8
 800212a:	d117      	bne.n	800215c <HAL_RCC_OscConfig+0x68>
 800212c:	4bbf      	ldr	r3, [pc, #764]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	23c0      	movs	r3, #192	@ 0xc0
 8002132:	025b      	lsls	r3, r3, #9
 8002134:	401a      	ands	r2, r3
 8002136:	2380      	movs	r3, #128	@ 0x80
 8002138:	025b      	lsls	r3, r3, #9
 800213a:	429a      	cmp	r2, r3
 800213c:	d10e      	bne.n	800215c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213e:	4bbb      	ldr	r3, [pc, #748]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	2380      	movs	r3, #128	@ 0x80
 8002144:	029b      	lsls	r3, r3, #10
 8002146:	4013      	ands	r3, r2
 8002148:	d100      	bne.n	800214c <HAL_RCC_OscConfig+0x58>
 800214a:	e071      	b.n	8002230 <HAL_RCC_OscConfig+0x13c>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d000      	beq.n	8002156 <HAL_RCC_OscConfig+0x62>
 8002154:	e06c      	b.n	8002230 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	f000 fb4c 	bl	80027f4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d107      	bne.n	8002174 <HAL_RCC_OscConfig+0x80>
 8002164:	4bb1      	ldr	r3, [pc, #708]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4bb0      	ldr	r3, [pc, #704]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 800216a:	2180      	movs	r1, #128	@ 0x80
 800216c:	0249      	lsls	r1, r1, #9
 800216e:	430a      	orrs	r2, r1
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	e02f      	b.n	80021d4 <HAL_RCC_OscConfig+0xe0>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10c      	bne.n	8002196 <HAL_RCC_OscConfig+0xa2>
 800217c:	4bab      	ldr	r3, [pc, #684]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4baa      	ldr	r3, [pc, #680]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 8002182:	49ab      	ldr	r1, [pc, #684]	@ (8002430 <HAL_RCC_OscConfig+0x33c>)
 8002184:	400a      	ands	r2, r1
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	4ba8      	ldr	r3, [pc, #672]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4ba7      	ldr	r3, [pc, #668]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 800218e:	49a9      	ldr	r1, [pc, #676]	@ (8002434 <HAL_RCC_OscConfig+0x340>)
 8002190:	400a      	ands	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	e01e      	b.n	80021d4 <HAL_RCC_OscConfig+0xe0>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b05      	cmp	r3, #5
 800219c:	d10e      	bne.n	80021bc <HAL_RCC_OscConfig+0xc8>
 800219e:	4ba3      	ldr	r3, [pc, #652]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	4ba2      	ldr	r3, [pc, #648]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 80021a4:	2180      	movs	r1, #128	@ 0x80
 80021a6:	02c9      	lsls	r1, r1, #11
 80021a8:	430a      	orrs	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	4b9f      	ldr	r3, [pc, #636]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b9e      	ldr	r3, [pc, #632]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 80021b2:	2180      	movs	r1, #128	@ 0x80
 80021b4:	0249      	lsls	r1, r1, #9
 80021b6:	430a      	orrs	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	e00b      	b.n	80021d4 <HAL_RCC_OscConfig+0xe0>
 80021bc:	4b9b      	ldr	r3, [pc, #620]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b9a      	ldr	r3, [pc, #616]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 80021c2:	499b      	ldr	r1, [pc, #620]	@ (8002430 <HAL_RCC_OscConfig+0x33c>)
 80021c4:	400a      	ands	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	4b98      	ldr	r3, [pc, #608]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b97      	ldr	r3, [pc, #604]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 80021ce:	4999      	ldr	r1, [pc, #612]	@ (8002434 <HAL_RCC_OscConfig+0x340>)
 80021d0:	400a      	ands	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d014      	beq.n	8002206 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7ff fc54 	bl	8001a88 <HAL_GetTick>
 80021e0:	0003      	movs	r3, r0
 80021e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e6:	f7ff fc4f 	bl	8001a88 <HAL_GetTick>
 80021ea:	0002      	movs	r2, r0
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b64      	cmp	r3, #100	@ 0x64
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e2fd      	b.n	80027f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f8:	4b8c      	ldr	r3, [pc, #560]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	2380      	movs	r3, #128	@ 0x80
 80021fe:	029b      	lsls	r3, r3, #10
 8002200:	4013      	ands	r3, r2
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0xf2>
 8002204:	e015      	b.n	8002232 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7ff fc3f 	bl	8001a88 <HAL_GetTick>
 800220a:	0003      	movs	r3, r0
 800220c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002210:	f7ff fc3a 	bl	8001a88 <HAL_GetTick>
 8002214:	0002      	movs	r2, r0
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	@ 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e2e8      	b.n	80027f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002222:	4b82      	ldr	r3, [pc, #520]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	2380      	movs	r3, #128	@ 0x80
 8002228:	029b      	lsls	r3, r3, #10
 800222a:	4013      	ands	r3, r2
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x11c>
 800222e:	e000      	b.n	8002232 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002230:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2202      	movs	r2, #2
 8002238:	4013      	ands	r3, r2
 800223a:	d100      	bne.n	800223e <HAL_RCC_OscConfig+0x14a>
 800223c:	e06c      	b.n	8002318 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800223e:	4b7b      	ldr	r3, [pc, #492]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	220c      	movs	r2, #12
 8002244:	4013      	ands	r3, r2
 8002246:	d00e      	beq.n	8002266 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002248:	4b78      	ldr	r3, [pc, #480]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	220c      	movs	r2, #12
 800224e:	4013      	ands	r3, r2
 8002250:	2b08      	cmp	r3, #8
 8002252:	d11f      	bne.n	8002294 <HAL_RCC_OscConfig+0x1a0>
 8002254:	4b75      	ldr	r3, [pc, #468]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	23c0      	movs	r3, #192	@ 0xc0
 800225a:	025b      	lsls	r3, r3, #9
 800225c:	401a      	ands	r2, r3
 800225e:	2380      	movs	r3, #128	@ 0x80
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	429a      	cmp	r2, r3
 8002264:	d116      	bne.n	8002294 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	4b71      	ldr	r3, [pc, #452]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2202      	movs	r2, #2
 800226c:	4013      	ands	r3, r2
 800226e:	d005      	beq.n	800227c <HAL_RCC_OscConfig+0x188>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d001      	beq.n	800227c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e2bb      	b.n	80027f4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227c:	4b6b      	ldr	r3, [pc, #428]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	22f8      	movs	r2, #248	@ 0xf8
 8002282:	4393      	bics	r3, r2
 8002284:	0019      	movs	r1, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	00da      	lsls	r2, r3, #3
 800228c:	4b67      	ldr	r3, [pc, #412]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 800228e:	430a      	orrs	r2, r1
 8002290:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002292:	e041      	b.n	8002318 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d024      	beq.n	80022e6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800229c:	4b63      	ldr	r3, [pc, #396]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b62      	ldr	r3, [pc, #392]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 80022a2:	2101      	movs	r1, #1
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7ff fbee 	bl	8001a88 <HAL_GetTick>
 80022ac:	0003      	movs	r3, r0
 80022ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b2:	f7ff fbe9 	bl	8001a88 <HAL_GetTick>
 80022b6:	0002      	movs	r2, r0
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e297      	b.n	80027f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c4:	4b59      	ldr	r3, [pc, #356]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2202      	movs	r2, #2
 80022ca:	4013      	ands	r3, r2
 80022cc:	d0f1      	beq.n	80022b2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ce:	4b57      	ldr	r3, [pc, #348]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	22f8      	movs	r2, #248	@ 0xf8
 80022d4:	4393      	bics	r3, r2
 80022d6:	0019      	movs	r1, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	00da      	lsls	r2, r3, #3
 80022de:	4b53      	ldr	r3, [pc, #332]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 80022e0:	430a      	orrs	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	e018      	b.n	8002318 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e6:	4b51      	ldr	r3, [pc, #324]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4b50      	ldr	r3, [pc, #320]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 80022ec:	2101      	movs	r1, #1
 80022ee:	438a      	bics	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f2:	f7ff fbc9 	bl	8001a88 <HAL_GetTick>
 80022f6:	0003      	movs	r3, r0
 80022f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022fc:	f7ff fbc4 	bl	8001a88 <HAL_GetTick>
 8002300:	0002      	movs	r2, r0
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e272      	b.n	80027f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	4b47      	ldr	r3, [pc, #284]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2202      	movs	r2, #2
 8002314:	4013      	ands	r3, r2
 8002316:	d1f1      	bne.n	80022fc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2208      	movs	r2, #8
 800231e:	4013      	ands	r3, r2
 8002320:	d036      	beq.n	8002390 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d019      	beq.n	800235e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800232a:	4b40      	ldr	r3, [pc, #256]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 800232c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800232e:	4b3f      	ldr	r3, [pc, #252]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 8002330:	2101      	movs	r1, #1
 8002332:	430a      	orrs	r2, r1
 8002334:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002336:	f7ff fba7 	bl	8001a88 <HAL_GetTick>
 800233a:	0003      	movs	r3, r0
 800233c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002340:	f7ff fba2 	bl	8001a88 <HAL_GetTick>
 8002344:	0002      	movs	r2, r0
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e250      	b.n	80027f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002352:	4b36      	ldr	r3, [pc, #216]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 8002354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002356:	2202      	movs	r2, #2
 8002358:	4013      	ands	r3, r2
 800235a:	d0f1      	beq.n	8002340 <HAL_RCC_OscConfig+0x24c>
 800235c:	e018      	b.n	8002390 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800235e:	4b33      	ldr	r3, [pc, #204]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 8002360:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002362:	4b32      	ldr	r3, [pc, #200]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 8002364:	2101      	movs	r1, #1
 8002366:	438a      	bics	r2, r1
 8002368:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236a:	f7ff fb8d 	bl	8001a88 <HAL_GetTick>
 800236e:	0003      	movs	r3, r0
 8002370:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002374:	f7ff fb88 	bl	8001a88 <HAL_GetTick>
 8002378:	0002      	movs	r2, r0
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e236      	b.n	80027f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002386:	4b29      	ldr	r3, [pc, #164]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	2202      	movs	r2, #2
 800238c:	4013      	ands	r3, r2
 800238e:	d1f1      	bne.n	8002374 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2204      	movs	r2, #4
 8002396:	4013      	ands	r3, r2
 8002398:	d100      	bne.n	800239c <HAL_RCC_OscConfig+0x2a8>
 800239a:	e0b5      	b.n	8002508 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239c:	201f      	movs	r0, #31
 800239e:	183b      	adds	r3, r7, r0
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023a4:	4b21      	ldr	r3, [pc, #132]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 80023a6:	69da      	ldr	r2, [r3, #28]
 80023a8:	2380      	movs	r3, #128	@ 0x80
 80023aa:	055b      	lsls	r3, r3, #21
 80023ac:	4013      	ands	r3, r2
 80023ae:	d110      	bne.n	80023d2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b0:	4b1e      	ldr	r3, [pc, #120]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 80023b2:	69da      	ldr	r2, [r3, #28]
 80023b4:	4b1d      	ldr	r3, [pc, #116]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 80023b6:	2180      	movs	r1, #128	@ 0x80
 80023b8:	0549      	lsls	r1, r1, #21
 80023ba:	430a      	orrs	r2, r1
 80023bc:	61da      	str	r2, [r3, #28]
 80023be:	4b1b      	ldr	r3, [pc, #108]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 80023c0:	69da      	ldr	r2, [r3, #28]
 80023c2:	2380      	movs	r3, #128	@ 0x80
 80023c4:	055b      	lsls	r3, r3, #21
 80023c6:	4013      	ands	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023cc:	183b      	adds	r3, r7, r0
 80023ce:	2201      	movs	r2, #1
 80023d0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d2:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <HAL_RCC_OscConfig+0x344>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	2380      	movs	r3, #128	@ 0x80
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4013      	ands	r3, r2
 80023dc:	d11a      	bne.n	8002414 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023de:	4b16      	ldr	r3, [pc, #88]	@ (8002438 <HAL_RCC_OscConfig+0x344>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4b15      	ldr	r3, [pc, #84]	@ (8002438 <HAL_RCC_OscConfig+0x344>)
 80023e4:	2180      	movs	r1, #128	@ 0x80
 80023e6:	0049      	lsls	r1, r1, #1
 80023e8:	430a      	orrs	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ec:	f7ff fb4c 	bl	8001a88 <HAL_GetTick>
 80023f0:	0003      	movs	r3, r0
 80023f2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f6:	f7ff fb47 	bl	8001a88 <HAL_GetTick>
 80023fa:	0002      	movs	r2, r0
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b64      	cmp	r3, #100	@ 0x64
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e1f5      	b.n	80027f4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	4b0b      	ldr	r3, [pc, #44]	@ (8002438 <HAL_RCC_OscConfig+0x344>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	2380      	movs	r3, #128	@ 0x80
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4013      	ands	r3, r2
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d10f      	bne.n	800243c <HAL_RCC_OscConfig+0x348>
 800241c:	4b03      	ldr	r3, [pc, #12]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 800241e:	6a1a      	ldr	r2, [r3, #32]
 8002420:	4b02      	ldr	r3, [pc, #8]	@ (800242c <HAL_RCC_OscConfig+0x338>)
 8002422:	2101      	movs	r1, #1
 8002424:	430a      	orrs	r2, r1
 8002426:	621a      	str	r2, [r3, #32]
 8002428:	e036      	b.n	8002498 <HAL_RCC_OscConfig+0x3a4>
 800242a:	46c0      	nop			@ (mov r8, r8)
 800242c:	40021000 	.word	0x40021000
 8002430:	fffeffff 	.word	0xfffeffff
 8002434:	fffbffff 	.word	0xfffbffff
 8002438:	40007000 	.word	0x40007000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10c      	bne.n	800245e <HAL_RCC_OscConfig+0x36a>
 8002444:	4bca      	ldr	r3, [pc, #808]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002446:	6a1a      	ldr	r2, [r3, #32]
 8002448:	4bc9      	ldr	r3, [pc, #804]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 800244a:	2101      	movs	r1, #1
 800244c:	438a      	bics	r2, r1
 800244e:	621a      	str	r2, [r3, #32]
 8002450:	4bc7      	ldr	r3, [pc, #796]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002452:	6a1a      	ldr	r2, [r3, #32]
 8002454:	4bc6      	ldr	r3, [pc, #792]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002456:	2104      	movs	r1, #4
 8002458:	438a      	bics	r2, r1
 800245a:	621a      	str	r2, [r3, #32]
 800245c:	e01c      	b.n	8002498 <HAL_RCC_OscConfig+0x3a4>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b05      	cmp	r3, #5
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0x38c>
 8002466:	4bc2      	ldr	r3, [pc, #776]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002468:	6a1a      	ldr	r2, [r3, #32]
 800246a:	4bc1      	ldr	r3, [pc, #772]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 800246c:	2104      	movs	r1, #4
 800246e:	430a      	orrs	r2, r1
 8002470:	621a      	str	r2, [r3, #32]
 8002472:	4bbf      	ldr	r3, [pc, #764]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002474:	6a1a      	ldr	r2, [r3, #32]
 8002476:	4bbe      	ldr	r3, [pc, #760]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002478:	2101      	movs	r1, #1
 800247a:	430a      	orrs	r2, r1
 800247c:	621a      	str	r2, [r3, #32]
 800247e:	e00b      	b.n	8002498 <HAL_RCC_OscConfig+0x3a4>
 8002480:	4bbb      	ldr	r3, [pc, #748]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002482:	6a1a      	ldr	r2, [r3, #32]
 8002484:	4bba      	ldr	r3, [pc, #744]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002486:	2101      	movs	r1, #1
 8002488:	438a      	bics	r2, r1
 800248a:	621a      	str	r2, [r3, #32]
 800248c:	4bb8      	ldr	r3, [pc, #736]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 800248e:	6a1a      	ldr	r2, [r3, #32]
 8002490:	4bb7      	ldr	r3, [pc, #732]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002492:	2104      	movs	r1, #4
 8002494:	438a      	bics	r2, r1
 8002496:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d014      	beq.n	80024ca <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a0:	f7ff faf2 	bl	8001a88 <HAL_GetTick>
 80024a4:	0003      	movs	r3, r0
 80024a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a8:	e009      	b.n	80024be <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7ff faed 	bl	8001a88 <HAL_GetTick>
 80024ae:	0002      	movs	r2, r0
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	4aaf      	ldr	r2, [pc, #700]	@ (8002774 <HAL_RCC_OscConfig+0x680>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e19a      	b.n	80027f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024be:	4bac      	ldr	r3, [pc, #688]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	2202      	movs	r2, #2
 80024c4:	4013      	ands	r3, r2
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x3b6>
 80024c8:	e013      	b.n	80024f2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ca:	f7ff fadd 	bl	8001a88 <HAL_GetTick>
 80024ce:	0003      	movs	r3, r0
 80024d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d2:	e009      	b.n	80024e8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d4:	f7ff fad8 	bl	8001a88 <HAL_GetTick>
 80024d8:	0002      	movs	r2, r0
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	4aa5      	ldr	r2, [pc, #660]	@ (8002774 <HAL_RCC_OscConfig+0x680>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e185      	b.n	80027f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e8:	4ba1      	ldr	r3, [pc, #644]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	2202      	movs	r2, #2
 80024ee:	4013      	ands	r3, r2
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024f2:	231f      	movs	r3, #31
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d105      	bne.n	8002508 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fc:	4b9c      	ldr	r3, [pc, #624]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 80024fe:	69da      	ldr	r2, [r3, #28]
 8002500:	4b9b      	ldr	r3, [pc, #620]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002502:	499d      	ldr	r1, [pc, #628]	@ (8002778 <HAL_RCC_OscConfig+0x684>)
 8002504:	400a      	ands	r2, r1
 8002506:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2210      	movs	r2, #16
 800250e:	4013      	ands	r3, r2
 8002510:	d063      	beq.n	80025da <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d12a      	bne.n	8002570 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800251a:	4b95      	ldr	r3, [pc, #596]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 800251c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800251e:	4b94      	ldr	r3, [pc, #592]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002520:	2104      	movs	r1, #4
 8002522:	430a      	orrs	r2, r1
 8002524:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002526:	4b92      	ldr	r3, [pc, #584]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800252a:	4b91      	ldr	r3, [pc, #580]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 800252c:	2101      	movs	r1, #1
 800252e:	430a      	orrs	r2, r1
 8002530:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7ff faa9 	bl	8001a88 <HAL_GetTick>
 8002536:	0003      	movs	r3, r0
 8002538:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800253c:	f7ff faa4 	bl	8001a88 <HAL_GetTick>
 8002540:	0002      	movs	r2, r0
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e152      	b.n	80027f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800254e:	4b88      	ldr	r3, [pc, #544]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002552:	2202      	movs	r2, #2
 8002554:	4013      	ands	r3, r2
 8002556:	d0f1      	beq.n	800253c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002558:	4b85      	ldr	r3, [pc, #532]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 800255a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800255c:	22f8      	movs	r2, #248	@ 0xf8
 800255e:	4393      	bics	r3, r2
 8002560:	0019      	movs	r1, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	00da      	lsls	r2, r3, #3
 8002568:	4b81      	ldr	r3, [pc, #516]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 800256a:	430a      	orrs	r2, r1
 800256c:	635a      	str	r2, [r3, #52]	@ 0x34
 800256e:	e034      	b.n	80025da <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	3305      	adds	r3, #5
 8002576:	d111      	bne.n	800259c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002578:	4b7d      	ldr	r3, [pc, #500]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 800257a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800257c:	4b7c      	ldr	r3, [pc, #496]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 800257e:	2104      	movs	r1, #4
 8002580:	438a      	bics	r2, r1
 8002582:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002584:	4b7a      	ldr	r3, [pc, #488]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002588:	22f8      	movs	r2, #248	@ 0xf8
 800258a:	4393      	bics	r3, r2
 800258c:	0019      	movs	r1, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	00da      	lsls	r2, r3, #3
 8002594:	4b76      	ldr	r3, [pc, #472]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002596:	430a      	orrs	r2, r1
 8002598:	635a      	str	r2, [r3, #52]	@ 0x34
 800259a:	e01e      	b.n	80025da <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800259c:	4b74      	ldr	r3, [pc, #464]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 800259e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025a0:	4b73      	ldr	r3, [pc, #460]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 80025a2:	2104      	movs	r1, #4
 80025a4:	430a      	orrs	r2, r1
 80025a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80025a8:	4b71      	ldr	r3, [pc, #452]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 80025aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025ac:	4b70      	ldr	r3, [pc, #448]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 80025ae:	2101      	movs	r1, #1
 80025b0:	438a      	bics	r2, r1
 80025b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b4:	f7ff fa68 	bl	8001a88 <HAL_GetTick>
 80025b8:	0003      	movs	r3, r0
 80025ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025be:	f7ff fa63 	bl	8001a88 <HAL_GetTick>
 80025c2:	0002      	movs	r2, r0
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e111      	b.n	80027f4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025d0:	4b67      	ldr	r3, [pc, #412]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 80025d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d4:	2202      	movs	r2, #2
 80025d6:	4013      	ands	r3, r2
 80025d8:	d1f1      	bne.n	80025be <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2220      	movs	r2, #32
 80025e0:	4013      	ands	r3, r2
 80025e2:	d05c      	beq.n	800269e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80025e4:	4b62      	ldr	r3, [pc, #392]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	220c      	movs	r2, #12
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b0c      	cmp	r3, #12
 80025ee:	d00e      	beq.n	800260e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80025f0:	4b5f      	ldr	r3, [pc, #380]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	220c      	movs	r2, #12
 80025f6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d114      	bne.n	8002626 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80025fc:	4b5c      	ldr	r3, [pc, #368]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	23c0      	movs	r3, #192	@ 0xc0
 8002602:	025b      	lsls	r3, r3, #9
 8002604:	401a      	ands	r2, r3
 8002606:	23c0      	movs	r3, #192	@ 0xc0
 8002608:	025b      	lsls	r3, r3, #9
 800260a:	429a      	cmp	r2, r3
 800260c:	d10b      	bne.n	8002626 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800260e:	4b58      	ldr	r3, [pc, #352]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002610:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002612:	2380      	movs	r3, #128	@ 0x80
 8002614:	029b      	lsls	r3, r3, #10
 8002616:	4013      	ands	r3, r2
 8002618:	d040      	beq.n	800269c <HAL_RCC_OscConfig+0x5a8>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d03c      	beq.n	800269c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e0e6      	b.n	80027f4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d01b      	beq.n	8002666 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800262e:	4b50      	ldr	r3, [pc, #320]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002630:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002632:	4b4f      	ldr	r3, [pc, #316]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002634:	2180      	movs	r1, #128	@ 0x80
 8002636:	0249      	lsls	r1, r1, #9
 8002638:	430a      	orrs	r2, r1
 800263a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7ff fa24 	bl	8001a88 <HAL_GetTick>
 8002640:	0003      	movs	r3, r0
 8002642:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002646:	f7ff fa1f 	bl	8001a88 <HAL_GetTick>
 800264a:	0002      	movs	r2, r0
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e0cd      	b.n	80027f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002658:	4b45      	ldr	r3, [pc, #276]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 800265a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800265c:	2380      	movs	r3, #128	@ 0x80
 800265e:	029b      	lsls	r3, r3, #10
 8002660:	4013      	ands	r3, r2
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x552>
 8002664:	e01b      	b.n	800269e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002666:	4b42      	ldr	r3, [pc, #264]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002668:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800266a:	4b41      	ldr	r3, [pc, #260]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 800266c:	4943      	ldr	r1, [pc, #268]	@ (800277c <HAL_RCC_OscConfig+0x688>)
 800266e:	400a      	ands	r2, r1
 8002670:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002672:	f7ff fa09 	bl	8001a88 <HAL_GetTick>
 8002676:	0003      	movs	r3, r0
 8002678:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800267c:	f7ff fa04 	bl	8001a88 <HAL_GetTick>
 8002680:	0002      	movs	r2, r0
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e0b2      	b.n	80027f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800268e:	4b38      	ldr	r3, [pc, #224]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002692:	2380      	movs	r3, #128	@ 0x80
 8002694:	029b      	lsls	r3, r3, #10
 8002696:	4013      	ands	r3, r2
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x588>
 800269a:	e000      	b.n	800269e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800269c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d100      	bne.n	80026a8 <HAL_RCC_OscConfig+0x5b4>
 80026a6:	e0a4      	b.n	80027f2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a8:	4b31      	ldr	r3, [pc, #196]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	220c      	movs	r2, #12
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d100      	bne.n	80026b6 <HAL_RCC_OscConfig+0x5c2>
 80026b4:	e078      	b.n	80027a8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d14c      	bne.n	8002758 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026be:	4b2c      	ldr	r3, [pc, #176]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 80026c4:	492e      	ldr	r1, [pc, #184]	@ (8002780 <HAL_RCC_OscConfig+0x68c>)
 80026c6:	400a      	ands	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ca:	f7ff f9dd 	bl	8001a88 <HAL_GetTick>
 80026ce:	0003      	movs	r3, r0
 80026d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d4:	f7ff f9d8 	bl	8001a88 <HAL_GetTick>
 80026d8:	0002      	movs	r2, r0
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e086      	b.n	80027f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e6:	4b22      	ldr	r3, [pc, #136]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	2380      	movs	r3, #128	@ 0x80
 80026ec:	049b      	lsls	r3, r3, #18
 80026ee:	4013      	ands	r3, r2
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 80026f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f6:	220f      	movs	r2, #15
 80026f8:	4393      	bics	r3, r2
 80026fa:	0019      	movs	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002700:	4b1b      	ldr	r3, [pc, #108]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002702:	430a      	orrs	r2, r1
 8002704:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002706:	4b1a      	ldr	r3, [pc, #104]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4a1e      	ldr	r2, [pc, #120]	@ (8002784 <HAL_RCC_OscConfig+0x690>)
 800270c:	4013      	ands	r3, r2
 800270e:	0019      	movs	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002718:	431a      	orrs	r2, r3
 800271a:	4b15      	ldr	r3, [pc, #84]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 800271c:	430a      	orrs	r2, r1
 800271e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002720:	4b13      	ldr	r3, [pc, #76]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b12      	ldr	r3, [pc, #72]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 8002726:	2180      	movs	r1, #128	@ 0x80
 8002728:	0449      	lsls	r1, r1, #17
 800272a:	430a      	orrs	r2, r1
 800272c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272e:	f7ff f9ab 	bl	8001a88 <HAL_GetTick>
 8002732:	0003      	movs	r3, r0
 8002734:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002738:	f7ff f9a6 	bl	8001a88 <HAL_GetTick>
 800273c:	0002      	movs	r2, r0
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e054      	b.n	80027f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800274a:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	2380      	movs	r3, #128	@ 0x80
 8002750:	049b      	lsls	r3, r3, #18
 8002752:	4013      	ands	r3, r2
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x644>
 8002756:	e04c      	b.n	80027f2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002758:	4b05      	ldr	r3, [pc, #20]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b04      	ldr	r3, [pc, #16]	@ (8002770 <HAL_RCC_OscConfig+0x67c>)
 800275e:	4908      	ldr	r1, [pc, #32]	@ (8002780 <HAL_RCC_OscConfig+0x68c>)
 8002760:	400a      	ands	r2, r1
 8002762:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7ff f990 	bl	8001a88 <HAL_GetTick>
 8002768:	0003      	movs	r3, r0
 800276a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276c:	e015      	b.n	800279a <HAL_RCC_OscConfig+0x6a6>
 800276e:	46c0      	nop			@ (mov r8, r8)
 8002770:	40021000 	.word	0x40021000
 8002774:	00001388 	.word	0x00001388
 8002778:	efffffff 	.word	0xefffffff
 800277c:	fffeffff 	.word	0xfffeffff
 8002780:	feffffff 	.word	0xfeffffff
 8002784:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002788:	f7ff f97e 	bl	8001a88 <HAL_GetTick>
 800278c:	0002      	movs	r2, r0
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e02c      	b.n	80027f4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279a:	4b18      	ldr	r3, [pc, #96]	@ (80027fc <HAL_RCC_OscConfig+0x708>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	2380      	movs	r3, #128	@ 0x80
 80027a0:	049b      	lsls	r3, r3, #18
 80027a2:	4013      	ands	r3, r2
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x694>
 80027a6:	e024      	b.n	80027f2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e01f      	b.n	80027f4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80027b4:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <HAL_RCC_OscConfig+0x708>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80027ba:	4b10      	ldr	r3, [pc, #64]	@ (80027fc <HAL_RCC_OscConfig+0x708>)
 80027bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027be:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	23c0      	movs	r3, #192	@ 0xc0
 80027c4:	025b      	lsls	r3, r3, #9
 80027c6:	401a      	ands	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d10e      	bne.n	80027ee <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	220f      	movs	r2, #15
 80027d4:	401a      	ands	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	23f0      	movs	r3, #240	@ 0xf0
 80027e2:	039b      	lsls	r3, r3, #14
 80027e4:	401a      	ands	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	0018      	movs	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b008      	add	sp, #32
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40021000 	.word	0x40021000

08002800 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0bf      	b.n	8002994 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b61      	ldr	r3, [pc, #388]	@ (800299c <HAL_RCC_ClockConfig+0x19c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2201      	movs	r2, #1
 800281a:	4013      	ands	r3, r2
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d911      	bls.n	8002846 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b5e      	ldr	r3, [pc, #376]	@ (800299c <HAL_RCC_ClockConfig+0x19c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2201      	movs	r2, #1
 8002828:	4393      	bics	r3, r2
 800282a:	0019      	movs	r1, r3
 800282c:	4b5b      	ldr	r3, [pc, #364]	@ (800299c <HAL_RCC_ClockConfig+0x19c>)
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002834:	4b59      	ldr	r3, [pc, #356]	@ (800299c <HAL_RCC_ClockConfig+0x19c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2201      	movs	r2, #1
 800283a:	4013      	ands	r3, r2
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d001      	beq.n	8002846 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e0a6      	b.n	8002994 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2202      	movs	r2, #2
 800284c:	4013      	ands	r3, r2
 800284e:	d015      	beq.n	800287c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2204      	movs	r2, #4
 8002856:	4013      	ands	r3, r2
 8002858:	d006      	beq.n	8002868 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800285a:	4b51      	ldr	r3, [pc, #324]	@ (80029a0 <HAL_RCC_ClockConfig+0x1a0>)
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	4b50      	ldr	r3, [pc, #320]	@ (80029a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002860:	21e0      	movs	r1, #224	@ 0xe0
 8002862:	00c9      	lsls	r1, r1, #3
 8002864:	430a      	orrs	r2, r1
 8002866:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002868:	4b4d      	ldr	r3, [pc, #308]	@ (80029a0 <HAL_RCC_ClockConfig+0x1a0>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	22f0      	movs	r2, #240	@ 0xf0
 800286e:	4393      	bics	r3, r2
 8002870:	0019      	movs	r1, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	4b4a      	ldr	r3, [pc, #296]	@ (80029a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002878:	430a      	orrs	r2, r1
 800287a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2201      	movs	r2, #1
 8002882:	4013      	ands	r3, r2
 8002884:	d04c      	beq.n	8002920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b44      	ldr	r3, [pc, #272]	@ (80029a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	2380      	movs	r3, #128	@ 0x80
 8002894:	029b      	lsls	r3, r3, #10
 8002896:	4013      	ands	r3, r2
 8002898:	d120      	bne.n	80028dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e07a      	b.n	8002994 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a6:	4b3e      	ldr	r3, [pc, #248]	@ (80029a0 <HAL_RCC_ClockConfig+0x1a0>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	2380      	movs	r3, #128	@ 0x80
 80028ac:	049b      	lsls	r3, r3, #18
 80028ae:	4013      	ands	r3, r2
 80028b0:	d114      	bne.n	80028dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e06e      	b.n	8002994 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028be:	4b38      	ldr	r3, [pc, #224]	@ (80029a0 <HAL_RCC_ClockConfig+0x1a0>)
 80028c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028c2:	2380      	movs	r3, #128	@ 0x80
 80028c4:	029b      	lsls	r3, r3, #10
 80028c6:	4013      	ands	r3, r2
 80028c8:	d108      	bne.n	80028dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e062      	b.n	8002994 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ce:	4b34      	ldr	r3, [pc, #208]	@ (80029a0 <HAL_RCC_ClockConfig+0x1a0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2202      	movs	r2, #2
 80028d4:	4013      	ands	r3, r2
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e05b      	b.n	8002994 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028dc:	4b30      	ldr	r3, [pc, #192]	@ (80029a0 <HAL_RCC_ClockConfig+0x1a0>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2203      	movs	r2, #3
 80028e2:	4393      	bics	r3, r2
 80028e4:	0019      	movs	r1, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	4b2d      	ldr	r3, [pc, #180]	@ (80029a0 <HAL_RCC_ClockConfig+0x1a0>)
 80028ec:	430a      	orrs	r2, r1
 80028ee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f0:	f7ff f8ca 	bl	8001a88 <HAL_GetTick>
 80028f4:	0003      	movs	r3, r0
 80028f6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f8:	e009      	b.n	800290e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028fa:	f7ff f8c5 	bl	8001a88 <HAL_GetTick>
 80028fe:	0002      	movs	r2, r0
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	4a27      	ldr	r2, [pc, #156]	@ (80029a4 <HAL_RCC_ClockConfig+0x1a4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e042      	b.n	8002994 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	4b24      	ldr	r3, [pc, #144]	@ (80029a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	220c      	movs	r2, #12
 8002914:	401a      	ands	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	429a      	cmp	r2, r3
 800291e:	d1ec      	bne.n	80028fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002920:	4b1e      	ldr	r3, [pc, #120]	@ (800299c <HAL_RCC_ClockConfig+0x19c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2201      	movs	r2, #1
 8002926:	4013      	ands	r3, r2
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d211      	bcs.n	8002952 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b1b      	ldr	r3, [pc, #108]	@ (800299c <HAL_RCC_ClockConfig+0x19c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2201      	movs	r2, #1
 8002934:	4393      	bics	r3, r2
 8002936:	0019      	movs	r1, r3
 8002938:	4b18      	ldr	r3, [pc, #96]	@ (800299c <HAL_RCC_ClockConfig+0x19c>)
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002940:	4b16      	ldr	r3, [pc, #88]	@ (800299c <HAL_RCC_ClockConfig+0x19c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2201      	movs	r2, #1
 8002946:	4013      	ands	r3, r2
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d001      	beq.n	8002952 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e020      	b.n	8002994 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2204      	movs	r2, #4
 8002958:	4013      	ands	r3, r2
 800295a:	d009      	beq.n	8002970 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800295c:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <HAL_RCC_ClockConfig+0x1a0>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	4a11      	ldr	r2, [pc, #68]	@ (80029a8 <HAL_RCC_ClockConfig+0x1a8>)
 8002962:	4013      	ands	r3, r2
 8002964:	0019      	movs	r1, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	4b0d      	ldr	r3, [pc, #52]	@ (80029a0 <HAL_RCC_ClockConfig+0x1a0>)
 800296c:	430a      	orrs	r2, r1
 800296e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002970:	f000 f820 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 8002974:	0001      	movs	r1, r0
 8002976:	4b0a      	ldr	r3, [pc, #40]	@ (80029a0 <HAL_RCC_ClockConfig+0x1a0>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	220f      	movs	r2, #15
 800297e:	4013      	ands	r3, r2
 8002980:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <HAL_RCC_ClockConfig+0x1ac>)
 8002982:	5cd3      	ldrb	r3, [r2, r3]
 8002984:	000a      	movs	r2, r1
 8002986:	40da      	lsrs	r2, r3
 8002988:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <HAL_RCC_ClockConfig+0x1b0>)
 800298a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800298c:	2000      	movs	r0, #0
 800298e:	f7ff f835 	bl	80019fc <HAL_InitTick>
  
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	0018      	movs	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	b004      	add	sp, #16
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40022000 	.word	0x40022000
 80029a0:	40021000 	.word	0x40021000
 80029a4:	00001388 	.word	0x00001388
 80029a8:	fffff8ff 	.word	0xfffff8ff
 80029ac:	080045fc 	.word	0x080045fc
 80029b0:	20000004 	.word	0x20000004

080029b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	2300      	movs	r3, #0
 80029c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80029ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0xd0>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	220c      	movs	r2, #12
 80029d8:	4013      	ands	r3, r2
 80029da:	2b0c      	cmp	r3, #12
 80029dc:	d046      	beq.n	8002a6c <HAL_RCC_GetSysClockFreq+0xb8>
 80029de:	d848      	bhi.n	8002a72 <HAL_RCC_GetSysClockFreq+0xbe>
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d002      	beq.n	80029ea <HAL_RCC_GetSysClockFreq+0x36>
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d003      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0x3c>
 80029e8:	e043      	b.n	8002a72 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029ea:	4b27      	ldr	r3, [pc, #156]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0xd4>)
 80029ec:	613b      	str	r3, [r7, #16]
      break;
 80029ee:	e043      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	0c9b      	lsrs	r3, r3, #18
 80029f4:	220f      	movs	r2, #15
 80029f6:	4013      	ands	r3, r2
 80029f8:	4a24      	ldr	r2, [pc, #144]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0xd8>)
 80029fa:	5cd3      	ldrb	r3, [r2, r3]
 80029fc:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80029fe:	4b21      	ldr	r3, [pc, #132]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a02:	220f      	movs	r2, #15
 8002a04:	4013      	ands	r3, r2
 8002a06:	4a22      	ldr	r2, [pc, #136]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002a08:	5cd3      	ldrb	r3, [r2, r3]
 8002a0a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	23c0      	movs	r3, #192	@ 0xc0
 8002a10:	025b      	lsls	r3, r3, #9
 8002a12:	401a      	ands	r2, r3
 8002a14:	2380      	movs	r3, #128	@ 0x80
 8002a16:	025b      	lsls	r3, r3, #9
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d109      	bne.n	8002a30 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	481a      	ldr	r0, [pc, #104]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a20:	f7fd fb72 	bl	8000108 <__udivsi3>
 8002a24:	0003      	movs	r3, r0
 8002a26:	001a      	movs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4353      	muls	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	e01a      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	23c0      	movs	r3, #192	@ 0xc0
 8002a34:	025b      	lsls	r3, r3, #9
 8002a36:	401a      	ands	r2, r3
 8002a38:	23c0      	movs	r3, #192	@ 0xc0
 8002a3a:	025b      	lsls	r3, r3, #9
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d109      	bne.n	8002a54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	4814      	ldr	r0, [pc, #80]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002a44:	f7fd fb60 	bl	8000108 <__udivsi3>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	001a      	movs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4353      	muls	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	480c      	ldr	r0, [pc, #48]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a58:	f7fd fb56 	bl	8000108 <__udivsi3>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	001a      	movs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4353      	muls	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	613b      	str	r3, [r7, #16]
      break;
 8002a6a:	e005      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002a6c:	4b09      	ldr	r3, [pc, #36]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002a6e:	613b      	str	r3, [r7, #16]
      break;
 8002a70:	e002      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a72:	4b05      	ldr	r3, [pc, #20]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a74:	613b      	str	r3, [r7, #16]
      break;
 8002a76:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a78:	693b      	ldr	r3, [r7, #16]
}
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b006      	add	sp, #24
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	46c0      	nop			@ (mov r8, r8)
 8002a84:	40021000 	.word	0x40021000
 8002a88:	007a1200 	.word	0x007a1200
 8002a8c:	0800463c 	.word	0x0800463c
 8002a90:	0800464c 	.word	0x0800464c
 8002a94:	02dc6c00 	.word	0x02dc6c00

08002a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a9c:	4b02      	ldr	r3, [pc, #8]	@ (8002aa8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	46c0      	nop			@ (mov r8, r8)
 8002aa8:	20000004 	.word	0x20000004

08002aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002ab0:	f7ff fff2 	bl	8002a98 <HAL_RCC_GetHCLKFreq>
 8002ab4:	0001      	movs	r1, r0
 8002ab6:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	0a1b      	lsrs	r3, r3, #8
 8002abc:	2207      	movs	r2, #7
 8002abe:	4013      	ands	r3, r2
 8002ac0:	4a04      	ldr	r2, [pc, #16]	@ (8002ad4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	40d9      	lsrs	r1, r3
 8002ac6:	000b      	movs	r3, r1
}    
 8002ac8:	0018      	movs	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	46c0      	nop			@ (mov r8, r8)
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	0800460c 	.word	0x0800460c

08002ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	2380      	movs	r3, #128	@ 0x80
 8002aee:	025b      	lsls	r3, r3, #9
 8002af0:	4013      	ands	r3, r2
 8002af2:	d100      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002af4:	e08e      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002af6:	2017      	movs	r0, #23
 8002af8:	183b      	adds	r3, r7, r0
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002afe:	4b67      	ldr	r3, [pc, #412]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b00:	69da      	ldr	r2, [r3, #28]
 8002b02:	2380      	movs	r3, #128	@ 0x80
 8002b04:	055b      	lsls	r3, r3, #21
 8002b06:	4013      	ands	r3, r2
 8002b08:	d110      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b0a:	4b64      	ldr	r3, [pc, #400]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b0c:	69da      	ldr	r2, [r3, #28]
 8002b0e:	4b63      	ldr	r3, [pc, #396]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b10:	2180      	movs	r1, #128	@ 0x80
 8002b12:	0549      	lsls	r1, r1, #21
 8002b14:	430a      	orrs	r2, r1
 8002b16:	61da      	str	r2, [r3, #28]
 8002b18:	4b60      	ldr	r3, [pc, #384]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b1a:	69da      	ldr	r2, [r3, #28]
 8002b1c:	2380      	movs	r3, #128	@ 0x80
 8002b1e:	055b      	lsls	r3, r3, #21
 8002b20:	4013      	ands	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b26:	183b      	adds	r3, r7, r0
 8002b28:	2201      	movs	r2, #1
 8002b2a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	4b5c      	ldr	r3, [pc, #368]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	2380      	movs	r3, #128	@ 0x80
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4013      	ands	r3, r2
 8002b36:	d11a      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b38:	4b59      	ldr	r3, [pc, #356]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b58      	ldr	r3, [pc, #352]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b3e:	2180      	movs	r1, #128	@ 0x80
 8002b40:	0049      	lsls	r1, r1, #1
 8002b42:	430a      	orrs	r2, r1
 8002b44:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b46:	f7fe ff9f 	bl	8001a88 <HAL_GetTick>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4e:	e008      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b50:	f7fe ff9a 	bl	8001a88 <HAL_GetTick>
 8002b54:	0002      	movs	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	@ 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e097      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b62:	4b4f      	ldr	r3, [pc, #316]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	2380      	movs	r3, #128	@ 0x80
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b6e:	4b4b      	ldr	r3, [pc, #300]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b70:	6a1a      	ldr	r2, [r3, #32]
 8002b72:	23c0      	movs	r3, #192	@ 0xc0
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4013      	ands	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d034      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	23c0      	movs	r3, #192	@ 0xc0
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4013      	ands	r3, r2
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d02c      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b90:	4b42      	ldr	r3, [pc, #264]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	4a43      	ldr	r2, [pc, #268]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b9a:	4b40      	ldr	r3, [pc, #256]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b9c:	6a1a      	ldr	r2, [r3, #32]
 8002b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ba0:	2180      	movs	r1, #128	@ 0x80
 8002ba2:	0249      	lsls	r1, r1, #9
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ba8:	4b3c      	ldr	r3, [pc, #240]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002baa:	6a1a      	ldr	r2, [r3, #32]
 8002bac:	4b3b      	ldr	r3, [pc, #236]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bae:	493e      	ldr	r1, [pc, #248]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bb4:	4b39      	ldr	r3, [pc, #228]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d013      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc2:	f7fe ff61 	bl	8001a88 <HAL_GetTick>
 8002bc6:	0003      	movs	r3, r0
 8002bc8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bca:	e009      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bcc:	f7fe ff5c 	bl	8001a88 <HAL_GetTick>
 8002bd0:	0002      	movs	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	4a35      	ldr	r2, [pc, #212]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e058      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be0:	4b2e      	ldr	r3, [pc, #184]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	2202      	movs	r2, #2
 8002be6:	4013      	ands	r3, r2
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bea:	4b2c      	ldr	r3, [pc, #176]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	4a2d      	ldr	r2, [pc, #180]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	4b28      	ldr	r3, [pc, #160]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bfe:	2317      	movs	r3, #23
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d105      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c08:	4b24      	ldr	r3, [pc, #144]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c0a:	69da      	ldr	r2, [r3, #28]
 8002c0c:	4b23      	ldr	r3, [pc, #140]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c0e:	4928      	ldr	r1, [pc, #160]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c10:	400a      	ands	r2, r1
 8002c12:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d009      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c22:	2203      	movs	r2, #3
 8002c24:	4393      	bics	r3, r2
 8002c26:	0019      	movs	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2220      	movs	r2, #32
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d009      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c3c:	4b17      	ldr	r3, [pc, #92]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c40:	2210      	movs	r2, #16
 8002c42:	4393      	bics	r3, r2
 8002c44:	0019      	movs	r1, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	4b14      	ldr	r3, [pc, #80]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	2380      	movs	r3, #128	@ 0x80
 8002c56:	029b      	lsls	r3, r3, #10
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d009      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c60:	2280      	movs	r2, #128	@ 0x80
 8002c62:	4393      	bics	r3, r2
 8002c64:	0019      	movs	r1, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	2380      	movs	r3, #128	@ 0x80
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d009      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c7c:	4b07      	ldr	r3, [pc, #28]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c80:	2240      	movs	r2, #64	@ 0x40
 8002c82:	4393      	bics	r3, r2
 8002c84:	0019      	movs	r1, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	4b04      	ldr	r3, [pc, #16]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	0018      	movs	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b006      	add	sp, #24
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40007000 	.word	0x40007000
 8002ca4:	fffffcff 	.word	0xfffffcff
 8002ca8:	fffeffff 	.word	0xfffeffff
 8002cac:	00001388 	.word	0x00001388
 8002cb0:	efffffff 	.word	0xefffffff

08002cb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e044      	b.n	8002d50 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d107      	bne.n	8002cde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2278      	movs	r2, #120	@ 0x78
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f7fe fa89 	bl	80011f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2224      	movs	r2, #36	@ 0x24
 8002ce2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2101      	movs	r1, #1
 8002cf0:	438a      	bics	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 fd5e 	bl	80037c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	0018      	movs	r0, r3
 8002d08:	f000 fc1a 	bl	8003540 <UART_SetConfig>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e01c      	b.n	8002d50 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	490d      	ldr	r1, [pc, #52]	@ (8002d58 <HAL_UART_Init+0xa4>)
 8002d22:	400a      	ands	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	212a      	movs	r1, #42	@ 0x2a
 8002d32:	438a      	bics	r2, r1
 8002d34:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2101      	movs	r1, #1
 8002d42:	430a      	orrs	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 fded 	bl	8003928 <UART_CheckIdleState>
 8002d4e:	0003      	movs	r3, r0
}
 8002d50:	0018      	movs	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b002      	add	sp, #8
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	ffffb7ff 	.word	0xffffb7ff

08002d5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	@ 0x28
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	1dbb      	adds	r3, r7, #6
 8002d6a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d000      	beq.n	8002d76 <HAL_UART_Transmit+0x1a>
 8002d74:	e08c      	b.n	8002e90 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_UART_Transmit+0x28>
 8002d7c:	1dbb      	adds	r3, r7, #6
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e084      	b.n	8002e92 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	2380      	movs	r3, #128	@ 0x80
 8002d8e:	015b      	lsls	r3, r3, #5
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d109      	bne.n	8002da8 <HAL_UART_Transmit+0x4c>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d105      	bne.n	8002da8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	4013      	ands	r3, r2
 8002da2:	d001      	beq.n	8002da8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e074      	b.n	8002e92 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2284      	movs	r2, #132	@ 0x84
 8002dac:	2100      	movs	r1, #0
 8002dae:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2221      	movs	r2, #33	@ 0x21
 8002db4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002db6:	f7fe fe67 	bl	8001a88 <HAL_GetTick>
 8002dba:	0003      	movs	r3, r0
 8002dbc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1dba      	adds	r2, r7, #6
 8002dc2:	2150      	movs	r1, #80	@ 0x50
 8002dc4:	8812      	ldrh	r2, [r2, #0]
 8002dc6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1dba      	adds	r2, r7, #6
 8002dcc:	2152      	movs	r1, #82	@ 0x52
 8002dce:	8812      	ldrh	r2, [r2, #0]
 8002dd0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	2380      	movs	r3, #128	@ 0x80
 8002dd8:	015b      	lsls	r3, r3, #5
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d108      	bne.n	8002df0 <HAL_UART_Transmit+0x94>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d104      	bne.n	8002df0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	e003      	b.n	8002df8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002df8:	e02f      	b.n	8002e5a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	0013      	movs	r3, r2
 8002e04:	2200      	movs	r2, #0
 8002e06:	2180      	movs	r1, #128	@ 0x80
 8002e08:	f000 fe36 	bl	8003a78 <UART_WaitOnFlagUntilTimeout>
 8002e0c:	1e03      	subs	r3, r0, #0
 8002e0e:	d004      	beq.n	8002e1a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e03b      	b.n	8002e92 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10b      	bne.n	8002e38 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	881a      	ldrh	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	05d2      	lsls	r2, r2, #23
 8002e2a:	0dd2      	lsrs	r2, r2, #23
 8002e2c:	b292      	uxth	r2, r2
 8002e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	3302      	adds	r3, #2
 8002e34:	61bb      	str	r3, [r7, #24]
 8002e36:	e007      	b.n	8002e48 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	781a      	ldrb	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3301      	adds	r3, #1
 8002e46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2252      	movs	r2, #82	@ 0x52
 8002e4c:	5a9b      	ldrh	r3, [r3, r2]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b299      	uxth	r1, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2252      	movs	r2, #82	@ 0x52
 8002e58:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2252      	movs	r2, #82	@ 0x52
 8002e5e:	5a9b      	ldrh	r3, [r3, r2]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1c9      	bne.n	8002dfa <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	0013      	movs	r3, r2
 8002e70:	2200      	movs	r2, #0
 8002e72:	2140      	movs	r1, #64	@ 0x40
 8002e74:	f000 fe00 	bl	8003a78 <UART_WaitOnFlagUntilTimeout>
 8002e78:	1e03      	subs	r3, r0, #0
 8002e7a:	d004      	beq.n	8002e86 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e005      	b.n	8002e92 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e000      	b.n	8002e92 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002e90:	2302      	movs	r3, #2
  }
}
 8002e92:	0018      	movs	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b008      	add	sp, #32
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b088      	sub	sp, #32
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	1dbb      	adds	r3, r7, #6
 8002ea6:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2280      	movs	r2, #128	@ 0x80
 8002eac:	589b      	ldr	r3, [r3, r2]
 8002eae:	2b20      	cmp	r3, #32
 8002eb0:	d145      	bne.n	8002f3e <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_UART_Receive_IT+0x26>
 8002eb8:	1dbb      	adds	r3, r7, #6
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e03d      	b.n	8002f40 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	2380      	movs	r3, #128	@ 0x80
 8002eca:	015b      	lsls	r3, r3, #5
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d109      	bne.n	8002ee4 <HAL_UART_Receive_IT+0x4a>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d105      	bne.n	8002ee4 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2201      	movs	r2, #1
 8002edc:	4013      	ands	r3, r2
 8002ede:	d001      	beq.n	8002ee4 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e02d      	b.n	8002f40 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	2380      	movs	r3, #128	@ 0x80
 8002ef2:	041b      	lsls	r3, r3, #16
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d019      	beq.n	8002f2c <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8002efc:	613b      	str	r3, [r7, #16]
  return(result);
 8002efe:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	2301      	movs	r3, #1
 8002f04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f383 8810 	msr	PRIMASK, r3
}
 8002f0c:	46c0      	nop			@ (mov r8, r8)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2180      	movs	r1, #128	@ 0x80
 8002f1a:	04c9      	lsls	r1, r1, #19
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	f383 8810 	msr	PRIMASK, r3
}
 8002f2a:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f2c:	1dbb      	adds	r3, r7, #6
 8002f2e:	881a      	ldrh	r2, [r3, #0]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	0018      	movs	r0, r3
 8002f36:	f000 fe0f 	bl	8003b58 <UART_Start_Receive_IT>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	e000      	b.n	8002f40 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002f3e:	2302      	movs	r3, #2
  }
}
 8002f40:	0018      	movs	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b008      	add	sp, #32
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f48:	b590      	push	{r4, r7, lr}
 8002f4a:	b0ab      	sub	sp, #172	@ 0xac
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	22a4      	movs	r2, #164	@ 0xa4
 8002f58:	18b9      	adds	r1, r7, r2
 8002f5a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	20a0      	movs	r0, #160	@ 0xa0
 8002f64:	1839      	adds	r1, r7, r0
 8002f66:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	219c      	movs	r1, #156	@ 0x9c
 8002f70:	1879      	adds	r1, r7, r1
 8002f72:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f74:	0011      	movs	r1, r2
 8002f76:	18bb      	adds	r3, r7, r2
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a99      	ldr	r2, [pc, #612]	@ (80031e0 <HAL_UART_IRQHandler+0x298>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2298      	movs	r2, #152	@ 0x98
 8002f80:	18bc      	adds	r4, r7, r2
 8002f82:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002f84:	18bb      	adds	r3, r7, r2
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d114      	bne.n	8002fb6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f8c:	187b      	adds	r3, r7, r1
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2220      	movs	r2, #32
 8002f92:	4013      	ands	r3, r2
 8002f94:	d00f      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f96:	183b      	adds	r3, r7, r0
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d00a      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d100      	bne.n	8002faa <HAL_UART_IRQHandler+0x62>
 8002fa8:	e29e      	b.n	80034e8 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	0010      	movs	r0, r2
 8002fb2:	4798      	blx	r3
      }
      return;
 8002fb4:	e298      	b.n	80034e8 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002fb6:	2398      	movs	r3, #152	@ 0x98
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d100      	bne.n	8002fc2 <HAL_UART_IRQHandler+0x7a>
 8002fc0:	e114      	b.n	80031ec <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002fc2:	239c      	movs	r3, #156	@ 0x9c
 8002fc4:	18fb      	adds	r3, r7, r3
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d106      	bne.n	8002fdc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002fce:	23a0      	movs	r3, #160	@ 0xa0
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a83      	ldr	r2, [pc, #524]	@ (80031e4 <HAL_UART_IRQHandler+0x29c>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d100      	bne.n	8002fdc <HAL_UART_IRQHandler+0x94>
 8002fda:	e107      	b.n	80031ec <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fdc:	23a4      	movs	r3, #164	@ 0xa4
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d012      	beq.n	800300e <HAL_UART_IRQHandler+0xc6>
 8002fe8:	23a0      	movs	r3, #160	@ 0xa0
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	2380      	movs	r3, #128	@ 0x80
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d00b      	beq.n	800300e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2284      	movs	r2, #132	@ 0x84
 8003002:	589b      	ldr	r3, [r3, r2]
 8003004:	2201      	movs	r2, #1
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2184      	movs	r1, #132	@ 0x84
 800300c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800300e:	23a4      	movs	r3, #164	@ 0xa4
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2202      	movs	r2, #2
 8003016:	4013      	ands	r3, r2
 8003018:	d011      	beq.n	800303e <HAL_UART_IRQHandler+0xf6>
 800301a:	239c      	movs	r3, #156	@ 0x9c
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2201      	movs	r2, #1
 8003022:	4013      	ands	r3, r2
 8003024:	d00b      	beq.n	800303e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2202      	movs	r2, #2
 800302c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2284      	movs	r2, #132	@ 0x84
 8003032:	589b      	ldr	r3, [r3, r2]
 8003034:	2204      	movs	r2, #4
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2184      	movs	r1, #132	@ 0x84
 800303c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800303e:	23a4      	movs	r3, #164	@ 0xa4
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2204      	movs	r2, #4
 8003046:	4013      	ands	r3, r2
 8003048:	d011      	beq.n	800306e <HAL_UART_IRQHandler+0x126>
 800304a:	239c      	movs	r3, #156	@ 0x9c
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2201      	movs	r2, #1
 8003052:	4013      	ands	r3, r2
 8003054:	d00b      	beq.n	800306e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2204      	movs	r2, #4
 800305c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2284      	movs	r2, #132	@ 0x84
 8003062:	589b      	ldr	r3, [r3, r2]
 8003064:	2202      	movs	r2, #2
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2184      	movs	r1, #132	@ 0x84
 800306c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800306e:	23a4      	movs	r3, #164	@ 0xa4
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2208      	movs	r2, #8
 8003076:	4013      	ands	r3, r2
 8003078:	d017      	beq.n	80030aa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800307a:	23a0      	movs	r3, #160	@ 0xa0
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2220      	movs	r2, #32
 8003082:	4013      	ands	r3, r2
 8003084:	d105      	bne.n	8003092 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003086:	239c      	movs	r3, #156	@ 0x9c
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2201      	movs	r2, #1
 800308e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003090:	d00b      	beq.n	80030aa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2208      	movs	r2, #8
 8003098:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2284      	movs	r2, #132	@ 0x84
 800309e:	589b      	ldr	r3, [r3, r2]
 80030a0:	2208      	movs	r2, #8
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2184      	movs	r1, #132	@ 0x84
 80030a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030aa:	23a4      	movs	r3, #164	@ 0xa4
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	2380      	movs	r3, #128	@ 0x80
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	4013      	ands	r3, r2
 80030b6:	d013      	beq.n	80030e0 <HAL_UART_IRQHandler+0x198>
 80030b8:	23a0      	movs	r3, #160	@ 0xa0
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	2380      	movs	r3, #128	@ 0x80
 80030c0:	04db      	lsls	r3, r3, #19
 80030c2:	4013      	ands	r3, r2
 80030c4:	d00c      	beq.n	80030e0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2280      	movs	r2, #128	@ 0x80
 80030cc:	0112      	lsls	r2, r2, #4
 80030ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2284      	movs	r2, #132	@ 0x84
 80030d4:	589b      	ldr	r3, [r3, r2]
 80030d6:	2220      	movs	r2, #32
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2184      	movs	r1, #132	@ 0x84
 80030de:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2284      	movs	r2, #132	@ 0x84
 80030e4:	589b      	ldr	r3, [r3, r2]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d100      	bne.n	80030ec <HAL_UART_IRQHandler+0x1a4>
 80030ea:	e1ff      	b.n	80034ec <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80030ec:	23a4      	movs	r3, #164	@ 0xa4
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2220      	movs	r2, #32
 80030f4:	4013      	ands	r3, r2
 80030f6:	d00e      	beq.n	8003116 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030f8:	23a0      	movs	r3, #160	@ 0xa0
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2220      	movs	r2, #32
 8003100:	4013      	ands	r3, r2
 8003102:	d008      	beq.n	8003116 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003108:	2b00      	cmp	r3, #0
 800310a:	d004      	beq.n	8003116 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	0010      	movs	r0, r2
 8003114:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2284      	movs	r2, #132	@ 0x84
 800311a:	589b      	ldr	r3, [r3, r2]
 800311c:	2194      	movs	r1, #148	@ 0x94
 800311e:	187a      	adds	r2, r7, r1
 8003120:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	2240      	movs	r2, #64	@ 0x40
 800312a:	4013      	ands	r3, r2
 800312c:	2b40      	cmp	r3, #64	@ 0x40
 800312e:	d004      	beq.n	800313a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003130:	187b      	adds	r3, r7, r1
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2228      	movs	r2, #40	@ 0x28
 8003136:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003138:	d047      	beq.n	80031ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	0018      	movs	r0, r3
 800313e:	f000 fdd5 	bl	8003cec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2240      	movs	r2, #64	@ 0x40
 800314a:	4013      	ands	r3, r2
 800314c:	2b40      	cmp	r3, #64	@ 0x40
 800314e:	d137      	bne.n	80031c0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003150:	f3ef 8310 	mrs	r3, PRIMASK
 8003154:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003156:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003158:	2090      	movs	r0, #144	@ 0x90
 800315a:	183a      	adds	r2, r7, r0
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	2301      	movs	r3, #1
 8003160:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003162:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003164:	f383 8810 	msr	PRIMASK, r3
}
 8003168:	46c0      	nop			@ (mov r8, r8)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2140      	movs	r1, #64	@ 0x40
 8003176:	438a      	bics	r2, r1
 8003178:	609a      	str	r2, [r3, #8]
 800317a:	183b      	adds	r3, r7, r0
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003180:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003182:	f383 8810 	msr	PRIMASK, r3
}
 8003186:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800318c:	2b00      	cmp	r3, #0
 800318e:	d012      	beq.n	80031b6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003194:	4a14      	ldr	r2, [pc, #80]	@ (80031e8 <HAL_UART_IRQHandler+0x2a0>)
 8003196:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800319c:	0018      	movs	r0, r3
 800319e:	f7fe fdb7 	bl	8001d10 <HAL_DMA_Abort_IT>
 80031a2:	1e03      	subs	r3, r0, #0
 80031a4:	d01a      	beq.n	80031dc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031b0:	0018      	movs	r0, r3
 80031b2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b4:	e012      	b.n	80031dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	0018      	movs	r0, r3
 80031ba:	f000 f9ad 	bl	8003518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031be:	e00d      	b.n	80031dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	0018      	movs	r0, r3
 80031c4:	f000 f9a8 	bl	8003518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c8:	e008      	b.n	80031dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	0018      	movs	r0, r3
 80031ce:	f000 f9a3 	bl	8003518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2284      	movs	r2, #132	@ 0x84
 80031d6:	2100      	movs	r1, #0
 80031d8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80031da:	e187      	b.n	80034ec <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031dc:	46c0      	nop			@ (mov r8, r8)
    return;
 80031de:	e185      	b.n	80034ec <HAL_UART_IRQHandler+0x5a4>
 80031e0:	0000080f 	.word	0x0000080f
 80031e4:	04000120 	.word	0x04000120
 80031e8:	08003db5 	.word	0x08003db5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d000      	beq.n	80031f6 <HAL_UART_IRQHandler+0x2ae>
 80031f4:	e139      	b.n	800346a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80031f6:	23a4      	movs	r3, #164	@ 0xa4
 80031f8:	18fb      	adds	r3, r7, r3
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2210      	movs	r2, #16
 80031fe:	4013      	ands	r3, r2
 8003200:	d100      	bne.n	8003204 <HAL_UART_IRQHandler+0x2bc>
 8003202:	e132      	b.n	800346a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003204:	23a0      	movs	r3, #160	@ 0xa0
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2210      	movs	r2, #16
 800320c:	4013      	ands	r3, r2
 800320e:	d100      	bne.n	8003212 <HAL_UART_IRQHandler+0x2ca>
 8003210:	e12b      	b.n	800346a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2210      	movs	r2, #16
 8003218:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2240      	movs	r2, #64	@ 0x40
 8003222:	4013      	ands	r3, r2
 8003224:	2b40      	cmp	r3, #64	@ 0x40
 8003226:	d000      	beq.n	800322a <HAL_UART_IRQHandler+0x2e2>
 8003228:	e09f      	b.n	800336a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	217e      	movs	r1, #126	@ 0x7e
 8003234:	187b      	adds	r3, r7, r1
 8003236:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003238:	187b      	adds	r3, r7, r1
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d100      	bne.n	8003242 <HAL_UART_IRQHandler+0x2fa>
 8003240:	e156      	b.n	80034f0 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2258      	movs	r2, #88	@ 0x58
 8003246:	5a9b      	ldrh	r3, [r3, r2]
 8003248:	187a      	adds	r2, r7, r1
 800324a:	8812      	ldrh	r2, [r2, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d300      	bcc.n	8003252 <HAL_UART_IRQHandler+0x30a>
 8003250:	e14e      	b.n	80034f0 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	187a      	adds	r2, r7, r1
 8003256:	215a      	movs	r1, #90	@ 0x5a
 8003258:	8812      	ldrh	r2, [r2, #0]
 800325a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	2b20      	cmp	r3, #32
 8003264:	d06f      	beq.n	8003346 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003266:	f3ef 8310 	mrs	r3, PRIMASK
 800326a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800326c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800326e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003270:	2301      	movs	r3, #1
 8003272:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003276:	f383 8810 	msr	PRIMASK, r3
}
 800327a:	46c0      	nop			@ (mov r8, r8)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	499e      	ldr	r1, [pc, #632]	@ (8003500 <HAL_UART_IRQHandler+0x5b8>)
 8003288:	400a      	ands	r2, r1
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800328e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003292:	f383 8810 	msr	PRIMASK, r3
}
 8003296:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003298:	f3ef 8310 	mrs	r3, PRIMASK
 800329c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800329e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032a0:	677b      	str	r3, [r7, #116]	@ 0x74
 80032a2:	2301      	movs	r3, #1
 80032a4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032a8:	f383 8810 	msr	PRIMASK, r3
}
 80032ac:	46c0      	nop			@ (mov r8, r8)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2101      	movs	r1, #1
 80032ba:	438a      	bics	r2, r1
 80032bc:	609a      	str	r2, [r3, #8]
 80032be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032c0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032c4:	f383 8810 	msr	PRIMASK, r3
}
 80032c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ca:	f3ef 8310 	mrs	r3, PRIMASK
 80032ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80032d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80032d4:	2301      	movs	r3, #1
 80032d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032da:	f383 8810 	msr	PRIMASK, r3
}
 80032de:	46c0      	nop			@ (mov r8, r8)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2140      	movs	r1, #64	@ 0x40
 80032ec:	438a      	bics	r2, r1
 80032ee:	609a      	str	r2, [r3, #8]
 80032f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032f2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032f6:	f383 8810 	msr	PRIMASK, r3
}
 80032fa:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2280      	movs	r2, #128	@ 0x80
 8003300:	2120      	movs	r1, #32
 8003302:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800330a:	f3ef 8310 	mrs	r3, PRIMASK
 800330e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003312:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003314:	2301      	movs	r3, #1
 8003316:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003318:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800331a:	f383 8810 	msr	PRIMASK, r3
}
 800331e:	46c0      	nop			@ (mov r8, r8)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2110      	movs	r1, #16
 800332c:	438a      	bics	r2, r1
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003332:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003334:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003336:	f383 8810 	msr	PRIMASK, r3
}
 800333a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003340:	0018      	movs	r0, r3
 8003342:	f7fe fcad 	bl	8001ca0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2258      	movs	r2, #88	@ 0x58
 8003350:	5a9a      	ldrh	r2, [r3, r2]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	215a      	movs	r1, #90	@ 0x5a
 8003356:	5a5b      	ldrh	r3, [r3, r1]
 8003358:	b29b      	uxth	r3, r3
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	b29a      	uxth	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	0011      	movs	r1, r2
 8003362:	0018      	movs	r0, r3
 8003364:	f000 f8e0 	bl	8003528 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003368:	e0c2      	b.n	80034f0 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2258      	movs	r2, #88	@ 0x58
 800336e:	5a99      	ldrh	r1, [r3, r2]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	225a      	movs	r2, #90	@ 0x5a
 8003374:	5a9b      	ldrh	r3, [r3, r2]
 8003376:	b29a      	uxth	r2, r3
 8003378:	208e      	movs	r0, #142	@ 0x8e
 800337a:	183b      	adds	r3, r7, r0
 800337c:	1a8a      	subs	r2, r1, r2
 800337e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	225a      	movs	r2, #90	@ 0x5a
 8003384:	5a9b      	ldrh	r3, [r3, r2]
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d100      	bne.n	800338e <HAL_UART_IRQHandler+0x446>
 800338c:	e0b2      	b.n	80034f4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800338e:	183b      	adds	r3, r7, r0
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d100      	bne.n	8003398 <HAL_UART_IRQHandler+0x450>
 8003396:	e0ad      	b.n	80034f4 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003398:	f3ef 8310 	mrs	r3, PRIMASK
 800339c:	60fb      	str	r3, [r7, #12]
  return(result);
 800339e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033a0:	2488      	movs	r4, #136	@ 0x88
 80033a2:	193a      	adds	r2, r7, r4
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	2301      	movs	r3, #1
 80033a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f383 8810 	msr	PRIMASK, r3
}
 80033b0:	46c0      	nop			@ (mov r8, r8)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4951      	ldr	r1, [pc, #324]	@ (8003504 <HAL_UART_IRQHandler+0x5bc>)
 80033be:	400a      	ands	r2, r1
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	193b      	adds	r3, r7, r4
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f383 8810 	msr	PRIMASK, r3
}
 80033ce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d0:	f3ef 8310 	mrs	r3, PRIMASK
 80033d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80033d6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d8:	2484      	movs	r4, #132	@ 0x84
 80033da:	193a      	adds	r2, r7, r4
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	2301      	movs	r3, #1
 80033e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f383 8810 	msr	PRIMASK, r3
}
 80033e8:	46c0      	nop			@ (mov r8, r8)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2101      	movs	r1, #1
 80033f6:	438a      	bics	r2, r1
 80033f8:	609a      	str	r2, [r3, #8]
 80033fa:	193b      	adds	r3, r7, r4
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	f383 8810 	msr	PRIMASK, r3
}
 8003406:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2280      	movs	r2, #128	@ 0x80
 800340c:	2120      	movs	r1, #32
 800340e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800341c:	f3ef 8310 	mrs	r3, PRIMASK
 8003420:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003424:	2480      	movs	r4, #128	@ 0x80
 8003426:	193a      	adds	r2, r7, r4
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	2301      	movs	r3, #1
 800342c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003430:	f383 8810 	msr	PRIMASK, r3
}
 8003434:	46c0      	nop			@ (mov r8, r8)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2110      	movs	r1, #16
 8003442:	438a      	bics	r2, r1
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	193b      	adds	r3, r7, r4
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344e:	f383 8810 	msr	PRIMASK, r3
}
 8003452:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800345a:	183b      	adds	r3, r7, r0
 800345c:	881a      	ldrh	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	0011      	movs	r1, r2
 8003462:	0018      	movs	r0, r3
 8003464:	f000 f860 	bl	8003528 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003468:	e044      	b.n	80034f4 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800346a:	23a4      	movs	r3, #164	@ 0xa4
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	2380      	movs	r3, #128	@ 0x80
 8003472:	035b      	lsls	r3, r3, #13
 8003474:	4013      	ands	r3, r2
 8003476:	d010      	beq.n	800349a <HAL_UART_IRQHandler+0x552>
 8003478:	239c      	movs	r3, #156	@ 0x9c
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	2380      	movs	r3, #128	@ 0x80
 8003480:	03db      	lsls	r3, r3, #15
 8003482:	4013      	ands	r3, r2
 8003484:	d009      	beq.n	800349a <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2280      	movs	r2, #128	@ 0x80
 800348c:	0352      	lsls	r2, r2, #13
 800348e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	0018      	movs	r0, r3
 8003494:	f000 fe88 	bl	80041a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003498:	e02f      	b.n	80034fa <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800349a:	23a4      	movs	r3, #164	@ 0xa4
 800349c:	18fb      	adds	r3, r7, r3
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2280      	movs	r2, #128	@ 0x80
 80034a2:	4013      	ands	r3, r2
 80034a4:	d00f      	beq.n	80034c6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80034a6:	23a0      	movs	r3, #160	@ 0xa0
 80034a8:	18fb      	adds	r3, r7, r3
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2280      	movs	r2, #128	@ 0x80
 80034ae:	4013      	ands	r3, r2
 80034b0:	d009      	beq.n	80034c6 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d01e      	beq.n	80034f8 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	0010      	movs	r0, r2
 80034c2:	4798      	blx	r3
    }
    return;
 80034c4:	e018      	b.n	80034f8 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034c6:	23a4      	movs	r3, #164	@ 0xa4
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2240      	movs	r2, #64	@ 0x40
 80034ce:	4013      	ands	r3, r2
 80034d0:	d013      	beq.n	80034fa <HAL_UART_IRQHandler+0x5b2>
 80034d2:	23a0      	movs	r3, #160	@ 0xa0
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2240      	movs	r2, #64	@ 0x40
 80034da:	4013      	ands	r3, r2
 80034dc:	d00d      	beq.n	80034fa <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	0018      	movs	r0, r3
 80034e2:	f000 fc7e 	bl	8003de2 <UART_EndTransmit_IT>
    return;
 80034e6:	e008      	b.n	80034fa <HAL_UART_IRQHandler+0x5b2>
      return;
 80034e8:	46c0      	nop			@ (mov r8, r8)
 80034ea:	e006      	b.n	80034fa <HAL_UART_IRQHandler+0x5b2>
    return;
 80034ec:	46c0      	nop			@ (mov r8, r8)
 80034ee:	e004      	b.n	80034fa <HAL_UART_IRQHandler+0x5b2>
      return;
 80034f0:	46c0      	nop			@ (mov r8, r8)
 80034f2:	e002      	b.n	80034fa <HAL_UART_IRQHandler+0x5b2>
      return;
 80034f4:	46c0      	nop			@ (mov r8, r8)
 80034f6:	e000      	b.n	80034fa <HAL_UART_IRQHandler+0x5b2>
    return;
 80034f8:	46c0      	nop			@ (mov r8, r8)
  }

}
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b02b      	add	sp, #172	@ 0xac
 80034fe:	bd90      	pop	{r4, r7, pc}
 8003500:	fffffeff 	.word	0xfffffeff
 8003504:	fffffedf 	.word	0xfffffedf

08003508 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003510:	46c0      	nop			@ (mov r8, r8)
 8003512:	46bd      	mov	sp, r7
 8003514:	b002      	add	sp, #8
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003520:	46c0      	nop			@ (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	b002      	add	sp, #8
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	000a      	movs	r2, r1
 8003532:	1cbb      	adds	r3, r7, #2
 8003534:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003536:	46c0      	nop			@ (mov r8, r8)
 8003538:	46bd      	mov	sp, r7
 800353a:	b002      	add	sp, #8
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003548:	231e      	movs	r3, #30
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a8d      	ldr	r2, [pc, #564]	@ (80037a4 <UART_SetConfig+0x264>)
 8003570:	4013      	ands	r3, r2
 8003572:	0019      	movs	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	430a      	orrs	r2, r1
 800357c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	4a88      	ldr	r2, [pc, #544]	@ (80037a8 <UART_SetConfig+0x268>)
 8003586:	4013      	ands	r3, r2
 8003588:	0019      	movs	r1, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	4a7f      	ldr	r2, [pc, #508]	@ (80037ac <UART_SetConfig+0x26c>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	0019      	movs	r1, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a7b      	ldr	r2, [pc, #492]	@ (80037b0 <UART_SetConfig+0x270>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d127      	bne.n	8003616 <UART_SetConfig+0xd6>
 80035c6:	4b7b      	ldr	r3, [pc, #492]	@ (80037b4 <UART_SetConfig+0x274>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	2203      	movs	r2, #3
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d00d      	beq.n	80035ee <UART_SetConfig+0xae>
 80035d2:	d81b      	bhi.n	800360c <UART_SetConfig+0xcc>
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d014      	beq.n	8003602 <UART_SetConfig+0xc2>
 80035d8:	d818      	bhi.n	800360c <UART_SetConfig+0xcc>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <UART_SetConfig+0xa4>
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d00a      	beq.n	80035f8 <UART_SetConfig+0xb8>
 80035e2:	e013      	b.n	800360c <UART_SetConfig+0xcc>
 80035e4:	231f      	movs	r3, #31
 80035e6:	18fb      	adds	r3, r7, r3
 80035e8:	2200      	movs	r2, #0
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	e021      	b.n	8003632 <UART_SetConfig+0xf2>
 80035ee:	231f      	movs	r3, #31
 80035f0:	18fb      	adds	r3, r7, r3
 80035f2:	2202      	movs	r2, #2
 80035f4:	701a      	strb	r2, [r3, #0]
 80035f6:	e01c      	b.n	8003632 <UART_SetConfig+0xf2>
 80035f8:	231f      	movs	r3, #31
 80035fa:	18fb      	adds	r3, r7, r3
 80035fc:	2204      	movs	r2, #4
 80035fe:	701a      	strb	r2, [r3, #0]
 8003600:	e017      	b.n	8003632 <UART_SetConfig+0xf2>
 8003602:	231f      	movs	r3, #31
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	2208      	movs	r2, #8
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	e012      	b.n	8003632 <UART_SetConfig+0xf2>
 800360c:	231f      	movs	r3, #31
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	2210      	movs	r2, #16
 8003612:	701a      	strb	r2, [r3, #0]
 8003614:	e00d      	b.n	8003632 <UART_SetConfig+0xf2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a67      	ldr	r2, [pc, #412]	@ (80037b8 <UART_SetConfig+0x278>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d104      	bne.n	800362a <UART_SetConfig+0xea>
 8003620:	231f      	movs	r3, #31
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
 8003628:	e003      	b.n	8003632 <UART_SetConfig+0xf2>
 800362a:	231f      	movs	r3, #31
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	2210      	movs	r2, #16
 8003630:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69da      	ldr	r2, [r3, #28]
 8003636:	2380      	movs	r3, #128	@ 0x80
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	429a      	cmp	r2, r3
 800363c:	d15c      	bne.n	80036f8 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800363e:	231f      	movs	r3, #31
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d015      	beq.n	8003674 <UART_SetConfig+0x134>
 8003648:	dc18      	bgt.n	800367c <UART_SetConfig+0x13c>
 800364a:	2b04      	cmp	r3, #4
 800364c:	d00d      	beq.n	800366a <UART_SetConfig+0x12a>
 800364e:	dc15      	bgt.n	800367c <UART_SetConfig+0x13c>
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <UART_SetConfig+0x11a>
 8003654:	2b02      	cmp	r3, #2
 8003656:	d005      	beq.n	8003664 <UART_SetConfig+0x124>
 8003658:	e010      	b.n	800367c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800365a:	f7ff fa27 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 800365e:	0003      	movs	r3, r0
 8003660:	61bb      	str	r3, [r7, #24]
        break;
 8003662:	e012      	b.n	800368a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003664:	4b55      	ldr	r3, [pc, #340]	@ (80037bc <UART_SetConfig+0x27c>)
 8003666:	61bb      	str	r3, [r7, #24]
        break;
 8003668:	e00f      	b.n	800368a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800366a:	f7ff f9a3 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 800366e:	0003      	movs	r3, r0
 8003670:	61bb      	str	r3, [r7, #24]
        break;
 8003672:	e00a      	b.n	800368a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003674:	2380      	movs	r3, #128	@ 0x80
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	61bb      	str	r3, [r7, #24]
        break;
 800367a:	e006      	b.n	800368a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003680:	231e      	movs	r3, #30
 8003682:	18fb      	adds	r3, r7, r3
 8003684:	2201      	movs	r2, #1
 8003686:	701a      	strb	r2, [r3, #0]
        break;
 8003688:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d100      	bne.n	8003692 <UART_SetConfig+0x152>
 8003690:	e07a      	b.n	8003788 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	005a      	lsls	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	085b      	lsrs	r3, r3, #1
 800369c:	18d2      	adds	r2, r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	0019      	movs	r1, r3
 80036a4:	0010      	movs	r0, r2
 80036a6:	f7fc fd2f 	bl	8000108 <__udivsi3>
 80036aa:	0003      	movs	r3, r0
 80036ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	2b0f      	cmp	r3, #15
 80036b2:	d91c      	bls.n	80036ee <UART_SetConfig+0x1ae>
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	2380      	movs	r3, #128	@ 0x80
 80036b8:	025b      	lsls	r3, r3, #9
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d217      	bcs.n	80036ee <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	200e      	movs	r0, #14
 80036c4:	183b      	adds	r3, r7, r0
 80036c6:	210f      	movs	r1, #15
 80036c8:	438a      	bics	r2, r1
 80036ca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2207      	movs	r2, #7
 80036d4:	4013      	ands	r3, r2
 80036d6:	b299      	uxth	r1, r3
 80036d8:	183b      	adds	r3, r7, r0
 80036da:	183a      	adds	r2, r7, r0
 80036dc:	8812      	ldrh	r2, [r2, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	183a      	adds	r2, r7, r0
 80036e8:	8812      	ldrh	r2, [r2, #0]
 80036ea:	60da      	str	r2, [r3, #12]
 80036ec:	e04c      	b.n	8003788 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80036ee:	231e      	movs	r3, #30
 80036f0:	18fb      	adds	r3, r7, r3
 80036f2:	2201      	movs	r2, #1
 80036f4:	701a      	strb	r2, [r3, #0]
 80036f6:	e047      	b.n	8003788 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036f8:	231f      	movs	r3, #31
 80036fa:	18fb      	adds	r3, r7, r3
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d015      	beq.n	800372e <UART_SetConfig+0x1ee>
 8003702:	dc18      	bgt.n	8003736 <UART_SetConfig+0x1f6>
 8003704:	2b04      	cmp	r3, #4
 8003706:	d00d      	beq.n	8003724 <UART_SetConfig+0x1e4>
 8003708:	dc15      	bgt.n	8003736 <UART_SetConfig+0x1f6>
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <UART_SetConfig+0x1d4>
 800370e:	2b02      	cmp	r3, #2
 8003710:	d005      	beq.n	800371e <UART_SetConfig+0x1de>
 8003712:	e010      	b.n	8003736 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003714:	f7ff f9ca 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8003718:	0003      	movs	r3, r0
 800371a:	61bb      	str	r3, [r7, #24]
        break;
 800371c:	e012      	b.n	8003744 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800371e:	4b27      	ldr	r3, [pc, #156]	@ (80037bc <UART_SetConfig+0x27c>)
 8003720:	61bb      	str	r3, [r7, #24]
        break;
 8003722:	e00f      	b.n	8003744 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003724:	f7ff f946 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 8003728:	0003      	movs	r3, r0
 800372a:	61bb      	str	r3, [r7, #24]
        break;
 800372c:	e00a      	b.n	8003744 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800372e:	2380      	movs	r3, #128	@ 0x80
 8003730:	021b      	lsls	r3, r3, #8
 8003732:	61bb      	str	r3, [r7, #24]
        break;
 8003734:	e006      	b.n	8003744 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800373a:	231e      	movs	r3, #30
 800373c:	18fb      	adds	r3, r7, r3
 800373e:	2201      	movs	r2, #1
 8003740:	701a      	strb	r2, [r3, #0]
        break;
 8003742:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d01e      	beq.n	8003788 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	085a      	lsrs	r2, r3, #1
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	18d2      	adds	r2, r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	0019      	movs	r1, r3
 800375a:	0010      	movs	r0, r2
 800375c:	f7fc fcd4 	bl	8000108 <__udivsi3>
 8003760:	0003      	movs	r3, r0
 8003762:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	2b0f      	cmp	r3, #15
 8003768:	d90a      	bls.n	8003780 <UART_SetConfig+0x240>
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	2380      	movs	r3, #128	@ 0x80
 800376e:	025b      	lsls	r3, r3, #9
 8003770:	429a      	cmp	r2, r3
 8003772:	d205      	bcs.n	8003780 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	b29a      	uxth	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60da      	str	r2, [r3, #12]
 800377e:	e003      	b.n	8003788 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003780:	231e      	movs	r3, #30
 8003782:	18fb      	adds	r3, r7, r3
 8003784:	2201      	movs	r2, #1
 8003786:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003794:	231e      	movs	r3, #30
 8003796:	18fb      	adds	r3, r7, r3
 8003798:	781b      	ldrb	r3, [r3, #0]
}
 800379a:	0018      	movs	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	b008      	add	sp, #32
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	46c0      	nop			@ (mov r8, r8)
 80037a4:	efff69f3 	.word	0xefff69f3
 80037a8:	ffffcfff 	.word	0xffffcfff
 80037ac:	fffff4ff 	.word	0xfffff4ff
 80037b0:	40013800 	.word	0x40013800
 80037b4:	40021000 	.word	0x40021000
 80037b8:	40004400 	.word	0x40004400
 80037bc:	007a1200 	.word	0x007a1200

080037c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	2208      	movs	r2, #8
 80037ce:	4013      	ands	r3, r2
 80037d0:	d00b      	beq.n	80037ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	4a4a      	ldr	r2, [pc, #296]	@ (8003904 <UART_AdvFeatureConfig+0x144>)
 80037da:	4013      	ands	r3, r2
 80037dc:	0019      	movs	r1, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ee:	2201      	movs	r2, #1
 80037f0:	4013      	ands	r3, r2
 80037f2:	d00b      	beq.n	800380c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4a43      	ldr	r2, [pc, #268]	@ (8003908 <UART_AdvFeatureConfig+0x148>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	0019      	movs	r1, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003810:	2202      	movs	r2, #2
 8003812:	4013      	ands	r3, r2
 8003814:	d00b      	beq.n	800382e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	4a3b      	ldr	r2, [pc, #236]	@ (800390c <UART_AdvFeatureConfig+0x14c>)
 800381e:	4013      	ands	r3, r2
 8003820:	0019      	movs	r1, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003832:	2204      	movs	r2, #4
 8003834:	4013      	ands	r3, r2
 8003836:	d00b      	beq.n	8003850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	4a34      	ldr	r2, [pc, #208]	@ (8003910 <UART_AdvFeatureConfig+0x150>)
 8003840:	4013      	ands	r3, r2
 8003842:	0019      	movs	r1, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	2210      	movs	r2, #16
 8003856:	4013      	ands	r3, r2
 8003858:	d00b      	beq.n	8003872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4a2c      	ldr	r2, [pc, #176]	@ (8003914 <UART_AdvFeatureConfig+0x154>)
 8003862:	4013      	ands	r3, r2
 8003864:	0019      	movs	r1, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003876:	2220      	movs	r2, #32
 8003878:	4013      	ands	r3, r2
 800387a:	d00b      	beq.n	8003894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	4a25      	ldr	r2, [pc, #148]	@ (8003918 <UART_AdvFeatureConfig+0x158>)
 8003884:	4013      	ands	r3, r2
 8003886:	0019      	movs	r1, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003898:	2240      	movs	r2, #64	@ 0x40
 800389a:	4013      	ands	r3, r2
 800389c:	d01d      	beq.n	80038da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	4a1d      	ldr	r2, [pc, #116]	@ (800391c <UART_AdvFeatureConfig+0x15c>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	0019      	movs	r1, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038ba:	2380      	movs	r3, #128	@ 0x80
 80038bc:	035b      	lsls	r3, r3, #13
 80038be:	429a      	cmp	r2, r3
 80038c0:	d10b      	bne.n	80038da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4a15      	ldr	r2, [pc, #84]	@ (8003920 <UART_AdvFeatureConfig+0x160>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	0019      	movs	r1, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038de:	2280      	movs	r2, #128	@ 0x80
 80038e0:	4013      	ands	r3, r2
 80038e2:	d00b      	beq.n	80038fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4a0e      	ldr	r2, [pc, #56]	@ (8003924 <UART_AdvFeatureConfig+0x164>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	0019      	movs	r1, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	605a      	str	r2, [r3, #4]
  }
}
 80038fc:	46c0      	nop			@ (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b002      	add	sp, #8
 8003902:	bd80      	pop	{r7, pc}
 8003904:	ffff7fff 	.word	0xffff7fff
 8003908:	fffdffff 	.word	0xfffdffff
 800390c:	fffeffff 	.word	0xfffeffff
 8003910:	fffbffff 	.word	0xfffbffff
 8003914:	ffffefff 	.word	0xffffefff
 8003918:	ffffdfff 	.word	0xffffdfff
 800391c:	ffefffff 	.word	0xffefffff
 8003920:	ff9fffff 	.word	0xff9fffff
 8003924:	fff7ffff 	.word	0xfff7ffff

08003928 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b092      	sub	sp, #72	@ 0x48
 800392c:	af02      	add	r7, sp, #8
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2284      	movs	r2, #132	@ 0x84
 8003934:	2100      	movs	r1, #0
 8003936:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003938:	f7fe f8a6 	bl	8001a88 <HAL_GetTick>
 800393c:	0003      	movs	r3, r0
 800393e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2208      	movs	r2, #8
 8003948:	4013      	ands	r3, r2
 800394a:	2b08      	cmp	r3, #8
 800394c:	d12c      	bne.n	80039a8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800394e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003950:	2280      	movs	r2, #128	@ 0x80
 8003952:	0391      	lsls	r1, r2, #14
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4a46      	ldr	r2, [pc, #280]	@ (8003a70 <UART_CheckIdleState+0x148>)
 8003958:	9200      	str	r2, [sp, #0]
 800395a:	2200      	movs	r2, #0
 800395c:	f000 f88c 	bl	8003a78 <UART_WaitOnFlagUntilTimeout>
 8003960:	1e03      	subs	r3, r0, #0
 8003962:	d021      	beq.n	80039a8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003964:	f3ef 8310 	mrs	r3, PRIMASK
 8003968:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800396c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800396e:	2301      	movs	r3, #1
 8003970:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003974:	f383 8810 	msr	PRIMASK, r3
}
 8003978:	46c0      	nop			@ (mov r8, r8)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2180      	movs	r1, #128	@ 0x80
 8003986:	438a      	bics	r2, r1
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800398c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003990:	f383 8810 	msr	PRIMASK, r3
}
 8003994:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2278      	movs	r2, #120	@ 0x78
 80039a0:	2100      	movs	r1, #0
 80039a2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e05f      	b.n	8003a68 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2204      	movs	r2, #4
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d146      	bne.n	8003a44 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b8:	2280      	movs	r2, #128	@ 0x80
 80039ba:	03d1      	lsls	r1, r2, #15
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	4a2c      	ldr	r2, [pc, #176]	@ (8003a70 <UART_CheckIdleState+0x148>)
 80039c0:	9200      	str	r2, [sp, #0]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f000 f858 	bl	8003a78 <UART_WaitOnFlagUntilTimeout>
 80039c8:	1e03      	subs	r3, r0, #0
 80039ca:	d03b      	beq.n	8003a44 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039cc:	f3ef 8310 	mrs	r3, PRIMASK
 80039d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80039d2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80039d6:	2301      	movs	r3, #1
 80039d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f383 8810 	msr	PRIMASK, r3
}
 80039e0:	46c0      	nop			@ (mov r8, r8)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4921      	ldr	r1, [pc, #132]	@ (8003a74 <UART_CheckIdleState+0x14c>)
 80039ee:	400a      	ands	r2, r1
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f383 8810 	msr	PRIMASK, r3
}
 80039fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003a02:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a04:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a06:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a08:	2301      	movs	r3, #1
 8003a0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f383 8810 	msr	PRIMASK, r3
}
 8003a12:	46c0      	nop			@ (mov r8, r8)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2101      	movs	r1, #1
 8003a20:	438a      	bics	r2, r1
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a26:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	f383 8810 	msr	PRIMASK, r3
}
 8003a2e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2280      	movs	r2, #128	@ 0x80
 8003a34:	2120      	movs	r1, #32
 8003a36:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2278      	movs	r2, #120	@ 0x78
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e011      	b.n	8003a68 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2220      	movs	r2, #32
 8003a48:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2280      	movs	r2, #128	@ 0x80
 8003a4e:	2120      	movs	r1, #32
 8003a50:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2278      	movs	r2, #120	@ 0x78
 8003a62:	2100      	movs	r1, #0
 8003a64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	0018      	movs	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b010      	add	sp, #64	@ 0x40
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	01ffffff 	.word	0x01ffffff
 8003a74:	fffffedf 	.word	0xfffffedf

08003a78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	1dfb      	adds	r3, r7, #7
 8003a86:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a88:	e051      	b.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	d04e      	beq.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a90:	f7fd fffa 	bl	8001a88 <HAL_GetTick>
 8003a94:	0002      	movs	r2, r0
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d302      	bcc.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e051      	b.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	d03b      	beq.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xb6>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b80      	cmp	r3, #128	@ 0x80
 8003aba:	d038      	beq.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xb6>
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b40      	cmp	r3, #64	@ 0x40
 8003ac0:	d035      	beq.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	2208      	movs	r2, #8
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d111      	bne.n	8003af4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2208      	movs	r2, #8
 8003ad6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	0018      	movs	r0, r3
 8003adc:	f000 f906 	bl	8003cec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2284      	movs	r2, #132	@ 0x84
 8003ae4:	2108      	movs	r1, #8
 8003ae6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2278      	movs	r2, #120	@ 0x78
 8003aec:	2100      	movs	r1, #0
 8003aee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e02c      	b.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	69da      	ldr	r2, [r3, #28]
 8003afa:	2380      	movs	r3, #128	@ 0x80
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	401a      	ands	r2, r3
 8003b00:	2380      	movs	r3, #128	@ 0x80
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d112      	bne.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2280      	movs	r2, #128	@ 0x80
 8003b0e:	0112      	lsls	r2, r2, #4
 8003b10:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	0018      	movs	r0, r3
 8003b16:	f000 f8e9 	bl	8003cec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2284      	movs	r2, #132	@ 0x84
 8003b1e:	2120      	movs	r1, #32
 8003b20:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2278      	movs	r2, #120	@ 0x78
 8003b26:	2100      	movs	r1, #0
 8003b28:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e00f      	b.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	4013      	ands	r3, r2
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	425a      	negs	r2, r3
 8003b3e:	4153      	adcs	r3, r2
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	001a      	movs	r2, r3
 8003b44:	1dfb      	adds	r3, r7, #7
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d09e      	beq.n	8003a8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	0018      	movs	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b004      	add	sp, #16
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b090      	sub	sp, #64	@ 0x40
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	1dbb      	adds	r3, r7, #6
 8003b64:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1dba      	adds	r2, r7, #6
 8003b70:	2158      	movs	r1, #88	@ 0x58
 8003b72:	8812      	ldrh	r2, [r2, #0]
 8003b74:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1dba      	adds	r2, r7, #6
 8003b7a:	215a      	movs	r1, #90	@ 0x5a
 8003b7c:	8812      	ldrh	r2, [r2, #0]
 8003b7e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	2380      	movs	r3, #128	@ 0x80
 8003b8c:	015b      	lsls	r3, r3, #5
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d10d      	bne.n	8003bae <UART_Start_Receive_IT+0x56>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d104      	bne.n	8003ba4 <UART_Start_Receive_IT+0x4c>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	225c      	movs	r2, #92	@ 0x5c
 8003b9e:	4950      	ldr	r1, [pc, #320]	@ (8003ce0 <UART_Start_Receive_IT+0x188>)
 8003ba0:	5299      	strh	r1, [r3, r2]
 8003ba2:	e02e      	b.n	8003c02 <UART_Start_Receive_IT+0xaa>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	225c      	movs	r2, #92	@ 0x5c
 8003ba8:	21ff      	movs	r1, #255	@ 0xff
 8003baa:	5299      	strh	r1, [r3, r2]
 8003bac:	e029      	b.n	8003c02 <UART_Start_Receive_IT+0xaa>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10d      	bne.n	8003bd2 <UART_Start_Receive_IT+0x7a>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d104      	bne.n	8003bc8 <UART_Start_Receive_IT+0x70>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	225c      	movs	r2, #92	@ 0x5c
 8003bc2:	21ff      	movs	r1, #255	@ 0xff
 8003bc4:	5299      	strh	r1, [r3, r2]
 8003bc6:	e01c      	b.n	8003c02 <UART_Start_Receive_IT+0xaa>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	225c      	movs	r2, #92	@ 0x5c
 8003bcc:	217f      	movs	r1, #127	@ 0x7f
 8003bce:	5299      	strh	r1, [r3, r2]
 8003bd0:	e017      	b.n	8003c02 <UART_Start_Receive_IT+0xaa>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	2380      	movs	r3, #128	@ 0x80
 8003bd8:	055b      	lsls	r3, r3, #21
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d10d      	bne.n	8003bfa <UART_Start_Receive_IT+0xa2>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d104      	bne.n	8003bf0 <UART_Start_Receive_IT+0x98>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	225c      	movs	r2, #92	@ 0x5c
 8003bea:	217f      	movs	r1, #127	@ 0x7f
 8003bec:	5299      	strh	r1, [r3, r2]
 8003bee:	e008      	b.n	8003c02 <UART_Start_Receive_IT+0xaa>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	225c      	movs	r2, #92	@ 0x5c
 8003bf4:	213f      	movs	r1, #63	@ 0x3f
 8003bf6:	5299      	strh	r1, [r3, r2]
 8003bf8:	e003      	b.n	8003c02 <UART_Start_Receive_IT+0xaa>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	225c      	movs	r2, #92	@ 0x5c
 8003bfe:	2100      	movs	r1, #0
 8003c00:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2284      	movs	r2, #132	@ 0x84
 8003c06:	2100      	movs	r1, #0
 8003c08:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2280      	movs	r2, #128	@ 0x80
 8003c0e:	2122      	movs	r1, #34	@ 0x22
 8003c10:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c12:	f3ef 8310 	mrs	r3, PRIMASK
 8003c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c22:	f383 8810 	msr	PRIMASK, r3
}
 8003c26:	46c0      	nop			@ (mov r8, r8)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2101      	movs	r1, #1
 8003c34:	430a      	orrs	r2, r1
 8003c36:	609a      	str	r2, [r3, #8]
 8003c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3e:	f383 8810 	msr	PRIMASK, r3
}
 8003c42:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	2380      	movs	r3, #128	@ 0x80
 8003c4a:	015b      	lsls	r3, r3, #5
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d107      	bne.n	8003c60 <UART_Start_Receive_IT+0x108>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d103      	bne.n	8003c60 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4a22      	ldr	r2, [pc, #136]	@ (8003ce4 <UART_Start_Receive_IT+0x18c>)
 8003c5c:	669a      	str	r2, [r3, #104]	@ 0x68
 8003c5e:	e002      	b.n	8003c66 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4a21      	ldr	r2, [pc, #132]	@ (8003ce8 <UART_Start_Receive_IT+0x190>)
 8003c64:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d019      	beq.n	8003ca2 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c72:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c74:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c78:	2301      	movs	r3, #1
 8003c7a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	f383 8810 	msr	PRIMASK, r3
}
 8003c82:	46c0      	nop			@ (mov r8, r8)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2190      	movs	r1, #144	@ 0x90
 8003c90:	0049      	lsls	r1, r1, #1
 8003c92:	430a      	orrs	r2, r1
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c98:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9c:	f383 8810 	msr	PRIMASK, r3
}
 8003ca0:	e018      	b.n	8003cd4 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca6:	613b      	str	r3, [r7, #16]
  return(result);
 8003ca8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003caa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cac:	2301      	movs	r3, #1
 8003cae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f383 8810 	msr	PRIMASK, r3
}
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2120      	movs	r1, #32
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f383 8810 	msr	PRIMASK, r3
}
 8003cd2:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b010      	add	sp, #64	@ 0x40
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	46c0      	nop			@ (mov r8, r8)
 8003ce0:	000001ff 	.word	0x000001ff
 8003ce4:	08003ff1 	.word	0x08003ff1
 8003ce8:	08003e39 	.word	0x08003e39

08003cec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08e      	sub	sp, #56	@ 0x38
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf8:	617b      	str	r3, [r7, #20]
  return(result);
 8003cfa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cfe:	2301      	movs	r3, #1
 8003d00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	f383 8810 	msr	PRIMASK, r3
}
 8003d08:	46c0      	nop			@ (mov r8, r8)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4926      	ldr	r1, [pc, #152]	@ (8003db0 <UART_EndRxTransfer+0xc4>)
 8003d16:	400a      	ands	r2, r1
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f383 8810 	msr	PRIMASK, r3
}
 8003d24:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d26:	f3ef 8310 	mrs	r3, PRIMASK
 8003d2a:	623b      	str	r3, [r7, #32]
  return(result);
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d30:	2301      	movs	r3, #1
 8003d32:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d36:	f383 8810 	msr	PRIMASK, r3
}
 8003d3a:	46c0      	nop			@ (mov r8, r8)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2101      	movs	r1, #1
 8003d48:	438a      	bics	r2, r1
 8003d4a:	609a      	str	r2, [r3, #8]
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d52:	f383 8810 	msr	PRIMASK, r3
}
 8003d56:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d118      	bne.n	8003d92 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d60:	f3ef 8310 	mrs	r3, PRIMASK
 8003d64:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d66:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f383 8810 	msr	PRIMASK, r3
}
 8003d74:	46c0      	nop			@ (mov r8, r8)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2110      	movs	r1, #16
 8003d82:	438a      	bics	r2, r1
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f383 8810 	msr	PRIMASK, r3
}
 8003d90:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2280      	movs	r2, #128	@ 0x80
 8003d96:	2120      	movs	r1, #32
 8003d98:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003da6:	46c0      	nop			@ (mov r8, r8)
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b00e      	add	sp, #56	@ 0x38
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	fffffedf 	.word	0xfffffedf

08003db4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	225a      	movs	r2, #90	@ 0x5a
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2252      	movs	r2, #82	@ 0x52
 8003dce:	2100      	movs	r1, #0
 8003dd0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f7ff fb9f 	bl	8003518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dda:	46c0      	nop			@ (mov r8, r8)
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b004      	add	sp, #16
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b086      	sub	sp, #24
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dea:	f3ef 8310 	mrs	r3, PRIMASK
 8003dee:	60bb      	str	r3, [r7, #8]
  return(result);
 8003df0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	2301      	movs	r3, #1
 8003df6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f383 8810 	msr	PRIMASK, r3
}
 8003dfe:	46c0      	nop			@ (mov r8, r8)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2140      	movs	r1, #64	@ 0x40
 8003e0c:	438a      	bics	r2, r1
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f383 8810 	msr	PRIMASK, r3
}
 8003e1a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f7ff fb6c 	bl	8003508 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e30:	46c0      	nop			@ (mov r8, r8)
 8003e32:	46bd      	mov	sp, r7
 8003e34:	b006      	add	sp, #24
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b094      	sub	sp, #80	@ 0x50
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003e40:	204e      	movs	r0, #78	@ 0x4e
 8003e42:	183b      	adds	r3, r7, r0
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	215c      	movs	r1, #92	@ 0x5c
 8003e48:	5a52      	ldrh	r2, [r2, r1]
 8003e4a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2280      	movs	r2, #128	@ 0x80
 8003e50:	589b      	ldr	r3, [r3, r2]
 8003e52:	2b22      	cmp	r3, #34	@ 0x22
 8003e54:	d000      	beq.n	8003e58 <UART_RxISR_8BIT+0x20>
 8003e56:	e0ba      	b.n	8003fce <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	214c      	movs	r1, #76	@ 0x4c
 8003e5e:	187b      	adds	r3, r7, r1
 8003e60:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8003e62:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e64:	187b      	adds	r3, r7, r1
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	183b      	adds	r3, r7, r0
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	b2d9      	uxtb	r1, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e74:	400a      	ands	r2, r1
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	225a      	movs	r2, #90	@ 0x5a
 8003e88:	5a9b      	ldrh	r3, [r3, r2]
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b299      	uxth	r1, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	225a      	movs	r2, #90	@ 0x5a
 8003e94:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	225a      	movs	r2, #90	@ 0x5a
 8003e9a:	5a9b      	ldrh	r3, [r3, r2]
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d000      	beq.n	8003ea4 <UART_RxISR_8BIT+0x6c>
 8003ea2:	e09c      	b.n	8003fde <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003eae:	2301      	movs	r3, #1
 8003eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb4:	f383 8810 	msr	PRIMASK, r3
}
 8003eb8:	46c0      	nop			@ (mov r8, r8)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4948      	ldr	r1, [pc, #288]	@ (8003fe8 <UART_RxISR_8BIT+0x1b0>)
 8003ec6:	400a      	ands	r2, r1
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed0:	f383 8810 	msr	PRIMASK, r3
}
 8003ed4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8003eda:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ede:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee6:	f383 8810 	msr	PRIMASK, r3
}
 8003eea:	46c0      	nop			@ (mov r8, r8)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	438a      	bics	r2, r1
 8003efa:	609a      	str	r2, [r3, #8]
 8003efc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003efe:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f02:	f383 8810 	msr	PRIMASK, r3
}
 8003f06:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2280      	movs	r2, #128	@ 0x80
 8003f0c:	2120      	movs	r1, #32
 8003f0e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	2380      	movs	r3, #128	@ 0x80
 8003f24:	041b      	lsls	r3, r3, #16
 8003f26:	4013      	ands	r3, r2
 8003f28:	d018      	beq.n	8003f5c <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f30:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f32:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f34:	2301      	movs	r3, #1
 8003f36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f383 8810 	msr	PRIMASK, r3
}
 8003f3e:	46c0      	nop			@ (mov r8, r8)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4928      	ldr	r1, [pc, #160]	@ (8003fec <UART_RxISR_8BIT+0x1b4>)
 8003f4c:	400a      	ands	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	f383 8810 	msr	PRIMASK, r3
}
 8003f5a:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d12f      	bne.n	8003fc4 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f70:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f74:	2301      	movs	r3, #1
 8003f76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f383 8810 	msr	PRIMASK, r3
}
 8003f7e:	46c0      	nop			@ (mov r8, r8)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2110      	movs	r1, #16
 8003f8c:	438a      	bics	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f383 8810 	msr	PRIMASK, r3
}
 8003f9a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	2210      	movs	r2, #16
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b10      	cmp	r3, #16
 8003fa8:	d103      	bne.n	8003fb2 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2210      	movs	r2, #16
 8003fb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2258      	movs	r2, #88	@ 0x58
 8003fb6:	5a9a      	ldrh	r2, [r3, r2]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	0011      	movs	r1, r2
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f7ff fab3 	bl	8003528 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fc2:	e00c      	b.n	8003fde <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f7fd f8d0 	bl	800116c <HAL_UART_RxCpltCallback>
}
 8003fcc:	e007      	b.n	8003fde <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	699a      	ldr	r2, [r3, #24]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2108      	movs	r1, #8
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	619a      	str	r2, [r3, #24]
}
 8003fde:	46c0      	nop			@ (mov r8, r8)
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	b014      	add	sp, #80	@ 0x50
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	46c0      	nop			@ (mov r8, r8)
 8003fe8:	fffffedf 	.word	0xfffffedf
 8003fec:	fbffffff 	.word	0xfbffffff

08003ff0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b094      	sub	sp, #80	@ 0x50
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ff8:	204e      	movs	r0, #78	@ 0x4e
 8003ffa:	183b      	adds	r3, r7, r0
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	215c      	movs	r1, #92	@ 0x5c
 8004000:	5a52      	ldrh	r2, [r2, r1]
 8004002:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2280      	movs	r2, #128	@ 0x80
 8004008:	589b      	ldr	r3, [r3, r2]
 800400a:	2b22      	cmp	r3, #34	@ 0x22
 800400c:	d000      	beq.n	8004010 <UART_RxISR_16BIT+0x20>
 800400e:	e0ba      	b.n	8004186 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	214c      	movs	r1, #76	@ 0x4c
 8004016:	187b      	adds	r3, r7, r1
 8004018:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800401a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004020:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004022:	187b      	adds	r3, r7, r1
 8004024:	183a      	adds	r2, r7, r0
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	8812      	ldrh	r2, [r2, #0]
 800402a:	4013      	ands	r3, r2
 800402c:	b29a      	uxth	r2, r3
 800402e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004030:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004036:	1c9a      	adds	r2, r3, #2
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	225a      	movs	r2, #90	@ 0x5a
 8004040:	5a9b      	ldrh	r3, [r3, r2]
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b299      	uxth	r1, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	225a      	movs	r2, #90	@ 0x5a
 800404c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	225a      	movs	r2, #90	@ 0x5a
 8004052:	5a9b      	ldrh	r3, [r3, r2]
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d000      	beq.n	800405c <UART_RxISR_16BIT+0x6c>
 800405a:	e09c      	b.n	8004196 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800405c:	f3ef 8310 	mrs	r3, PRIMASK
 8004060:	623b      	str	r3, [r7, #32]
  return(result);
 8004062:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004064:	647b      	str	r3, [r7, #68]	@ 0x44
 8004066:	2301      	movs	r3, #1
 8004068:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406c:	f383 8810 	msr	PRIMASK, r3
}
 8004070:	46c0      	nop			@ (mov r8, r8)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4948      	ldr	r1, [pc, #288]	@ (80041a0 <UART_RxISR_16BIT+0x1b0>)
 800407e:	400a      	ands	r2, r1
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004084:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004088:	f383 8810 	msr	PRIMASK, r3
}
 800408c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800408e:	f3ef 8310 	mrs	r3, PRIMASK
 8004092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004096:	643b      	str	r3, [r7, #64]	@ 0x40
 8004098:	2301      	movs	r3, #1
 800409a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409e:	f383 8810 	msr	PRIMASK, r3
}
 80040a2:	46c0      	nop			@ (mov r8, r8)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2101      	movs	r1, #1
 80040b0:	438a      	bics	r2, r1
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040b6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ba:	f383 8810 	msr	PRIMASK, r3
}
 80040be:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2280      	movs	r2, #128	@ 0x80
 80040c4:	2120      	movs	r1, #32
 80040c6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	2380      	movs	r3, #128	@ 0x80
 80040dc:	041b      	lsls	r3, r3, #16
 80040de:	4013      	ands	r3, r2
 80040e0:	d018      	beq.n	8004114 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e2:	f3ef 8310 	mrs	r3, PRIMASK
 80040e6:	617b      	str	r3, [r7, #20]
  return(result);
 80040e8:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040ec:	2301      	movs	r3, #1
 80040ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	f383 8810 	msr	PRIMASK, r3
}
 80040f6:	46c0      	nop			@ (mov r8, r8)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4928      	ldr	r1, [pc, #160]	@ (80041a4 <UART_RxISR_16BIT+0x1b4>)
 8004104:	400a      	ands	r2, r1
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800410a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f383 8810 	msr	PRIMASK, r3
}
 8004112:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004118:	2b01      	cmp	r3, #1
 800411a:	d12f      	bne.n	800417c <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004122:	f3ef 8310 	mrs	r3, PRIMASK
 8004126:	60bb      	str	r3, [r7, #8]
  return(result);
 8004128:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800412a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800412c:	2301      	movs	r3, #1
 800412e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f383 8810 	msr	PRIMASK, r3
}
 8004136:	46c0      	nop			@ (mov r8, r8)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2110      	movs	r1, #16
 8004144:	438a      	bics	r2, r1
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f383 8810 	msr	PRIMASK, r3
}
 8004152:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	2210      	movs	r2, #16
 800415c:	4013      	ands	r3, r2
 800415e:	2b10      	cmp	r3, #16
 8004160:	d103      	bne.n	800416a <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2210      	movs	r2, #16
 8004168:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2258      	movs	r2, #88	@ 0x58
 800416e:	5a9a      	ldrh	r2, [r3, r2]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	0011      	movs	r1, r2
 8004174:	0018      	movs	r0, r3
 8004176:	f7ff f9d7 	bl	8003528 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800417a:	e00c      	b.n	8004196 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	0018      	movs	r0, r3
 8004180:	f7fc fff4 	bl	800116c <HAL_UART_RxCpltCallback>
}
 8004184:	e007      	b.n	8004196 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	699a      	ldr	r2, [r3, #24]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2108      	movs	r1, #8
 8004192:	430a      	orrs	r2, r1
 8004194:	619a      	str	r2, [r3, #24]
}
 8004196:	46c0      	nop			@ (mov r8, r8)
 8004198:	46bd      	mov	sp, r7
 800419a:	b014      	add	sp, #80	@ 0x50
 800419c:	bd80      	pop	{r7, pc}
 800419e:	46c0      	nop			@ (mov r8, r8)
 80041a0:	fffffedf 	.word	0xfffffedf
 80041a4:	fbffffff 	.word	0xfbffffff

080041a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041b0:	46c0      	nop			@ (mov r8, r8)
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b002      	add	sp, #8
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <malloc>:
 80041b8:	b510      	push	{r4, lr}
 80041ba:	4b03      	ldr	r3, [pc, #12]	@ (80041c8 <malloc+0x10>)
 80041bc:	0001      	movs	r1, r0
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	f000 f830 	bl	8004224 <_malloc_r>
 80041c4:	bd10      	pop	{r4, pc}
 80041c6:	46c0      	nop			@ (mov r8, r8)
 80041c8:	20000018 	.word	0x20000018

080041cc <free>:
 80041cc:	b510      	push	{r4, lr}
 80041ce:	4b03      	ldr	r3, [pc, #12]	@ (80041dc <free+0x10>)
 80041d0:	0001      	movs	r1, r0
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	f000 f8fc 	bl	80043d0 <_free_r>
 80041d8:	bd10      	pop	{r4, pc}
 80041da:	46c0      	nop			@ (mov r8, r8)
 80041dc:	20000018 	.word	0x20000018

080041e0 <sbrk_aligned>:
 80041e0:	b570      	push	{r4, r5, r6, lr}
 80041e2:	4e0f      	ldr	r6, [pc, #60]	@ (8004220 <sbrk_aligned+0x40>)
 80041e4:	000d      	movs	r5, r1
 80041e6:	6831      	ldr	r1, [r6, #0]
 80041e8:	0004      	movs	r4, r0
 80041ea:	2900      	cmp	r1, #0
 80041ec:	d102      	bne.n	80041f4 <sbrk_aligned+0x14>
 80041ee:	f000 f8b1 	bl	8004354 <_sbrk_r>
 80041f2:	6030      	str	r0, [r6, #0]
 80041f4:	0029      	movs	r1, r5
 80041f6:	0020      	movs	r0, r4
 80041f8:	f000 f8ac 	bl	8004354 <_sbrk_r>
 80041fc:	1c43      	adds	r3, r0, #1
 80041fe:	d103      	bne.n	8004208 <sbrk_aligned+0x28>
 8004200:	2501      	movs	r5, #1
 8004202:	426d      	negs	r5, r5
 8004204:	0028      	movs	r0, r5
 8004206:	bd70      	pop	{r4, r5, r6, pc}
 8004208:	2303      	movs	r3, #3
 800420a:	1cc5      	adds	r5, r0, #3
 800420c:	439d      	bics	r5, r3
 800420e:	42a8      	cmp	r0, r5
 8004210:	d0f8      	beq.n	8004204 <sbrk_aligned+0x24>
 8004212:	1a29      	subs	r1, r5, r0
 8004214:	0020      	movs	r0, r4
 8004216:	f000 f89d 	bl	8004354 <_sbrk_r>
 800421a:	3001      	adds	r0, #1
 800421c:	d1f2      	bne.n	8004204 <sbrk_aligned+0x24>
 800421e:	e7ef      	b.n	8004200 <sbrk_aligned+0x20>
 8004220:	200001a4 	.word	0x200001a4

08004224 <_malloc_r>:
 8004224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004226:	2203      	movs	r2, #3
 8004228:	1ccb      	adds	r3, r1, #3
 800422a:	4393      	bics	r3, r2
 800422c:	3308      	adds	r3, #8
 800422e:	0005      	movs	r5, r0
 8004230:	001f      	movs	r7, r3
 8004232:	2b0c      	cmp	r3, #12
 8004234:	d234      	bcs.n	80042a0 <_malloc_r+0x7c>
 8004236:	270c      	movs	r7, #12
 8004238:	42b9      	cmp	r1, r7
 800423a:	d833      	bhi.n	80042a4 <_malloc_r+0x80>
 800423c:	0028      	movs	r0, r5
 800423e:	f000 f871 	bl	8004324 <__malloc_lock>
 8004242:	4e37      	ldr	r6, [pc, #220]	@ (8004320 <_malloc_r+0xfc>)
 8004244:	6833      	ldr	r3, [r6, #0]
 8004246:	001c      	movs	r4, r3
 8004248:	2c00      	cmp	r4, #0
 800424a:	d12f      	bne.n	80042ac <_malloc_r+0x88>
 800424c:	0039      	movs	r1, r7
 800424e:	0028      	movs	r0, r5
 8004250:	f7ff ffc6 	bl	80041e0 <sbrk_aligned>
 8004254:	0004      	movs	r4, r0
 8004256:	1c43      	adds	r3, r0, #1
 8004258:	d15f      	bne.n	800431a <_malloc_r+0xf6>
 800425a:	6834      	ldr	r4, [r6, #0]
 800425c:	9400      	str	r4, [sp, #0]
 800425e:	9b00      	ldr	r3, [sp, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d14a      	bne.n	80042fa <_malloc_r+0xd6>
 8004264:	2c00      	cmp	r4, #0
 8004266:	d052      	beq.n	800430e <_malloc_r+0xea>
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	0028      	movs	r0, r5
 800426c:	18e3      	adds	r3, r4, r3
 800426e:	9900      	ldr	r1, [sp, #0]
 8004270:	9301      	str	r3, [sp, #4]
 8004272:	f000 f86f 	bl	8004354 <_sbrk_r>
 8004276:	9b01      	ldr	r3, [sp, #4]
 8004278:	4283      	cmp	r3, r0
 800427a:	d148      	bne.n	800430e <_malloc_r+0xea>
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	0028      	movs	r0, r5
 8004280:	1aff      	subs	r7, r7, r3
 8004282:	0039      	movs	r1, r7
 8004284:	f7ff ffac 	bl	80041e0 <sbrk_aligned>
 8004288:	3001      	adds	r0, #1
 800428a:	d040      	beq.n	800430e <_malloc_r+0xea>
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	19db      	adds	r3, r3, r7
 8004290:	6023      	str	r3, [r4, #0]
 8004292:	6833      	ldr	r3, [r6, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	2a00      	cmp	r2, #0
 8004298:	d133      	bne.n	8004302 <_malloc_r+0xde>
 800429a:	9b00      	ldr	r3, [sp, #0]
 800429c:	6033      	str	r3, [r6, #0]
 800429e:	e019      	b.n	80042d4 <_malloc_r+0xb0>
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	dac9      	bge.n	8004238 <_malloc_r+0x14>
 80042a4:	230c      	movs	r3, #12
 80042a6:	602b      	str	r3, [r5, #0]
 80042a8:	2000      	movs	r0, #0
 80042aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80042ac:	6821      	ldr	r1, [r4, #0]
 80042ae:	1bc9      	subs	r1, r1, r7
 80042b0:	d420      	bmi.n	80042f4 <_malloc_r+0xd0>
 80042b2:	290b      	cmp	r1, #11
 80042b4:	d90a      	bls.n	80042cc <_malloc_r+0xa8>
 80042b6:	19e2      	adds	r2, r4, r7
 80042b8:	6027      	str	r7, [r4, #0]
 80042ba:	42a3      	cmp	r3, r4
 80042bc:	d104      	bne.n	80042c8 <_malloc_r+0xa4>
 80042be:	6032      	str	r2, [r6, #0]
 80042c0:	6863      	ldr	r3, [r4, #4]
 80042c2:	6011      	str	r1, [r2, #0]
 80042c4:	6053      	str	r3, [r2, #4]
 80042c6:	e005      	b.n	80042d4 <_malloc_r+0xb0>
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	e7f9      	b.n	80042c0 <_malloc_r+0x9c>
 80042cc:	6862      	ldr	r2, [r4, #4]
 80042ce:	42a3      	cmp	r3, r4
 80042d0:	d10e      	bne.n	80042f0 <_malloc_r+0xcc>
 80042d2:	6032      	str	r2, [r6, #0]
 80042d4:	0028      	movs	r0, r5
 80042d6:	f000 f82d 	bl	8004334 <__malloc_unlock>
 80042da:	0020      	movs	r0, r4
 80042dc:	2207      	movs	r2, #7
 80042de:	300b      	adds	r0, #11
 80042e0:	1d23      	adds	r3, r4, #4
 80042e2:	4390      	bics	r0, r2
 80042e4:	1ac2      	subs	r2, r0, r3
 80042e6:	4298      	cmp	r0, r3
 80042e8:	d0df      	beq.n	80042aa <_malloc_r+0x86>
 80042ea:	1a1b      	subs	r3, r3, r0
 80042ec:	50a3      	str	r3, [r4, r2]
 80042ee:	e7dc      	b.n	80042aa <_malloc_r+0x86>
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	e7ef      	b.n	80042d4 <_malloc_r+0xb0>
 80042f4:	0023      	movs	r3, r4
 80042f6:	6864      	ldr	r4, [r4, #4]
 80042f8:	e7a6      	b.n	8004248 <_malloc_r+0x24>
 80042fa:	9c00      	ldr	r4, [sp, #0]
 80042fc:	6863      	ldr	r3, [r4, #4]
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	e7ad      	b.n	800425e <_malloc_r+0x3a>
 8004302:	001a      	movs	r2, r3
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	42a3      	cmp	r3, r4
 8004308:	d1fb      	bne.n	8004302 <_malloc_r+0xde>
 800430a:	2300      	movs	r3, #0
 800430c:	e7da      	b.n	80042c4 <_malloc_r+0xa0>
 800430e:	230c      	movs	r3, #12
 8004310:	0028      	movs	r0, r5
 8004312:	602b      	str	r3, [r5, #0]
 8004314:	f000 f80e 	bl	8004334 <__malloc_unlock>
 8004318:	e7c6      	b.n	80042a8 <_malloc_r+0x84>
 800431a:	6007      	str	r7, [r0, #0]
 800431c:	e7da      	b.n	80042d4 <_malloc_r+0xb0>
 800431e:	46c0      	nop			@ (mov r8, r8)
 8004320:	200001a8 	.word	0x200001a8

08004324 <__malloc_lock>:
 8004324:	b510      	push	{r4, lr}
 8004326:	4802      	ldr	r0, [pc, #8]	@ (8004330 <__malloc_lock+0xc>)
 8004328:	f000 f850 	bl	80043cc <__retarget_lock_acquire_recursive>
 800432c:	bd10      	pop	{r4, pc}
 800432e:	46c0      	nop			@ (mov r8, r8)
 8004330:	200002e8 	.word	0x200002e8

08004334 <__malloc_unlock>:
 8004334:	b510      	push	{r4, lr}
 8004336:	4802      	ldr	r0, [pc, #8]	@ (8004340 <__malloc_unlock+0xc>)
 8004338:	f000 f849 	bl	80043ce <__retarget_lock_release_recursive>
 800433c:	bd10      	pop	{r4, pc}
 800433e:	46c0      	nop			@ (mov r8, r8)
 8004340:	200002e8 	.word	0x200002e8

08004344 <memset>:
 8004344:	0003      	movs	r3, r0
 8004346:	1882      	adds	r2, r0, r2
 8004348:	4293      	cmp	r3, r2
 800434a:	d100      	bne.n	800434e <memset+0xa>
 800434c:	4770      	bx	lr
 800434e:	7019      	strb	r1, [r3, #0]
 8004350:	3301      	adds	r3, #1
 8004352:	e7f9      	b.n	8004348 <memset+0x4>

08004354 <_sbrk_r>:
 8004354:	2300      	movs	r3, #0
 8004356:	b570      	push	{r4, r5, r6, lr}
 8004358:	4d06      	ldr	r5, [pc, #24]	@ (8004374 <_sbrk_r+0x20>)
 800435a:	0004      	movs	r4, r0
 800435c:	0008      	movs	r0, r1
 800435e:	602b      	str	r3, [r5, #0]
 8004360:	f7fd f966 	bl	8001630 <_sbrk>
 8004364:	1c43      	adds	r3, r0, #1
 8004366:	d103      	bne.n	8004370 <_sbrk_r+0x1c>
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d000      	beq.n	8004370 <_sbrk_r+0x1c>
 800436e:	6023      	str	r3, [r4, #0]
 8004370:	bd70      	pop	{r4, r5, r6, pc}
 8004372:	46c0      	nop			@ (mov r8, r8)
 8004374:	200002e4 	.word	0x200002e4

08004378 <__errno>:
 8004378:	4b01      	ldr	r3, [pc, #4]	@ (8004380 <__errno+0x8>)
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	4770      	bx	lr
 800437e:	46c0      	nop			@ (mov r8, r8)
 8004380:	20000018 	.word	0x20000018

08004384 <__libc_init_array>:
 8004384:	b570      	push	{r4, r5, r6, lr}
 8004386:	2600      	movs	r6, #0
 8004388:	4c0c      	ldr	r4, [pc, #48]	@ (80043bc <__libc_init_array+0x38>)
 800438a:	4d0d      	ldr	r5, [pc, #52]	@ (80043c0 <__libc_init_array+0x3c>)
 800438c:	1b64      	subs	r4, r4, r5
 800438e:	10a4      	asrs	r4, r4, #2
 8004390:	42a6      	cmp	r6, r4
 8004392:	d109      	bne.n	80043a8 <__libc_init_array+0x24>
 8004394:	2600      	movs	r6, #0
 8004396:	f000 f865 	bl	8004464 <_init>
 800439a:	4c0a      	ldr	r4, [pc, #40]	@ (80043c4 <__libc_init_array+0x40>)
 800439c:	4d0a      	ldr	r5, [pc, #40]	@ (80043c8 <__libc_init_array+0x44>)
 800439e:	1b64      	subs	r4, r4, r5
 80043a0:	10a4      	asrs	r4, r4, #2
 80043a2:	42a6      	cmp	r6, r4
 80043a4:	d105      	bne.n	80043b2 <__libc_init_array+0x2e>
 80043a6:	bd70      	pop	{r4, r5, r6, pc}
 80043a8:	00b3      	lsls	r3, r6, #2
 80043aa:	58eb      	ldr	r3, [r5, r3]
 80043ac:	4798      	blx	r3
 80043ae:	3601      	adds	r6, #1
 80043b0:	e7ee      	b.n	8004390 <__libc_init_array+0xc>
 80043b2:	00b3      	lsls	r3, r6, #2
 80043b4:	58eb      	ldr	r3, [r5, r3]
 80043b6:	4798      	blx	r3
 80043b8:	3601      	adds	r6, #1
 80043ba:	e7f2      	b.n	80043a2 <__libc_init_array+0x1e>
 80043bc:	0800465c 	.word	0x0800465c
 80043c0:	0800465c 	.word	0x0800465c
 80043c4:	08004660 	.word	0x08004660
 80043c8:	0800465c 	.word	0x0800465c

080043cc <__retarget_lock_acquire_recursive>:
 80043cc:	4770      	bx	lr

080043ce <__retarget_lock_release_recursive>:
 80043ce:	4770      	bx	lr

080043d0 <_free_r>:
 80043d0:	b570      	push	{r4, r5, r6, lr}
 80043d2:	0005      	movs	r5, r0
 80043d4:	1e0c      	subs	r4, r1, #0
 80043d6:	d010      	beq.n	80043fa <_free_r+0x2a>
 80043d8:	3c04      	subs	r4, #4
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	da00      	bge.n	80043e2 <_free_r+0x12>
 80043e0:	18e4      	adds	r4, r4, r3
 80043e2:	0028      	movs	r0, r5
 80043e4:	f7ff ff9e 	bl	8004324 <__malloc_lock>
 80043e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004460 <_free_r+0x90>)
 80043ea:	6813      	ldr	r3, [r2, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d105      	bne.n	80043fc <_free_r+0x2c>
 80043f0:	6063      	str	r3, [r4, #4]
 80043f2:	6014      	str	r4, [r2, #0]
 80043f4:	0028      	movs	r0, r5
 80043f6:	f7ff ff9d 	bl	8004334 <__malloc_unlock>
 80043fa:	bd70      	pop	{r4, r5, r6, pc}
 80043fc:	42a3      	cmp	r3, r4
 80043fe:	d908      	bls.n	8004412 <_free_r+0x42>
 8004400:	6820      	ldr	r0, [r4, #0]
 8004402:	1821      	adds	r1, r4, r0
 8004404:	428b      	cmp	r3, r1
 8004406:	d1f3      	bne.n	80043f0 <_free_r+0x20>
 8004408:	6819      	ldr	r1, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	1809      	adds	r1, r1, r0
 800440e:	6021      	str	r1, [r4, #0]
 8004410:	e7ee      	b.n	80043f0 <_free_r+0x20>
 8004412:	001a      	movs	r2, r3
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <_free_r+0x4e>
 800441a:	42a3      	cmp	r3, r4
 800441c:	d9f9      	bls.n	8004412 <_free_r+0x42>
 800441e:	6811      	ldr	r1, [r2, #0]
 8004420:	1850      	adds	r0, r2, r1
 8004422:	42a0      	cmp	r0, r4
 8004424:	d10b      	bne.n	800443e <_free_r+0x6e>
 8004426:	6820      	ldr	r0, [r4, #0]
 8004428:	1809      	adds	r1, r1, r0
 800442a:	1850      	adds	r0, r2, r1
 800442c:	6011      	str	r1, [r2, #0]
 800442e:	4283      	cmp	r3, r0
 8004430:	d1e0      	bne.n	80043f4 <_free_r+0x24>
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	1841      	adds	r1, r0, r1
 8004438:	6011      	str	r1, [r2, #0]
 800443a:	6053      	str	r3, [r2, #4]
 800443c:	e7da      	b.n	80043f4 <_free_r+0x24>
 800443e:	42a0      	cmp	r0, r4
 8004440:	d902      	bls.n	8004448 <_free_r+0x78>
 8004442:	230c      	movs	r3, #12
 8004444:	602b      	str	r3, [r5, #0]
 8004446:	e7d5      	b.n	80043f4 <_free_r+0x24>
 8004448:	6820      	ldr	r0, [r4, #0]
 800444a:	1821      	adds	r1, r4, r0
 800444c:	428b      	cmp	r3, r1
 800444e:	d103      	bne.n	8004458 <_free_r+0x88>
 8004450:	6819      	ldr	r1, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	1809      	adds	r1, r1, r0
 8004456:	6021      	str	r1, [r4, #0]
 8004458:	6063      	str	r3, [r4, #4]
 800445a:	6054      	str	r4, [r2, #4]
 800445c:	e7ca      	b.n	80043f4 <_free_r+0x24>
 800445e:	46c0      	nop			@ (mov r8, r8)
 8004460:	200001a8 	.word	0x200001a8

08004464 <_init>:
 8004464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004466:	46c0      	nop			@ (mov r8, r8)
 8004468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446a:	bc08      	pop	{r3}
 800446c:	469e      	mov	lr, r3
 800446e:	4770      	bx	lr

08004470 <_fini>:
 8004470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004472:	46c0      	nop			@ (mov r8, r8)
 8004474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004476:	bc08      	pop	{r3}
 8004478:	469e      	mov	lr, r3
 800447a:	4770      	bx	lr
