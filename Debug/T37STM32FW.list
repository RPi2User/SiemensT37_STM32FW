
T37STM32FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e94  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08002f54  08002f54  00003f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003060  08003060  00005064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003060  08003060  00005064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003060  08003060  00005064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003060  08003060  00004060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003064  08003064  00004064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08003068  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000064  080030cc  00005064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  080030cc  000052f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086fd  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b3e  00000000  00000000  0000d789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  0000f2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e0  00000000  00000000  0000fa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b61  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009fa9  00000000  00000000  00028bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000899cc  00000000  00000000  00032b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc53e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d80  00000000  00000000  000bc584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000be304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000064 	.word	0x20000064
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f3c 	.word	0x08002f3c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000068 	.word	0x20000068
 8000104:	08002f3c 	.word	0x08002f3c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_fmul>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	464f      	mov	r7, r9
 80003f8:	4646      	mov	r6, r8
 80003fa:	46d6      	mov	lr, sl
 80003fc:	0044      	lsls	r4, r0, #1
 80003fe:	b5c0      	push	{r6, r7, lr}
 8000400:	0246      	lsls	r6, r0, #9
 8000402:	1c0f      	adds	r7, r1, #0
 8000404:	0a76      	lsrs	r6, r6, #9
 8000406:	0e24      	lsrs	r4, r4, #24
 8000408:	0fc5      	lsrs	r5, r0, #31
 800040a:	2c00      	cmp	r4, #0
 800040c:	d100      	bne.n	8000410 <__aeabi_fmul+0x1c>
 800040e:	e0da      	b.n	80005c6 <__aeabi_fmul+0x1d2>
 8000410:	2cff      	cmp	r4, #255	@ 0xff
 8000412:	d074      	beq.n	80004fe <__aeabi_fmul+0x10a>
 8000414:	2380      	movs	r3, #128	@ 0x80
 8000416:	00f6      	lsls	r6, r6, #3
 8000418:	04db      	lsls	r3, r3, #19
 800041a:	431e      	orrs	r6, r3
 800041c:	2300      	movs	r3, #0
 800041e:	4699      	mov	r9, r3
 8000420:	469a      	mov	sl, r3
 8000422:	3c7f      	subs	r4, #127	@ 0x7f
 8000424:	027b      	lsls	r3, r7, #9
 8000426:	0a5b      	lsrs	r3, r3, #9
 8000428:	4698      	mov	r8, r3
 800042a:	007b      	lsls	r3, r7, #1
 800042c:	0e1b      	lsrs	r3, r3, #24
 800042e:	0fff      	lsrs	r7, r7, #31
 8000430:	2b00      	cmp	r3, #0
 8000432:	d074      	beq.n	800051e <__aeabi_fmul+0x12a>
 8000434:	2bff      	cmp	r3, #255	@ 0xff
 8000436:	d100      	bne.n	800043a <__aeabi_fmul+0x46>
 8000438:	e08e      	b.n	8000558 <__aeabi_fmul+0x164>
 800043a:	4642      	mov	r2, r8
 800043c:	2180      	movs	r1, #128	@ 0x80
 800043e:	00d2      	lsls	r2, r2, #3
 8000440:	04c9      	lsls	r1, r1, #19
 8000442:	4311      	orrs	r1, r2
 8000444:	3b7f      	subs	r3, #127	@ 0x7f
 8000446:	002a      	movs	r2, r5
 8000448:	18e4      	adds	r4, r4, r3
 800044a:	464b      	mov	r3, r9
 800044c:	407a      	eors	r2, r7
 800044e:	4688      	mov	r8, r1
 8000450:	b2d2      	uxtb	r2, r2
 8000452:	2b0a      	cmp	r3, #10
 8000454:	dc75      	bgt.n	8000542 <__aeabi_fmul+0x14e>
 8000456:	464b      	mov	r3, r9
 8000458:	2000      	movs	r0, #0
 800045a:	2b02      	cmp	r3, #2
 800045c:	dd0f      	ble.n	800047e <__aeabi_fmul+0x8a>
 800045e:	4649      	mov	r1, r9
 8000460:	2301      	movs	r3, #1
 8000462:	408b      	lsls	r3, r1
 8000464:	21a6      	movs	r1, #166	@ 0xa6
 8000466:	00c9      	lsls	r1, r1, #3
 8000468:	420b      	tst	r3, r1
 800046a:	d169      	bne.n	8000540 <__aeabi_fmul+0x14c>
 800046c:	2190      	movs	r1, #144	@ 0x90
 800046e:	0089      	lsls	r1, r1, #2
 8000470:	420b      	tst	r3, r1
 8000472:	d000      	beq.n	8000476 <__aeabi_fmul+0x82>
 8000474:	e100      	b.n	8000678 <__aeabi_fmul+0x284>
 8000476:	2188      	movs	r1, #136	@ 0x88
 8000478:	4219      	tst	r1, r3
 800047a:	d000      	beq.n	800047e <__aeabi_fmul+0x8a>
 800047c:	e0f5      	b.n	800066a <__aeabi_fmul+0x276>
 800047e:	4641      	mov	r1, r8
 8000480:	0409      	lsls	r1, r1, #16
 8000482:	0c09      	lsrs	r1, r1, #16
 8000484:	4643      	mov	r3, r8
 8000486:	0008      	movs	r0, r1
 8000488:	0c35      	lsrs	r5, r6, #16
 800048a:	0436      	lsls	r6, r6, #16
 800048c:	0c1b      	lsrs	r3, r3, #16
 800048e:	0c36      	lsrs	r6, r6, #16
 8000490:	4370      	muls	r0, r6
 8000492:	4369      	muls	r1, r5
 8000494:	435e      	muls	r6, r3
 8000496:	435d      	muls	r5, r3
 8000498:	1876      	adds	r6, r6, r1
 800049a:	0c03      	lsrs	r3, r0, #16
 800049c:	199b      	adds	r3, r3, r6
 800049e:	4299      	cmp	r1, r3
 80004a0:	d903      	bls.n	80004aa <__aeabi_fmul+0xb6>
 80004a2:	2180      	movs	r1, #128	@ 0x80
 80004a4:	0249      	lsls	r1, r1, #9
 80004a6:	468c      	mov	ip, r1
 80004a8:	4465      	add	r5, ip
 80004aa:	0400      	lsls	r0, r0, #16
 80004ac:	0419      	lsls	r1, r3, #16
 80004ae:	0c00      	lsrs	r0, r0, #16
 80004b0:	1809      	adds	r1, r1, r0
 80004b2:	018e      	lsls	r6, r1, #6
 80004b4:	1e70      	subs	r0, r6, #1
 80004b6:	4186      	sbcs	r6, r0
 80004b8:	0c1b      	lsrs	r3, r3, #16
 80004ba:	0e89      	lsrs	r1, r1, #26
 80004bc:	195b      	adds	r3, r3, r5
 80004be:	430e      	orrs	r6, r1
 80004c0:	019b      	lsls	r3, r3, #6
 80004c2:	431e      	orrs	r6, r3
 80004c4:	011b      	lsls	r3, r3, #4
 80004c6:	d46c      	bmi.n	80005a2 <__aeabi_fmul+0x1ae>
 80004c8:	0023      	movs	r3, r4
 80004ca:	337f      	adds	r3, #127	@ 0x7f
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	dc00      	bgt.n	80004d2 <__aeabi_fmul+0xde>
 80004d0:	e0b1      	b.n	8000636 <__aeabi_fmul+0x242>
 80004d2:	0015      	movs	r5, r2
 80004d4:	0771      	lsls	r1, r6, #29
 80004d6:	d00b      	beq.n	80004f0 <__aeabi_fmul+0xfc>
 80004d8:	200f      	movs	r0, #15
 80004da:	0021      	movs	r1, r4
 80004dc:	4030      	ands	r0, r6
 80004de:	2804      	cmp	r0, #4
 80004e0:	d006      	beq.n	80004f0 <__aeabi_fmul+0xfc>
 80004e2:	3604      	adds	r6, #4
 80004e4:	0132      	lsls	r2, r6, #4
 80004e6:	d503      	bpl.n	80004f0 <__aeabi_fmul+0xfc>
 80004e8:	4b6e      	ldr	r3, [pc, #440]	@ (80006a4 <__aeabi_fmul+0x2b0>)
 80004ea:	401e      	ands	r6, r3
 80004ec:	000b      	movs	r3, r1
 80004ee:	3380      	adds	r3, #128	@ 0x80
 80004f0:	2bfe      	cmp	r3, #254	@ 0xfe
 80004f2:	dd00      	ble.n	80004f6 <__aeabi_fmul+0x102>
 80004f4:	e0bd      	b.n	8000672 <__aeabi_fmul+0x27e>
 80004f6:	01b2      	lsls	r2, r6, #6
 80004f8:	0a52      	lsrs	r2, r2, #9
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	e048      	b.n	8000590 <__aeabi_fmul+0x19c>
 80004fe:	2e00      	cmp	r6, #0
 8000500:	d000      	beq.n	8000504 <__aeabi_fmul+0x110>
 8000502:	e092      	b.n	800062a <__aeabi_fmul+0x236>
 8000504:	2308      	movs	r3, #8
 8000506:	4699      	mov	r9, r3
 8000508:	3b06      	subs	r3, #6
 800050a:	469a      	mov	sl, r3
 800050c:	027b      	lsls	r3, r7, #9
 800050e:	0a5b      	lsrs	r3, r3, #9
 8000510:	4698      	mov	r8, r3
 8000512:	007b      	lsls	r3, r7, #1
 8000514:	24ff      	movs	r4, #255	@ 0xff
 8000516:	0e1b      	lsrs	r3, r3, #24
 8000518:	0fff      	lsrs	r7, r7, #31
 800051a:	2b00      	cmp	r3, #0
 800051c:	d18a      	bne.n	8000434 <__aeabi_fmul+0x40>
 800051e:	4642      	mov	r2, r8
 8000520:	2a00      	cmp	r2, #0
 8000522:	d164      	bne.n	80005ee <__aeabi_fmul+0x1fa>
 8000524:	4649      	mov	r1, r9
 8000526:	3201      	adds	r2, #1
 8000528:	4311      	orrs	r1, r2
 800052a:	4689      	mov	r9, r1
 800052c:	290a      	cmp	r1, #10
 800052e:	dc08      	bgt.n	8000542 <__aeabi_fmul+0x14e>
 8000530:	407d      	eors	r5, r7
 8000532:	2001      	movs	r0, #1
 8000534:	b2ea      	uxtb	r2, r5
 8000536:	2902      	cmp	r1, #2
 8000538:	dc91      	bgt.n	800045e <__aeabi_fmul+0x6a>
 800053a:	0015      	movs	r5, r2
 800053c:	2200      	movs	r2, #0
 800053e:	e027      	b.n	8000590 <__aeabi_fmul+0x19c>
 8000540:	0015      	movs	r5, r2
 8000542:	4653      	mov	r3, sl
 8000544:	2b02      	cmp	r3, #2
 8000546:	d100      	bne.n	800054a <__aeabi_fmul+0x156>
 8000548:	e093      	b.n	8000672 <__aeabi_fmul+0x27e>
 800054a:	2b03      	cmp	r3, #3
 800054c:	d01a      	beq.n	8000584 <__aeabi_fmul+0x190>
 800054e:	2b01      	cmp	r3, #1
 8000550:	d12c      	bne.n	80005ac <__aeabi_fmul+0x1b8>
 8000552:	2300      	movs	r3, #0
 8000554:	2200      	movs	r2, #0
 8000556:	e01b      	b.n	8000590 <__aeabi_fmul+0x19c>
 8000558:	4643      	mov	r3, r8
 800055a:	34ff      	adds	r4, #255	@ 0xff
 800055c:	2b00      	cmp	r3, #0
 800055e:	d055      	beq.n	800060c <__aeabi_fmul+0x218>
 8000560:	2103      	movs	r1, #3
 8000562:	464b      	mov	r3, r9
 8000564:	430b      	orrs	r3, r1
 8000566:	0019      	movs	r1, r3
 8000568:	2b0a      	cmp	r3, #10
 800056a:	dc00      	bgt.n	800056e <__aeabi_fmul+0x17a>
 800056c:	e092      	b.n	8000694 <__aeabi_fmul+0x2a0>
 800056e:	2b0f      	cmp	r3, #15
 8000570:	d000      	beq.n	8000574 <__aeabi_fmul+0x180>
 8000572:	e08c      	b.n	800068e <__aeabi_fmul+0x29a>
 8000574:	2280      	movs	r2, #128	@ 0x80
 8000576:	03d2      	lsls	r2, r2, #15
 8000578:	4216      	tst	r6, r2
 800057a:	d003      	beq.n	8000584 <__aeabi_fmul+0x190>
 800057c:	4643      	mov	r3, r8
 800057e:	4213      	tst	r3, r2
 8000580:	d100      	bne.n	8000584 <__aeabi_fmul+0x190>
 8000582:	e07d      	b.n	8000680 <__aeabi_fmul+0x28c>
 8000584:	2280      	movs	r2, #128	@ 0x80
 8000586:	03d2      	lsls	r2, r2, #15
 8000588:	4332      	orrs	r2, r6
 800058a:	0252      	lsls	r2, r2, #9
 800058c:	0a52      	lsrs	r2, r2, #9
 800058e:	23ff      	movs	r3, #255	@ 0xff
 8000590:	05d8      	lsls	r0, r3, #23
 8000592:	07ed      	lsls	r5, r5, #31
 8000594:	4310      	orrs	r0, r2
 8000596:	4328      	orrs	r0, r5
 8000598:	bce0      	pop	{r5, r6, r7}
 800059a:	46ba      	mov	sl, r7
 800059c:	46b1      	mov	r9, r6
 800059e:	46a8      	mov	r8, r5
 80005a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a2:	2301      	movs	r3, #1
 80005a4:	0015      	movs	r5, r2
 80005a6:	0871      	lsrs	r1, r6, #1
 80005a8:	401e      	ands	r6, r3
 80005aa:	430e      	orrs	r6, r1
 80005ac:	0023      	movs	r3, r4
 80005ae:	3380      	adds	r3, #128	@ 0x80
 80005b0:	1c61      	adds	r1, r4, #1
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dd41      	ble.n	800063a <__aeabi_fmul+0x246>
 80005b6:	0772      	lsls	r2, r6, #29
 80005b8:	d094      	beq.n	80004e4 <__aeabi_fmul+0xf0>
 80005ba:	220f      	movs	r2, #15
 80005bc:	4032      	ands	r2, r6
 80005be:	2a04      	cmp	r2, #4
 80005c0:	d000      	beq.n	80005c4 <__aeabi_fmul+0x1d0>
 80005c2:	e78e      	b.n	80004e2 <__aeabi_fmul+0xee>
 80005c4:	e78e      	b.n	80004e4 <__aeabi_fmul+0xf0>
 80005c6:	2e00      	cmp	r6, #0
 80005c8:	d105      	bne.n	80005d6 <__aeabi_fmul+0x1e2>
 80005ca:	2304      	movs	r3, #4
 80005cc:	4699      	mov	r9, r3
 80005ce:	3b03      	subs	r3, #3
 80005d0:	2400      	movs	r4, #0
 80005d2:	469a      	mov	sl, r3
 80005d4:	e726      	b.n	8000424 <__aeabi_fmul+0x30>
 80005d6:	0030      	movs	r0, r6
 80005d8:	f000 f8d6 	bl	8000788 <__clzsi2>
 80005dc:	2476      	movs	r4, #118	@ 0x76
 80005de:	1f43      	subs	r3, r0, #5
 80005e0:	409e      	lsls	r6, r3
 80005e2:	2300      	movs	r3, #0
 80005e4:	4264      	negs	r4, r4
 80005e6:	4699      	mov	r9, r3
 80005e8:	469a      	mov	sl, r3
 80005ea:	1a24      	subs	r4, r4, r0
 80005ec:	e71a      	b.n	8000424 <__aeabi_fmul+0x30>
 80005ee:	4640      	mov	r0, r8
 80005f0:	f000 f8ca 	bl	8000788 <__clzsi2>
 80005f4:	464b      	mov	r3, r9
 80005f6:	1a24      	subs	r4, r4, r0
 80005f8:	3c76      	subs	r4, #118	@ 0x76
 80005fa:	2b0a      	cmp	r3, #10
 80005fc:	dca1      	bgt.n	8000542 <__aeabi_fmul+0x14e>
 80005fe:	4643      	mov	r3, r8
 8000600:	3805      	subs	r0, #5
 8000602:	4083      	lsls	r3, r0
 8000604:	407d      	eors	r5, r7
 8000606:	4698      	mov	r8, r3
 8000608:	b2ea      	uxtb	r2, r5
 800060a:	e724      	b.n	8000456 <__aeabi_fmul+0x62>
 800060c:	464a      	mov	r2, r9
 800060e:	3302      	adds	r3, #2
 8000610:	4313      	orrs	r3, r2
 8000612:	002a      	movs	r2, r5
 8000614:	407a      	eors	r2, r7
 8000616:	b2d2      	uxtb	r2, r2
 8000618:	2b0a      	cmp	r3, #10
 800061a:	dc92      	bgt.n	8000542 <__aeabi_fmul+0x14e>
 800061c:	4649      	mov	r1, r9
 800061e:	0015      	movs	r5, r2
 8000620:	2900      	cmp	r1, #0
 8000622:	d026      	beq.n	8000672 <__aeabi_fmul+0x27e>
 8000624:	4699      	mov	r9, r3
 8000626:	2002      	movs	r0, #2
 8000628:	e719      	b.n	800045e <__aeabi_fmul+0x6a>
 800062a:	230c      	movs	r3, #12
 800062c:	4699      	mov	r9, r3
 800062e:	3b09      	subs	r3, #9
 8000630:	24ff      	movs	r4, #255	@ 0xff
 8000632:	469a      	mov	sl, r3
 8000634:	e6f6      	b.n	8000424 <__aeabi_fmul+0x30>
 8000636:	0015      	movs	r5, r2
 8000638:	0021      	movs	r1, r4
 800063a:	2201      	movs	r2, #1
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	2b1b      	cmp	r3, #27
 8000640:	dd00      	ble.n	8000644 <__aeabi_fmul+0x250>
 8000642:	e786      	b.n	8000552 <__aeabi_fmul+0x15e>
 8000644:	319e      	adds	r1, #158	@ 0x9e
 8000646:	0032      	movs	r2, r6
 8000648:	408e      	lsls	r6, r1
 800064a:	40da      	lsrs	r2, r3
 800064c:	1e73      	subs	r3, r6, #1
 800064e:	419e      	sbcs	r6, r3
 8000650:	4332      	orrs	r2, r6
 8000652:	0753      	lsls	r3, r2, #29
 8000654:	d004      	beq.n	8000660 <__aeabi_fmul+0x26c>
 8000656:	230f      	movs	r3, #15
 8000658:	4013      	ands	r3, r2
 800065a:	2b04      	cmp	r3, #4
 800065c:	d000      	beq.n	8000660 <__aeabi_fmul+0x26c>
 800065e:	3204      	adds	r2, #4
 8000660:	0153      	lsls	r3, r2, #5
 8000662:	d510      	bpl.n	8000686 <__aeabi_fmul+0x292>
 8000664:	2301      	movs	r3, #1
 8000666:	2200      	movs	r2, #0
 8000668:	e792      	b.n	8000590 <__aeabi_fmul+0x19c>
 800066a:	003d      	movs	r5, r7
 800066c:	4646      	mov	r6, r8
 800066e:	4682      	mov	sl, r0
 8000670:	e767      	b.n	8000542 <__aeabi_fmul+0x14e>
 8000672:	23ff      	movs	r3, #255	@ 0xff
 8000674:	2200      	movs	r2, #0
 8000676:	e78b      	b.n	8000590 <__aeabi_fmul+0x19c>
 8000678:	2280      	movs	r2, #128	@ 0x80
 800067a:	2500      	movs	r5, #0
 800067c:	03d2      	lsls	r2, r2, #15
 800067e:	e786      	b.n	800058e <__aeabi_fmul+0x19a>
 8000680:	003d      	movs	r5, r7
 8000682:	431a      	orrs	r2, r3
 8000684:	e783      	b.n	800058e <__aeabi_fmul+0x19a>
 8000686:	0192      	lsls	r2, r2, #6
 8000688:	2300      	movs	r3, #0
 800068a:	0a52      	lsrs	r2, r2, #9
 800068c:	e780      	b.n	8000590 <__aeabi_fmul+0x19c>
 800068e:	003d      	movs	r5, r7
 8000690:	4646      	mov	r6, r8
 8000692:	e777      	b.n	8000584 <__aeabi_fmul+0x190>
 8000694:	002a      	movs	r2, r5
 8000696:	2301      	movs	r3, #1
 8000698:	407a      	eors	r2, r7
 800069a:	408b      	lsls	r3, r1
 800069c:	2003      	movs	r0, #3
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	e6e9      	b.n	8000476 <__aeabi_fmul+0x82>
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	f7ffffff 	.word	0xf7ffffff

080006a8 <__aeabi_f2iz>:
 80006a8:	0241      	lsls	r1, r0, #9
 80006aa:	0042      	lsls	r2, r0, #1
 80006ac:	0fc3      	lsrs	r3, r0, #31
 80006ae:	0a49      	lsrs	r1, r1, #9
 80006b0:	2000      	movs	r0, #0
 80006b2:	0e12      	lsrs	r2, r2, #24
 80006b4:	2a7e      	cmp	r2, #126	@ 0x7e
 80006b6:	dd03      	ble.n	80006c0 <__aeabi_f2iz+0x18>
 80006b8:	2a9d      	cmp	r2, #157	@ 0x9d
 80006ba:	dd02      	ble.n	80006c2 <__aeabi_f2iz+0x1a>
 80006bc:	4a09      	ldr	r2, [pc, #36]	@ (80006e4 <__aeabi_f2iz+0x3c>)
 80006be:	1898      	adds	r0, r3, r2
 80006c0:	4770      	bx	lr
 80006c2:	2080      	movs	r0, #128	@ 0x80
 80006c4:	0400      	lsls	r0, r0, #16
 80006c6:	4301      	orrs	r1, r0
 80006c8:	2a95      	cmp	r2, #149	@ 0x95
 80006ca:	dc07      	bgt.n	80006dc <__aeabi_f2iz+0x34>
 80006cc:	2096      	movs	r0, #150	@ 0x96
 80006ce:	1a82      	subs	r2, r0, r2
 80006d0:	40d1      	lsrs	r1, r2
 80006d2:	4248      	negs	r0, r1
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1f3      	bne.n	80006c0 <__aeabi_f2iz+0x18>
 80006d8:	0008      	movs	r0, r1
 80006da:	e7f1      	b.n	80006c0 <__aeabi_f2iz+0x18>
 80006dc:	3a96      	subs	r2, #150	@ 0x96
 80006de:	4091      	lsls	r1, r2
 80006e0:	e7f7      	b.n	80006d2 <__aeabi_f2iz+0x2a>
 80006e2:	46c0      	nop			@ (mov r8, r8)
 80006e4:	7fffffff 	.word	0x7fffffff

080006e8 <__aeabi_i2f>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	2800      	cmp	r0, #0
 80006ec:	d012      	beq.n	8000714 <__aeabi_i2f+0x2c>
 80006ee:	17c3      	asrs	r3, r0, #31
 80006f0:	18c5      	adds	r5, r0, r3
 80006f2:	405d      	eors	r5, r3
 80006f4:	0fc4      	lsrs	r4, r0, #31
 80006f6:	0028      	movs	r0, r5
 80006f8:	f000 f846 	bl	8000788 <__clzsi2>
 80006fc:	239e      	movs	r3, #158	@ 0x9e
 80006fe:	1a1b      	subs	r3, r3, r0
 8000700:	2b96      	cmp	r3, #150	@ 0x96
 8000702:	dc0f      	bgt.n	8000724 <__aeabi_i2f+0x3c>
 8000704:	2808      	cmp	r0, #8
 8000706:	d038      	beq.n	800077a <__aeabi_i2f+0x92>
 8000708:	3808      	subs	r0, #8
 800070a:	4085      	lsls	r5, r0
 800070c:	026d      	lsls	r5, r5, #9
 800070e:	0a6d      	lsrs	r5, r5, #9
 8000710:	b2d8      	uxtb	r0, r3
 8000712:	e002      	b.n	800071a <__aeabi_i2f+0x32>
 8000714:	2400      	movs	r4, #0
 8000716:	2000      	movs	r0, #0
 8000718:	2500      	movs	r5, #0
 800071a:	05c0      	lsls	r0, r0, #23
 800071c:	4328      	orrs	r0, r5
 800071e:	07e4      	lsls	r4, r4, #31
 8000720:	4320      	orrs	r0, r4
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	2b99      	cmp	r3, #153	@ 0x99
 8000726:	dc14      	bgt.n	8000752 <__aeabi_i2f+0x6a>
 8000728:	1f42      	subs	r2, r0, #5
 800072a:	4095      	lsls	r5, r2
 800072c:	002a      	movs	r2, r5
 800072e:	4915      	ldr	r1, [pc, #84]	@ (8000784 <__aeabi_i2f+0x9c>)
 8000730:	4011      	ands	r1, r2
 8000732:	0755      	lsls	r5, r2, #29
 8000734:	d01c      	beq.n	8000770 <__aeabi_i2f+0x88>
 8000736:	250f      	movs	r5, #15
 8000738:	402a      	ands	r2, r5
 800073a:	2a04      	cmp	r2, #4
 800073c:	d018      	beq.n	8000770 <__aeabi_i2f+0x88>
 800073e:	3104      	adds	r1, #4
 8000740:	08ca      	lsrs	r2, r1, #3
 8000742:	0149      	lsls	r1, r1, #5
 8000744:	d515      	bpl.n	8000772 <__aeabi_i2f+0x8a>
 8000746:	239f      	movs	r3, #159	@ 0x9f
 8000748:	0252      	lsls	r2, r2, #9
 800074a:	1a18      	subs	r0, r3, r0
 800074c:	0a55      	lsrs	r5, r2, #9
 800074e:	b2c0      	uxtb	r0, r0
 8000750:	e7e3      	b.n	800071a <__aeabi_i2f+0x32>
 8000752:	2205      	movs	r2, #5
 8000754:	0029      	movs	r1, r5
 8000756:	1a12      	subs	r2, r2, r0
 8000758:	40d1      	lsrs	r1, r2
 800075a:	0002      	movs	r2, r0
 800075c:	321b      	adds	r2, #27
 800075e:	4095      	lsls	r5, r2
 8000760:	002a      	movs	r2, r5
 8000762:	1e55      	subs	r5, r2, #1
 8000764:	41aa      	sbcs	r2, r5
 8000766:	430a      	orrs	r2, r1
 8000768:	4906      	ldr	r1, [pc, #24]	@ (8000784 <__aeabi_i2f+0x9c>)
 800076a:	4011      	ands	r1, r2
 800076c:	0755      	lsls	r5, r2, #29
 800076e:	d1e2      	bne.n	8000736 <__aeabi_i2f+0x4e>
 8000770:	08ca      	lsrs	r2, r1, #3
 8000772:	0252      	lsls	r2, r2, #9
 8000774:	0a55      	lsrs	r5, r2, #9
 8000776:	b2d8      	uxtb	r0, r3
 8000778:	e7cf      	b.n	800071a <__aeabi_i2f+0x32>
 800077a:	026d      	lsls	r5, r5, #9
 800077c:	0a6d      	lsrs	r5, r5, #9
 800077e:	308e      	adds	r0, #142	@ 0x8e
 8000780:	e7cb      	b.n	800071a <__aeabi_i2f+0x32>
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	fbffffff 	.word	0xfbffffff

08000788 <__clzsi2>:
 8000788:	211c      	movs	r1, #28
 800078a:	2301      	movs	r3, #1
 800078c:	041b      	lsls	r3, r3, #16
 800078e:	4298      	cmp	r0, r3
 8000790:	d301      	bcc.n	8000796 <__clzsi2+0xe>
 8000792:	0c00      	lsrs	r0, r0, #16
 8000794:	3910      	subs	r1, #16
 8000796:	0a1b      	lsrs	r3, r3, #8
 8000798:	4298      	cmp	r0, r3
 800079a:	d301      	bcc.n	80007a0 <__clzsi2+0x18>
 800079c:	0a00      	lsrs	r0, r0, #8
 800079e:	3908      	subs	r1, #8
 80007a0:	091b      	lsrs	r3, r3, #4
 80007a2:	4298      	cmp	r0, r3
 80007a4:	d301      	bcc.n	80007aa <__clzsi2+0x22>
 80007a6:	0900      	lsrs	r0, r0, #4
 80007a8:	3904      	subs	r1, #4
 80007aa:	a202      	add	r2, pc, #8	@ (adr r2, 80007b4 <__clzsi2+0x2c>)
 80007ac:	5c10      	ldrb	r0, [r2, r0]
 80007ae:	1840      	adds	r0, r0, r1
 80007b0:	4770      	bx	lr
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	02020304 	.word	0x02020304
 80007b8:	01010101 	.word	0x01010101
	...

080007c4 <booTYinit>:
 *    - 1x figs (for first "real" char)
 *    - 1x `?` to encourage user input
 *    - 1x ltrs to let the user in ltrs-mode
 *    - 1x space for visual appeal
 */
int* booTYinit(int* currentBuffer){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	readBuffer = (int*)malloc(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f002 fa5f 	bl	8002c90 <malloc>
 80007d2:	0003      	movs	r3, r0
 80007d4:	001a      	movs	r2, r3
 80007d6:	4b21      	ldr	r3, [pc, #132]	@ (800085c <booTYinit+0x98>)
 80007d8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i <= 5; i++)
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	e00c      	b.n	80007fa <booTYinit+0x36>
		currentBuffer = appendSymbol(currentBuffer, symbol.ltrs);
 80007e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000860 <booTYinit+0x9c>)
 80007e2:	22c8      	movs	r2, #200	@ 0xc8
 80007e4:	589a      	ldr	r2, [r3, r2]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	0011      	movs	r1, r2
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 fbfb 	bl	8000fe6 <appendSymbol>
 80007f0:	0003      	movs	r3, r0
 80007f2:	607b      	str	r3, [r7, #4]
	for (int i = 0; i <= 5; i++)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	3301      	adds	r3, #1
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	2b05      	cmp	r3, #5
 80007fe:	ddef      	ble.n	80007e0 <booTYinit+0x1c>
	currentBuffer = appendSymbol(currentBuffer, symbol.figs);
 8000800:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <booTYinit+0x9c>)
 8000802:	22cc      	movs	r2, #204	@ 0xcc
 8000804:	589a      	ldr	r2, [r3, r2]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	0011      	movs	r1, r2
 800080a:	0018      	movs	r0, r3
 800080c:	f000 fbeb 	bl	8000fe6 <appendSymbol>
 8000810:	0003      	movs	r3, r0
 8000812:	607b      	str	r3, [r7, #4]
	currentBuffer = appendSymbol(currentBuffer, symbol.question);
 8000814:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <booTYinit+0x9c>)
 8000816:	22ac      	movs	r2, #172	@ 0xac
 8000818:	589a      	ldr	r2, [r3, r2]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	0011      	movs	r1, r2
 800081e:	0018      	movs	r0, r3
 8000820:	f000 fbe1 	bl	8000fe6 <appendSymbol>
 8000824:	0003      	movs	r3, r0
 8000826:	607b      	str	r3, [r7, #4]
	currentBuffer = appendSymbol(currentBuffer, symbol.ltrs);
 8000828:	4b0d      	ldr	r3, [pc, #52]	@ (8000860 <booTYinit+0x9c>)
 800082a:	22c8      	movs	r2, #200	@ 0xc8
 800082c:	589a      	ldr	r2, [r3, r2]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	0011      	movs	r1, r2
 8000832:	0018      	movs	r0, r3
 8000834:	f000 fbd7 	bl	8000fe6 <appendSymbol>
 8000838:	0003      	movs	r3, r0
 800083a:	607b      	str	r3, [r7, #4]
	currentBuffer = appendSymbol(currentBuffer, symbol.space);
 800083c:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <booTYinit+0x9c>)
 800083e:	2290      	movs	r2, #144	@ 0x90
 8000840:	589a      	ldr	r2, [r3, r2]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	0011      	movs	r1, r2
 8000846:	0018      	movs	r0, r3
 8000848:	f000 fbcd 	bl	8000fe6 <appendSymbol>
 800084c:	0003      	movs	r3, r0
 800084e:	607b      	str	r3, [r7, #4]

	return currentBuffer;
 8000850:	687b      	ldr	r3, [r7, #4]
}
 8000852:	0018      	movs	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	b004      	add	sp, #16
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	20000080 	.word	0x20000080
 8000860:	08002f6c 	.word	0x08002f6c

08000864 <booTYshell>:
 *    - when in ltrs all additional ltrs symbols will be ignored
 *    - when in figs all additional figs symbols will be ignored
 *    - all illegal chars won't be echoed
 *    - duplicate ltrs (a-z) will be ignored
 */
int* booTYshell(int* currentBuffer){
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	// read user-string
	currentBuffer = readCommand(symbol.question);
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <booTYshell+0x24>)
 800086e:	22ac      	movs	r2, #172	@ 0xac
 8000870:	589b      	ldr	r3, [r3, r2]
 8000872:	0018      	movs	r0, r3
 8000874:	f000 f80a 	bl	800088c <readCommand>
 8000878:	0003      	movs	r3, r0
 800087a:	607b      	str	r3, [r7, #4]
	return currentBuffer;
 800087c:	687b      	ldr	r3, [r7, #4]
}
 800087e:	0018      	movs	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	b002      	add	sp, #8
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	08002f6c 	.word	0x08002f6c

0800088c <readCommand>:
 * user input, by ignoring non-useable user input
 *    - reads baudot "string" terminated by a terminator of choice
 *    - helps to only allow valid mode ltrs
 *    - automagically switches between ltrs and figs for user-comfort
 */  
int* readCommand(int cmd_terminator){
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	int _sym = -1;
 8000894:	2301      	movs	r3, #1
 8000896:	425b      	negs	r3, r3
 8000898:	60fb      	str	r3, [r7, #12]
	int _term = -1;
 800089a:	2301      	movs	r3, #1
 800089c:	425b      	negs	r3, r3
 800089e:	60bb      	str	r3, [r7, #8]
	do {
		_sym = readSymbol();
 80008a0:	f000 fcf2 	bl	8001288 <readSymbol>
 80008a4:	0003      	movs	r3, r0
 80008a6:	60fb      	str	r3, [r7, #12]
		_term = readSymbol();
 80008a8:	f000 fcee 	bl	8001288 <readSymbol>
 80008ac:	0003      	movs	r3, r0
 80008ae:	60bb      	str	r3, [r7, #8]
		if (_term != cmd_terminator) _sym = _term;
 80008b0:	68ba      	ldr	r2, [r7, #8]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d001      	beq.n	80008bc <readCommand+0x30>
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	60fb      	str	r3, [r7, #12]
	} while (_term != cmd_terminator);
 80008bc:	68ba      	ldr	r2, [r7, #8]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d1ed      	bne.n	80008a0 <readCommand+0x14>
	setSendMode();
 80008c4:	f000 fd00 	bl	80012c8 <setSendMode>
	TTY_WRITE(symbol.null_char);	// This repeats current ltrs|figs
 80008c8:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <readCommand+0x68>)
 80008ca:	22d0      	movs	r2, #208	@ 0xd0
 80008cc:	589b      	ldr	r3, [r3, r2]
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 fc96 	bl	8001200 <TTY_WRITE>
	readBuffer = appendSymbol(readBuffer, _sym);
 80008d4:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <readCommand+0x6c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	0011      	movs	r1, r2
 80008dc:	0018      	movs	r0, r3
 80008de:	f000 fb82 	bl	8000fe6 <appendSymbol>
 80008e2:	0002      	movs	r2, r0
 80008e4:	4b04      	ldr	r3, [pc, #16]	@ (80008f8 <readCommand+0x6c>)
 80008e6:	601a      	str	r2, [r3, #0]
	return readBuffer;
 80008e8:	4b03      	ldr	r3, [pc, #12]	@ (80008f8 <readCommand+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
}
 80008ec:	0018      	movs	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b004      	add	sp, #16
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	08002f6c 	.word	0x08002f6c
 80008f8:	20000080 	.word	0x20000080

080008fc <setLED_MLOCAL>:

// -----------------------------------------------------------------


// ---I/O SECTION---------------------------------------------------
void setLED_MLOCAL(int state){	// LED @ A0
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	if (state != 0) {
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d007      	beq.n	800091a <setLED_MLOCAL+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800090a:	2390      	movs	r3, #144	@ 0x90
 800090c:	05db      	lsls	r3, r3, #23
 800090e:	2201      	movs	r2, #1
 8000910:	2101      	movs	r1, #1
 8000912:	0018      	movs	r0, r3
 8000914:	f000 fffb 	bl	800190e <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 8000918:	e006      	b.n	8000928 <setLED_MLOCAL+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800091a:	2390      	movs	r3, #144	@ 0x90
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	2200      	movs	r2, #0
 8000920:	2101      	movs	r1, #1
 8000922:	0018      	movs	r0, r3
 8000924:	f000 fff3 	bl	800190e <HAL_GPIO_WritePin>
}
 8000928:	46c0      	nop			@ (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b002      	add	sp, #8
 800092e:	bd80      	pop	{r7, pc}

08000930 <setLED_MSERIAL>:

void setLED_MSERIAL(int state){ // LED @ A1
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	if (state != 0) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d007      	beq.n	800094e <setLED_MSERIAL+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800093e:	2390      	movs	r3, #144	@ 0x90
 8000940:	05db      	lsls	r3, r3, #23
 8000942:	2201      	movs	r2, #1
 8000944:	2102      	movs	r1, #2
 8000946:	0018      	movs	r0, r3
 8000948:	f000 ffe1 	bl	800190e <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
	}
}
 800094c:	e006      	b.n	800095c <setLED_MSERIAL+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800094e:	2390      	movs	r3, #144	@ 0x90
 8000950:	05db      	lsls	r3, r3, #23
 8000952:	2200      	movs	r2, #0
 8000954:	2102      	movs	r1, #2
 8000956:	0018      	movs	r0, r3
 8000958:	f000 ffd9 	bl	800190e <HAL_GPIO_WritePin>
}
 800095c:	46c0      	nop			@ (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	b002      	add	sp, #8
 8000962:	bd80      	pop	{r7, pc}

08000964 <setLED_BSY>:

void setLED_BSY(int state){		// LED @ A2
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	if (state != 0) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d007      	beq.n	8000982 <setLED_BSY+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000972:	2390      	movs	r3, #144	@ 0x90
 8000974:	05db      	lsls	r3, r3, #23
 8000976:	2201      	movs	r2, #1
 8000978:	2108      	movs	r1, #8
 800097a:	0018      	movs	r0, r3
 800097c:	f000 ffc7 	bl	800190e <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
	}
}
 8000980:	e006      	b.n	8000990 <setLED_BSY+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000982:	2390      	movs	r3, #144	@ 0x90
 8000984:	05db      	lsls	r3, r3, #23
 8000986:	2200      	movs	r2, #0
 8000988:	2108      	movs	r1, #8
 800098a:	0018      	movs	r0, r3
 800098c:	f000 ffbf 	bl	800190e <HAL_GPIO_WritePin>
}
 8000990:	46c0      	nop			@ (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	b002      	add	sp, #8
 8000996:	bd80      	pop	{r7, pc}

08000998 <SEND_TTY>:




// ---SENDERS-------------------------------------------------------
void SEND_TTY(){
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	// sends writeBuffer to tty @ A3

	// foreach ASCII-char in writeBuffer…
	int i = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
	while(*writeBuffer != '\0') {
 80009a2:	e023      	b.n	80009ec <SEND_TTY+0x54>
		// 1. writeBuffer.toLower();
		char c = writeBuffer[i];
 80009a4:	4b16      	ldr	r3, [pc, #88]	@ (8000a00 <SEND_TTY+0x68>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	18d2      	adds	r2, r2, r3
 80009ac:	1cfb      	adds	r3, r7, #3
 80009ae:	7812      	ldrb	r2, [r2, #0]
 80009b0:	701a      	strb	r2, [r3, #0]
        if (writeBuffer[i] >= 'A' && writeBuffer[i] <= 'Z')
 80009b2:	4b13      	ldr	r3, [pc, #76]	@ (8000a00 <SEND_TTY+0x68>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	18d3      	adds	r3, r2, r3
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b40      	cmp	r3, #64	@ 0x40
 80009be:	d90b      	bls.n	80009d8 <SEND_TTY+0x40>
 80009c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a00 <SEND_TTY+0x68>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	18d3      	adds	r3, r2, r3
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b5a      	cmp	r3, #90	@ 0x5a
 80009cc:	d804      	bhi.n	80009d8 <SEND_TTY+0x40>
            c += 'a' - 'A'; 	// offset via the difference a-A
 80009ce:	1cfb      	adds	r3, r7, #3
 80009d0:	1cfa      	adds	r2, r7, #3
 80009d2:	7812      	ldrb	r2, [r2, #0]
 80009d4:	3220      	adds	r2, #32
 80009d6:	701a      	strb	r2, [r3, #0]
        writeBuffer[i] = c; 	// replace c in writeBuffer
 80009d8:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <SEND_TTY+0x68>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	18d3      	adds	r3, r2, r3
 80009e0:	1cfa      	adds	r2, r7, #3
 80009e2:	7812      	ldrb	r2, [r2, #0]
 80009e4:	701a      	strb	r2, [r3, #0]

		// TODO: Insert ASCII to Baudot conversion!

		//SEND_TTYC(writeBuffer[i]);
		i++;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3301      	adds	r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
	while(*writeBuffer != '\0') {
 80009ec:	4b04      	ldr	r3, [pc, #16]	@ (8000a00 <SEND_TTY+0x68>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1d6      	bne.n	80009a4 <SEND_TTY+0xc>
	}

}
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b002      	add	sp, #8
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000194 	.word	0x20000194

08000a04 <SEND_SERIAL>:

void SEND_SERIAL(){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	// placeholder for future code
}
 8000a08:	46c0      	nop			@ (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <manageIO>:
}
// -----------------------------------------------------------------


// ---INTERNAL LOGIC------------------------------------------------
void manageIO(){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0

	// poll Button @ D10
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET){
 8000a14:	2380      	movs	r3, #128	@ 0x80
 8000a16:	011a      	lsls	r2, r3, #4
 8000a18:	2390      	movs	r3, #144	@ 0x90
 8000a1a:	05db      	lsls	r3, r3, #23
 8000a1c:	0011      	movs	r1, r2
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 ff58 	bl	80018d4 <HAL_GPIO_ReadPin>
 8000a24:	0003      	movs	r3, r0
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d119      	bne.n	8000a5e <manageIO+0x4e>
		// 10ms delay for debounce, prolly main delay.
		HAL_Delay(10);
 8000a2a:	200a      	movs	r0, #10
 8000a2c:	f000 fd12 	bl	8001454 <HAL_Delay>
		mode = mode != 0 ? 0 : 1;
 8000a30:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <manageIO+0x78>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	425a      	negs	r2, r3
 8000a36:	4153      	adcs	r3, r2
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <manageIO+0x78>)
 8000a3e:	601a      	str	r2, [r3, #0]
		// wait until BT is released
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET){
 8000a40:	e002      	b.n	8000a48 <manageIO+0x38>
			HAL_Delay(20);
 8000a42:	2014      	movs	r0, #20
 8000a44:	f000 fd06 	bl	8001454 <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET){
 8000a48:	2380      	movs	r3, #128	@ 0x80
 8000a4a:	011a      	lsls	r2, r3, #4
 8000a4c:	2390      	movs	r3, #144	@ 0x90
 8000a4e:	05db      	lsls	r3, r3, #23
 8000a50:	0011      	movs	r1, r2
 8000a52:	0018      	movs	r0, r3
 8000a54:	f000 ff3e 	bl	80018d4 <HAL_GPIO_ReadPin>
 8000a58:	0003      	movs	r3, r0
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d0f1      	beq.n	8000a42 <manageIO+0x32>
		}
	}
	if (mode != 0){
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <manageIO+0x78>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d006      	beq.n	8000a74 <manageIO+0x64>
		setLED_MLOCAL(0);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f7ff ff48 	bl	80008fc <setLED_MLOCAL>
		setLED_MSERIAL(1);
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f7ff ff5f 	bl	8000930 <setLED_MSERIAL>
	}
	else {
		setLED_MLOCAL(1);
		setLED_MSERIAL(0);
	}
}
 8000a72:	e005      	b.n	8000a80 <manageIO+0x70>
		setLED_MLOCAL(1);
 8000a74:	2001      	movs	r0, #1
 8000a76:	f7ff ff41 	bl	80008fc <setLED_MLOCAL>
		setLED_MSERIAL(0);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff ff58 	bl	8000930 <setLED_MSERIAL>
}
 8000a80:	46c0      	nop			@ (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	2000019c 	.word	0x2000019c

08000a8c <_mode>:
	*  4. print 'RDY'
	*/

}

void _mode(){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0

	/* 2. OUTPUT
	*	- write SERIAL
	*	- write TTY
	*/
	setLED_BSY(0); // SIG µC and User: "System RDY to Receive"
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff ff67 	bl	8000964 <setLED_BSY>
	if (mode != 0){
 8000a96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <_mode+0x44>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d00a      	beq.n	8000ab4 <_mode+0x28>
		// SERIAL
		//getSerialData();
		if (strLen(writeBuffer) != 0){
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad4 <_mode+0x48>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 fc1a 	bl	80012dc <strLen>
			//getTTYData();
		}
		setLED_BSY(1);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff ff5b 	bl	8000964 <setLED_BSY>
		SEND_SERIAL();
 8000aae:	f7ff ffa9 	bl	8000a04 <SEND_SERIAL>
		}
		setLED_BSY(1);
		SEND_TTY();

	}
    return;
 8000ab2:	e00a      	b.n	8000aca <_mode+0x3e>
		if (strLen(writeBuffer) != 0){
 8000ab4:	4b07      	ldr	r3, [pc, #28]	@ (8000ad4 <_mode+0x48>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f000 fc0f 	bl	80012dc <strLen>
		setLED_BSY(1);
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f7ff ff50 	bl	8000964 <setLED_BSY>
		SEND_TTY();
 8000ac4:	f7ff ff68 	bl	8000998 <SEND_TTY>
    return;
 8000ac8:	46c0      	nop			@ (mov r8, r8)
}
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			@ (mov r8, r8)
 8000ad0:	2000019c 	.word	0x2000019c
 8000ad4:	20000194 	.word	0x20000194

08000ad8 <booTY>:

void booTY(){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	tty_symbols = booTYinit(tty_symbols);
 8000adc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <booTY+0x34>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff fe6f 	bl	80007c4 <booTYinit>
 8000ae6:	0002      	movs	r2, r0
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <booTY+0x34>)
 8000aea:	601a      	str	r2, [r3, #0]
	TTY_WRITEBUFFER(tty_symbols);
 8000aec:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <booTY+0x34>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	0018      	movs	r0, r3
 8000af2:	f000 fb05 	bl	8001100 <TTY_WRITEBUFFER>
	tty_symbols = booTYshell(tty_symbols);
 8000af6:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <booTY+0x34>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	0018      	movs	r0, r3
 8000afc:	f7ff feb2 	bl	8000864 <booTYshell>
 8000b00:	0002      	movs	r2, r0
 8000b02:	4b02      	ldr	r3, [pc, #8]	@ (8000b0c <booTY+0x34>)
 8000b04:	601a      	str	r2, [r3, #0]
}
 8000b06:	46c0      	nop			@ (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000198 	.word	0x20000198

08000b10 <init>:

void ui(){

}

void init(){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	// scary ST-Stuff
    HAL_Init();
 8000b14:	f000 fc3a 	bl	800138c <HAL_Init>

    SystemClock_Config();
 8000b18:	f000 f836 	bl	8000b88 <SystemClock_Config>

    MX_GPIO_Init();
 8000b1c:	f000 f8ee 	bl	8000cfc <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8000b20:	f000 f8bc 	bl	8000c9c <MX_USART2_UART_Init>
    MX_USART1_UART_Init();
 8000b24:	f000 f888 	bl	8000c38 <MX_USART1_UART_Init>
    //TODO: init ESP8266 uart
    // -------------------------------------------------------------

    // init vars
    writeBuffer = malloc(0);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f002 f8b1 	bl	8002c90 <malloc>
 8000b2e:	0003      	movs	r3, r0
 8000b30:	001a      	movs	r2, r3
 8000b32:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <init+0x5c>)
 8000b34:	601a      	str	r2, [r3, #0]
    tty_symbols = malloc(0);
 8000b36:	2000      	movs	r0, #0
 8000b38:	f002 f8aa 	bl	8002c90 <malloc>
 8000b3c:	0003      	movs	r3, r0
 8000b3e:	001a      	movs	r2, r3
 8000b40:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <init+0x60>)
 8000b42:	601a      	str	r2, [r3, #0]

    // init i/o stuff
    setLED_BSY(1);
 8000b44:	2001      	movs	r0, #1
 8000b46:	f7ff ff0d 	bl	8000964 <setLED_BSY>
    setLED_MLOCAL(0);
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f7ff fed6 	bl	80008fc <setLED_MLOCAL>
    setLED_MSERIAL(0);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff feed 	bl	8000930 <setLED_MSERIAL>

    setTTY(0);			// Rests TTY-Pin to known-good 0
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 fb9c 	bl	8001294 <setTTY>

	// now we can do some UI-Stuff, like ask for bd-rate,
	// esp-summary, termminal-width, etc.
    booTY();	// Boot TTY
 8000b5c:	f7ff ffbc 	bl	8000ad8 <booTY>

    setLED_BSY(0);		// When init is done, we can SIGRDY
 8000b60:	2000      	movs	r0, #0
 8000b62:	f7ff feff 	bl	8000964 <setLED_BSY>





}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000194 	.word	0x20000194
 8000b70:	20000198 	.word	0x20000198

08000b74 <main>:

int main(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	init();
 8000b78:	f7ff ffca 	bl	8000b10 <init>
    while(1){
        manageIO();    // Like toggle LEDs, poll Button, etc.
 8000b7c:	f7ff ff48 	bl	8000a10 <manageIO>
        _mode();
 8000b80:	f7ff ff84 	bl	8000a8c <_mode>
        manageIO();    // Like toggle LEDs, poll Button, etc.
 8000b84:	46c0      	nop			@ (mov r8, r8)
 8000b86:	e7f9      	b.n	8000b7c <main+0x8>

08000b88 <SystemClock_Config>:
}


// ---SCARY ST STUFF :C---------------------------------------------
void SystemClock_Config(void)
{
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b099      	sub	sp, #100	@ 0x64
 8000b8c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	242c      	movs	r4, #44	@ 0x2c
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	0018      	movs	r0, r3
 8000b94:	2334      	movs	r3, #52	@ 0x34
 8000b96:	001a      	movs	r2, r3
 8000b98:	2100      	movs	r1, #0
 8000b9a:	f002 f93f 	bl	8002e1c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9e:	231c      	movs	r3, #28
 8000ba0:	18fb      	adds	r3, r7, r3
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	001a      	movs	r2, r3
 8000ba8:	2100      	movs	r1, #0
 8000baa:	f002 f937 	bl	8002e1c <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	2318      	movs	r3, #24
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	f002 f930 	bl	8002e1c <memset>

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bbc:	0021      	movs	r1, r4
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	60da      	str	r2, [r3, #12]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2210      	movs	r2, #16
 8000bce:	611a      	str	r2, [r3, #16]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 feb5 	bl	8001948 <HAL_RCC_OscConfig>
 8000bde:	1e03      	subs	r3, r0, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0x5e>
    {
        Error_Handler();
 8000be2:	f000 f8f7 	bl	8000dd4 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be6:	211c      	movs	r1, #28
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2207      	movs	r2, #7
 8000bec:	601a      	str	r2, [r3, #0]
                                |RCC_CLOCKTYPE_PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2100      	movs	r1, #0
 8000c04:	0018      	movs	r0, r3
 8000c06:	f001 fa25 	bl	8002054 <HAL_RCC_ClockConfig>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0x8a>
    {
        Error_Handler();
 8000c0e:	f000 f8e1 	bl	8000dd4 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2201      	movs	r2, #1
 8000c16:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	0018      	movs	r0, r3
 8000c22:	f001 fb83 	bl	800232c <HAL_RCCEx_PeriphCLKConfig>
 8000c26:	1e03      	subs	r3, r0, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0xa6>
    {
        Error_Handler();
 8000c2a:	f000 f8d3 	bl	8000dd4 <Error_Handler>
    }
}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b019      	add	sp, #100	@ 0x64
 8000c34:	bd90      	pop	{r4, r7, pc}
	...

08000c38 <MX_USART1_UART_Init>:
    * @brief USART1 Initialization Function
    * @param None
    * @retval None
*/
static void MX_USART1_UART_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8000c3c:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <MX_USART1_UART_Init+0x5c>)
 8000c3e:	4a16      	ldr	r2, [pc, #88]	@ (8000c98 <MX_USART1_UART_Init+0x60>)
 8000c40:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 9600;
 8000c42:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <MX_USART1_UART_Init+0x5c>)
 8000c44:	2296      	movs	r2, #150	@ 0x96
 8000c46:	0192      	lsls	r2, r2, #6
 8000c48:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4a:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <MX_USART1_UART_Init+0x5c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000c50:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <MX_USART1_UART_Init+0x5c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_EVEN;
 8000c56:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <MX_USART1_UART_Init+0x5c>)
 8000c58:	2280      	movs	r2, #128	@ 0x80
 8000c5a:	00d2      	lsls	r2, r2, #3
 8000c5c:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c94 <MX_USART1_UART_Init+0x5c>)
 8000c60:	220c      	movs	r2, #12
 8000c62:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c64:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <MX_USART1_UART_Init+0x5c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <MX_USART1_UART_Init+0x5c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c70:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <MX_USART1_UART_Init+0x5c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c76:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <MX_USART1_UART_Init+0x5c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <MX_USART1_UART_Init+0x5c>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f001 fc42 	bl	8002508 <HAL_UART_Init>
 8000c84:	1e03      	subs	r3, r0, #0
 8000c86:	d001      	beq.n	8000c8c <MX_USART1_UART_Init+0x54>
    {
        Error_Handler();
 8000c88:	f000 f8a4 	bl	8000dd4 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8000c8c:	46c0      	nop			@ (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	20000084 	.word	0x20000084
 8000c98:	40013800 	.word	0x40013800

08000c9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	@ (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000ca2:	4a15      	ldr	r2, [pc, #84]	@ (8000cf8 <MX_USART2_UART_Init+0x5c>)
 8000ca4:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 38400;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	@ (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000ca8:	2296      	movs	r2, #150	@ 0x96
 8000caa:	0212      	lsls	r2, r2, #8
 8000cac:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	@ (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cde:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f001 fc11 	bl	8002508 <HAL_UART_Init>
 8000ce6:	1e03      	subs	r3, r0, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART2_UART_Init+0x52>
    {
        Error_Handler();
 8000cea:	f000 f873 	bl	8000dd4 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	2000010c 	.word	0x2000010c
 8000cf8:	40004400 	.word	0x40004400

08000cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b089      	sub	sp, #36	@ 0x24
 8000d00:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	240c      	movs	r4, #12
 8000d04:	193b      	adds	r3, r7, r4
 8000d06:	0018      	movs	r0, r3
 8000d08:	2314      	movs	r3, #20
 8000d0a:	001a      	movs	r2, r3
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	f002 f885 	bl	8002e1c <memset>
    /* USER CODE BEGIN MX_GPIO_Init_1 */

    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d12:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd0 <MX_GPIO_Init+0xd4>)
 8000d14:	695a      	ldr	r2, [r3, #20]
 8000d16:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd0 <MX_GPIO_Init+0xd4>)
 8000d18:	2180      	movs	r1, #128	@ 0x80
 8000d1a:	03c9      	lsls	r1, r1, #15
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	615a      	str	r2, [r3, #20]
 8000d20:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd0 <MX_GPIO_Init+0xd4>)
 8000d22:	695a      	ldr	r2, [r3, #20]
 8000d24:	2380      	movs	r3, #128	@ 0x80
 8000d26:	03db      	lsls	r3, r3, #15
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	4b28      	ldr	r3, [pc, #160]	@ (8000dd0 <MX_GPIO_Init+0xd4>)
 8000d30:	695a      	ldr	r2, [r3, #20]
 8000d32:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <MX_GPIO_Init+0xd4>)
 8000d34:	2180      	movs	r1, #128	@ 0x80
 8000d36:	0289      	lsls	r1, r1, #10
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	615a      	str	r2, [r3, #20]
 8000d3c:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <MX_GPIO_Init+0xd4>)
 8000d3e:	695a      	ldr	r2, [r3, #20]
 8000d40:	2380      	movs	r3, #128	@ 0x80
 8000d42:	029b      	lsls	r3, r3, #10
 8000d44:	4013      	ands	r3, r2
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LED_MLOCAL_Pin|LED_MSERIAL_Pin|LED_BSY_Pin|TTY_SEND_Pin, GPIO_PIN_RESET);
 8000d4a:	2390      	movs	r3, #144	@ 0x90
 8000d4c:	05db      	lsls	r3, r3, #23
 8000d4e:	2200      	movs	r2, #0
 8000d50:	211b      	movs	r1, #27
 8000d52:	0018      	movs	r0, r3
 8000d54:	f000 fddb 	bl	800190e <HAL_GPIO_WritePin>

    /*Configure GPIO pins : LED_MLOCAL_Pin LED_MSERIAL_Pin LED_BSY_Pin TTY_SEND_Pin */
    GPIO_InitStruct.Pin = LED_MLOCAL_Pin|LED_MSERIAL_Pin|LED_BSY_Pin;
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	220b      	movs	r2, #11
 8000d5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	2201      	movs	r2, #1
 8000d62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	193b      	adds	r3, r7, r4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	193a      	adds	r2, r7, r4
 8000d72:	2390      	movs	r3, #144	@ 0x90
 8000d74:	05db      	lsls	r3, r3, #23
 8000d76:	0011      	movs	r1, r2
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f000 fc43 	bl	8001604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TTY_SEND_Pin;
 8000d7e:	193b      	adds	r3, r7, r4
 8000d80:	2210      	movs	r2, #16
 8000d82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d84:	193b      	adds	r3, r7, r4
 8000d86:	2211      	movs	r2, #17
 8000d88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d90:	193b      	adds	r3, r7, r4
 8000d92:	2203      	movs	r2, #3
 8000d94:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	193a      	adds	r2, r7, r4
 8000d98:	2390      	movs	r3, #144	@ 0x90
 8000d9a:	05db      	lsls	r3, r3, #23
 8000d9c:	0011      	movs	r1, r2
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f000 fc30 	bl	8001604 <HAL_GPIO_Init>

    /*Configure GPIO pins : TTY_RECEIVE_Pin BT_Mode_Pin */
    GPIO_InitStruct.Pin = TTY_RECEIVE_Pin|BT_MODE_Pin;
 8000da4:	0021      	movs	r1, r4
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2282      	movs	r2, #130	@ 0x82
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2200      	movs	r2, #0
 8000db2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	187a      	adds	r2, r7, r1
 8000dbc:	2390      	movs	r3, #144	@ 0x90
 8000dbe:	05db      	lsls	r3, r3, #23
 8000dc0:	0011      	movs	r1, r2
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f000 fc1e 	bl	8001604 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */

    /* USER CODE END MX_GPIO_Init_2 */
}
 8000dc8:	46c0      	nop			@ (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b009      	add	sp, #36	@ 0x24
 8000dce:	bd90      	pop	{r4, r7, pc}
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	46c0      	nop			@ (mov r8, r8)
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000ddc:	46c0      	nop			@ (mov r8, r8)
 8000dde:	e7fd      	b.n	8000ddc <Error_Handler+0x8>

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <HAL_MspInit+0x44>)
 8000de8:	699a      	ldr	r2, [r3, #24]
 8000dea:	4b0e      	ldr	r3, [pc, #56]	@ (8000e24 <HAL_MspInit+0x44>)
 8000dec:	2101      	movs	r1, #1
 8000dee:	430a      	orrs	r2, r1
 8000df0:	619a      	str	r2, [r3, #24]
 8000df2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <HAL_MspInit+0x44>)
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	2201      	movs	r2, #1
 8000df8:	4013      	ands	r3, r2
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <HAL_MspInit+0x44>)
 8000e00:	69da      	ldr	r2, [r3, #28]
 8000e02:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <HAL_MspInit+0x44>)
 8000e04:	2180      	movs	r1, #128	@ 0x80
 8000e06:	0549      	lsls	r1, r1, #21
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	61da      	str	r2, [r3, #28]
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <HAL_MspInit+0x44>)
 8000e0e:	69da      	ldr	r2, [r3, #28]
 8000e10:	2380      	movs	r3, #128	@ 0x80
 8000e12:	055b      	lsls	r3, r3, #21
 8000e14:	4013      	ands	r3, r2
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b002      	add	sp, #8
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			@ (mov r8, r8)
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b08d      	sub	sp, #52	@ 0x34
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	241c      	movs	r4, #28
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	0018      	movs	r0, r3
 8000e36:	2314      	movs	r3, #20
 8000e38:	001a      	movs	r2, r3
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	f001 ffee 	bl	8002e1c <memset>
  if(huart->Instance==USART1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a39      	ldr	r2, [pc, #228]	@ (8000f2c <HAL_UART_MspInit+0x104>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d134      	bne.n	8000eb4 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e4a:	4b39      	ldr	r3, [pc, #228]	@ (8000f30 <HAL_UART_MspInit+0x108>)
 8000e4c:	699a      	ldr	r2, [r3, #24]
 8000e4e:	4b38      	ldr	r3, [pc, #224]	@ (8000f30 <HAL_UART_MspInit+0x108>)
 8000e50:	2180      	movs	r1, #128	@ 0x80
 8000e52:	01c9      	lsls	r1, r1, #7
 8000e54:	430a      	orrs	r2, r1
 8000e56:	619a      	str	r2, [r3, #24]
 8000e58:	4b35      	ldr	r3, [pc, #212]	@ (8000f30 <HAL_UART_MspInit+0x108>)
 8000e5a:	699a      	ldr	r2, [r3, #24]
 8000e5c:	2380      	movs	r3, #128	@ 0x80
 8000e5e:	01db      	lsls	r3, r3, #7
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
 8000e64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b32      	ldr	r3, [pc, #200]	@ (8000f30 <HAL_UART_MspInit+0x108>)
 8000e68:	695a      	ldr	r2, [r3, #20]
 8000e6a:	4b31      	ldr	r3, [pc, #196]	@ (8000f30 <HAL_UART_MspInit+0x108>)
 8000e6c:	2180      	movs	r1, #128	@ 0x80
 8000e6e:	0289      	lsls	r1, r1, #10
 8000e70:	430a      	orrs	r2, r1
 8000e72:	615a      	str	r2, [r3, #20]
 8000e74:	4b2e      	ldr	r3, [pc, #184]	@ (8000f30 <HAL_UART_MspInit+0x108>)
 8000e76:	695a      	ldr	r2, [r3, #20]
 8000e78:	2380      	movs	r3, #128	@ 0x80
 8000e7a:	029b      	lsls	r3, r3, #10
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e82:	193b      	adds	r3, r7, r4
 8000e84:	22c0      	movs	r2, #192	@ 0xc0
 8000e86:	00d2      	lsls	r2, r2, #3
 8000e88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	0021      	movs	r1, r4
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	2202      	movs	r2, #2
 8000e90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	187a      	adds	r2, r7, r1
 8000ea6:	2390      	movs	r3, #144	@ 0x90
 8000ea8:	05db      	lsls	r3, r3, #23
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f000 fba9 	bl	8001604 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eb2:	e037      	b.n	8000f24 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a1e      	ldr	r2, [pc, #120]	@ (8000f34 <HAL_UART_MspInit+0x10c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d132      	bne.n	8000f24 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f30 <HAL_UART_MspInit+0x108>)
 8000ec0:	69da      	ldr	r2, [r3, #28]
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f30 <HAL_UART_MspInit+0x108>)
 8000ec4:	2180      	movs	r1, #128	@ 0x80
 8000ec6:	0289      	lsls	r1, r1, #10
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	61da      	str	r2, [r3, #28]
 8000ecc:	4b18      	ldr	r3, [pc, #96]	@ (8000f30 <HAL_UART_MspInit+0x108>)
 8000ece:	69da      	ldr	r2, [r3, #28]
 8000ed0:	2380      	movs	r3, #128	@ 0x80
 8000ed2:	029b      	lsls	r3, r3, #10
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <HAL_UART_MspInit+0x108>)
 8000edc:	695a      	ldr	r2, [r3, #20]
 8000ede:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <HAL_UART_MspInit+0x108>)
 8000ee0:	2180      	movs	r1, #128	@ 0x80
 8000ee2:	0289      	lsls	r1, r1, #10
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	615a      	str	r2, [r3, #20]
 8000ee8:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <HAL_UART_MspInit+0x108>)
 8000eea:	695a      	ldr	r2, [r3, #20]
 8000eec:	2380      	movs	r3, #128	@ 0x80
 8000eee:	029b      	lsls	r3, r3, #10
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000ef6:	211c      	movs	r1, #28
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	4a0f      	ldr	r2, [pc, #60]	@ (8000f38 <HAL_UART_MspInit+0x110>)
 8000efc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	2202      	movs	r2, #2
 8000f02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	2201      	movs	r2, #1
 8000f14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	187a      	adds	r2, r7, r1
 8000f18:	2390      	movs	r3, #144	@ 0x90
 8000f1a:	05db      	lsls	r3, r3, #23
 8000f1c:	0011      	movs	r1, r2
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f000 fb70 	bl	8001604 <HAL_GPIO_Init>
}
 8000f24:	46c0      	nop			@ (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b00d      	add	sp, #52	@ 0x34
 8000f2a:	bd90      	pop	{r4, r7, pc}
 8000f2c:	40013800 	.word	0x40013800
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40004400 	.word	0x40004400
 8000f38:	00008004 	.word	0x00008004

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f40:	46c0      	nop			@ (mov r8, r8)
 8000f42:	e7fd      	b.n	8000f40 <NMI_Handler+0x4>

08000f44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f48:	46c0      	nop			@ (mov r8, r8)
 8000f4a:	e7fd      	b.n	8000f48 <HardFault_Handler+0x4>

08000f4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f50:	46c0      	nop			@ (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f64:	f000 fa5a 	bl	800141c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f68:	46c0      	nop			@ (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f78:	4a14      	ldr	r2, [pc, #80]	@ (8000fcc <_sbrk+0x5c>)
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <_sbrk+0x60>)
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f84:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <_sbrk+0x64>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	@ (8000fd8 <_sbrk+0x68>)
 8000f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f92:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	18d3      	adds	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d207      	bcs.n	8000fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa0:	f001 ff56 	bl	8002e50 <__errno>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000faa:	2301      	movs	r3, #1
 8000fac:	425b      	negs	r3, r3
 8000fae:	e009      	b.n	8000fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	18d2      	adds	r2, r2, r3
 8000fbe:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <_sbrk+0x64>)
 8000fc0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
}
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b006      	add	sp, #24
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20001800 	.word	0x20001800
 8000fd0:	00000400 	.word	0x00000400
 8000fd4:	200001a0 	.word	0x200001a0
 8000fd8:	200002f8 	.word	0x200002f8

08000fdc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000fe0:	46c0      	nop			@ (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <appendSymbol>:
    .figs = 27,        // 0b11011
    .null_char = 0     // 0b00000
};

// ---BUFFER MANIPULATION-------------------------------------------
int* appendSymbol(int* head, int sym){
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	6039      	str	r1, [r7, #0]
	// Handle NULL head pointer
	if (head == NULL) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d113      	bne.n	800101e <appendSymbol+0x38>
		int* out = (int*)malloc(2);
 8000ff6:	2002      	movs	r0, #2
 8000ff8:	f001 fe4a 	bl	8002c90 <malloc>
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	60bb      	str	r3, [r7, #8]
		if (out == NULL) return NULL;  // malloc failed
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <appendSymbol+0x24>
 8001006:	2300      	movs	r3, #0
 8001008:	e043      	b.n	8001092 <appendSymbol+0xac>
		out[0] = sym;
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	601a      	str	r2, [r3, #0]
		out[1] = -1;
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	3304      	adds	r3, #4
 8001014:	2201      	movs	r2, #1
 8001016:	4252      	negs	r2, r2
 8001018:	601a      	str	r2, [r3, #0]
		return out;
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	e039      	b.n	8001092 <appendSymbol+0xac>
	}
	
	int length = getBufferLength(head);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	0018      	movs	r0, r3
 8001022:	f000 f83a 	bl	800109a <getBufferLength>
 8001026:	0003      	movs	r3, r0
 8001028:	613b      	str	r3, [r7, #16]
	// length + Symbol + Terminator
	int* out = (int*)malloc((length + 2) * sizeof(int));
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	3302      	adds	r3, #2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	0018      	movs	r0, r3
 8001032:	f001 fe2d 	bl	8002c90 <malloc>
 8001036:	0003      	movs	r3, r0
 8001038:	60fb      	str	r3, [r7, #12]
	if (out == NULL) {
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d101      	bne.n	8001044 <appendSymbol+0x5e>
		// malloc failed - don't free head, return NULL
		return NULL;
 8001040:	2300      	movs	r3, #0
 8001042:	e026      	b.n	8001092 <appendSymbol+0xac>
	}
	
	// Copy existing elements...
	for (int i = 0; i < length; i++) {
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	e00c      	b.n	8001064 <appendSymbol+0x7e>
		out[i] = head[i];
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	18d2      	adds	r2, r2, r3
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	68f9      	ldr	r1, [r7, #12]
 8001058:	18cb      	adds	r3, r1, r3
 800105a:	6812      	ldr	r2, [r2, #0]
 800105c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	429a      	cmp	r2, r3
 800106a:	dbee      	blt.n	800104a <appendSymbol+0x64>
	}
	out[length] = sym;        // Add symbol at correct position
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	18d3      	adds	r3, r2, r3
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	601a      	str	r2, [r3, #0]
	out[length + 1] = -1;     // Add terminator
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	3301      	adds	r3, #1
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	18d3      	adds	r3, r2, r3
 8001082:	2201      	movs	r2, #1
 8001084:	4252      	negs	r2, r2
 8001086:	601a      	str	r2, [r3, #0]

	free(head);	// the old head can be removed
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	0018      	movs	r0, r3
 800108c:	f001 fe0a 	bl	8002ca4 <free>
	return out;
 8001090:	68fb      	ldr	r3, [r7, #12]
}
 8001092:	0018      	movs	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	b006      	add	sp, #24
 8001098:	bd80      	pop	{r7, pc}

0800109a <getBufferLength>:
int getBufferLength(int* head){	// returns without Terminator!
 800109a:	b580      	push	{r7, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
	if (head == NULL) return 0;  // Safety check
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <getBufferLength+0x12>
 80010a8:	2300      	movs	r3, #0
 80010aa:	e00d      	b.n	80010c8 <getBufferLength+0x2e>
	
	int i = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
	while (head[i] != -1){
 80010b0:	e002      	b.n	80010b8 <getBufferLength+0x1e>
		i++;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3301      	adds	r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
	while (head[i] != -1){
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	18d3      	adds	r3, r2, r3
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	3301      	adds	r3, #1
 80010c4:	d1f5      	bne.n	80010b2 <getBufferLength+0x18>
	}
	return i;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	0018      	movs	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b004      	add	sp, #16
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <TTY_DELAY>:
	return buffer;
}


// ---TTY-FUNCTIONS-------------------------------------------------
void TTY_DELAY(int cycles){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	HAL_Delay(cycles * ( 1000 / baud));
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <TTY_DELAY+0x2c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	0019      	movs	r1, r3
 80010de:	23fa      	movs	r3, #250	@ 0xfa
 80010e0:	0098      	lsls	r0, r3, #2
 80010e2:	f7ff f89b 	bl	800021c <__divsi3>
 80010e6:	0003      	movs	r3, r0
 80010e8:	001a      	movs	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4353      	muls	r3, r2
 80010ee:	0018      	movs	r0, r3
 80010f0:	f000 f9b0 	bl	8001454 <HAL_Delay>
}
 80010f4:	46c0      	nop			@ (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b002      	add	sp, #8
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000004 	.word	0x20000004

08001100 <TTY_WRITEBUFFER>:

int* TTY_WRITEBUFFER(int* buffer){
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    // Safety check for NULL pointer
    if (buffer == NULL) {
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d10f      	bne.n	800112e <TTY_WRITEBUFFER+0x2e>
        // Return empty buffer
        int* out = (int*)malloc(sizeof(int));
 800110e:	2004      	movs	r0, #4
 8001110:	f001 fdbe 	bl	8002c90 <malloc>
 8001114:	0003      	movs	r3, r0
 8001116:	60fb      	str	r3, [r7, #12]
        if (out == NULL) {
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <TTY_WRITEBUFFER+0x22>
            return NULL;  // malloc failed
 800111e:	2300      	movs	r3, #0
 8001120:	e02d      	b.n	800117e <TTY_WRITEBUFFER+0x7e>
        }
        out[0] = -1;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2201      	movs	r2, #1
 8001126:	4252      	negs	r2, r2
 8001128:	601a      	str	r2, [r3, #0]
        return out;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	e027      	b.n	800117e <TTY_WRITEBUFFER+0x7e>
    }
    
    // Write all symbols in buffer
    for (int i = 0; buffer[i] != -1; i++) {
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	e00a      	b.n	800114a <TTY_WRITEBUFFER+0x4a>
        TTY_WRITE(buffer[i]);
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	18d3      	adds	r3, r2, r3
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	0018      	movs	r0, r3
 8001140:	f000 f85e 	bl	8001200 <TTY_WRITE>
    for (int i = 0; buffer[i] != -1; i++) {
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	3301      	adds	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	18d3      	adds	r3, r2, r3
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3301      	adds	r3, #1
 8001156:	d1ed      	bne.n	8001134 <TTY_WRITEBUFFER+0x34>
    }
    
    // Free the input buffer
    free(buffer);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	0018      	movs	r0, r3
 800115c:	f001 fda2 	bl	8002ca4 <free>
    
    // Create new empty buffer
    int* out = (int*)malloc(sizeof(int));
 8001160:	2004      	movs	r0, #4
 8001162:	f001 fd95 	bl	8002c90 <malloc>
 8001166:	0003      	movs	r3, r0
 8001168:	613b      	str	r3, [r7, #16]
    if (out == NULL) {
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <TTY_WRITEBUFFER+0x74>
        return NULL;  // malloc failed - caller must handle this!
 8001170:	2300      	movs	r3, #0
 8001172:	e004      	b.n	800117e <TTY_WRITEBUFFER+0x7e>
    }
    out[0] = -1;  // Null-terminate
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	2201      	movs	r2, #1
 8001178:	4252      	negs	r2, r2
 800117a:	601a      	str	r2, [r3, #0]
    return out;
 800117c:	693b      	ldr	r3, [r7, #16]
}
 800117e:	0018      	movs	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	b006      	add	sp, #24
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <TTY_Startbit>:


void TTY_Startbit(){
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	setTTY(1);
 800118c:	2001      	movs	r0, #1
 800118e:	f000 f881 	bl	8001294 <setTTY>
	HAL_Delay(1000 / baud);
 8001192:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <TTY_Startbit+0x28>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	0019      	movs	r1, r3
 8001198:	23fa      	movs	r3, #250	@ 0xfa
 800119a:	0098      	lsls	r0, r3, #2
 800119c:	f7ff f83e 	bl	800021c <__divsi3>
 80011a0:	0003      	movs	r3, r0
 80011a2:	0018      	movs	r0, r3
 80011a4:	f000 f956 	bl	8001454 <HAL_Delay>
}
 80011a8:	46c0      	nop			@ (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	20000004 	.word	0x20000004

080011b4 <TTY_Stopbit>:

void TTY_Stopbit(){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	setTTY(0);
 80011b8:	2000      	movs	r0, #0
 80011ba:	f000 f86b 	bl	8001294 <setTTY>
	HAL_Delay((int)(stopbit_cnt * (1000 / baud)));
 80011be:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <TTY_Stopbit+0x44>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	0019      	movs	r1, r3
 80011c4:	23fa      	movs	r3, #250	@ 0xfa
 80011c6:	0098      	lsls	r0, r3, #2
 80011c8:	f7ff f828 	bl	800021c <__divsi3>
 80011cc:	0003      	movs	r3, r0
 80011ce:	0018      	movs	r0, r3
 80011d0:	f7ff fa8a 	bl	80006e8 <__aeabi_i2f>
 80011d4:	1c02      	adds	r2, r0, #0
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <TTY_Stopbit+0x48>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	1c19      	adds	r1, r3, #0
 80011dc:	1c10      	adds	r0, r2, #0
 80011de:	f7ff f909 	bl	80003f4 <__aeabi_fmul>
 80011e2:	1c03      	adds	r3, r0, #0
 80011e4:	1c18      	adds	r0, r3, #0
 80011e6:	f7ff fa5f 	bl	80006a8 <__aeabi_f2iz>
 80011ea:	0003      	movs	r3, r0
 80011ec:	0018      	movs	r0, r3
 80011ee:	f000 f931 	bl	8001454 <HAL_Delay>
}
 80011f2:	46c0      	nop			@ (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000004 	.word	0x20000004
 80011fc:	20000008 	.word	0x20000008

08001200 <TTY_WRITE>:
void TTY_WRITE(int _sym){
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

	// Skip redundant ltrs/figs commands
	if (_sym == TTY_MODE_FIGURES || _sym == TTY_MODE_LETTERS)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d002      	beq.n	8001214 <TTY_WRITE+0x14>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d102      	bne.n	800121a <TTY_WRITE+0x1a>
		tty_mode = TTY_MODE_FIGURES ?
 8001214:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <TTY_WRITE+0x80>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]
				TTY_MODE_FIGURES : TTY_MODE_LETTERS;

	if (send_mode != 0){
 800121a:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <TTY_WRITE+0x84>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <TTY_WRITE+0x3a>
		if (tty_mode == TTY_MODE_FIGURES) _sym = symbol.figs;
 8001222:	4b17      	ldr	r3, [pc, #92]	@ (8001280 <TTY_WRITE+0x80>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d102      	bne.n	8001230 <TTY_WRITE+0x30>
 800122a:	231b      	movs	r3, #27
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	e001      	b.n	8001234 <TTY_WRITE+0x34>
		else _sym = symbol.ltrs;
 8001230:	231f      	movs	r3, #31
 8001232:	607b      	str	r3, [r7, #4]
		send_mode = 0;			// Remove Flag
 8001234:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <TTY_WRITE+0x84>)
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
	}
    // ---TRANSMIT--------------------------------------------------
	TTY_Startbit();
 800123a:	f7ff ffa5 	bl	8001188 <TTY_Startbit>

	// LSB FIRST!
    for (int i = 0; i < 5; i++) {
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	e013      	b.n	800126c <TTY_WRITE+0x6c>
        int bit = ((_sym >> i) & 0x01) ^ 1;
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	411a      	asrs	r2, r3
 800124a:	0013      	movs	r3, r2
 800124c:	2201      	movs	r2, #1
 800124e:	4013      	ands	r3, r2
 8001250:	425a      	negs	r2, r3
 8001252:	4153      	adcs	r3, r2
 8001254:	b2db      	uxtb	r3, r3
 8001256:	60bb      	str	r3, [r7, #8]
        setTTY(bit);
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	0018      	movs	r0, r3
 800125c:	f000 f81a 	bl	8001294 <setTTY>
        TTY_DELAY(1);
 8001260:	2001      	movs	r0, #1
 8001262:	f7ff ff35 	bl	80010d0 <TTY_DELAY>
    for (int i = 0; i < 5; i++) {
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	3301      	adds	r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b04      	cmp	r3, #4
 8001270:	dde8      	ble.n	8001244 <TTY_WRITE+0x44>
    }
	// send those 5 bits
	TTY_Stopbit();
 8001272:	f7ff ff9f 	bl	80011b4 <TTY_Stopbit>
}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	46bd      	mov	sp, r7
 800127a:	b004      	add	sp, #16
 800127c:	bd80      	pop	{r7, pc}
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	200001a4 	.word	0x200001a4
 8001284:	200001a8 	.word	0x200001a8

08001288 <readSymbol>:

int readSymbol(){
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	// TODO: Implement this thing
	// wait for TTY to SEND sym s to REC
	return 31;
 800128c:	231f      	movs	r3, #31
}
 800128e:	0018      	movs	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <setTTY>:
	}
	return NULL;
}


void setTTY(int state){			// TTY @ A3
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	if (state != 0) {
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <setTTY+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80012a2:	2390      	movs	r3, #144	@ 0x90
 80012a4:	05db      	lsls	r3, r3, #23
 80012a6:	2201      	movs	r2, #1
 80012a8:	2110      	movs	r1, #16
 80012aa:	0018      	movs	r0, r3
 80012ac:	f000 fb2f 	bl	800190e <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
	}
}
 80012b0:	e006      	b.n	80012c0 <setTTY+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80012b2:	2390      	movs	r3, #144	@ 0x90
 80012b4:	05db      	lsls	r3, r3, #23
 80012b6:	2200      	movs	r2, #0
 80012b8:	2110      	movs	r1, #16
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 fb27 	bl	800190e <HAL_GPIO_WritePin>
}
 80012c0:	46c0      	nop			@ (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b002      	add	sp, #8
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <setSendMode>:

// Settings Interface for booTY
void setBaudrate(int baudrate) {baud = baudrate;}
void setTermWidth(int termwidth) {width = termwidth;}
void setStopbits(float stopbit) {stopbit_cnt = stopbit;}
void setSendMode(){send_mode = 1;}
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4b02      	ldr	r3, [pc, #8]	@ (80012d8 <setSendMode+0x10>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200001a8 	.word	0x200001a8

080012dc <strLen>:
#include <stdlib.h>

int strLen(char* str) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
    int n = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
    while (*str != '\0') {
 80012e8:	e005      	b.n	80012f6 <strLen+0x1a>
        n++;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3301      	adds	r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
        str++;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3301      	adds	r3, #1
 80012f4:	607b      	str	r3, [r7, #4]
    while (*str != '\0') {
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f5      	bne.n	80012ea <strLen+0xe>
    }
    return n;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	0018      	movs	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	b004      	add	sp, #16
 8001306:	bd80      	pop	{r7, pc}

08001308 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001308:	4813      	ldr	r0, [pc, #76]	@ (8001358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800130a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800130c:	f7ff fe66 	bl	8000fdc <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001310:	4812      	ldr	r0, [pc, #72]	@ (800135c <LoopForever+0x6>)
    LDR R1, [R0]
 8001312:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001314:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001316:	4a12      	ldr	r2, [pc, #72]	@ (8001360 <LoopForever+0xa>)
    CMP R1, R2
 8001318:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800131a:	d105      	bne.n	8001328 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800131c:	4811      	ldr	r0, [pc, #68]	@ (8001364 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800131e:	4912      	ldr	r1, [pc, #72]	@ (8001368 <LoopForever+0x12>)
    STR R1, [R0]
 8001320:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001322:	4812      	ldr	r0, [pc, #72]	@ (800136c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001324:	4912      	ldr	r1, [pc, #72]	@ (8001370 <LoopForever+0x1a>)
    STR R1, [R0]
 8001326:	6001      	str	r1, [r0, #0]

08001328 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001328:	4812      	ldr	r0, [pc, #72]	@ (8001374 <LoopForever+0x1e>)
  ldr r1, =_edata
 800132a:	4913      	ldr	r1, [pc, #76]	@ (8001378 <LoopForever+0x22>)
  ldr r2, =_sidata
 800132c:	4a13      	ldr	r2, [pc, #76]	@ (800137c <LoopForever+0x26>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001330:	e002      	b.n	8001338 <LoopCopyDataInit>

08001332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001336:	3304      	adds	r3, #4

08001338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800133c:	d3f9      	bcc.n	8001332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133e:	4a10      	ldr	r2, [pc, #64]	@ (8001380 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001340:	4c10      	ldr	r4, [pc, #64]	@ (8001384 <LoopForever+0x2e>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001344:	e001      	b.n	800134a <LoopFillZerobss>

08001346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001348:	3204      	adds	r2, #4

0800134a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800134c:	d3fb      	bcc.n	8001346 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800134e:	f001 fd85 	bl	8002e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001352:	f7ff fc0f 	bl	8000b74 <main>

08001356 <LoopForever>:

LoopForever:
    b LoopForever
 8001356:	e7fe      	b.n	8001356 <LoopForever>
  ldr   r0, =_estack
 8001358:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800135c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001360:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001364:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001368:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800136c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001370:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001378:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800137c:	08003068 	.word	0x08003068
  ldr r2, =_sbss
 8001380:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001384:	200002f8 	.word	0x200002f8

08001388 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001388:	e7fe      	b.n	8001388 <ADC1_IRQHandler>
	...

0800138c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001390:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <HAL_Init+0x24>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_Init+0x24>)
 8001396:	2110      	movs	r1, #16
 8001398:	430a      	orrs	r2, r1
 800139a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800139c:	2000      	movs	r0, #0
 800139e:	f000 f809 	bl	80013b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a2:	f7ff fd1d 	bl	8000de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	46c0      	nop			@ (mov r8, r8)
 80013b0:	40022000 	.word	0x40022000

080013b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013bc:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <HAL_InitTick+0x5c>)
 80013be:	681c      	ldr	r4, [r3, #0]
 80013c0:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <HAL_InitTick+0x60>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	0019      	movs	r1, r3
 80013c6:	23fa      	movs	r3, #250	@ 0xfa
 80013c8:	0098      	lsls	r0, r3, #2
 80013ca:	f7fe fe9d 	bl	8000108 <__udivsi3>
 80013ce:	0003      	movs	r3, r0
 80013d0:	0019      	movs	r1, r3
 80013d2:	0020      	movs	r0, r4
 80013d4:	f7fe fe98 	bl	8000108 <__udivsi3>
 80013d8:	0003      	movs	r3, r0
 80013da:	0018      	movs	r0, r3
 80013dc:	f000 f905 	bl	80015ea <HAL_SYSTICK_Config>
 80013e0:	1e03      	subs	r3, r0, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e00f      	b.n	8001408 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d80b      	bhi.n	8001406 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	2301      	movs	r3, #1
 80013f2:	425b      	negs	r3, r3
 80013f4:	2200      	movs	r2, #0
 80013f6:	0018      	movs	r0, r3
 80013f8:	f000 f8e2 	bl	80015c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_InitTick+0x64>)
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	e000      	b.n	8001408 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
}
 8001408:	0018      	movs	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	b003      	add	sp, #12
 800140e:	bd90      	pop	{r4, r7, pc}
 8001410:	20000000 	.word	0x20000000
 8001414:	20000010 	.word	0x20000010
 8001418:	2000000c 	.word	0x2000000c

0800141c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <HAL_IncTick+0x1c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	001a      	movs	r2, r3
 8001426:	4b05      	ldr	r3, [pc, #20]	@ (800143c <HAL_IncTick+0x20>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	18d2      	adds	r2, r2, r3
 800142c:	4b03      	ldr	r3, [pc, #12]	@ (800143c <HAL_IncTick+0x20>)
 800142e:	601a      	str	r2, [r3, #0]
}
 8001430:	46c0      	nop			@ (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	20000010 	.word	0x20000010
 800143c:	200001ac 	.word	0x200001ac

08001440 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b02      	ldr	r3, [pc, #8]	@ (8001450 <HAL_GetTick+0x10>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	0018      	movs	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	46c0      	nop			@ (mov r8, r8)
 8001450:	200001ac 	.word	0x200001ac

08001454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800145c:	f7ff fff0 	bl	8001440 <HAL_GetTick>
 8001460:	0003      	movs	r3, r0
 8001462:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3301      	adds	r3, #1
 800146c:	d005      	beq.n	800147a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146e:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <HAL_Delay+0x44>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	001a      	movs	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	189b      	adds	r3, r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	f7ff ffe0 	bl	8001440 <HAL_GetTick>
 8001480:	0002      	movs	r2, r0
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	429a      	cmp	r2, r3
 800148a:	d8f7      	bhi.n	800147c <HAL_Delay+0x28>
  {
  }
}
 800148c:	46c0      	nop			@ (mov r8, r8)
 800148e:	46c0      	nop			@ (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	b004      	add	sp, #16
 8001494:	bd80      	pop	{r7, pc}
 8001496:	46c0      	nop			@ (mov r8, r8)
 8001498:	20000010 	.word	0x20000010

0800149c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	0002      	movs	r2, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	1dfb      	adds	r3, r7, #7
 80014a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014aa:	1dfb      	adds	r3, r7, #7
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80014b0:	d828      	bhi.n	8001504 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001570 <__NVIC_SetPriority+0xd4>)
 80014b4:	1dfb      	adds	r3, r7, #7
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	089b      	lsrs	r3, r3, #2
 80014bc:	33c0      	adds	r3, #192	@ 0xc0
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	589b      	ldr	r3, [r3, r2]
 80014c2:	1dfa      	adds	r2, r7, #7
 80014c4:	7812      	ldrb	r2, [r2, #0]
 80014c6:	0011      	movs	r1, r2
 80014c8:	2203      	movs	r2, #3
 80014ca:	400a      	ands	r2, r1
 80014cc:	00d2      	lsls	r2, r2, #3
 80014ce:	21ff      	movs	r1, #255	@ 0xff
 80014d0:	4091      	lsls	r1, r2
 80014d2:	000a      	movs	r2, r1
 80014d4:	43d2      	mvns	r2, r2
 80014d6:	401a      	ands	r2, r3
 80014d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	019b      	lsls	r3, r3, #6
 80014de:	22ff      	movs	r2, #255	@ 0xff
 80014e0:	401a      	ands	r2, r3
 80014e2:	1dfb      	adds	r3, r7, #7
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	0018      	movs	r0, r3
 80014e8:	2303      	movs	r3, #3
 80014ea:	4003      	ands	r3, r0
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014f0:	481f      	ldr	r0, [pc, #124]	@ (8001570 <__NVIC_SetPriority+0xd4>)
 80014f2:	1dfb      	adds	r3, r7, #7
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	b25b      	sxtb	r3, r3
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	430a      	orrs	r2, r1
 80014fc:	33c0      	adds	r3, #192	@ 0xc0
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001502:	e031      	b.n	8001568 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001504:	4a1b      	ldr	r2, [pc, #108]	@ (8001574 <__NVIC_SetPriority+0xd8>)
 8001506:	1dfb      	adds	r3, r7, #7
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	0019      	movs	r1, r3
 800150c:	230f      	movs	r3, #15
 800150e:	400b      	ands	r3, r1
 8001510:	3b08      	subs	r3, #8
 8001512:	089b      	lsrs	r3, r3, #2
 8001514:	3306      	adds	r3, #6
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	18d3      	adds	r3, r2, r3
 800151a:	3304      	adds	r3, #4
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	1dfa      	adds	r2, r7, #7
 8001520:	7812      	ldrb	r2, [r2, #0]
 8001522:	0011      	movs	r1, r2
 8001524:	2203      	movs	r2, #3
 8001526:	400a      	ands	r2, r1
 8001528:	00d2      	lsls	r2, r2, #3
 800152a:	21ff      	movs	r1, #255	@ 0xff
 800152c:	4091      	lsls	r1, r2
 800152e:	000a      	movs	r2, r1
 8001530:	43d2      	mvns	r2, r2
 8001532:	401a      	ands	r2, r3
 8001534:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	019b      	lsls	r3, r3, #6
 800153a:	22ff      	movs	r2, #255	@ 0xff
 800153c:	401a      	ands	r2, r3
 800153e:	1dfb      	adds	r3, r7, #7
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	0018      	movs	r0, r3
 8001544:	2303      	movs	r3, #3
 8001546:	4003      	ands	r3, r0
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800154c:	4809      	ldr	r0, [pc, #36]	@ (8001574 <__NVIC_SetPriority+0xd8>)
 800154e:	1dfb      	adds	r3, r7, #7
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	001c      	movs	r4, r3
 8001554:	230f      	movs	r3, #15
 8001556:	4023      	ands	r3, r4
 8001558:	3b08      	subs	r3, #8
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	430a      	orrs	r2, r1
 800155e:	3306      	adds	r3, #6
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	18c3      	adds	r3, r0, r3
 8001564:	3304      	adds	r3, #4
 8001566:	601a      	str	r2, [r3, #0]
}
 8001568:	46c0      	nop			@ (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	b003      	add	sp, #12
 800156e:	bd90      	pop	{r4, r7, pc}
 8001570:	e000e100 	.word	0xe000e100
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	1e5a      	subs	r2, r3, #1
 8001584:	2380      	movs	r3, #128	@ 0x80
 8001586:	045b      	lsls	r3, r3, #17
 8001588:	429a      	cmp	r2, r3
 800158a:	d301      	bcc.n	8001590 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158c:	2301      	movs	r3, #1
 800158e:	e010      	b.n	80015b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001590:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <SysTick_Config+0x44>)
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	3a01      	subs	r2, #1
 8001596:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001598:	2301      	movs	r3, #1
 800159a:	425b      	negs	r3, r3
 800159c:	2103      	movs	r1, #3
 800159e:	0018      	movs	r0, r3
 80015a0:	f7ff ff7c 	bl	800149c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a4:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <SysTick_Config+0x44>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015aa:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <SysTick_Config+0x44>)
 80015ac:	2207      	movs	r2, #7
 80015ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	0018      	movs	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b002      	add	sp, #8
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	46c0      	nop			@ (mov r8, r8)
 80015bc:	e000e010 	.word	0xe000e010

080015c0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	210f      	movs	r1, #15
 80015cc:	187b      	adds	r3, r7, r1
 80015ce:	1c02      	adds	r2, r0, #0
 80015d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	187b      	adds	r3, r7, r1
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b25b      	sxtb	r3, r3
 80015da:	0011      	movs	r1, r2
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff ff5d 	bl	800149c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80015e2:	46c0      	nop			@ (mov r8, r8)
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b004      	add	sp, #16
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	0018      	movs	r0, r3
 80015f6:	f7ff ffbf 	bl	8001578 <SysTick_Config>
 80015fa:	0003      	movs	r3, r0
}
 80015fc:	0018      	movs	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	b002      	add	sp, #8
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001612:	e149      	b.n	80018a8 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2101      	movs	r1, #1
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	4091      	lsls	r1, r2
 800161e:	000a      	movs	r2, r1
 8001620:	4013      	ands	r3, r2
 8001622:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d100      	bne.n	800162c <HAL_GPIO_Init+0x28>
 800162a:	e13a      	b.n	80018a2 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2203      	movs	r2, #3
 8001632:	4013      	ands	r3, r2
 8001634:	2b01      	cmp	r3, #1
 8001636:	d005      	beq.n	8001644 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2203      	movs	r2, #3
 800163e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001640:	2b02      	cmp	r3, #2
 8001642:	d130      	bne.n	80016a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	409a      	lsls	r2, r3
 8001652:	0013      	movs	r3, r2
 8001654:	43da      	mvns	r2, r3
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	409a      	lsls	r2, r3
 8001666:	0013      	movs	r3, r2
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800167a:	2201      	movs	r2, #1
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	409a      	lsls	r2, r3
 8001680:	0013      	movs	r3, r2
 8001682:	43da      	mvns	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	091b      	lsrs	r3, r3, #4
 8001690:	2201      	movs	r2, #1
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
 8001698:	0013      	movs	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2203      	movs	r2, #3
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d017      	beq.n	80016e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	2203      	movs	r2, #3
 80016be:	409a      	lsls	r2, r3
 80016c0:	0013      	movs	r3, r2
 80016c2:	43da      	mvns	r2, r3
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	409a      	lsls	r2, r3
 80016d4:	0013      	movs	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2203      	movs	r2, #3
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d123      	bne.n	8001736 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	08da      	lsrs	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3208      	adds	r2, #8
 80016f6:	0092      	lsls	r2, r2, #2
 80016f8:	58d3      	ldr	r3, [r2, r3]
 80016fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	2207      	movs	r2, #7
 8001700:	4013      	ands	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	220f      	movs	r2, #15
 8001706:	409a      	lsls	r2, r3
 8001708:	0013      	movs	r3, r2
 800170a:	43da      	mvns	r2, r3
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	691a      	ldr	r2, [r3, #16]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	2107      	movs	r1, #7
 800171a:	400b      	ands	r3, r1
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	409a      	lsls	r2, r3
 8001720:	0013      	movs	r3, r2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	08da      	lsrs	r2, r3, #3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3208      	adds	r2, #8
 8001730:	0092      	lsls	r2, r2, #2
 8001732:	6939      	ldr	r1, [r7, #16]
 8001734:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	2203      	movs	r2, #3
 8001742:	409a      	lsls	r2, r3
 8001744:	0013      	movs	r3, r2
 8001746:	43da      	mvns	r2, r3
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2203      	movs	r2, #3
 8001754:	401a      	ands	r2, r3
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	409a      	lsls	r2, r3
 800175c:	0013      	movs	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	23c0      	movs	r3, #192	@ 0xc0
 8001770:	029b      	lsls	r3, r3, #10
 8001772:	4013      	ands	r3, r2
 8001774:	d100      	bne.n	8001778 <HAL_GPIO_Init+0x174>
 8001776:	e094      	b.n	80018a2 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001778:	4b51      	ldr	r3, [pc, #324]	@ (80018c0 <HAL_GPIO_Init+0x2bc>)
 800177a:	699a      	ldr	r2, [r3, #24]
 800177c:	4b50      	ldr	r3, [pc, #320]	@ (80018c0 <HAL_GPIO_Init+0x2bc>)
 800177e:	2101      	movs	r1, #1
 8001780:	430a      	orrs	r2, r1
 8001782:	619a      	str	r2, [r3, #24]
 8001784:	4b4e      	ldr	r3, [pc, #312]	@ (80018c0 <HAL_GPIO_Init+0x2bc>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	2201      	movs	r2, #1
 800178a:	4013      	ands	r3, r2
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001790:	4a4c      	ldr	r2, [pc, #304]	@ (80018c4 <HAL_GPIO_Init+0x2c0>)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	3302      	adds	r3, #2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	589b      	ldr	r3, [r3, r2]
 800179c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	2203      	movs	r2, #3
 80017a2:	4013      	ands	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	220f      	movs	r2, #15
 80017a8:	409a      	lsls	r2, r3
 80017aa:	0013      	movs	r3, r2
 80017ac:	43da      	mvns	r2, r3
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	2390      	movs	r3, #144	@ 0x90
 80017b8:	05db      	lsls	r3, r3, #23
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d00d      	beq.n	80017da <HAL_GPIO_Init+0x1d6>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a41      	ldr	r2, [pc, #260]	@ (80018c8 <HAL_GPIO_Init+0x2c4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d007      	beq.n	80017d6 <HAL_GPIO_Init+0x1d2>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a40      	ldr	r2, [pc, #256]	@ (80018cc <HAL_GPIO_Init+0x2c8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d101      	bne.n	80017d2 <HAL_GPIO_Init+0x1ce>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e004      	b.n	80017dc <HAL_GPIO_Init+0x1d8>
 80017d2:	2305      	movs	r3, #5
 80017d4:	e002      	b.n	80017dc <HAL_GPIO_Init+0x1d8>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_GPIO_Init+0x1d8>
 80017da:	2300      	movs	r3, #0
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	2103      	movs	r1, #3
 80017e0:	400a      	ands	r2, r1
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	4093      	lsls	r3, r2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017ec:	4935      	ldr	r1, [pc, #212]	@ (80018c4 <HAL_GPIO_Init+0x2c0>)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	089b      	lsrs	r3, r3, #2
 80017f2:	3302      	adds	r3, #2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017fa:	4b35      	ldr	r3, [pc, #212]	@ (80018d0 <HAL_GPIO_Init+0x2cc>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	43da      	mvns	r2, r3
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	2380      	movs	r3, #128	@ 0x80
 8001810:	035b      	lsls	r3, r3, #13
 8001812:	4013      	ands	r3, r2
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800181e:	4b2c      	ldr	r3, [pc, #176]	@ (80018d0 <HAL_GPIO_Init+0x2cc>)
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001824:	4b2a      	ldr	r3, [pc, #168]	@ (80018d0 <HAL_GPIO_Init+0x2cc>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	43da      	mvns	r2, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	2380      	movs	r3, #128	@ 0x80
 800183a:	039b      	lsls	r3, r3, #14
 800183c:	4013      	ands	r3, r2
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001848:	4b21      	ldr	r3, [pc, #132]	@ (80018d0 <HAL_GPIO_Init+0x2cc>)
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800184e:	4b20      	ldr	r3, [pc, #128]	@ (80018d0 <HAL_GPIO_Init+0x2cc>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	43da      	mvns	r2, r3
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	2380      	movs	r3, #128	@ 0x80
 8001864:	029b      	lsls	r3, r3, #10
 8001866:	4013      	ands	r3, r2
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001872:	4b17      	ldr	r3, [pc, #92]	@ (80018d0 <HAL_GPIO_Init+0x2cc>)
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001878:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <HAL_GPIO_Init+0x2cc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	43da      	mvns	r2, r3
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	2380      	movs	r3, #128	@ 0x80
 800188e:	025b      	lsls	r3, r3, #9
 8001890:	4013      	ands	r3, r2
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800189c:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <HAL_GPIO_Init+0x2cc>)
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	3301      	adds	r3, #1
 80018a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	40da      	lsrs	r2, r3
 80018b0:	1e13      	subs	r3, r2, #0
 80018b2:	d000      	beq.n	80018b6 <HAL_GPIO_Init+0x2b2>
 80018b4:	e6ae      	b.n	8001614 <HAL_GPIO_Init+0x10>
  } 
}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	46c0      	nop			@ (mov r8, r8)
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b006      	add	sp, #24
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40010000 	.word	0x40010000
 80018c8:	48000400 	.word	0x48000400
 80018cc:	48000800 	.word	0x48000800
 80018d0:	40010400 	.word	0x40010400

080018d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	000a      	movs	r2, r1
 80018de:	1cbb      	adds	r3, r7, #2
 80018e0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	1cba      	adds	r2, r7, #2
 80018e8:	8812      	ldrh	r2, [r2, #0]
 80018ea:	4013      	ands	r3, r2
 80018ec:	d004      	beq.n	80018f8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80018ee:	230f      	movs	r3, #15
 80018f0:	18fb      	adds	r3, r7, r3
 80018f2:	2201      	movs	r2, #1
 80018f4:	701a      	strb	r2, [r3, #0]
 80018f6:	e003      	b.n	8001900 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018f8:	230f      	movs	r3, #15
 80018fa:	18fb      	adds	r3, r7, r3
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001900:	230f      	movs	r3, #15
 8001902:	18fb      	adds	r3, r7, r3
 8001904:	781b      	ldrb	r3, [r3, #0]
  }
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b004      	add	sp, #16
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	0008      	movs	r0, r1
 8001918:	0011      	movs	r1, r2
 800191a:	1cbb      	adds	r3, r7, #2
 800191c:	1c02      	adds	r2, r0, #0
 800191e:	801a      	strh	r2, [r3, #0]
 8001920:	1c7b      	adds	r3, r7, #1
 8001922:	1c0a      	adds	r2, r1, #0
 8001924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001926:	1c7b      	adds	r3, r7, #1
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d004      	beq.n	8001938 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800192e:	1cbb      	adds	r3, r7, #2
 8001930:	881a      	ldrh	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001936:	e003      	b.n	8001940 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001938:	1cbb      	adds	r3, r7, #2
 800193a:	881a      	ldrh	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001940:	46c0      	nop			@ (mov r8, r8)
 8001942:	46bd      	mov	sp, r7
 8001944:	b002      	add	sp, #8
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	f000 fb76 	bl	8002048 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2201      	movs	r2, #1
 8001962:	4013      	ands	r3, r2
 8001964:	d100      	bne.n	8001968 <HAL_RCC_OscConfig+0x20>
 8001966:	e08e      	b.n	8001a86 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001968:	4bc5      	ldr	r3, [pc, #788]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	220c      	movs	r2, #12
 800196e:	4013      	ands	r3, r2
 8001970:	2b04      	cmp	r3, #4
 8001972:	d00e      	beq.n	8001992 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001974:	4bc2      	ldr	r3, [pc, #776]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	220c      	movs	r2, #12
 800197a:	4013      	ands	r3, r2
 800197c:	2b08      	cmp	r3, #8
 800197e:	d117      	bne.n	80019b0 <HAL_RCC_OscConfig+0x68>
 8001980:	4bbf      	ldr	r3, [pc, #764]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	23c0      	movs	r3, #192	@ 0xc0
 8001986:	025b      	lsls	r3, r3, #9
 8001988:	401a      	ands	r2, r3
 800198a:	2380      	movs	r3, #128	@ 0x80
 800198c:	025b      	lsls	r3, r3, #9
 800198e:	429a      	cmp	r2, r3
 8001990:	d10e      	bne.n	80019b0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001992:	4bbb      	ldr	r3, [pc, #748]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	2380      	movs	r3, #128	@ 0x80
 8001998:	029b      	lsls	r3, r3, #10
 800199a:	4013      	ands	r3, r2
 800199c:	d100      	bne.n	80019a0 <HAL_RCC_OscConfig+0x58>
 800199e:	e071      	b.n	8001a84 <HAL_RCC_OscConfig+0x13c>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d000      	beq.n	80019aa <HAL_RCC_OscConfig+0x62>
 80019a8:	e06c      	b.n	8001a84 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	f000 fb4c 	bl	8002048 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d107      	bne.n	80019c8 <HAL_RCC_OscConfig+0x80>
 80019b8:	4bb1      	ldr	r3, [pc, #708]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4bb0      	ldr	r3, [pc, #704]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 80019be:	2180      	movs	r1, #128	@ 0x80
 80019c0:	0249      	lsls	r1, r1, #9
 80019c2:	430a      	orrs	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	e02f      	b.n	8001a28 <HAL_RCC_OscConfig+0xe0>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10c      	bne.n	80019ea <HAL_RCC_OscConfig+0xa2>
 80019d0:	4bab      	ldr	r3, [pc, #684]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4baa      	ldr	r3, [pc, #680]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 80019d6:	49ab      	ldr	r1, [pc, #684]	@ (8001c84 <HAL_RCC_OscConfig+0x33c>)
 80019d8:	400a      	ands	r2, r1
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	4ba8      	ldr	r3, [pc, #672]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4ba7      	ldr	r3, [pc, #668]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 80019e2:	49a9      	ldr	r1, [pc, #676]	@ (8001c88 <HAL_RCC_OscConfig+0x340>)
 80019e4:	400a      	ands	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	e01e      	b.n	8001a28 <HAL_RCC_OscConfig+0xe0>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b05      	cmp	r3, #5
 80019f0:	d10e      	bne.n	8001a10 <HAL_RCC_OscConfig+0xc8>
 80019f2:	4ba3      	ldr	r3, [pc, #652]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4ba2      	ldr	r3, [pc, #648]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 80019f8:	2180      	movs	r1, #128	@ 0x80
 80019fa:	02c9      	lsls	r1, r1, #11
 80019fc:	430a      	orrs	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	4b9f      	ldr	r3, [pc, #636]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b9e      	ldr	r3, [pc, #632]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001a06:	2180      	movs	r1, #128	@ 0x80
 8001a08:	0249      	lsls	r1, r1, #9
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	e00b      	b.n	8001a28 <HAL_RCC_OscConfig+0xe0>
 8001a10:	4b9b      	ldr	r3, [pc, #620]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b9a      	ldr	r3, [pc, #616]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001a16:	499b      	ldr	r1, [pc, #620]	@ (8001c84 <HAL_RCC_OscConfig+0x33c>)
 8001a18:	400a      	ands	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	4b98      	ldr	r3, [pc, #608]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b97      	ldr	r3, [pc, #604]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001a22:	4999      	ldr	r1, [pc, #612]	@ (8001c88 <HAL_RCC_OscConfig+0x340>)
 8001a24:	400a      	ands	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d014      	beq.n	8001a5a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff fd06 	bl	8001440 <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a3a:	f7ff fd01 	bl	8001440 <HAL_GetTick>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b64      	cmp	r3, #100	@ 0x64
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e2fd      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4c:	4b8c      	ldr	r3, [pc, #560]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	2380      	movs	r3, #128	@ 0x80
 8001a52:	029b      	lsls	r3, r3, #10
 8001a54:	4013      	ands	r3, r2
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0xf2>
 8001a58:	e015      	b.n	8001a86 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5a:	f7ff fcf1 	bl	8001440 <HAL_GetTick>
 8001a5e:	0003      	movs	r3, r0
 8001a60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff fcec 	bl	8001440 <HAL_GetTick>
 8001a68:	0002      	movs	r2, r0
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	@ 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e2e8      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a76:	4b82      	ldr	r3, [pc, #520]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	2380      	movs	r3, #128	@ 0x80
 8001a7c:	029b      	lsls	r3, r3, #10
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x11c>
 8001a82:	e000      	b.n	8001a86 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a84:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d100      	bne.n	8001a92 <HAL_RCC_OscConfig+0x14a>
 8001a90:	e06c      	b.n	8001b6c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a92:	4b7b      	ldr	r3, [pc, #492]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	220c      	movs	r2, #12
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d00e      	beq.n	8001aba <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a9c:	4b78      	ldr	r3, [pc, #480]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	220c      	movs	r2, #12
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d11f      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x1a0>
 8001aa8:	4b75      	ldr	r3, [pc, #468]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	23c0      	movs	r3, #192	@ 0xc0
 8001aae:	025b      	lsls	r3, r3, #9
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	2380      	movs	r3, #128	@ 0x80
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d116      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aba:	4b71      	ldr	r3, [pc, #452]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x188>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e2bb      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad0:	4b6b      	ldr	r3, [pc, #428]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	22f8      	movs	r2, #248	@ 0xf8
 8001ad6:	4393      	bics	r3, r2
 8001ad8:	0019      	movs	r1, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	00da      	lsls	r2, r3, #3
 8001ae0:	4b67      	ldr	r3, [pc, #412]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	e041      	b.n	8001b6c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d024      	beq.n	8001b3a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af0:	4b63      	ldr	r3, [pc, #396]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b62      	ldr	r3, [pc, #392]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001af6:	2101      	movs	r1, #1
 8001af8:	430a      	orrs	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff fca0 	bl	8001440 <HAL_GetTick>
 8001b00:	0003      	movs	r3, r0
 8001b02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b06:	f7ff fc9b 	bl	8001440 <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e297      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b18:	4b59      	ldr	r3, [pc, #356]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d0f1      	beq.n	8001b06 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b22:	4b57      	ldr	r3, [pc, #348]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	22f8      	movs	r2, #248	@ 0xf8
 8001b28:	4393      	bics	r3, r2
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	00da      	lsls	r2, r3, #3
 8001b32:	4b53      	ldr	r3, [pc, #332]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	e018      	b.n	8001b6c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3a:	4b51      	ldr	r3, [pc, #324]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4b50      	ldr	r3, [pc, #320]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001b40:	2101      	movs	r1, #1
 8001b42:	438a      	bics	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff fc7b 	bl	8001440 <HAL_GetTick>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b50:	f7ff fc76 	bl	8001440 <HAL_GetTick>
 8001b54:	0002      	movs	r2, r0
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e272      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b62:	4b47      	ldr	r3, [pc, #284]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2202      	movs	r2, #2
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d1f1      	bne.n	8001b50 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2208      	movs	r2, #8
 8001b72:	4013      	ands	r3, r2
 8001b74:	d036      	beq.n	8001be4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d019      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7e:	4b40      	ldr	r3, [pc, #256]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001b80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b82:	4b3f      	ldr	r3, [pc, #252]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001b84:	2101      	movs	r1, #1
 8001b86:	430a      	orrs	r2, r1
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fc59 	bl	8001440 <HAL_GetTick>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b94:	f7ff fc54 	bl	8001440 <HAL_GetTick>
 8001b98:	0002      	movs	r2, r0
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e250      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba6:	4b36      	ldr	r3, [pc, #216]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001baa:	2202      	movs	r2, #2
 8001bac:	4013      	ands	r3, r2
 8001bae:	d0f1      	beq.n	8001b94 <HAL_RCC_OscConfig+0x24c>
 8001bb0:	e018      	b.n	8001be4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb2:	4b33      	ldr	r3, [pc, #204]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001bb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bb6:	4b32      	ldr	r3, [pc, #200]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001bb8:	2101      	movs	r1, #1
 8001bba:	438a      	bics	r2, r1
 8001bbc:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bbe:	f7ff fc3f 	bl	8001440 <HAL_GetTick>
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc8:	f7ff fc3a 	bl	8001440 <HAL_GetTick>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e236      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bda:	4b29      	ldr	r3, [pc, #164]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bde:	2202      	movs	r2, #2
 8001be0:	4013      	ands	r3, r2
 8001be2:	d1f1      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2204      	movs	r2, #4
 8001bea:	4013      	ands	r3, r2
 8001bec:	d100      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x2a8>
 8001bee:	e0b5      	b.n	8001d5c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf0:	201f      	movs	r0, #31
 8001bf2:	183b      	adds	r3, r7, r0
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf8:	4b21      	ldr	r3, [pc, #132]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001bfa:	69da      	ldr	r2, [r3, #28]
 8001bfc:	2380      	movs	r3, #128	@ 0x80
 8001bfe:	055b      	lsls	r3, r3, #21
 8001c00:	4013      	ands	r3, r2
 8001c02:	d110      	bne.n	8001c26 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c04:	4b1e      	ldr	r3, [pc, #120]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001c06:	69da      	ldr	r2, [r3, #28]
 8001c08:	4b1d      	ldr	r3, [pc, #116]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001c0a:	2180      	movs	r1, #128	@ 0x80
 8001c0c:	0549      	lsls	r1, r1, #21
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	61da      	str	r2, [r3, #28]
 8001c12:	4b1b      	ldr	r3, [pc, #108]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001c14:	69da      	ldr	r2, [r3, #28]
 8001c16:	2380      	movs	r3, #128	@ 0x80
 8001c18:	055b      	lsls	r3, r3, #21
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c20:	183b      	adds	r3, r7, r0
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c26:	4b19      	ldr	r3, [pc, #100]	@ (8001c8c <HAL_RCC_OscConfig+0x344>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	2380      	movs	r3, #128	@ 0x80
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d11a      	bne.n	8001c68 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c32:	4b16      	ldr	r3, [pc, #88]	@ (8001c8c <HAL_RCC_OscConfig+0x344>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <HAL_RCC_OscConfig+0x344>)
 8001c38:	2180      	movs	r1, #128	@ 0x80
 8001c3a:	0049      	lsls	r1, r1, #1
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c40:	f7ff fbfe 	bl	8001440 <HAL_GetTick>
 8001c44:	0003      	movs	r3, r0
 8001c46:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c4a:	f7ff fbf9 	bl	8001440 <HAL_GetTick>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b64      	cmp	r3, #100	@ 0x64
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e1f5      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c8c <HAL_RCC_OscConfig+0x344>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	2380      	movs	r3, #128	@ 0x80
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4013      	ands	r3, r2
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d10f      	bne.n	8001c90 <HAL_RCC_OscConfig+0x348>
 8001c70:	4b03      	ldr	r3, [pc, #12]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001c72:	6a1a      	ldr	r2, [r3, #32]
 8001c74:	4b02      	ldr	r3, [pc, #8]	@ (8001c80 <HAL_RCC_OscConfig+0x338>)
 8001c76:	2101      	movs	r1, #1
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	621a      	str	r2, [r3, #32]
 8001c7c:	e036      	b.n	8001cec <HAL_RCC_OscConfig+0x3a4>
 8001c7e:	46c0      	nop			@ (mov r8, r8)
 8001c80:	40021000 	.word	0x40021000
 8001c84:	fffeffff 	.word	0xfffeffff
 8001c88:	fffbffff 	.word	0xfffbffff
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10c      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x36a>
 8001c98:	4bca      	ldr	r3, [pc, #808]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001c9a:	6a1a      	ldr	r2, [r3, #32]
 8001c9c:	4bc9      	ldr	r3, [pc, #804]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	438a      	bics	r2, r1
 8001ca2:	621a      	str	r2, [r3, #32]
 8001ca4:	4bc7      	ldr	r3, [pc, #796]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001ca6:	6a1a      	ldr	r2, [r3, #32]
 8001ca8:	4bc6      	ldr	r3, [pc, #792]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001caa:	2104      	movs	r1, #4
 8001cac:	438a      	bics	r2, r1
 8001cae:	621a      	str	r2, [r3, #32]
 8001cb0:	e01c      	b.n	8001cec <HAL_RCC_OscConfig+0x3a4>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b05      	cmp	r3, #5
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x38c>
 8001cba:	4bc2      	ldr	r3, [pc, #776]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001cbc:	6a1a      	ldr	r2, [r3, #32]
 8001cbe:	4bc1      	ldr	r3, [pc, #772]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001cc0:	2104      	movs	r1, #4
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	621a      	str	r2, [r3, #32]
 8001cc6:	4bbf      	ldr	r3, [pc, #764]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001cc8:	6a1a      	ldr	r2, [r3, #32]
 8001cca:	4bbe      	ldr	r3, [pc, #760]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001ccc:	2101      	movs	r1, #1
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	621a      	str	r2, [r3, #32]
 8001cd2:	e00b      	b.n	8001cec <HAL_RCC_OscConfig+0x3a4>
 8001cd4:	4bbb      	ldr	r3, [pc, #748]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001cd6:	6a1a      	ldr	r2, [r3, #32]
 8001cd8:	4bba      	ldr	r3, [pc, #744]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001cda:	2101      	movs	r1, #1
 8001cdc:	438a      	bics	r2, r1
 8001cde:	621a      	str	r2, [r3, #32]
 8001ce0:	4bb8      	ldr	r3, [pc, #736]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001ce2:	6a1a      	ldr	r2, [r3, #32]
 8001ce4:	4bb7      	ldr	r3, [pc, #732]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	438a      	bics	r2, r1
 8001cea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d014      	beq.n	8001d1e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf4:	f7ff fba4 	bl	8001440 <HAL_GetTick>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfc:	e009      	b.n	8001d12 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfe:	f7ff fb9f 	bl	8001440 <HAL_GetTick>
 8001d02:	0002      	movs	r2, r0
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	4aaf      	ldr	r2, [pc, #700]	@ (8001fc8 <HAL_RCC_OscConfig+0x680>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e19a      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d12:	4bac      	ldr	r3, [pc, #688]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	2202      	movs	r2, #2
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x3b6>
 8001d1c:	e013      	b.n	8001d46 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1e:	f7ff fb8f 	bl	8001440 <HAL_GetTick>
 8001d22:	0003      	movs	r3, r0
 8001d24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d26:	e009      	b.n	8001d3c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d28:	f7ff fb8a 	bl	8001440 <HAL_GetTick>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	4aa5      	ldr	r2, [pc, #660]	@ (8001fc8 <HAL_RCC_OscConfig+0x680>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e185      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3c:	4ba1      	ldr	r3, [pc, #644]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	2202      	movs	r2, #2
 8001d42:	4013      	ands	r3, r2
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d46:	231f      	movs	r3, #31
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d105      	bne.n	8001d5c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d50:	4b9c      	ldr	r3, [pc, #624]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001d52:	69da      	ldr	r2, [r3, #28]
 8001d54:	4b9b      	ldr	r3, [pc, #620]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001d56:	499d      	ldr	r1, [pc, #628]	@ (8001fcc <HAL_RCC_OscConfig+0x684>)
 8001d58:	400a      	ands	r2, r1
 8001d5a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2210      	movs	r2, #16
 8001d62:	4013      	ands	r3, r2
 8001d64:	d063      	beq.n	8001e2e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d12a      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d6e:	4b95      	ldr	r3, [pc, #596]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001d70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d72:	4b94      	ldr	r3, [pc, #592]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001d74:	2104      	movs	r1, #4
 8001d76:	430a      	orrs	r2, r1
 8001d78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001d7a:	4b92      	ldr	r3, [pc, #584]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d7e:	4b91      	ldr	r3, [pc, #580]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001d80:	2101      	movs	r1, #1
 8001d82:	430a      	orrs	r2, r1
 8001d84:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d86:	f7ff fb5b 	bl	8001440 <HAL_GetTick>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d90:	f7ff fb56 	bl	8001440 <HAL_GetTick>
 8001d94:	0002      	movs	r2, r0
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e152      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001da2:	4b88      	ldr	r3, [pc, #544]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da6:	2202      	movs	r2, #2
 8001da8:	4013      	ands	r3, r2
 8001daa:	d0f1      	beq.n	8001d90 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001dac:	4b85      	ldr	r3, [pc, #532]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db0:	22f8      	movs	r2, #248	@ 0xf8
 8001db2:	4393      	bics	r3, r2
 8001db4:	0019      	movs	r1, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	00da      	lsls	r2, r3, #3
 8001dbc:	4b81      	ldr	r3, [pc, #516]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dc2:	e034      	b.n	8001e2e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	3305      	adds	r3, #5
 8001dca:	d111      	bne.n	8001df0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001dcc:	4b7d      	ldr	r3, [pc, #500]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001dce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dd0:	4b7c      	ldr	r3, [pc, #496]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	438a      	bics	r2, r1
 8001dd6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001dd8:	4b7a      	ldr	r3, [pc, #488]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ddc:	22f8      	movs	r2, #248	@ 0xf8
 8001dde:	4393      	bics	r3, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	00da      	lsls	r2, r3, #3
 8001de8:	4b76      	ldr	r3, [pc, #472]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001dea:	430a      	orrs	r2, r1
 8001dec:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dee:	e01e      	b.n	8001e2e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001df0:	4b74      	ldr	r3, [pc, #464]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001df2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001df4:	4b73      	ldr	r3, [pc, #460]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001df6:	2104      	movs	r1, #4
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001dfc:	4b71      	ldr	r3, [pc, #452]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001dfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e00:	4b70      	ldr	r3, [pc, #448]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	438a      	bics	r2, r1
 8001e06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e08:	f7ff fb1a 	bl	8001440 <HAL_GetTick>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e12:	f7ff fb15 	bl	8001440 <HAL_GetTick>
 8001e16:	0002      	movs	r2, r0
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e111      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e24:	4b67      	ldr	r3, [pc, #412]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e28:	2202      	movs	r2, #2
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d1f1      	bne.n	8001e12 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2220      	movs	r2, #32
 8001e34:	4013      	ands	r3, r2
 8001e36:	d05c      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001e38:	4b62      	ldr	r3, [pc, #392]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	220c      	movs	r2, #12
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b0c      	cmp	r3, #12
 8001e42:	d00e      	beq.n	8001e62 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001e44:	4b5f      	ldr	r3, [pc, #380]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	220c      	movs	r2, #12
 8001e4a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d114      	bne.n	8001e7a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001e50:	4b5c      	ldr	r3, [pc, #368]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	23c0      	movs	r3, #192	@ 0xc0
 8001e56:	025b      	lsls	r3, r3, #9
 8001e58:	401a      	ands	r2, r3
 8001e5a:	23c0      	movs	r3, #192	@ 0xc0
 8001e5c:	025b      	lsls	r3, r3, #9
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d10b      	bne.n	8001e7a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001e62:	4b58      	ldr	r3, [pc, #352]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001e64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e66:	2380      	movs	r3, #128	@ 0x80
 8001e68:	029b      	lsls	r3, r3, #10
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d040      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x5a8>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d03c      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e0e6      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d01b      	beq.n	8001eba <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001e82:	4b50      	ldr	r3, [pc, #320]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001e84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e86:	4b4f      	ldr	r3, [pc, #316]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001e88:	2180      	movs	r1, #128	@ 0x80
 8001e8a:	0249      	lsls	r1, r1, #9
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7ff fad6 	bl	8001440 <HAL_GetTick>
 8001e94:	0003      	movs	r3, r0
 8001e96:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e9a:	f7ff fad1 	bl	8001440 <HAL_GetTick>
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e0cd      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001eac:	4b45      	ldr	r3, [pc, #276]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001eae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eb0:	2380      	movs	r3, #128	@ 0x80
 8001eb2:	029b      	lsls	r3, r3, #10
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x552>
 8001eb8:	e01b      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001eba:	4b42      	ldr	r3, [pc, #264]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ebe:	4b41      	ldr	r3, [pc, #260]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001ec0:	4943      	ldr	r1, [pc, #268]	@ (8001fd0 <HAL_RCC_OscConfig+0x688>)
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7ff fabb 	bl	8001440 <HAL_GetTick>
 8001eca:	0003      	movs	r3, r0
 8001ecc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ed0:	f7ff fab6 	bl	8001440 <HAL_GetTick>
 8001ed4:	0002      	movs	r2, r0
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e0b2      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ee2:	4b38      	ldr	r3, [pc, #224]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001ee4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ee6:	2380      	movs	r3, #128	@ 0x80
 8001ee8:	029b      	lsls	r3, r3, #10
 8001eea:	4013      	ands	r3, r2
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x588>
 8001eee:	e000      	b.n	8001ef2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001ef0:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d100      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b4>
 8001efa:	e0a4      	b.n	8002046 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001efc:	4b31      	ldr	r3, [pc, #196]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	220c      	movs	r2, #12
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d100      	bne.n	8001f0a <HAL_RCC_OscConfig+0x5c2>
 8001f08:	e078      	b.n	8001ffc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d14c      	bne.n	8001fac <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f12:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001f18:	492e      	ldr	r1, [pc, #184]	@ (8001fd4 <HAL_RCC_OscConfig+0x68c>)
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7ff fa8f 	bl	8001440 <HAL_GetTick>
 8001f22:	0003      	movs	r3, r0
 8001f24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f28:	f7ff fa8a 	bl	8001440 <HAL_GetTick>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e086      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3a:	4b22      	ldr	r3, [pc, #136]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	2380      	movs	r3, #128	@ 0x80
 8001f40:	049b      	lsls	r3, r3, #18
 8001f42:	4013      	ands	r3, r2
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f46:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	4393      	bics	r3, r2
 8001f4e:	0019      	movs	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f54:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001f56:	430a      	orrs	r2, r1
 8001f58:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd8 <HAL_RCC_OscConfig+0x690>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001f70:	430a      	orrs	r2, r1
 8001f72:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f74:	4b13      	ldr	r3, [pc, #76]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b12      	ldr	r3, [pc, #72]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001f7a:	2180      	movs	r1, #128	@ 0x80
 8001f7c:	0449      	lsls	r1, r1, #17
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7ff fa5d 	bl	8001440 <HAL_GetTick>
 8001f86:	0003      	movs	r3, r0
 8001f88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7ff fa58 	bl	8001440 <HAL_GetTick>
 8001f90:	0002      	movs	r2, r0
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e054      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f9e:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	2380      	movs	r3, #128	@ 0x80
 8001fa4:	049b      	lsls	r3, r3, #18
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x644>
 8001faa:	e04c      	b.n	8002046 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fac:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b04      	ldr	r3, [pc, #16]	@ (8001fc4 <HAL_RCC_OscConfig+0x67c>)
 8001fb2:	4908      	ldr	r1, [pc, #32]	@ (8001fd4 <HAL_RCC_OscConfig+0x68c>)
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fa42 	bl	8001440 <HAL_GetTick>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc0:	e015      	b.n	8001fee <HAL_RCC_OscConfig+0x6a6>
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	00001388 	.word	0x00001388
 8001fcc:	efffffff 	.word	0xefffffff
 8001fd0:	fffeffff 	.word	0xfffeffff
 8001fd4:	feffffff 	.word	0xfeffffff
 8001fd8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fdc:	f7ff fa30 	bl	8001440 <HAL_GetTick>
 8001fe0:	0002      	movs	r2, r0
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e02c      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fee:	4b18      	ldr	r3, [pc, #96]	@ (8002050 <HAL_RCC_OscConfig+0x708>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	2380      	movs	r3, #128	@ 0x80
 8001ff4:	049b      	lsls	r3, r3, #18
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x694>
 8001ffa:	e024      	b.n	8002046 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e01f      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002008:	4b11      	ldr	r3, [pc, #68]	@ (8002050 <HAL_RCC_OscConfig+0x708>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800200e:	4b10      	ldr	r3, [pc, #64]	@ (8002050 <HAL_RCC_OscConfig+0x708>)
 8002010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002012:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	23c0      	movs	r3, #192	@ 0xc0
 8002018:	025b      	lsls	r3, r3, #9
 800201a:	401a      	ands	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002020:	429a      	cmp	r2, r3
 8002022:	d10e      	bne.n	8002042 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	220f      	movs	r2, #15
 8002028:	401a      	ands	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800202e:	429a      	cmp	r2, r3
 8002030:	d107      	bne.n	8002042 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	23f0      	movs	r3, #240	@ 0xf0
 8002036:	039b      	lsls	r3, r3, #14
 8002038:	401a      	ands	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800203e:	429a      	cmp	r2, r3
 8002040:	d001      	beq.n	8002046 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b008      	add	sp, #32
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000

08002054 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0bf      	b.n	80021e8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002068:	4b61      	ldr	r3, [pc, #388]	@ (80021f0 <HAL_RCC_ClockConfig+0x19c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2201      	movs	r2, #1
 800206e:	4013      	ands	r3, r2
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d911      	bls.n	800209a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b5e      	ldr	r3, [pc, #376]	@ (80021f0 <HAL_RCC_ClockConfig+0x19c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2201      	movs	r2, #1
 800207c:	4393      	bics	r3, r2
 800207e:	0019      	movs	r1, r3
 8002080:	4b5b      	ldr	r3, [pc, #364]	@ (80021f0 <HAL_RCC_ClockConfig+0x19c>)
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002088:	4b59      	ldr	r3, [pc, #356]	@ (80021f0 <HAL_RCC_ClockConfig+0x19c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2201      	movs	r2, #1
 800208e:	4013      	ands	r3, r2
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d001      	beq.n	800209a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e0a6      	b.n	80021e8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2202      	movs	r2, #2
 80020a0:	4013      	ands	r3, r2
 80020a2:	d015      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2204      	movs	r2, #4
 80020aa:	4013      	ands	r3, r2
 80020ac:	d006      	beq.n	80020bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020ae:	4b51      	ldr	r3, [pc, #324]	@ (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	4b50      	ldr	r3, [pc, #320]	@ (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 80020b4:	21e0      	movs	r1, #224	@ 0xe0
 80020b6:	00c9      	lsls	r1, r1, #3
 80020b8:	430a      	orrs	r2, r1
 80020ba:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020bc:	4b4d      	ldr	r3, [pc, #308]	@ (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	22f0      	movs	r2, #240	@ 0xf0
 80020c2:	4393      	bics	r3, r2
 80020c4:	0019      	movs	r1, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	4b4a      	ldr	r3, [pc, #296]	@ (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 80020cc:	430a      	orrs	r2, r1
 80020ce:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2201      	movs	r2, #1
 80020d6:	4013      	ands	r3, r2
 80020d8:	d04c      	beq.n	8002174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e2:	4b44      	ldr	r3, [pc, #272]	@ (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	2380      	movs	r3, #128	@ 0x80
 80020e8:	029b      	lsls	r3, r3, #10
 80020ea:	4013      	ands	r3, r2
 80020ec:	d120      	bne.n	8002130 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e07a      	b.n	80021e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fa:	4b3e      	ldr	r3, [pc, #248]	@ (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	2380      	movs	r3, #128	@ 0x80
 8002100:	049b      	lsls	r3, r3, #18
 8002102:	4013      	ands	r3, r2
 8002104:	d114      	bne.n	8002130 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e06e      	b.n	80021e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d107      	bne.n	8002122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002112:	4b38      	ldr	r3, [pc, #224]	@ (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002114:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002116:	2380      	movs	r3, #128	@ 0x80
 8002118:	029b      	lsls	r3, r3, #10
 800211a:	4013      	ands	r3, r2
 800211c:	d108      	bne.n	8002130 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e062      	b.n	80021e8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002122:	4b34      	ldr	r3, [pc, #208]	@ (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2202      	movs	r2, #2
 8002128:	4013      	ands	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e05b      	b.n	80021e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002130:	4b30      	ldr	r3, [pc, #192]	@ (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2203      	movs	r2, #3
 8002136:	4393      	bics	r3, r2
 8002138:	0019      	movs	r1, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	4b2d      	ldr	r3, [pc, #180]	@ (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002140:	430a      	orrs	r2, r1
 8002142:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002144:	f7ff f97c 	bl	8001440 <HAL_GetTick>
 8002148:	0003      	movs	r3, r0
 800214a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214c:	e009      	b.n	8002162 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214e:	f7ff f977 	bl	8001440 <HAL_GetTick>
 8002152:	0002      	movs	r2, r0
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	4a27      	ldr	r2, [pc, #156]	@ (80021f8 <HAL_RCC_ClockConfig+0x1a4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e042      	b.n	80021e8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002162:	4b24      	ldr	r3, [pc, #144]	@ (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	220c      	movs	r2, #12
 8002168:	401a      	ands	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	429a      	cmp	r2, r3
 8002172:	d1ec      	bne.n	800214e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002174:	4b1e      	ldr	r3, [pc, #120]	@ (80021f0 <HAL_RCC_ClockConfig+0x19c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2201      	movs	r2, #1
 800217a:	4013      	ands	r3, r2
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d211      	bcs.n	80021a6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002182:	4b1b      	ldr	r3, [pc, #108]	@ (80021f0 <HAL_RCC_ClockConfig+0x19c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2201      	movs	r2, #1
 8002188:	4393      	bics	r3, r2
 800218a:	0019      	movs	r1, r3
 800218c:	4b18      	ldr	r3, [pc, #96]	@ (80021f0 <HAL_RCC_ClockConfig+0x19c>)
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002194:	4b16      	ldr	r3, [pc, #88]	@ (80021f0 <HAL_RCC_ClockConfig+0x19c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2201      	movs	r2, #1
 800219a:	4013      	ands	r3, r2
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d001      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e020      	b.n	80021e8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2204      	movs	r2, #4
 80021ac:	4013      	ands	r3, r2
 80021ae:	d009      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021b0:	4b10      	ldr	r3, [pc, #64]	@ (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a11      	ldr	r2, [pc, #68]	@ (80021fc <HAL_RCC_ClockConfig+0x1a8>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	4b0d      	ldr	r3, [pc, #52]	@ (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 80021c0:	430a      	orrs	r2, r1
 80021c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021c4:	f000 f820 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 80021c8:	0001      	movs	r1, r0
 80021ca:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <HAL_RCC_ClockConfig+0x1a0>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	091b      	lsrs	r3, r3, #4
 80021d0:	220f      	movs	r2, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002200 <HAL_RCC_ClockConfig+0x1ac>)
 80021d6:	5cd3      	ldrb	r3, [r2, r3]
 80021d8:	000a      	movs	r2, r1
 80021da:	40da      	lsrs	r2, r3
 80021dc:	4b09      	ldr	r3, [pc, #36]	@ (8002204 <HAL_RCC_ClockConfig+0x1b0>)
 80021de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80021e0:	2000      	movs	r0, #0
 80021e2:	f7ff f8e7 	bl	80013b4 <HAL_InitTick>
  
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	0018      	movs	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b004      	add	sp, #16
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40022000 	.word	0x40022000
 80021f4:	40021000 	.word	0x40021000
 80021f8:	00001388 	.word	0x00001388
 80021fc:	fffff8ff 	.word	0xfffff8ff
 8002200:	08002f54 	.word	0x08002f54
 8002204:	20000000 	.word	0x20000000

08002208 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	2300      	movs	r3, #0
 800221c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002222:	4b2d      	ldr	r3, [pc, #180]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	220c      	movs	r2, #12
 800222c:	4013      	ands	r3, r2
 800222e:	2b0c      	cmp	r3, #12
 8002230:	d046      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0xb8>
 8002232:	d848      	bhi.n	80022c6 <HAL_RCC_GetSysClockFreq+0xbe>
 8002234:	2b04      	cmp	r3, #4
 8002236:	d002      	beq.n	800223e <HAL_RCC_GetSysClockFreq+0x36>
 8002238:	2b08      	cmp	r3, #8
 800223a:	d003      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x3c>
 800223c:	e043      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800223e:	4b27      	ldr	r3, [pc, #156]	@ (80022dc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002240:	613b      	str	r3, [r7, #16]
      break;
 8002242:	e043      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	0c9b      	lsrs	r3, r3, #18
 8002248:	220f      	movs	r2, #15
 800224a:	4013      	ands	r3, r2
 800224c:	4a24      	ldr	r2, [pc, #144]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800224e:	5cd3      	ldrb	r3, [r2, r3]
 8002250:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002252:	4b21      	ldr	r3, [pc, #132]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002256:	220f      	movs	r2, #15
 8002258:	4013      	ands	r3, r2
 800225a:	4a22      	ldr	r2, [pc, #136]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800225c:	5cd3      	ldrb	r3, [r2, r3]
 800225e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	23c0      	movs	r3, #192	@ 0xc0
 8002264:	025b      	lsls	r3, r3, #9
 8002266:	401a      	ands	r2, r3
 8002268:	2380      	movs	r3, #128	@ 0x80
 800226a:	025b      	lsls	r3, r3, #9
 800226c:	429a      	cmp	r2, r3
 800226e:	d109      	bne.n	8002284 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	481a      	ldr	r0, [pc, #104]	@ (80022dc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002274:	f7fd ff48 	bl	8000108 <__udivsi3>
 8002278:	0003      	movs	r3, r0
 800227a:	001a      	movs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4353      	muls	r3, r2
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	e01a      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	23c0      	movs	r3, #192	@ 0xc0
 8002288:	025b      	lsls	r3, r3, #9
 800228a:	401a      	ands	r2, r3
 800228c:	23c0      	movs	r3, #192	@ 0xc0
 800228e:	025b      	lsls	r3, r3, #9
 8002290:	429a      	cmp	r2, r3
 8002292:	d109      	bne.n	80022a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	4814      	ldr	r0, [pc, #80]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002298:	f7fd ff36 	bl	8000108 <__udivsi3>
 800229c:	0003      	movs	r3, r0
 800229e:	001a      	movs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4353      	muls	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	e008      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	480c      	ldr	r0, [pc, #48]	@ (80022dc <HAL_RCC_GetSysClockFreq+0xd4>)
 80022ac:	f7fd ff2c 	bl	8000108 <__udivsi3>
 80022b0:	0003      	movs	r3, r0
 80022b2:	001a      	movs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4353      	muls	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	613b      	str	r3, [r7, #16]
      break;
 80022be:	e005      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80022c0:	4b09      	ldr	r3, [pc, #36]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80022c2:	613b      	str	r3, [r7, #16]
      break;
 80022c4:	e002      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022c6:	4b05      	ldr	r3, [pc, #20]	@ (80022dc <HAL_RCC_GetSysClockFreq+0xd4>)
 80022c8:	613b      	str	r3, [r7, #16]
      break;
 80022ca:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022cc:	693b      	ldr	r3, [r7, #16]
}
 80022ce:	0018      	movs	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b006      	add	sp, #24
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	46c0      	nop			@ (mov r8, r8)
 80022d8:	40021000 	.word	0x40021000
 80022dc:	007a1200 	.word	0x007a1200
 80022e0:	08003040 	.word	0x08003040
 80022e4:	08003050 	.word	0x08003050
 80022e8:	02dc6c00 	.word	0x02dc6c00

080022ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f0:	4b02      	ldr	r3, [pc, #8]	@ (80022fc <HAL_RCC_GetHCLKFreq+0x10>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	0018      	movs	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	20000000 	.word	0x20000000

08002300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002304:	f7ff fff2 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 8002308:	0001      	movs	r1, r0
 800230a:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <HAL_RCC_GetPCLK1Freq+0x24>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	0a1b      	lsrs	r3, r3, #8
 8002310:	2207      	movs	r2, #7
 8002312:	4013      	ands	r3, r2
 8002314:	4a04      	ldr	r2, [pc, #16]	@ (8002328 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002316:	5cd3      	ldrb	r3, [r2, r3]
 8002318:	40d9      	lsrs	r1, r3
 800231a:	000b      	movs	r3, r1
}    
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			@ (mov r8, r8)
 8002324:	40021000 	.word	0x40021000
 8002328:	08002f64 	.word	0x08002f64

0800232c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	2380      	movs	r3, #128	@ 0x80
 8002342:	025b      	lsls	r3, r3, #9
 8002344:	4013      	ands	r3, r2
 8002346:	d100      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002348:	e08e      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800234a:	2017      	movs	r0, #23
 800234c:	183b      	adds	r3, r7, r0
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002352:	4b67      	ldr	r3, [pc, #412]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002354:	69da      	ldr	r2, [r3, #28]
 8002356:	2380      	movs	r3, #128	@ 0x80
 8002358:	055b      	lsls	r3, r3, #21
 800235a:	4013      	ands	r3, r2
 800235c:	d110      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800235e:	4b64      	ldr	r3, [pc, #400]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002360:	69da      	ldr	r2, [r3, #28]
 8002362:	4b63      	ldr	r3, [pc, #396]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002364:	2180      	movs	r1, #128	@ 0x80
 8002366:	0549      	lsls	r1, r1, #21
 8002368:	430a      	orrs	r2, r1
 800236a:	61da      	str	r2, [r3, #28]
 800236c:	4b60      	ldr	r3, [pc, #384]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	2380      	movs	r3, #128	@ 0x80
 8002372:	055b      	lsls	r3, r3, #21
 8002374:	4013      	ands	r3, r2
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800237a:	183b      	adds	r3, r7, r0
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	4b5c      	ldr	r3, [pc, #368]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2380      	movs	r3, #128	@ 0x80
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4013      	ands	r3, r2
 800238a:	d11a      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800238c:	4b59      	ldr	r3, [pc, #356]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b58      	ldr	r3, [pc, #352]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002392:	2180      	movs	r1, #128	@ 0x80
 8002394:	0049      	lsls	r1, r1, #1
 8002396:	430a      	orrs	r2, r1
 8002398:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800239a:	f7ff f851 	bl	8001440 <HAL_GetTick>
 800239e:	0003      	movs	r3, r0
 80023a0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a2:	e008      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a4:	f7ff f84c 	bl	8001440 <HAL_GetTick>
 80023a8:	0002      	movs	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	@ 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e097      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b4f      	ldr	r3, [pc, #316]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	2380      	movs	r3, #128	@ 0x80
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4013      	ands	r3, r2
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023c2:	4b4b      	ldr	r3, [pc, #300]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80023c4:	6a1a      	ldr	r2, [r3, #32]
 80023c6:	23c0      	movs	r3, #192	@ 0xc0
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4013      	ands	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d034      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	23c0      	movs	r3, #192	@ 0xc0
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4013      	ands	r3, r2
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d02c      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023e4:	4b42      	ldr	r3, [pc, #264]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4a43      	ldr	r2, [pc, #268]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023ee:	4b40      	ldr	r3, [pc, #256]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80023f0:	6a1a      	ldr	r2, [r3, #32]
 80023f2:	4b3f      	ldr	r3, [pc, #252]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80023f4:	2180      	movs	r1, #128	@ 0x80
 80023f6:	0249      	lsls	r1, r1, #9
 80023f8:	430a      	orrs	r2, r1
 80023fa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023fc:	4b3c      	ldr	r3, [pc, #240]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80023fe:	6a1a      	ldr	r2, [r3, #32]
 8002400:	4b3b      	ldr	r3, [pc, #236]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002402:	493e      	ldr	r1, [pc, #248]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002404:	400a      	ands	r2, r1
 8002406:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002408:	4b39      	ldr	r3, [pc, #228]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	4013      	ands	r3, r2
 8002414:	d013      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7ff f813 	bl	8001440 <HAL_GetTick>
 800241a:	0003      	movs	r3, r0
 800241c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241e:	e009      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002420:	f7ff f80e 	bl	8001440 <HAL_GetTick>
 8002424:	0002      	movs	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	4a35      	ldr	r2, [pc, #212]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d901      	bls.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e058      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002434:	4b2e      	ldr	r3, [pc, #184]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	2202      	movs	r2, #2
 800243a:	4013      	ands	r3, r2
 800243c:	d0f0      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800243e:	4b2c      	ldr	r3, [pc, #176]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	4a2d      	ldr	r2, [pc, #180]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002444:	4013      	ands	r3, r2
 8002446:	0019      	movs	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	4b28      	ldr	r3, [pc, #160]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800244e:	430a      	orrs	r2, r1
 8002450:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002452:	2317      	movs	r3, #23
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d105      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245c:	4b24      	ldr	r3, [pc, #144]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800245e:	69da      	ldr	r2, [r3, #28]
 8002460:	4b23      	ldr	r3, [pc, #140]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002462:	4928      	ldr	r1, [pc, #160]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002464:	400a      	ands	r2, r1
 8002466:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2201      	movs	r2, #1
 800246e:	4013      	ands	r3, r2
 8002470:	d009      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002472:	4b1f      	ldr	r3, [pc, #124]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	2203      	movs	r2, #3
 8002478:	4393      	bics	r3, r2
 800247a:	0019      	movs	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	4b1b      	ldr	r3, [pc, #108]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002482:	430a      	orrs	r2, r1
 8002484:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2220      	movs	r2, #32
 800248c:	4013      	ands	r3, r2
 800248e:	d009      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002490:	4b17      	ldr	r3, [pc, #92]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002494:	2210      	movs	r2, #16
 8002496:	4393      	bics	r3, r2
 8002498:	0019      	movs	r1, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	4b14      	ldr	r3, [pc, #80]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024a0:	430a      	orrs	r2, r1
 80024a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	2380      	movs	r3, #128	@ 0x80
 80024aa:	029b      	lsls	r3, r3, #10
 80024ac:	4013      	ands	r3, r2
 80024ae:	d009      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024b0:	4b0f      	ldr	r3, [pc, #60]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b4:	2280      	movs	r2, #128	@ 0x80
 80024b6:	4393      	bics	r3, r2
 80024b8:	0019      	movs	r1, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	4b0c      	ldr	r3, [pc, #48]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024c0:	430a      	orrs	r2, r1
 80024c2:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	2380      	movs	r3, #128	@ 0x80
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4013      	ands	r3, r2
 80024ce:	d009      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024d0:	4b07      	ldr	r3, [pc, #28]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d4:	2240      	movs	r2, #64	@ 0x40
 80024d6:	4393      	bics	r3, r2
 80024d8:	0019      	movs	r1, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691a      	ldr	r2, [r3, #16]
 80024de:	4b04      	ldr	r3, [pc, #16]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024e0:	430a      	orrs	r2, r1
 80024e2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	0018      	movs	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b006      	add	sp, #24
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	46c0      	nop			@ (mov r8, r8)
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40007000 	.word	0x40007000
 80024f8:	fffffcff 	.word	0xfffffcff
 80024fc:	fffeffff 	.word	0xfffeffff
 8002500:	00001388 	.word	0x00001388
 8002504:	efffffff 	.word	0xefffffff

08002508 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e044      	b.n	80025a4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d107      	bne.n	8002532 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2278      	movs	r2, #120	@ 0x78
 8002526:	2100      	movs	r1, #0
 8002528:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	0018      	movs	r0, r3
 800252e:	f7fe fc7b 	bl	8000e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2224      	movs	r2, #36	@ 0x24
 8002536:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2101      	movs	r1, #1
 8002544:	438a      	bics	r2, r1
 8002546:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	0018      	movs	r0, r3
 8002554:	f000 f96c 	bl	8002830 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	0018      	movs	r0, r3
 800255c:	f000 f828 	bl	80025b0 <UART_SetConfig>
 8002560:	0003      	movs	r3, r0
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e01c      	b.n	80025a4 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	490d      	ldr	r1, [pc, #52]	@ (80025ac <HAL_UART_Init+0xa4>)
 8002576:	400a      	ands	r2, r1
 8002578:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	212a      	movs	r1, #42	@ 0x2a
 8002586:	438a      	bics	r2, r1
 8002588:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2101      	movs	r1, #1
 8002596:	430a      	orrs	r2, r1
 8002598:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	0018      	movs	r0, r3
 800259e:	f000 f9fb 	bl	8002998 <UART_CheckIdleState>
 80025a2:	0003      	movs	r3, r0
}
 80025a4:	0018      	movs	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b002      	add	sp, #8
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	ffffb7ff 	.word	0xffffb7ff

080025b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025b8:	231e      	movs	r3, #30
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a8d      	ldr	r2, [pc, #564]	@ (8002814 <UART_SetConfig+0x264>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	0019      	movs	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4a88      	ldr	r2, [pc, #544]	@ (8002818 <UART_SetConfig+0x268>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	0019      	movs	r1, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	4313      	orrs	r3, r2
 8002614:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4a7f      	ldr	r2, [pc, #508]	@ (800281c <UART_SetConfig+0x26c>)
 800261e:	4013      	ands	r3, r2
 8002620:	0019      	movs	r1, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	430a      	orrs	r2, r1
 800262a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a7b      	ldr	r2, [pc, #492]	@ (8002820 <UART_SetConfig+0x270>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d127      	bne.n	8002686 <UART_SetConfig+0xd6>
 8002636:	4b7b      	ldr	r3, [pc, #492]	@ (8002824 <UART_SetConfig+0x274>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	2203      	movs	r2, #3
 800263c:	4013      	ands	r3, r2
 800263e:	2b03      	cmp	r3, #3
 8002640:	d00d      	beq.n	800265e <UART_SetConfig+0xae>
 8002642:	d81b      	bhi.n	800267c <UART_SetConfig+0xcc>
 8002644:	2b02      	cmp	r3, #2
 8002646:	d014      	beq.n	8002672 <UART_SetConfig+0xc2>
 8002648:	d818      	bhi.n	800267c <UART_SetConfig+0xcc>
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <UART_SetConfig+0xa4>
 800264e:	2b01      	cmp	r3, #1
 8002650:	d00a      	beq.n	8002668 <UART_SetConfig+0xb8>
 8002652:	e013      	b.n	800267c <UART_SetConfig+0xcc>
 8002654:	231f      	movs	r3, #31
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	e021      	b.n	80026a2 <UART_SetConfig+0xf2>
 800265e:	231f      	movs	r3, #31
 8002660:	18fb      	adds	r3, r7, r3
 8002662:	2202      	movs	r2, #2
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	e01c      	b.n	80026a2 <UART_SetConfig+0xf2>
 8002668:	231f      	movs	r3, #31
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	2204      	movs	r2, #4
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	e017      	b.n	80026a2 <UART_SetConfig+0xf2>
 8002672:	231f      	movs	r3, #31
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	2208      	movs	r2, #8
 8002678:	701a      	strb	r2, [r3, #0]
 800267a:	e012      	b.n	80026a2 <UART_SetConfig+0xf2>
 800267c:	231f      	movs	r3, #31
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	2210      	movs	r2, #16
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	e00d      	b.n	80026a2 <UART_SetConfig+0xf2>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a67      	ldr	r2, [pc, #412]	@ (8002828 <UART_SetConfig+0x278>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d104      	bne.n	800269a <UART_SetConfig+0xea>
 8002690:	231f      	movs	r3, #31
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
 8002698:	e003      	b.n	80026a2 <UART_SetConfig+0xf2>
 800269a:	231f      	movs	r3, #31
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	2210      	movs	r2, #16
 80026a0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69da      	ldr	r2, [r3, #28]
 80026a6:	2380      	movs	r3, #128	@ 0x80
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d15c      	bne.n	8002768 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80026ae:	231f      	movs	r3, #31
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d015      	beq.n	80026e4 <UART_SetConfig+0x134>
 80026b8:	dc18      	bgt.n	80026ec <UART_SetConfig+0x13c>
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d00d      	beq.n	80026da <UART_SetConfig+0x12a>
 80026be:	dc15      	bgt.n	80026ec <UART_SetConfig+0x13c>
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <UART_SetConfig+0x11a>
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d005      	beq.n	80026d4 <UART_SetConfig+0x124>
 80026c8:	e010      	b.n	80026ec <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026ca:	f7ff fe19 	bl	8002300 <HAL_RCC_GetPCLK1Freq>
 80026ce:	0003      	movs	r3, r0
 80026d0:	61bb      	str	r3, [r7, #24]
        break;
 80026d2:	e012      	b.n	80026fa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026d4:	4b55      	ldr	r3, [pc, #340]	@ (800282c <UART_SetConfig+0x27c>)
 80026d6:	61bb      	str	r3, [r7, #24]
        break;
 80026d8:	e00f      	b.n	80026fa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026da:	f7ff fd95 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 80026de:	0003      	movs	r3, r0
 80026e0:	61bb      	str	r3, [r7, #24]
        break;
 80026e2:	e00a      	b.n	80026fa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026e4:	2380      	movs	r3, #128	@ 0x80
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	61bb      	str	r3, [r7, #24]
        break;
 80026ea:	e006      	b.n	80026fa <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026f0:	231e      	movs	r3, #30
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
        break;
 80026f8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d100      	bne.n	8002702 <UART_SetConfig+0x152>
 8002700:	e07a      	b.n	80027f8 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	005a      	lsls	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	085b      	lsrs	r3, r3, #1
 800270c:	18d2      	adds	r2, r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	0019      	movs	r1, r3
 8002714:	0010      	movs	r0, r2
 8002716:	f7fd fcf7 	bl	8000108 <__udivsi3>
 800271a:	0003      	movs	r3, r0
 800271c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2b0f      	cmp	r3, #15
 8002722:	d91c      	bls.n	800275e <UART_SetConfig+0x1ae>
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	2380      	movs	r3, #128	@ 0x80
 8002728:	025b      	lsls	r3, r3, #9
 800272a:	429a      	cmp	r2, r3
 800272c:	d217      	bcs.n	800275e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	b29a      	uxth	r2, r3
 8002732:	200e      	movs	r0, #14
 8002734:	183b      	adds	r3, r7, r0
 8002736:	210f      	movs	r1, #15
 8002738:	438a      	bics	r2, r1
 800273a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	085b      	lsrs	r3, r3, #1
 8002740:	b29b      	uxth	r3, r3
 8002742:	2207      	movs	r2, #7
 8002744:	4013      	ands	r3, r2
 8002746:	b299      	uxth	r1, r3
 8002748:	183b      	adds	r3, r7, r0
 800274a:	183a      	adds	r2, r7, r0
 800274c:	8812      	ldrh	r2, [r2, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	183a      	adds	r2, r7, r0
 8002758:	8812      	ldrh	r2, [r2, #0]
 800275a:	60da      	str	r2, [r3, #12]
 800275c:	e04c      	b.n	80027f8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800275e:	231e      	movs	r3, #30
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	e047      	b.n	80027f8 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002768:	231f      	movs	r3, #31
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b08      	cmp	r3, #8
 8002770:	d015      	beq.n	800279e <UART_SetConfig+0x1ee>
 8002772:	dc18      	bgt.n	80027a6 <UART_SetConfig+0x1f6>
 8002774:	2b04      	cmp	r3, #4
 8002776:	d00d      	beq.n	8002794 <UART_SetConfig+0x1e4>
 8002778:	dc15      	bgt.n	80027a6 <UART_SetConfig+0x1f6>
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <UART_SetConfig+0x1d4>
 800277e:	2b02      	cmp	r3, #2
 8002780:	d005      	beq.n	800278e <UART_SetConfig+0x1de>
 8002782:	e010      	b.n	80027a6 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002784:	f7ff fdbc 	bl	8002300 <HAL_RCC_GetPCLK1Freq>
 8002788:	0003      	movs	r3, r0
 800278a:	61bb      	str	r3, [r7, #24]
        break;
 800278c:	e012      	b.n	80027b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800278e:	4b27      	ldr	r3, [pc, #156]	@ (800282c <UART_SetConfig+0x27c>)
 8002790:	61bb      	str	r3, [r7, #24]
        break;
 8002792:	e00f      	b.n	80027b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002794:	f7ff fd38 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 8002798:	0003      	movs	r3, r0
 800279a:	61bb      	str	r3, [r7, #24]
        break;
 800279c:	e00a      	b.n	80027b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800279e:	2380      	movs	r3, #128	@ 0x80
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	61bb      	str	r3, [r7, #24]
        break;
 80027a4:	e006      	b.n	80027b4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027aa:	231e      	movs	r3, #30
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	2201      	movs	r2, #1
 80027b0:	701a      	strb	r2, [r3, #0]
        break;
 80027b2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d01e      	beq.n	80027f8 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	085a      	lsrs	r2, r3, #1
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	18d2      	adds	r2, r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	0019      	movs	r1, r3
 80027ca:	0010      	movs	r0, r2
 80027cc:	f7fd fc9c 	bl	8000108 <__udivsi3>
 80027d0:	0003      	movs	r3, r0
 80027d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	2b0f      	cmp	r3, #15
 80027d8:	d90a      	bls.n	80027f0 <UART_SetConfig+0x240>
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	2380      	movs	r3, #128	@ 0x80
 80027de:	025b      	lsls	r3, r3, #9
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d205      	bcs.n	80027f0 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	e003      	b.n	80027f8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80027f0:	231e      	movs	r3, #30
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002804:	231e      	movs	r3, #30
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	781b      	ldrb	r3, [r3, #0]
}
 800280a:	0018      	movs	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	b008      	add	sp, #32
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			@ (mov r8, r8)
 8002814:	efff69f3 	.word	0xefff69f3
 8002818:	ffffcfff 	.word	0xffffcfff
 800281c:	fffff4ff 	.word	0xfffff4ff
 8002820:	40013800 	.word	0x40013800
 8002824:	40021000 	.word	0x40021000
 8002828:	40004400 	.word	0x40004400
 800282c:	007a1200 	.word	0x007a1200

08002830 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283c:	2208      	movs	r2, #8
 800283e:	4013      	ands	r3, r2
 8002840:	d00b      	beq.n	800285a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	4a4a      	ldr	r2, [pc, #296]	@ (8002974 <UART_AdvFeatureConfig+0x144>)
 800284a:	4013      	ands	r3, r2
 800284c:	0019      	movs	r1, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285e:	2201      	movs	r2, #1
 8002860:	4013      	ands	r3, r2
 8002862:	d00b      	beq.n	800287c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4a43      	ldr	r2, [pc, #268]	@ (8002978 <UART_AdvFeatureConfig+0x148>)
 800286c:	4013      	ands	r3, r2
 800286e:	0019      	movs	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	2202      	movs	r2, #2
 8002882:	4013      	ands	r3, r2
 8002884:	d00b      	beq.n	800289e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	4a3b      	ldr	r2, [pc, #236]	@ (800297c <UART_AdvFeatureConfig+0x14c>)
 800288e:	4013      	ands	r3, r2
 8002890:	0019      	movs	r1, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	2204      	movs	r2, #4
 80028a4:	4013      	ands	r3, r2
 80028a6:	d00b      	beq.n	80028c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4a34      	ldr	r2, [pc, #208]	@ (8002980 <UART_AdvFeatureConfig+0x150>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	0019      	movs	r1, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c4:	2210      	movs	r2, #16
 80028c6:	4013      	ands	r3, r2
 80028c8:	d00b      	beq.n	80028e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4a2c      	ldr	r2, [pc, #176]	@ (8002984 <UART_AdvFeatureConfig+0x154>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	0019      	movs	r1, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e6:	2220      	movs	r2, #32
 80028e8:	4013      	ands	r3, r2
 80028ea:	d00b      	beq.n	8002904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	4a25      	ldr	r2, [pc, #148]	@ (8002988 <UART_AdvFeatureConfig+0x158>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	0019      	movs	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002908:	2240      	movs	r2, #64	@ 0x40
 800290a:	4013      	ands	r3, r2
 800290c:	d01d      	beq.n	800294a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4a1d      	ldr	r2, [pc, #116]	@ (800298c <UART_AdvFeatureConfig+0x15c>)
 8002916:	4013      	ands	r3, r2
 8002918:	0019      	movs	r1, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800292a:	2380      	movs	r3, #128	@ 0x80
 800292c:	035b      	lsls	r3, r3, #13
 800292e:	429a      	cmp	r2, r3
 8002930:	d10b      	bne.n	800294a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	4a15      	ldr	r2, [pc, #84]	@ (8002990 <UART_AdvFeatureConfig+0x160>)
 800293a:	4013      	ands	r3, r2
 800293c:	0019      	movs	r1, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294e:	2280      	movs	r2, #128	@ 0x80
 8002950:	4013      	ands	r3, r2
 8002952:	d00b      	beq.n	800296c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	4a0e      	ldr	r2, [pc, #56]	@ (8002994 <UART_AdvFeatureConfig+0x164>)
 800295c:	4013      	ands	r3, r2
 800295e:	0019      	movs	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	605a      	str	r2, [r3, #4]
  }
}
 800296c:	46c0      	nop			@ (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b002      	add	sp, #8
 8002972:	bd80      	pop	{r7, pc}
 8002974:	ffff7fff 	.word	0xffff7fff
 8002978:	fffdffff 	.word	0xfffdffff
 800297c:	fffeffff 	.word	0xfffeffff
 8002980:	fffbffff 	.word	0xfffbffff
 8002984:	ffffefff 	.word	0xffffefff
 8002988:	ffffdfff 	.word	0xffffdfff
 800298c:	ffefffff 	.word	0xffefffff
 8002990:	ff9fffff 	.word	0xff9fffff
 8002994:	fff7ffff 	.word	0xfff7ffff

08002998 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b092      	sub	sp, #72	@ 0x48
 800299c:	af02      	add	r7, sp, #8
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2284      	movs	r2, #132	@ 0x84
 80029a4:	2100      	movs	r1, #0
 80029a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029a8:	f7fe fd4a 	bl	8001440 <HAL_GetTick>
 80029ac:	0003      	movs	r3, r0
 80029ae:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2208      	movs	r2, #8
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d12c      	bne.n	8002a18 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029c0:	2280      	movs	r2, #128	@ 0x80
 80029c2:	0391      	lsls	r1, r2, #14
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	4a46      	ldr	r2, [pc, #280]	@ (8002ae0 <UART_CheckIdleState+0x148>)
 80029c8:	9200      	str	r2, [sp, #0]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f000 f88c 	bl	8002ae8 <UART_WaitOnFlagUntilTimeout>
 80029d0:	1e03      	subs	r3, r0, #0
 80029d2:	d021      	beq.n	8002a18 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029d4:	f3ef 8310 	mrs	r3, PRIMASK
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80029da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80029dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029de:	2301      	movs	r3, #1
 80029e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e4:	f383 8810 	msr	PRIMASK, r3
}
 80029e8:	46c0      	nop			@ (mov r8, r8)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2180      	movs	r1, #128	@ 0x80
 80029f6:	438a      	bics	r2, r1
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a00:	f383 8810 	msr	PRIMASK, r3
}
 8002a04:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2278      	movs	r2, #120	@ 0x78
 8002a10:	2100      	movs	r1, #0
 8002a12:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e05f      	b.n	8002ad8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2204      	movs	r2, #4
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d146      	bne.n	8002ab4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a28:	2280      	movs	r2, #128	@ 0x80
 8002a2a:	03d1      	lsls	r1, r2, #15
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ae0 <UART_CheckIdleState+0x148>)
 8002a30:	9200      	str	r2, [sp, #0]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f000 f858 	bl	8002ae8 <UART_WaitOnFlagUntilTimeout>
 8002a38:	1e03      	subs	r3, r0, #0
 8002a3a:	d03b      	beq.n	8002ab4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a40:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a42:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a46:	2301      	movs	r3, #1
 8002a48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f383 8810 	msr	PRIMASK, r3
}
 8002a50:	46c0      	nop			@ (mov r8, r8)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4921      	ldr	r1, [pc, #132]	@ (8002ae4 <UART_CheckIdleState+0x14c>)
 8002a5e:	400a      	ands	r2, r1
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f383 8810 	msr	PRIMASK, r3
}
 8002a6c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a72:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a74:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a76:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a78:	2301      	movs	r3, #1
 8002a7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f383 8810 	msr	PRIMASK, r3
}
 8002a82:	46c0      	nop			@ (mov r8, r8)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2101      	movs	r1, #1
 8002a90:	438a      	bics	r2, r1
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a96:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	f383 8810 	msr	PRIMASK, r3
}
 8002a9e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2280      	movs	r2, #128	@ 0x80
 8002aa4:	2120      	movs	r1, #32
 8002aa6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2278      	movs	r2, #120	@ 0x78
 8002aac:	2100      	movs	r1, #0
 8002aae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e011      	b.n	8002ad8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2280      	movs	r2, #128	@ 0x80
 8002abe:	2120      	movs	r1, #32
 8002ac0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2278      	movs	r2, #120	@ 0x78
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	0018      	movs	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	b010      	add	sp, #64	@ 0x40
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	01ffffff 	.word	0x01ffffff
 8002ae4:	fffffedf 	.word	0xfffffedf

08002ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	603b      	str	r3, [r7, #0]
 8002af4:	1dfb      	adds	r3, r7, #7
 8002af6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002af8:	e051      	b.n	8002b9e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	3301      	adds	r3, #1
 8002afe:	d04e      	beq.n	8002b9e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b00:	f7fe fc9e 	bl	8001440 <HAL_GetTick>
 8002b04:	0002      	movs	r2, r0
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d302      	bcc.n	8002b16 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e051      	b.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2204      	movs	r2, #4
 8002b22:	4013      	ands	r3, r2
 8002b24:	d03b      	beq.n	8002b9e <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b80      	cmp	r3, #128	@ 0x80
 8002b2a:	d038      	beq.n	8002b9e <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b40      	cmp	r3, #64	@ 0x40
 8002b30:	d035      	beq.n	8002b9e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	2208      	movs	r2, #8
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d111      	bne.n	8002b64 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2208      	movs	r2, #8
 8002b46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f000 f83c 	bl	8002bc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2284      	movs	r2, #132	@ 0x84
 8002b54:	2108      	movs	r1, #8
 8002b56:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2278      	movs	r2, #120	@ 0x78
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e02c      	b.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	69da      	ldr	r2, [r3, #28]
 8002b6a:	2380      	movs	r3, #128	@ 0x80
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	401a      	ands	r2, r3
 8002b70:	2380      	movs	r3, #128	@ 0x80
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d112      	bne.n	8002b9e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2280      	movs	r2, #128	@ 0x80
 8002b7e:	0112      	lsls	r2, r2, #4
 8002b80:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	0018      	movs	r0, r3
 8002b86:	f000 f81f 	bl	8002bc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2284      	movs	r2, #132	@ 0x84
 8002b8e:	2120      	movs	r1, #32
 8002b90:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2278      	movs	r2, #120	@ 0x78
 8002b96:	2100      	movs	r1, #0
 8002b98:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e00f      	b.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	425a      	negs	r2, r3
 8002bae:	4153      	adcs	r3, r2
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	001a      	movs	r2, r3
 8002bb4:	1dfb      	adds	r3, r7, #7
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d09e      	beq.n	8002afa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	b004      	add	sp, #16
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08e      	sub	sp, #56	@ 0x38
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8002bd4:	617b      	str	r3, [r7, #20]
  return(result);
 8002bd6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bda:	2301      	movs	r3, #1
 8002bdc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	f383 8810 	msr	PRIMASK, r3
}
 8002be4:	46c0      	nop			@ (mov r8, r8)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4926      	ldr	r1, [pc, #152]	@ (8002c8c <UART_EndRxTransfer+0xc4>)
 8002bf2:	400a      	ands	r2, r1
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f383 8810 	msr	PRIMASK, r3
}
 8002c00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c02:	f3ef 8310 	mrs	r3, PRIMASK
 8002c06:	623b      	str	r3, [r7, #32]
  return(result);
 8002c08:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c12:	f383 8810 	msr	PRIMASK, r3
}
 8002c16:	46c0      	nop			@ (mov r8, r8)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2101      	movs	r1, #1
 8002c24:	438a      	bics	r2, r1
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2e:	f383 8810 	msr	PRIMASK, r3
}
 8002c32:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d118      	bne.n	8002c6e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c40:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c42:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c46:	2301      	movs	r3, #1
 8002c48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f383 8810 	msr	PRIMASK, r3
}
 8002c50:	46c0      	nop			@ (mov r8, r8)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2110      	movs	r1, #16
 8002c5e:	438a      	bics	r2, r1
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f383 8810 	msr	PRIMASK, r3
}
 8002c6c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2280      	movs	r2, #128	@ 0x80
 8002c72:	2120      	movs	r1, #32
 8002c74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002c82:	46c0      	nop			@ (mov r8, r8)
 8002c84:	46bd      	mov	sp, r7
 8002c86:	b00e      	add	sp, #56	@ 0x38
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	fffffedf 	.word	0xfffffedf

08002c90 <malloc>:
 8002c90:	b510      	push	{r4, lr}
 8002c92:	4b03      	ldr	r3, [pc, #12]	@ (8002ca0 <malloc+0x10>)
 8002c94:	0001      	movs	r1, r0
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	f000 f830 	bl	8002cfc <_malloc_r>
 8002c9c:	bd10      	pop	{r4, pc}
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	20000014 	.word	0x20000014

08002ca4 <free>:
 8002ca4:	b510      	push	{r4, lr}
 8002ca6:	4b03      	ldr	r3, [pc, #12]	@ (8002cb4 <free+0x10>)
 8002ca8:	0001      	movs	r1, r0
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	f000 f8fc 	bl	8002ea8 <_free_r>
 8002cb0:	bd10      	pop	{r4, pc}
 8002cb2:	46c0      	nop			@ (mov r8, r8)
 8002cb4:	20000014 	.word	0x20000014

08002cb8 <sbrk_aligned>:
 8002cb8:	b570      	push	{r4, r5, r6, lr}
 8002cba:	4e0f      	ldr	r6, [pc, #60]	@ (8002cf8 <sbrk_aligned+0x40>)
 8002cbc:	000d      	movs	r5, r1
 8002cbe:	6831      	ldr	r1, [r6, #0]
 8002cc0:	0004      	movs	r4, r0
 8002cc2:	2900      	cmp	r1, #0
 8002cc4:	d102      	bne.n	8002ccc <sbrk_aligned+0x14>
 8002cc6:	f000 f8b1 	bl	8002e2c <_sbrk_r>
 8002cca:	6030      	str	r0, [r6, #0]
 8002ccc:	0029      	movs	r1, r5
 8002cce:	0020      	movs	r0, r4
 8002cd0:	f000 f8ac 	bl	8002e2c <_sbrk_r>
 8002cd4:	1c43      	adds	r3, r0, #1
 8002cd6:	d103      	bne.n	8002ce0 <sbrk_aligned+0x28>
 8002cd8:	2501      	movs	r5, #1
 8002cda:	426d      	negs	r5, r5
 8002cdc:	0028      	movs	r0, r5
 8002cde:	bd70      	pop	{r4, r5, r6, pc}
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	1cc5      	adds	r5, r0, #3
 8002ce4:	439d      	bics	r5, r3
 8002ce6:	42a8      	cmp	r0, r5
 8002ce8:	d0f8      	beq.n	8002cdc <sbrk_aligned+0x24>
 8002cea:	1a29      	subs	r1, r5, r0
 8002cec:	0020      	movs	r0, r4
 8002cee:	f000 f89d 	bl	8002e2c <_sbrk_r>
 8002cf2:	3001      	adds	r0, #1
 8002cf4:	d1f2      	bne.n	8002cdc <sbrk_aligned+0x24>
 8002cf6:	e7ef      	b.n	8002cd8 <sbrk_aligned+0x20>
 8002cf8:	200001b0 	.word	0x200001b0

08002cfc <_malloc_r>:
 8002cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cfe:	2203      	movs	r2, #3
 8002d00:	1ccb      	adds	r3, r1, #3
 8002d02:	4393      	bics	r3, r2
 8002d04:	3308      	adds	r3, #8
 8002d06:	0005      	movs	r5, r0
 8002d08:	001f      	movs	r7, r3
 8002d0a:	2b0c      	cmp	r3, #12
 8002d0c:	d234      	bcs.n	8002d78 <_malloc_r+0x7c>
 8002d0e:	270c      	movs	r7, #12
 8002d10:	42b9      	cmp	r1, r7
 8002d12:	d833      	bhi.n	8002d7c <_malloc_r+0x80>
 8002d14:	0028      	movs	r0, r5
 8002d16:	f000 f871 	bl	8002dfc <__malloc_lock>
 8002d1a:	4e37      	ldr	r6, [pc, #220]	@ (8002df8 <_malloc_r+0xfc>)
 8002d1c:	6833      	ldr	r3, [r6, #0]
 8002d1e:	001c      	movs	r4, r3
 8002d20:	2c00      	cmp	r4, #0
 8002d22:	d12f      	bne.n	8002d84 <_malloc_r+0x88>
 8002d24:	0039      	movs	r1, r7
 8002d26:	0028      	movs	r0, r5
 8002d28:	f7ff ffc6 	bl	8002cb8 <sbrk_aligned>
 8002d2c:	0004      	movs	r4, r0
 8002d2e:	1c43      	adds	r3, r0, #1
 8002d30:	d15f      	bne.n	8002df2 <_malloc_r+0xf6>
 8002d32:	6834      	ldr	r4, [r6, #0]
 8002d34:	9400      	str	r4, [sp, #0]
 8002d36:	9b00      	ldr	r3, [sp, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d14a      	bne.n	8002dd2 <_malloc_r+0xd6>
 8002d3c:	2c00      	cmp	r4, #0
 8002d3e:	d052      	beq.n	8002de6 <_malloc_r+0xea>
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	0028      	movs	r0, r5
 8002d44:	18e3      	adds	r3, r4, r3
 8002d46:	9900      	ldr	r1, [sp, #0]
 8002d48:	9301      	str	r3, [sp, #4]
 8002d4a:	f000 f86f 	bl	8002e2c <_sbrk_r>
 8002d4e:	9b01      	ldr	r3, [sp, #4]
 8002d50:	4283      	cmp	r3, r0
 8002d52:	d148      	bne.n	8002de6 <_malloc_r+0xea>
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	0028      	movs	r0, r5
 8002d58:	1aff      	subs	r7, r7, r3
 8002d5a:	0039      	movs	r1, r7
 8002d5c:	f7ff ffac 	bl	8002cb8 <sbrk_aligned>
 8002d60:	3001      	adds	r0, #1
 8002d62:	d040      	beq.n	8002de6 <_malloc_r+0xea>
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	19db      	adds	r3, r3, r7
 8002d68:	6023      	str	r3, [r4, #0]
 8002d6a:	6833      	ldr	r3, [r6, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	2a00      	cmp	r2, #0
 8002d70:	d133      	bne.n	8002dda <_malloc_r+0xde>
 8002d72:	9b00      	ldr	r3, [sp, #0]
 8002d74:	6033      	str	r3, [r6, #0]
 8002d76:	e019      	b.n	8002dac <_malloc_r+0xb0>
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	dac9      	bge.n	8002d10 <_malloc_r+0x14>
 8002d7c:	230c      	movs	r3, #12
 8002d7e:	602b      	str	r3, [r5, #0]
 8002d80:	2000      	movs	r0, #0
 8002d82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d84:	6821      	ldr	r1, [r4, #0]
 8002d86:	1bc9      	subs	r1, r1, r7
 8002d88:	d420      	bmi.n	8002dcc <_malloc_r+0xd0>
 8002d8a:	290b      	cmp	r1, #11
 8002d8c:	d90a      	bls.n	8002da4 <_malloc_r+0xa8>
 8002d8e:	19e2      	adds	r2, r4, r7
 8002d90:	6027      	str	r7, [r4, #0]
 8002d92:	42a3      	cmp	r3, r4
 8002d94:	d104      	bne.n	8002da0 <_malloc_r+0xa4>
 8002d96:	6032      	str	r2, [r6, #0]
 8002d98:	6863      	ldr	r3, [r4, #4]
 8002d9a:	6011      	str	r1, [r2, #0]
 8002d9c:	6053      	str	r3, [r2, #4]
 8002d9e:	e005      	b.n	8002dac <_malloc_r+0xb0>
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	e7f9      	b.n	8002d98 <_malloc_r+0x9c>
 8002da4:	6862      	ldr	r2, [r4, #4]
 8002da6:	42a3      	cmp	r3, r4
 8002da8:	d10e      	bne.n	8002dc8 <_malloc_r+0xcc>
 8002daa:	6032      	str	r2, [r6, #0]
 8002dac:	0028      	movs	r0, r5
 8002dae:	f000 f82d 	bl	8002e0c <__malloc_unlock>
 8002db2:	0020      	movs	r0, r4
 8002db4:	2207      	movs	r2, #7
 8002db6:	300b      	adds	r0, #11
 8002db8:	1d23      	adds	r3, r4, #4
 8002dba:	4390      	bics	r0, r2
 8002dbc:	1ac2      	subs	r2, r0, r3
 8002dbe:	4298      	cmp	r0, r3
 8002dc0:	d0df      	beq.n	8002d82 <_malloc_r+0x86>
 8002dc2:	1a1b      	subs	r3, r3, r0
 8002dc4:	50a3      	str	r3, [r4, r2]
 8002dc6:	e7dc      	b.n	8002d82 <_malloc_r+0x86>
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	e7ef      	b.n	8002dac <_malloc_r+0xb0>
 8002dcc:	0023      	movs	r3, r4
 8002dce:	6864      	ldr	r4, [r4, #4]
 8002dd0:	e7a6      	b.n	8002d20 <_malloc_r+0x24>
 8002dd2:	9c00      	ldr	r4, [sp, #0]
 8002dd4:	6863      	ldr	r3, [r4, #4]
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	e7ad      	b.n	8002d36 <_malloc_r+0x3a>
 8002dda:	001a      	movs	r2, r3
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	42a3      	cmp	r3, r4
 8002de0:	d1fb      	bne.n	8002dda <_malloc_r+0xde>
 8002de2:	2300      	movs	r3, #0
 8002de4:	e7da      	b.n	8002d9c <_malloc_r+0xa0>
 8002de6:	230c      	movs	r3, #12
 8002de8:	0028      	movs	r0, r5
 8002dea:	602b      	str	r3, [r5, #0]
 8002dec:	f000 f80e 	bl	8002e0c <__malloc_unlock>
 8002df0:	e7c6      	b.n	8002d80 <_malloc_r+0x84>
 8002df2:	6007      	str	r7, [r0, #0]
 8002df4:	e7da      	b.n	8002dac <_malloc_r+0xb0>
 8002df6:	46c0      	nop			@ (mov r8, r8)
 8002df8:	200001b4 	.word	0x200001b4

08002dfc <__malloc_lock>:
 8002dfc:	b510      	push	{r4, lr}
 8002dfe:	4802      	ldr	r0, [pc, #8]	@ (8002e08 <__malloc_lock+0xc>)
 8002e00:	f000 f850 	bl	8002ea4 <__retarget_lock_acquire_recursive>
 8002e04:	bd10      	pop	{r4, pc}
 8002e06:	46c0      	nop			@ (mov r8, r8)
 8002e08:	200002f4 	.word	0x200002f4

08002e0c <__malloc_unlock>:
 8002e0c:	b510      	push	{r4, lr}
 8002e0e:	4802      	ldr	r0, [pc, #8]	@ (8002e18 <__malloc_unlock+0xc>)
 8002e10:	f000 f849 	bl	8002ea6 <__retarget_lock_release_recursive>
 8002e14:	bd10      	pop	{r4, pc}
 8002e16:	46c0      	nop			@ (mov r8, r8)
 8002e18:	200002f4 	.word	0x200002f4

08002e1c <memset>:
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	1882      	adds	r2, r0, r2
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d100      	bne.n	8002e26 <memset+0xa>
 8002e24:	4770      	bx	lr
 8002e26:	7019      	strb	r1, [r3, #0]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	e7f9      	b.n	8002e20 <memset+0x4>

08002e2c <_sbrk_r>:
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	b570      	push	{r4, r5, r6, lr}
 8002e30:	4d06      	ldr	r5, [pc, #24]	@ (8002e4c <_sbrk_r+0x20>)
 8002e32:	0004      	movs	r4, r0
 8002e34:	0008      	movs	r0, r1
 8002e36:	602b      	str	r3, [r5, #0]
 8002e38:	f7fe f89a 	bl	8000f70 <_sbrk>
 8002e3c:	1c43      	adds	r3, r0, #1
 8002e3e:	d103      	bne.n	8002e48 <_sbrk_r+0x1c>
 8002e40:	682b      	ldr	r3, [r5, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d000      	beq.n	8002e48 <_sbrk_r+0x1c>
 8002e46:	6023      	str	r3, [r4, #0]
 8002e48:	bd70      	pop	{r4, r5, r6, pc}
 8002e4a:	46c0      	nop			@ (mov r8, r8)
 8002e4c:	200002f0 	.word	0x200002f0

08002e50 <__errno>:
 8002e50:	4b01      	ldr	r3, [pc, #4]	@ (8002e58 <__errno+0x8>)
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	4770      	bx	lr
 8002e56:	46c0      	nop			@ (mov r8, r8)
 8002e58:	20000014 	.word	0x20000014

08002e5c <__libc_init_array>:
 8002e5c:	b570      	push	{r4, r5, r6, lr}
 8002e5e:	2600      	movs	r6, #0
 8002e60:	4c0c      	ldr	r4, [pc, #48]	@ (8002e94 <__libc_init_array+0x38>)
 8002e62:	4d0d      	ldr	r5, [pc, #52]	@ (8002e98 <__libc_init_array+0x3c>)
 8002e64:	1b64      	subs	r4, r4, r5
 8002e66:	10a4      	asrs	r4, r4, #2
 8002e68:	42a6      	cmp	r6, r4
 8002e6a:	d109      	bne.n	8002e80 <__libc_init_array+0x24>
 8002e6c:	2600      	movs	r6, #0
 8002e6e:	f000 f865 	bl	8002f3c <_init>
 8002e72:	4c0a      	ldr	r4, [pc, #40]	@ (8002e9c <__libc_init_array+0x40>)
 8002e74:	4d0a      	ldr	r5, [pc, #40]	@ (8002ea0 <__libc_init_array+0x44>)
 8002e76:	1b64      	subs	r4, r4, r5
 8002e78:	10a4      	asrs	r4, r4, #2
 8002e7a:	42a6      	cmp	r6, r4
 8002e7c:	d105      	bne.n	8002e8a <__libc_init_array+0x2e>
 8002e7e:	bd70      	pop	{r4, r5, r6, pc}
 8002e80:	00b3      	lsls	r3, r6, #2
 8002e82:	58eb      	ldr	r3, [r5, r3]
 8002e84:	4798      	blx	r3
 8002e86:	3601      	adds	r6, #1
 8002e88:	e7ee      	b.n	8002e68 <__libc_init_array+0xc>
 8002e8a:	00b3      	lsls	r3, r6, #2
 8002e8c:	58eb      	ldr	r3, [r5, r3]
 8002e8e:	4798      	blx	r3
 8002e90:	3601      	adds	r6, #1
 8002e92:	e7f2      	b.n	8002e7a <__libc_init_array+0x1e>
 8002e94:	08003060 	.word	0x08003060
 8002e98:	08003060 	.word	0x08003060
 8002e9c:	08003064 	.word	0x08003064
 8002ea0:	08003060 	.word	0x08003060

08002ea4 <__retarget_lock_acquire_recursive>:
 8002ea4:	4770      	bx	lr

08002ea6 <__retarget_lock_release_recursive>:
 8002ea6:	4770      	bx	lr

08002ea8 <_free_r>:
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	0005      	movs	r5, r0
 8002eac:	1e0c      	subs	r4, r1, #0
 8002eae:	d010      	beq.n	8002ed2 <_free_r+0x2a>
 8002eb0:	3c04      	subs	r4, #4
 8002eb2:	6823      	ldr	r3, [r4, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	da00      	bge.n	8002eba <_free_r+0x12>
 8002eb8:	18e4      	adds	r4, r4, r3
 8002eba:	0028      	movs	r0, r5
 8002ebc:	f7ff ff9e 	bl	8002dfc <__malloc_lock>
 8002ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f38 <_free_r+0x90>)
 8002ec2:	6813      	ldr	r3, [r2, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d105      	bne.n	8002ed4 <_free_r+0x2c>
 8002ec8:	6063      	str	r3, [r4, #4]
 8002eca:	6014      	str	r4, [r2, #0]
 8002ecc:	0028      	movs	r0, r5
 8002ece:	f7ff ff9d 	bl	8002e0c <__malloc_unlock>
 8002ed2:	bd70      	pop	{r4, r5, r6, pc}
 8002ed4:	42a3      	cmp	r3, r4
 8002ed6:	d908      	bls.n	8002eea <_free_r+0x42>
 8002ed8:	6820      	ldr	r0, [r4, #0]
 8002eda:	1821      	adds	r1, r4, r0
 8002edc:	428b      	cmp	r3, r1
 8002ede:	d1f3      	bne.n	8002ec8 <_free_r+0x20>
 8002ee0:	6819      	ldr	r1, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	1809      	adds	r1, r1, r0
 8002ee6:	6021      	str	r1, [r4, #0]
 8002ee8:	e7ee      	b.n	8002ec8 <_free_r+0x20>
 8002eea:	001a      	movs	r2, r3
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <_free_r+0x4e>
 8002ef2:	42a3      	cmp	r3, r4
 8002ef4:	d9f9      	bls.n	8002eea <_free_r+0x42>
 8002ef6:	6811      	ldr	r1, [r2, #0]
 8002ef8:	1850      	adds	r0, r2, r1
 8002efa:	42a0      	cmp	r0, r4
 8002efc:	d10b      	bne.n	8002f16 <_free_r+0x6e>
 8002efe:	6820      	ldr	r0, [r4, #0]
 8002f00:	1809      	adds	r1, r1, r0
 8002f02:	1850      	adds	r0, r2, r1
 8002f04:	6011      	str	r1, [r2, #0]
 8002f06:	4283      	cmp	r3, r0
 8002f08:	d1e0      	bne.n	8002ecc <_free_r+0x24>
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	1841      	adds	r1, r0, r1
 8002f10:	6011      	str	r1, [r2, #0]
 8002f12:	6053      	str	r3, [r2, #4]
 8002f14:	e7da      	b.n	8002ecc <_free_r+0x24>
 8002f16:	42a0      	cmp	r0, r4
 8002f18:	d902      	bls.n	8002f20 <_free_r+0x78>
 8002f1a:	230c      	movs	r3, #12
 8002f1c:	602b      	str	r3, [r5, #0]
 8002f1e:	e7d5      	b.n	8002ecc <_free_r+0x24>
 8002f20:	6820      	ldr	r0, [r4, #0]
 8002f22:	1821      	adds	r1, r4, r0
 8002f24:	428b      	cmp	r3, r1
 8002f26:	d103      	bne.n	8002f30 <_free_r+0x88>
 8002f28:	6819      	ldr	r1, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	1809      	adds	r1, r1, r0
 8002f2e:	6021      	str	r1, [r4, #0]
 8002f30:	6063      	str	r3, [r4, #4]
 8002f32:	6054      	str	r4, [r2, #4]
 8002f34:	e7ca      	b.n	8002ecc <_free_r+0x24>
 8002f36:	46c0      	nop			@ (mov r8, r8)
 8002f38:	200001b4 	.word	0x200001b4

08002f3c <_init>:
 8002f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f42:	bc08      	pop	{r3}
 8002f44:	469e      	mov	lr, r3
 8002f46:	4770      	bx	lr

08002f48 <_fini>:
 8002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4e:	bc08      	pop	{r3}
 8002f50:	469e      	mov	lr, r3
 8002f52:	4770      	bx	lr
