
T37STM32FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002134  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080021f4  080021f4  000031f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800222c  0800222c  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800222c  0800222c  0000405c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800222c  0800222c  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800222c  0800222c  0000322c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002230  08002230  00003230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002234  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000005c  08002290  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08002290  000042e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007638  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000148e  00000000  00000000  0000b6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000650  00000000  00000000  0000cb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004d5  00000000  00000000  0000d1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018120  00000000  00000000  0000d675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008640  00000000  00000000  00025795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089651  00000000  00000000  0002ddd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7426  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001810  00000000  00000000  000b746c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000b8c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080021dc 	.word	0x080021dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080021dc 	.word	0x080021dc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <setMode>:
// Mode-specific vars
int mode = 0; // 0 -> Local != 0 -> Serial


// -----------------------------------------------------------------
void setMode(){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
}
 8000224:	46c0      	nop			@ (mov r8, r8)
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}

0800022a <getMode>:

int getMode(){
 800022a:	b580      	push	{r7, lr}
 800022c:	af00      	add	r7, sp, #0
	return 0;
 800022e:	2300      	movs	r3, #0
}
 8000230:	0018      	movs	r0, r3
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <manageIO>:

void manageIO(){
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	setMode(); 			// Set LEDs according to current mode
 800023c:	f7ff fff0 	bl	8000220 <setMode>
	mode = getMode();	// Get Mode from button
 8000240:	f7ff fff3 	bl	800022a <getMode>
 8000244:	0002      	movs	r2, r0
 8000246:	4b02      	ldr	r3, [pc, #8]	@ (8000250 <manageIO+0x18>)
 8000248:	601a      	str	r2, [r3, #0]
}
 800024a:	46c0      	nop			@ (mov r8, r8)
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	2000018c 	.word	0x2000018c

08000254 <_mode>:

void _mode(){
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
}
 8000258:	46c0      	nop			@ (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <main>:

int main(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0

    HAL_Init();
 8000264:	f000 fa76 	bl	8000754 <HAL_Init>

    SystemClock_Config();
 8000268:	f000 f816 	bl	8000298 <SystemClock_Config>

    MX_GPIO_Init();
 800026c:	f000 f8ce 	bl	800040c <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8000270:	f000 f89c 	bl	80003ac <MX_USART2_UART_Init>
    MX_USART1_UART_Init();
 8000274:	f000 f868 	bl	8000348 <MX_USART1_UART_Init>

	writeBuffer = malloc(0);
 8000278:	2000      	movs	r0, #0
 800027a:	f001 fead 	bl	8001fd8 <malloc>
 800027e:	0003      	movs	r3, r0
 8000280:	001a      	movs	r2, r3
 8000282:	4b04      	ldr	r3, [pc, #16]	@ (8000294 <main+0x34>)
 8000284:	601a      	str	r2, [r3, #0]

	while(1){
		manageIO();	// Like toggle LEDs, poll Button, etc.
 8000286:	f7ff ffd7 	bl	8000238 <manageIO>
		_mode();
 800028a:	f7ff ffe3 	bl	8000254 <_mode>
		manageIO();	// Like toggle LEDs, poll Button, etc.
 800028e:	46c0      	nop			@ (mov r8, r8)
 8000290:	e7f9      	b.n	8000286 <main+0x26>
 8000292:	46c0      	nop			@ (mov r8, r8)
 8000294:	20000188 	.word	0x20000188

08000298 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8000298:	b590      	push	{r4, r7, lr}
 800029a:	b099      	sub	sp, #100	@ 0x64
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	242c      	movs	r4, #44	@ 0x2c
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	0018      	movs	r0, r3
 80002a4:	2334      	movs	r3, #52	@ 0x34
 80002a6:	001a      	movs	r2, r3
 80002a8:	2100      	movs	r1, #0
 80002aa:	f001 ff51 	bl	8002150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ae:	231c      	movs	r3, #28
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	0018      	movs	r0, r3
 80002b4:	2310      	movs	r3, #16
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f001 ff49 	bl	8002150 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	0018      	movs	r0, r3
 80002c2:	2318      	movs	r3, #24
 80002c4:	001a      	movs	r2, r3
 80002c6:	2100      	movs	r1, #0
 80002c8:	f001 ff42 	bl	8002150 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002cc:	0021      	movs	r1, r4
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2202      	movs	r2, #2
 80002d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2201      	movs	r2, #1
 80002d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2210      	movs	r2, #16
 80002de:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2200      	movs	r2, #0
 80002e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	0018      	movs	r0, r3
 80002ea:	f000 fcd1 	bl	8000c90 <HAL_RCC_OscConfig>
 80002ee:	1e03      	subs	r3, r0, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002f2:	f000 f8e3 	bl	80004bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f6:	211c      	movs	r1, #28
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2207      	movs	r2, #7
 80002fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2200      	movs	r2, #0
 8000302:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2200      	movs	r2, #0
 800030e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2100      	movs	r1, #0
 8000314:	0018      	movs	r0, r3
 8000316:	f001 f841 	bl	800139c <HAL_RCC_ClockConfig>
 800031a:	1e03      	subs	r3, r0, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800031e:	f000 f8cd 	bl	80004bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2201      	movs	r2, #1
 8000326:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	0018      	movs	r0, r3
 8000332:	f001 f99f 	bl	8001674 <HAL_RCCEx_PeriphCLKConfig>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800033a:	f000 f8bf 	bl	80004bc <Error_Handler>
  }
}
 800033e:	46c0      	nop			@ (mov r8, r8)
 8000340:	46bd      	mov	sp, r7
 8000342:	b019      	add	sp, #100	@ 0x64
 8000344:	bd90      	pop	{r4, r7, pc}
	...

08000348 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800034c:	4b15      	ldr	r3, [pc, #84]	@ (80003a4 <MX_USART1_UART_Init+0x5c>)
 800034e:	4a16      	ldr	r2, [pc, #88]	@ (80003a8 <MX_USART1_UART_Init+0x60>)
 8000350:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000352:	4b14      	ldr	r3, [pc, #80]	@ (80003a4 <MX_USART1_UART_Init+0x5c>)
 8000354:	2296      	movs	r2, #150	@ 0x96
 8000356:	0192      	lsls	r2, r2, #6
 8000358:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800035a:	4b12      	ldr	r3, [pc, #72]	@ (80003a4 <MX_USART1_UART_Init+0x5c>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000360:	4b10      	ldr	r3, [pc, #64]	@ (80003a4 <MX_USART1_UART_Init+0x5c>)
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000366:	4b0f      	ldr	r3, [pc, #60]	@ (80003a4 <MX_USART1_UART_Init+0x5c>)
 8000368:	2280      	movs	r2, #128	@ 0x80
 800036a:	00d2      	lsls	r2, r2, #3
 800036c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800036e:	4b0d      	ldr	r3, [pc, #52]	@ (80003a4 <MX_USART1_UART_Init+0x5c>)
 8000370:	220c      	movs	r2, #12
 8000372:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000374:	4b0b      	ldr	r3, [pc, #44]	@ (80003a4 <MX_USART1_UART_Init+0x5c>)
 8000376:	2200      	movs	r2, #0
 8000378:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800037a:	4b0a      	ldr	r3, [pc, #40]	@ (80003a4 <MX_USART1_UART_Init+0x5c>)
 800037c:	2200      	movs	r2, #0
 800037e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000380:	4b08      	ldr	r3, [pc, #32]	@ (80003a4 <MX_USART1_UART_Init+0x5c>)
 8000382:	2200      	movs	r2, #0
 8000384:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000386:	4b07      	ldr	r3, [pc, #28]	@ (80003a4 <MX_USART1_UART_Init+0x5c>)
 8000388:	2200      	movs	r2, #0
 800038a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800038c:	4b05      	ldr	r3, [pc, #20]	@ (80003a4 <MX_USART1_UART_Init+0x5c>)
 800038e:	0018      	movs	r0, r3
 8000390:	f001 fa5e 	bl	8001850 <HAL_UART_Init>
 8000394:	1e03      	subs	r3, r0, #0
 8000396:	d001      	beq.n	800039c <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000398:	f000 f890 	bl	80004bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800039c:	46c0      	nop			@ (mov r8, r8)
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	46c0      	nop			@ (mov r8, r8)
 80003a4:	20000078 	.word	0x20000078
 80003a8:	40013800 	.word	0x40013800

080003ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003b0:	4b14      	ldr	r3, [pc, #80]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003b2:	4a15      	ldr	r2, [pc, #84]	@ (8000408 <MX_USART2_UART_Init+0x5c>)
 80003b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003b6:	4b13      	ldr	r3, [pc, #76]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003b8:	2296      	movs	r2, #150	@ 0x96
 80003ba:	0212      	lsls	r2, r2, #8
 80003bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003be:	4b11      	ldr	r3, [pc, #68]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003d2:	220c      	movs	r2, #12
 80003d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003d8:	2200      	movs	r2, #0
 80003da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003dc:	4b09      	ldr	r3, [pc, #36]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003de:	2200      	movs	r2, #0
 80003e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003e2:	4b08      	ldr	r3, [pc, #32]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e8:	4b06      	ldr	r3, [pc, #24]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ee:	4b05      	ldr	r3, [pc, #20]	@ (8000404 <MX_USART2_UART_Init+0x58>)
 80003f0:	0018      	movs	r0, r3
 80003f2:	f001 fa2d 	bl	8001850 <HAL_UART_Init>
 80003f6:	1e03      	subs	r3, r0, #0
 80003f8:	d001      	beq.n	80003fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003fa:	f000 f85f 	bl	80004bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003fe:	46c0      	nop			@ (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000100 	.word	0x20000100
 8000408:	40004400 	.word	0x40004400

0800040c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800040c:	b590      	push	{r4, r7, lr}
 800040e:	b089      	sub	sp, #36	@ 0x24
 8000410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	240c      	movs	r4, #12
 8000414:	193b      	adds	r3, r7, r4
 8000416:	0018      	movs	r0, r3
 8000418:	2314      	movs	r3, #20
 800041a:	001a      	movs	r2, r3
 800041c:	2100      	movs	r1, #0
 800041e:	f001 fe97 	bl	8002150 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000422:	4b25      	ldr	r3, [pc, #148]	@ (80004b8 <MX_GPIO_Init+0xac>)
 8000424:	695a      	ldr	r2, [r3, #20]
 8000426:	4b24      	ldr	r3, [pc, #144]	@ (80004b8 <MX_GPIO_Init+0xac>)
 8000428:	2180      	movs	r1, #128	@ 0x80
 800042a:	03c9      	lsls	r1, r1, #15
 800042c:	430a      	orrs	r2, r1
 800042e:	615a      	str	r2, [r3, #20]
 8000430:	4b21      	ldr	r3, [pc, #132]	@ (80004b8 <MX_GPIO_Init+0xac>)
 8000432:	695a      	ldr	r2, [r3, #20]
 8000434:	2380      	movs	r3, #128	@ 0x80
 8000436:	03db      	lsls	r3, r3, #15
 8000438:	4013      	ands	r3, r2
 800043a:	60bb      	str	r3, [r7, #8]
 800043c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043e:	4b1e      	ldr	r3, [pc, #120]	@ (80004b8 <MX_GPIO_Init+0xac>)
 8000440:	695a      	ldr	r2, [r3, #20]
 8000442:	4b1d      	ldr	r3, [pc, #116]	@ (80004b8 <MX_GPIO_Init+0xac>)
 8000444:	2180      	movs	r1, #128	@ 0x80
 8000446:	0289      	lsls	r1, r1, #10
 8000448:	430a      	orrs	r2, r1
 800044a:	615a      	str	r2, [r3, #20]
 800044c:	4b1a      	ldr	r3, [pc, #104]	@ (80004b8 <MX_GPIO_Init+0xac>)
 800044e:	695a      	ldr	r2, [r3, #20]
 8000450:	2380      	movs	r3, #128	@ 0x80
 8000452:	029b      	lsls	r3, r3, #10
 8000454:	4013      	ands	r3, r2
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_MLOCAL_Pin|LED_MSERIAL_Pin|LED_BSY_Pin|TTY_SEND_Pin, GPIO_PIN_RESET);
 800045a:	2390      	movs	r3, #144	@ 0x90
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	2200      	movs	r2, #0
 8000460:	211b      	movs	r1, #27
 8000462:	0018      	movs	r0, r3
 8000464:	f000 fbf6 	bl	8000c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_MLOCAL_Pin LED_MSERIAL_Pin LED_BSY_Pin TTY_SEND_Pin */
  GPIO_InitStruct.Pin = LED_MLOCAL_Pin|LED_MSERIAL_Pin|LED_BSY_Pin|TTY_SEND_Pin;
 8000468:	193b      	adds	r3, r7, r4
 800046a:	221b      	movs	r2, #27
 800046c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046e:	193b      	adds	r3, r7, r4
 8000470:	2201      	movs	r2, #1
 8000472:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	193b      	adds	r3, r7, r4
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047a:	193b      	adds	r3, r7, r4
 800047c:	2200      	movs	r2, #0
 800047e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000480:	193a      	adds	r2, r7, r4
 8000482:	2390      	movs	r3, #144	@ 0x90
 8000484:	05db      	lsls	r3, r3, #23
 8000486:	0011      	movs	r1, r2
 8000488:	0018      	movs	r0, r3
 800048a:	f000 fa7b 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pins : TTY_RECEIVE_Pin BT_Mode_Pin */
  GPIO_InitStruct.Pin = TTY_RECEIVE_Pin|BT_Mode_Pin;
 800048e:	193b      	adds	r3, r7, r4
 8000490:	2260      	movs	r2, #96	@ 0x60
 8000492:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000494:	193b      	adds	r3, r7, r4
 8000496:	2200      	movs	r2, #0
 8000498:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	193b      	adds	r3, r7, r4
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a0:	193a      	adds	r2, r7, r4
 80004a2:	2390      	movs	r3, #144	@ 0x90
 80004a4:	05db      	lsls	r3, r3, #23
 80004a6:	0011      	movs	r1, r2
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 fa6b 	bl	8000984 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b009      	add	sp, #36	@ 0x24
 80004b4:	bd90      	pop	{r4, r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	40021000 	.word	0x40021000

080004bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c0:	b672      	cpsid	i
}
 80004c2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c4:	46c0      	nop			@ (mov r8, r8)
 80004c6:	e7fd      	b.n	80004c4 <Error_Handler+0x8>

080004c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ce:	4b0f      	ldr	r3, [pc, #60]	@ (800050c <HAL_MspInit+0x44>)
 80004d0:	699a      	ldr	r2, [r3, #24]
 80004d2:	4b0e      	ldr	r3, [pc, #56]	@ (800050c <HAL_MspInit+0x44>)
 80004d4:	2101      	movs	r1, #1
 80004d6:	430a      	orrs	r2, r1
 80004d8:	619a      	str	r2, [r3, #24]
 80004da:	4b0c      	ldr	r3, [pc, #48]	@ (800050c <HAL_MspInit+0x44>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	2201      	movs	r2, #1
 80004e0:	4013      	ands	r3, r2
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e6:	4b09      	ldr	r3, [pc, #36]	@ (800050c <HAL_MspInit+0x44>)
 80004e8:	69da      	ldr	r2, [r3, #28]
 80004ea:	4b08      	ldr	r3, [pc, #32]	@ (800050c <HAL_MspInit+0x44>)
 80004ec:	2180      	movs	r1, #128	@ 0x80
 80004ee:	0549      	lsls	r1, r1, #21
 80004f0:	430a      	orrs	r2, r1
 80004f2:	61da      	str	r2, [r3, #28]
 80004f4:	4b05      	ldr	r3, [pc, #20]	@ (800050c <HAL_MspInit+0x44>)
 80004f6:	69da      	ldr	r2, [r3, #28]
 80004f8:	2380      	movs	r3, #128	@ 0x80
 80004fa:	055b      	lsls	r3, r3, #21
 80004fc:	4013      	ands	r3, r2
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000502:	46c0      	nop			@ (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	b002      	add	sp, #8
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	40021000 	.word	0x40021000

08000510 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b08d      	sub	sp, #52	@ 0x34
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000518:	241c      	movs	r4, #28
 800051a:	193b      	adds	r3, r7, r4
 800051c:	0018      	movs	r0, r3
 800051e:	2314      	movs	r3, #20
 8000520:	001a      	movs	r2, r3
 8000522:	2100      	movs	r1, #0
 8000524:	f001 fe14 	bl	8002150 <memset>
  if(huart->Instance==USART1)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a39      	ldr	r2, [pc, #228]	@ (8000614 <HAL_UART_MspInit+0x104>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d134      	bne.n	800059c <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000532:	4b39      	ldr	r3, [pc, #228]	@ (8000618 <HAL_UART_MspInit+0x108>)
 8000534:	699a      	ldr	r2, [r3, #24]
 8000536:	4b38      	ldr	r3, [pc, #224]	@ (8000618 <HAL_UART_MspInit+0x108>)
 8000538:	2180      	movs	r1, #128	@ 0x80
 800053a:	01c9      	lsls	r1, r1, #7
 800053c:	430a      	orrs	r2, r1
 800053e:	619a      	str	r2, [r3, #24]
 8000540:	4b35      	ldr	r3, [pc, #212]	@ (8000618 <HAL_UART_MspInit+0x108>)
 8000542:	699a      	ldr	r2, [r3, #24]
 8000544:	2380      	movs	r3, #128	@ 0x80
 8000546:	01db      	lsls	r3, r3, #7
 8000548:	4013      	ands	r3, r2
 800054a:	61bb      	str	r3, [r7, #24]
 800054c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b32      	ldr	r3, [pc, #200]	@ (8000618 <HAL_UART_MspInit+0x108>)
 8000550:	695a      	ldr	r2, [r3, #20]
 8000552:	4b31      	ldr	r3, [pc, #196]	@ (8000618 <HAL_UART_MspInit+0x108>)
 8000554:	2180      	movs	r1, #128	@ 0x80
 8000556:	0289      	lsls	r1, r1, #10
 8000558:	430a      	orrs	r2, r1
 800055a:	615a      	str	r2, [r3, #20]
 800055c:	4b2e      	ldr	r3, [pc, #184]	@ (8000618 <HAL_UART_MspInit+0x108>)
 800055e:	695a      	ldr	r2, [r3, #20]
 8000560:	2380      	movs	r3, #128	@ 0x80
 8000562:	029b      	lsls	r3, r3, #10
 8000564:	4013      	ands	r3, r2
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800056a:	193b      	adds	r3, r7, r4
 800056c:	22c0      	movs	r2, #192	@ 0xc0
 800056e:	00d2      	lsls	r2, r2, #3
 8000570:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000572:	0021      	movs	r1, r4
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2202      	movs	r2, #2
 8000578:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2203      	movs	r2, #3
 8000584:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2201      	movs	r2, #1
 800058a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058c:	187a      	adds	r2, r7, r1
 800058e:	2390      	movs	r3, #144	@ 0x90
 8000590:	05db      	lsls	r3, r3, #23
 8000592:	0011      	movs	r1, r2
 8000594:	0018      	movs	r0, r3
 8000596:	f000 f9f5 	bl	8000984 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800059a:	e037      	b.n	800060c <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a1e      	ldr	r2, [pc, #120]	@ (800061c <HAL_UART_MspInit+0x10c>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d132      	bne.n	800060c <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80005a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000618 <HAL_UART_MspInit+0x108>)
 80005a8:	69da      	ldr	r2, [r3, #28]
 80005aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000618 <HAL_UART_MspInit+0x108>)
 80005ac:	2180      	movs	r1, #128	@ 0x80
 80005ae:	0289      	lsls	r1, r1, #10
 80005b0:	430a      	orrs	r2, r1
 80005b2:	61da      	str	r2, [r3, #28]
 80005b4:	4b18      	ldr	r3, [pc, #96]	@ (8000618 <HAL_UART_MspInit+0x108>)
 80005b6:	69da      	ldr	r2, [r3, #28]
 80005b8:	2380      	movs	r3, #128	@ 0x80
 80005ba:	029b      	lsls	r3, r3, #10
 80005bc:	4013      	ands	r3, r2
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b15      	ldr	r3, [pc, #84]	@ (8000618 <HAL_UART_MspInit+0x108>)
 80005c4:	695a      	ldr	r2, [r3, #20]
 80005c6:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <HAL_UART_MspInit+0x108>)
 80005c8:	2180      	movs	r1, #128	@ 0x80
 80005ca:	0289      	lsls	r1, r1, #10
 80005cc:	430a      	orrs	r2, r1
 80005ce:	615a      	str	r2, [r3, #20]
 80005d0:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <HAL_UART_MspInit+0x108>)
 80005d2:	695a      	ldr	r2, [r3, #20]
 80005d4:	2380      	movs	r3, #128	@ 0x80
 80005d6:	029b      	lsls	r3, r3, #10
 80005d8:	4013      	ands	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80005de:	211c      	movs	r1, #28
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000620 <HAL_UART_MspInit+0x110>)
 80005e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2202      	movs	r2, #2
 80005ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2203      	movs	r2, #3
 80005f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2201      	movs	r2, #1
 80005fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	187a      	adds	r2, r7, r1
 8000600:	2390      	movs	r3, #144	@ 0x90
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	0011      	movs	r1, r2
 8000606:	0018      	movs	r0, r3
 8000608:	f000 f9bc 	bl	8000984 <HAL_GPIO_Init>
}
 800060c:	46c0      	nop			@ (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	b00d      	add	sp, #52	@ 0x34
 8000612:	bd90      	pop	{r4, r7, pc}
 8000614:	40013800 	.word	0x40013800
 8000618:	40021000 	.word	0x40021000
 800061c:	40004400 	.word	0x40004400
 8000620:	00008004 	.word	0x00008004

08000624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000628:	46c0      	nop			@ (mov r8, r8)
 800062a:	e7fd      	b.n	8000628 <NMI_Handler+0x4>

0800062c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000630:	46c0      	nop			@ (mov r8, r8)
 8000632:	e7fd      	b.n	8000630 <HardFault_Handler+0x4>

08000634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000638:	46c0      	nop			@ (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064c:	f000 f8ca 	bl	80007e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000650:	46c0      	nop			@ (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000660:	4a14      	ldr	r2, [pc, #80]	@ (80006b4 <_sbrk+0x5c>)
 8000662:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <_sbrk+0x60>)
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800066c:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <_sbrk+0x64>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d102      	bne.n	800067a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000674:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <_sbrk+0x64>)
 8000676:	4a12      	ldr	r2, [pc, #72]	@ (80006c0 <_sbrk+0x68>)
 8000678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800067a:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <_sbrk+0x64>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	18d3      	adds	r3, r2, r3
 8000682:	693a      	ldr	r2, [r7, #16]
 8000684:	429a      	cmp	r2, r3
 8000686:	d207      	bcs.n	8000698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000688:	f001 fd7c 	bl	8002184 <__errno>
 800068c:	0003      	movs	r3, r0
 800068e:	220c      	movs	r2, #12
 8000690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000692:	2301      	movs	r3, #1
 8000694:	425b      	negs	r3, r3
 8000696:	e009      	b.n	80006ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000698:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <_sbrk+0x64>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800069e:	4b07      	ldr	r3, [pc, #28]	@ (80006bc <_sbrk+0x64>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	18d2      	adds	r2, r2, r3
 80006a6:	4b05      	ldr	r3, [pc, #20]	@ (80006bc <_sbrk+0x64>)
 80006a8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80006aa:	68fb      	ldr	r3, [r7, #12]
}
 80006ac:	0018      	movs	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b006      	add	sp, #24
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20001800 	.word	0x20001800
 80006b8:	00000400 	.word	0x00000400
 80006bc:	20000190 	.word	0x20000190
 80006c0:	200002e0 	.word	0x200002e0

080006c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006c8:	46c0      	nop			@ (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006d0:	4813      	ldr	r0, [pc, #76]	@ (8000720 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006d2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006d4:	f7ff fff6 	bl	80006c4 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80006d8:	4812      	ldr	r0, [pc, #72]	@ (8000724 <LoopForever+0x6>)
    LDR R1, [R0]
 80006da:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80006dc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80006de:	4a12      	ldr	r2, [pc, #72]	@ (8000728 <LoopForever+0xa>)
    CMP R1, R2
 80006e0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80006e2:	d105      	bne.n	80006f0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80006e4:	4811      	ldr	r0, [pc, #68]	@ (800072c <LoopForever+0xe>)
    LDR R1,=0x00000001
 80006e6:	4912      	ldr	r1, [pc, #72]	@ (8000730 <LoopForever+0x12>)
    STR R1, [R0]
 80006e8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80006ea:	4812      	ldr	r0, [pc, #72]	@ (8000734 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80006ec:	4912      	ldr	r1, [pc, #72]	@ (8000738 <LoopForever+0x1a>)
    STR R1, [R0]
 80006ee:	6001      	str	r1, [r0, #0]

080006f0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f0:	4812      	ldr	r0, [pc, #72]	@ (800073c <LoopForever+0x1e>)
  ldr r1, =_edata
 80006f2:	4913      	ldr	r1, [pc, #76]	@ (8000740 <LoopForever+0x22>)
  ldr r2, =_sidata
 80006f4:	4a13      	ldr	r2, [pc, #76]	@ (8000744 <LoopForever+0x26>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f8:	e002      	b.n	8000700 <LoopCopyDataInit>

080006fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fe:	3304      	adds	r3, #4

08000700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000704:	d3f9      	bcc.n	80006fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000706:	4a10      	ldr	r2, [pc, #64]	@ (8000748 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000708:	4c10      	ldr	r4, [pc, #64]	@ (800074c <LoopForever+0x2e>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800070c:	e001      	b.n	8000712 <LoopFillZerobss>

0800070e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000710:	3204      	adds	r2, #4

08000712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000714:	d3fb      	bcc.n	800070e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000716:	f001 fd3b 	bl	8002190 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800071a:	f7ff fda1 	bl	8000260 <main>

0800071e <LoopForever>:

LoopForever:
    b LoopForever
 800071e:	e7fe      	b.n	800071e <LoopForever>
  ldr   r0, =_estack
 8000720:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000724:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000728:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800072c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000730:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000734:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000738:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800073c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000740:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000744:	08002234 	.word	0x08002234
  ldr r2, =_sbss
 8000748:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800074c:	200002e0 	.word	0x200002e0

08000750 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC1_IRQHandler>
	...

08000754 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000758:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <HAL_Init+0x24>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <HAL_Init+0x24>)
 800075e:	2110      	movs	r1, #16
 8000760:	430a      	orrs	r2, r1
 8000762:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000764:	2000      	movs	r0, #0
 8000766:	f000 f809 	bl	800077c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800076a:	f7ff fead 	bl	80004c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800076e:	2300      	movs	r3, #0
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			@ (mov r8, r8)
 8000778:	40022000 	.word	0x40022000

0800077c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000784:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <HAL_InitTick+0x5c>)
 8000786:	681c      	ldr	r4, [r3, #0]
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <HAL_InitTick+0x60>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	0019      	movs	r1, r3
 800078e:	23fa      	movs	r3, #250	@ 0xfa
 8000790:	0098      	lsls	r0, r3, #2
 8000792:	f7ff fcb9 	bl	8000108 <__udivsi3>
 8000796:	0003      	movs	r3, r0
 8000798:	0019      	movs	r1, r3
 800079a:	0020      	movs	r0, r4
 800079c:	f7ff fcb4 	bl	8000108 <__udivsi3>
 80007a0:	0003      	movs	r3, r0
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 f8e1 	bl	800096a <HAL_SYSTICK_Config>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007ac:	2301      	movs	r3, #1
 80007ae:	e00f      	b.n	80007d0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b03      	cmp	r3, #3
 80007b4:	d80b      	bhi.n	80007ce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b6:	6879      	ldr	r1, [r7, #4]
 80007b8:	2301      	movs	r3, #1
 80007ba:	425b      	negs	r3, r3
 80007bc:	2200      	movs	r2, #0
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 f8be 	bl	8000940 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <HAL_InitTick+0x64>)
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007ca:	2300      	movs	r3, #0
 80007cc:	e000      	b.n	80007d0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
}
 80007d0:	0018      	movs	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b003      	add	sp, #12
 80007d6:	bd90      	pop	{r4, r7, pc}
 80007d8:	20000000 	.word	0x20000000
 80007dc:	20000008 	.word	0x20000008
 80007e0:	20000004 	.word	0x20000004

080007e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e8:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <HAL_IncTick+0x1c>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	001a      	movs	r2, r3
 80007ee:	4b05      	ldr	r3, [pc, #20]	@ (8000804 <HAL_IncTick+0x20>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	18d2      	adds	r2, r2, r3
 80007f4:	4b03      	ldr	r3, [pc, #12]	@ (8000804 <HAL_IncTick+0x20>)
 80007f6:	601a      	str	r2, [r3, #0]
}
 80007f8:	46c0      	nop			@ (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	20000008 	.word	0x20000008
 8000804:	20000194 	.word	0x20000194

08000808 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  return uwTick;
 800080c:	4b02      	ldr	r3, [pc, #8]	@ (8000818 <HAL_GetTick+0x10>)
 800080e:	681b      	ldr	r3, [r3, #0]
}
 8000810:	0018      	movs	r0, r3
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	20000194 	.word	0x20000194

0800081c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	0002      	movs	r2, r0
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000830:	d828      	bhi.n	8000884 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000832:	4a2f      	ldr	r2, [pc, #188]	@ (80008f0 <__NVIC_SetPriority+0xd4>)
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b25b      	sxtb	r3, r3
 800083a:	089b      	lsrs	r3, r3, #2
 800083c:	33c0      	adds	r3, #192	@ 0xc0
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	589b      	ldr	r3, [r3, r2]
 8000842:	1dfa      	adds	r2, r7, #7
 8000844:	7812      	ldrb	r2, [r2, #0]
 8000846:	0011      	movs	r1, r2
 8000848:	2203      	movs	r2, #3
 800084a:	400a      	ands	r2, r1
 800084c:	00d2      	lsls	r2, r2, #3
 800084e:	21ff      	movs	r1, #255	@ 0xff
 8000850:	4091      	lsls	r1, r2
 8000852:	000a      	movs	r2, r1
 8000854:	43d2      	mvns	r2, r2
 8000856:	401a      	ands	r2, r3
 8000858:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	019b      	lsls	r3, r3, #6
 800085e:	22ff      	movs	r2, #255	@ 0xff
 8000860:	401a      	ands	r2, r3
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	0018      	movs	r0, r3
 8000868:	2303      	movs	r3, #3
 800086a:	4003      	ands	r3, r0
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000870:	481f      	ldr	r0, [pc, #124]	@ (80008f0 <__NVIC_SetPriority+0xd4>)
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b25b      	sxtb	r3, r3
 8000878:	089b      	lsrs	r3, r3, #2
 800087a:	430a      	orrs	r2, r1
 800087c:	33c0      	adds	r3, #192	@ 0xc0
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000882:	e031      	b.n	80008e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000884:	4a1b      	ldr	r2, [pc, #108]	@ (80008f4 <__NVIC_SetPriority+0xd8>)
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	0019      	movs	r1, r3
 800088c:	230f      	movs	r3, #15
 800088e:	400b      	ands	r3, r1
 8000890:	3b08      	subs	r3, #8
 8000892:	089b      	lsrs	r3, r3, #2
 8000894:	3306      	adds	r3, #6
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	18d3      	adds	r3, r2, r3
 800089a:	3304      	adds	r3, #4
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	1dfa      	adds	r2, r7, #7
 80008a0:	7812      	ldrb	r2, [r2, #0]
 80008a2:	0011      	movs	r1, r2
 80008a4:	2203      	movs	r2, #3
 80008a6:	400a      	ands	r2, r1
 80008a8:	00d2      	lsls	r2, r2, #3
 80008aa:	21ff      	movs	r1, #255	@ 0xff
 80008ac:	4091      	lsls	r1, r2
 80008ae:	000a      	movs	r2, r1
 80008b0:	43d2      	mvns	r2, r2
 80008b2:	401a      	ands	r2, r3
 80008b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	019b      	lsls	r3, r3, #6
 80008ba:	22ff      	movs	r2, #255	@ 0xff
 80008bc:	401a      	ands	r2, r3
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	0018      	movs	r0, r3
 80008c4:	2303      	movs	r3, #3
 80008c6:	4003      	ands	r3, r0
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008cc:	4809      	ldr	r0, [pc, #36]	@ (80008f4 <__NVIC_SetPriority+0xd8>)
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	001c      	movs	r4, r3
 80008d4:	230f      	movs	r3, #15
 80008d6:	4023      	ands	r3, r4
 80008d8:	3b08      	subs	r3, #8
 80008da:	089b      	lsrs	r3, r3, #2
 80008dc:	430a      	orrs	r2, r1
 80008de:	3306      	adds	r3, #6
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	18c3      	adds	r3, r0, r3
 80008e4:	3304      	adds	r3, #4
 80008e6:	601a      	str	r2, [r3, #0]
}
 80008e8:	46c0      	nop			@ (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b003      	add	sp, #12
 80008ee:	bd90      	pop	{r4, r7, pc}
 80008f0:	e000e100 	.word	0xe000e100
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	1e5a      	subs	r2, r3, #1
 8000904:	2380      	movs	r3, #128	@ 0x80
 8000906:	045b      	lsls	r3, r3, #17
 8000908:	429a      	cmp	r2, r3
 800090a:	d301      	bcc.n	8000910 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800090c:	2301      	movs	r3, #1
 800090e:	e010      	b.n	8000932 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000910:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <SysTick_Config+0x44>)
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	3a01      	subs	r2, #1
 8000916:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000918:	2301      	movs	r3, #1
 800091a:	425b      	negs	r3, r3
 800091c:	2103      	movs	r1, #3
 800091e:	0018      	movs	r0, r3
 8000920:	f7ff ff7c 	bl	800081c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000924:	4b05      	ldr	r3, [pc, #20]	@ (800093c <SysTick_Config+0x44>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092a:	4b04      	ldr	r3, [pc, #16]	@ (800093c <SysTick_Config+0x44>)
 800092c:	2207      	movs	r2, #7
 800092e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000930:	2300      	movs	r3, #0
}
 8000932:	0018      	movs	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	b002      	add	sp, #8
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			@ (mov r8, r8)
 800093c:	e000e010 	.word	0xe000e010

08000940 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	60b9      	str	r1, [r7, #8]
 8000948:	607a      	str	r2, [r7, #4]
 800094a:	210f      	movs	r1, #15
 800094c:	187b      	adds	r3, r7, r1
 800094e:	1c02      	adds	r2, r0, #0
 8000950:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	187b      	adds	r3, r7, r1
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b25b      	sxtb	r3, r3
 800095a:	0011      	movs	r1, r2
 800095c:	0018      	movs	r0, r3
 800095e:	f7ff ff5d 	bl	800081c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b004      	add	sp, #16
 8000968:	bd80      	pop	{r7, pc}

0800096a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	0018      	movs	r0, r3
 8000976:	f7ff ffbf 	bl	80008f8 <SysTick_Config>
 800097a:	0003      	movs	r3, r0
}
 800097c:	0018      	movs	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	b002      	add	sp, #8
 8000982:	bd80      	pop	{r7, pc}

08000984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000992:	e149      	b.n	8000c28 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2101      	movs	r1, #1
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	4091      	lsls	r1, r2
 800099e:	000a      	movs	r2, r1
 80009a0:	4013      	ands	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d100      	bne.n	80009ac <HAL_GPIO_Init+0x28>
 80009aa:	e13a      	b.n	8000c22 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	2203      	movs	r2, #3
 80009b2:	4013      	ands	r3, r2
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d005      	beq.n	80009c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	2203      	movs	r2, #3
 80009be:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d130      	bne.n	8000a26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	2203      	movs	r2, #3
 80009d0:	409a      	lsls	r2, r3
 80009d2:	0013      	movs	r3, r2
 80009d4:	43da      	mvns	r2, r3
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	4013      	ands	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	68da      	ldr	r2, [r3, #12]
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	409a      	lsls	r2, r3
 80009e6:	0013      	movs	r3, r2
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009fa:	2201      	movs	r2, #1
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	409a      	lsls	r2, r3
 8000a00:	0013      	movs	r3, r2
 8000a02:	43da      	mvns	r2, r3
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	4013      	ands	r3, r2
 8000a08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	091b      	lsrs	r3, r3, #4
 8000a10:	2201      	movs	r2, #1
 8000a12:	401a      	ands	r2, r3
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	409a      	lsls	r2, r3
 8000a18:	0013      	movs	r3, r2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	2203      	movs	r2, #3
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	d017      	beq.n	8000a62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	409a      	lsls	r2, r3
 8000a40:	0013      	movs	r3, r2
 8000a42:	43da      	mvns	r2, r3
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	4013      	ands	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	689a      	ldr	r2, [r3, #8]
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	409a      	lsls	r2, r3
 8000a54:	0013      	movs	r3, r2
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	2203      	movs	r2, #3
 8000a68:	4013      	ands	r3, r2
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d123      	bne.n	8000ab6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	08da      	lsrs	r2, r3, #3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	3208      	adds	r2, #8
 8000a76:	0092      	lsls	r2, r2, #2
 8000a78:	58d3      	ldr	r3, [r2, r3]
 8000a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	2207      	movs	r2, #7
 8000a80:	4013      	ands	r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	220f      	movs	r2, #15
 8000a86:	409a      	lsls	r2, r3
 8000a88:	0013      	movs	r3, r2
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	691a      	ldr	r2, [r3, #16]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	2107      	movs	r1, #7
 8000a9a:	400b      	ands	r3, r1
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	0013      	movs	r3, r2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	08da      	lsrs	r2, r3, #3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3208      	adds	r2, #8
 8000ab0:	0092      	lsls	r2, r2, #2
 8000ab2:	6939      	ldr	r1, [r7, #16]
 8000ab4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	409a      	lsls	r2, r3
 8000ac4:	0013      	movs	r3, r2
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	401a      	ands	r2, r3
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	409a      	lsls	r2, r3
 8000adc:	0013      	movs	r3, r2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	23c0      	movs	r3, #192	@ 0xc0
 8000af0:	029b      	lsls	r3, r3, #10
 8000af2:	4013      	ands	r3, r2
 8000af4:	d100      	bne.n	8000af8 <HAL_GPIO_Init+0x174>
 8000af6:	e094      	b.n	8000c22 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af8:	4b51      	ldr	r3, [pc, #324]	@ (8000c40 <HAL_GPIO_Init+0x2bc>)
 8000afa:	699a      	ldr	r2, [r3, #24]
 8000afc:	4b50      	ldr	r3, [pc, #320]	@ (8000c40 <HAL_GPIO_Init+0x2bc>)
 8000afe:	2101      	movs	r1, #1
 8000b00:	430a      	orrs	r2, r1
 8000b02:	619a      	str	r2, [r3, #24]
 8000b04:	4b4e      	ldr	r3, [pc, #312]	@ (8000c40 <HAL_GPIO_Init+0x2bc>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	2201      	movs	r2, #1
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b10:	4a4c      	ldr	r2, [pc, #304]	@ (8000c44 <HAL_GPIO_Init+0x2c0>)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	089b      	lsrs	r3, r3, #2
 8000b16:	3302      	adds	r3, #2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	589b      	ldr	r3, [r3, r2]
 8000b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	2203      	movs	r2, #3
 8000b22:	4013      	ands	r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	220f      	movs	r2, #15
 8000b28:	409a      	lsls	r2, r3
 8000b2a:	0013      	movs	r3, r2
 8000b2c:	43da      	mvns	r2, r3
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	2390      	movs	r3, #144	@ 0x90
 8000b38:	05db      	lsls	r3, r3, #23
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d00d      	beq.n	8000b5a <HAL_GPIO_Init+0x1d6>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a41      	ldr	r2, [pc, #260]	@ (8000c48 <HAL_GPIO_Init+0x2c4>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d007      	beq.n	8000b56 <HAL_GPIO_Init+0x1d2>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a40      	ldr	r2, [pc, #256]	@ (8000c4c <HAL_GPIO_Init+0x2c8>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d101      	bne.n	8000b52 <HAL_GPIO_Init+0x1ce>
 8000b4e:	2302      	movs	r3, #2
 8000b50:	e004      	b.n	8000b5c <HAL_GPIO_Init+0x1d8>
 8000b52:	2305      	movs	r3, #5
 8000b54:	e002      	b.n	8000b5c <HAL_GPIO_Init+0x1d8>
 8000b56:	2301      	movs	r3, #1
 8000b58:	e000      	b.n	8000b5c <HAL_GPIO_Init+0x1d8>
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	2103      	movs	r1, #3
 8000b60:	400a      	ands	r2, r1
 8000b62:	0092      	lsls	r2, r2, #2
 8000b64:	4093      	lsls	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b6c:	4935      	ldr	r1, [pc, #212]	@ (8000c44 <HAL_GPIO_Init+0x2c0>)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	089b      	lsrs	r3, r3, #2
 8000b72:	3302      	adds	r3, #2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b7a:	4b35      	ldr	r3, [pc, #212]	@ (8000c50 <HAL_GPIO_Init+0x2cc>)
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	43da      	mvns	r2, r3
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	2380      	movs	r3, #128	@ 0x80
 8000b90:	035b      	lsls	r3, r3, #13
 8000b92:	4013      	ands	r3, r2
 8000b94:	d003      	beq.n	8000b9e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b9e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c50 <HAL_GPIO_Init+0x2cc>)
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c50 <HAL_GPIO_Init+0x2cc>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	43da      	mvns	r2, r3
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	2380      	movs	r3, #128	@ 0x80
 8000bba:	039b      	lsls	r3, r3, #14
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	d003      	beq.n	8000bc8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bc8:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <HAL_GPIO_Init+0x2cc>)
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000bce:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <HAL_GPIO_Init+0x2cc>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685a      	ldr	r2, [r3, #4]
 8000be2:	2380      	movs	r3, #128	@ 0x80
 8000be4:	029b      	lsls	r3, r3, #10
 8000be6:	4013      	ands	r3, r2
 8000be8:	d003      	beq.n	8000bf2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <HAL_GPIO_Init+0x2cc>)
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000bf8:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <HAL_GPIO_Init+0x2cc>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	43da      	mvns	r2, r3
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	4013      	ands	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	2380      	movs	r3, #128	@ 0x80
 8000c0e:	025b      	lsls	r3, r3, #9
 8000c10:	4013      	ands	r3, r2
 8000c12:	d003      	beq.n	8000c1c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <HAL_GPIO_Init+0x2cc>)
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3301      	adds	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	40da      	lsrs	r2, r3
 8000c30:	1e13      	subs	r3, r2, #0
 8000c32:	d000      	beq.n	8000c36 <HAL_GPIO_Init+0x2b2>
 8000c34:	e6ae      	b.n	8000994 <HAL_GPIO_Init+0x10>
  } 
}
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b006      	add	sp, #24
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40010000 	.word	0x40010000
 8000c48:	48000400 	.word	0x48000400
 8000c4c:	48000800 	.word	0x48000800
 8000c50:	40010400 	.word	0x40010400

08000c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	0008      	movs	r0, r1
 8000c5e:	0011      	movs	r1, r2
 8000c60:	1cbb      	adds	r3, r7, #2
 8000c62:	1c02      	adds	r2, r0, #0
 8000c64:	801a      	strh	r2, [r3, #0]
 8000c66:	1c7b      	adds	r3, r7, #1
 8000c68:	1c0a      	adds	r2, r1, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c6c:	1c7b      	adds	r3, r7, #1
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d004      	beq.n	8000c7e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c74:	1cbb      	adds	r3, r7, #2
 8000c76:	881a      	ldrh	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c7c:	e003      	b.n	8000c86 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c7e:	1cbb      	adds	r3, r7, #2
 8000c80:	881a      	ldrh	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b002      	add	sp, #8
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d102      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	f000 fb76 	bl	8001390 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4013      	ands	r3, r2
 8000cac:	d100      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x20>
 8000cae:	e08e      	b.n	8000dce <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cb0:	4bc5      	ldr	r3, [pc, #788]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	220c      	movs	r2, #12
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	2b04      	cmp	r3, #4
 8000cba:	d00e      	beq.n	8000cda <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cbc:	4bc2      	ldr	r3, [pc, #776]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	220c      	movs	r2, #12
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	2b08      	cmp	r3, #8
 8000cc6:	d117      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x68>
 8000cc8:	4bbf      	ldr	r3, [pc, #764]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	23c0      	movs	r3, #192	@ 0xc0
 8000cce:	025b      	lsls	r3, r3, #9
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	2380      	movs	r3, #128	@ 0x80
 8000cd4:	025b      	lsls	r3, r3, #9
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d10e      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cda:	4bbb      	ldr	r3, [pc, #748]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	2380      	movs	r3, #128	@ 0x80
 8000ce0:	029b      	lsls	r3, r3, #10
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	d100      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x58>
 8000ce6:	e071      	b.n	8000dcc <HAL_RCC_OscConfig+0x13c>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d000      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x62>
 8000cf0:	e06c      	b.n	8000dcc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	f000 fb4c 	bl	8001390 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d107      	bne.n	8000d10 <HAL_RCC_OscConfig+0x80>
 8000d00:	4bb1      	ldr	r3, [pc, #708]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4bb0      	ldr	r3, [pc, #704]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d06:	2180      	movs	r1, #128	@ 0x80
 8000d08:	0249      	lsls	r1, r1, #9
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	e02f      	b.n	8000d70 <HAL_RCC_OscConfig+0xe0>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d10c      	bne.n	8000d32 <HAL_RCC_OscConfig+0xa2>
 8000d18:	4bab      	ldr	r3, [pc, #684]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4baa      	ldr	r3, [pc, #680]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d1e:	49ab      	ldr	r1, [pc, #684]	@ (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000d20:	400a      	ands	r2, r1
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	4ba8      	ldr	r3, [pc, #672]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4ba7      	ldr	r3, [pc, #668]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d2a:	49a9      	ldr	r1, [pc, #676]	@ (8000fd0 <HAL_RCC_OscConfig+0x340>)
 8000d2c:	400a      	ands	r2, r1
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	e01e      	b.n	8000d70 <HAL_RCC_OscConfig+0xe0>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b05      	cmp	r3, #5
 8000d38:	d10e      	bne.n	8000d58 <HAL_RCC_OscConfig+0xc8>
 8000d3a:	4ba3      	ldr	r3, [pc, #652]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4ba2      	ldr	r3, [pc, #648]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d40:	2180      	movs	r1, #128	@ 0x80
 8000d42:	02c9      	lsls	r1, r1, #11
 8000d44:	430a      	orrs	r2, r1
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	4b9f      	ldr	r3, [pc, #636]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b9e      	ldr	r3, [pc, #632]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d4e:	2180      	movs	r1, #128	@ 0x80
 8000d50:	0249      	lsls	r1, r1, #9
 8000d52:	430a      	orrs	r2, r1
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	e00b      	b.n	8000d70 <HAL_RCC_OscConfig+0xe0>
 8000d58:	4b9b      	ldr	r3, [pc, #620]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b9a      	ldr	r3, [pc, #616]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d5e:	499b      	ldr	r1, [pc, #620]	@ (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000d60:	400a      	ands	r2, r1
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	4b98      	ldr	r3, [pc, #608]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b97      	ldr	r3, [pc, #604]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d6a:	4999      	ldr	r1, [pc, #612]	@ (8000fd0 <HAL_RCC_OscConfig+0x340>)
 8000d6c:	400a      	ands	r2, r1
 8000d6e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d014      	beq.n	8000da2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d78:	f7ff fd46 	bl	8000808 <HAL_GetTick>
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d80:	e008      	b.n	8000d94 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d82:	f7ff fd41 	bl	8000808 <HAL_GetTick>
 8000d86:	0002      	movs	r2, r0
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	2b64      	cmp	r3, #100	@ 0x64
 8000d8e:	d901      	bls.n	8000d94 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000d90:	2303      	movs	r3, #3
 8000d92:	e2fd      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d94:	4b8c      	ldr	r3, [pc, #560]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	2380      	movs	r3, #128	@ 0x80
 8000d9a:	029b      	lsls	r3, r3, #10
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	d0f0      	beq.n	8000d82 <HAL_RCC_OscConfig+0xf2>
 8000da0:	e015      	b.n	8000dce <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da2:	f7ff fd31 	bl	8000808 <HAL_GetTick>
 8000da6:	0003      	movs	r3, r0
 8000da8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dac:	f7ff fd2c 	bl	8000808 <HAL_GetTick>
 8000db0:	0002      	movs	r2, r0
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b64      	cmp	r3, #100	@ 0x64
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e2e8      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dbe:	4b82      	ldr	r3, [pc, #520]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	2380      	movs	r3, #128	@ 0x80
 8000dc4:	029b      	lsls	r3, r3, #10
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	d1f0      	bne.n	8000dac <HAL_RCC_OscConfig+0x11c>
 8000dca:	e000      	b.n	8000dce <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dcc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	d100      	bne.n	8000dda <HAL_RCC_OscConfig+0x14a>
 8000dd8:	e06c      	b.n	8000eb4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000dda:	4b7b      	ldr	r3, [pc, #492]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	220c      	movs	r2, #12
 8000de0:	4013      	ands	r3, r2
 8000de2:	d00e      	beq.n	8000e02 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000de4:	4b78      	ldr	r3, [pc, #480]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	220c      	movs	r2, #12
 8000dea:	4013      	ands	r3, r2
 8000dec:	2b08      	cmp	r3, #8
 8000dee:	d11f      	bne.n	8000e30 <HAL_RCC_OscConfig+0x1a0>
 8000df0:	4b75      	ldr	r3, [pc, #468]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	23c0      	movs	r3, #192	@ 0xc0
 8000df6:	025b      	lsls	r3, r3, #9
 8000df8:	401a      	ands	r2, r3
 8000dfa:	2380      	movs	r3, #128	@ 0x80
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d116      	bne.n	8000e30 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e02:	4b71      	ldr	r3, [pc, #452]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2202      	movs	r2, #2
 8000e08:	4013      	ands	r3, r2
 8000e0a:	d005      	beq.n	8000e18 <HAL_RCC_OscConfig+0x188>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d001      	beq.n	8000e18 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e2bb      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e18:	4b6b      	ldr	r3, [pc, #428]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	22f8      	movs	r2, #248	@ 0xf8
 8000e1e:	4393      	bics	r3, r2
 8000e20:	0019      	movs	r1, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	691b      	ldr	r3, [r3, #16]
 8000e26:	00da      	lsls	r2, r3, #3
 8000e28:	4b67      	ldr	r3, [pc, #412]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e2e:	e041      	b.n	8000eb4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d024      	beq.n	8000e82 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e38:	4b63      	ldr	r3, [pc, #396]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b62      	ldr	r3, [pc, #392]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000e3e:	2101      	movs	r1, #1
 8000e40:	430a      	orrs	r2, r1
 8000e42:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e44:	f7ff fce0 	bl	8000808 <HAL_GetTick>
 8000e48:	0003      	movs	r3, r0
 8000e4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e4c:	e008      	b.n	8000e60 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e4e:	f7ff fcdb 	bl	8000808 <HAL_GetTick>
 8000e52:	0002      	movs	r2, r0
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d901      	bls.n	8000e60 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e297      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e60:	4b59      	ldr	r3, [pc, #356]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2202      	movs	r2, #2
 8000e66:	4013      	ands	r3, r2
 8000e68:	d0f1      	beq.n	8000e4e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e6a:	4b57      	ldr	r3, [pc, #348]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	22f8      	movs	r2, #248	@ 0xf8
 8000e70:	4393      	bics	r3, r2
 8000e72:	0019      	movs	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	00da      	lsls	r2, r3, #3
 8000e7a:	4b53      	ldr	r3, [pc, #332]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e018      	b.n	8000eb4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e82:	4b51      	ldr	r3, [pc, #324]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4b50      	ldr	r3, [pc, #320]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000e88:	2101      	movs	r1, #1
 8000e8a:	438a      	bics	r2, r1
 8000e8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8e:	f7ff fcbb 	bl	8000808 <HAL_GetTick>
 8000e92:	0003      	movs	r3, r0
 8000e94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e98:	f7ff fcb6 	bl	8000808 <HAL_GetTick>
 8000e9c:	0002      	movs	r2, r0
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e272      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eaa:	4b47      	ldr	r3, [pc, #284]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2202      	movs	r2, #2
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	d1f1      	bne.n	8000e98 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2208      	movs	r2, #8
 8000eba:	4013      	ands	r3, r2
 8000ebc:	d036      	beq.n	8000f2c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d019      	beq.n	8000efa <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ec6:	4b40      	ldr	r3, [pc, #256]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000ec8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000eca:	4b3f      	ldr	r3, [pc, #252]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000ecc:	2101      	movs	r1, #1
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed2:	f7ff fc99 	bl	8000808 <HAL_GetTick>
 8000ed6:	0003      	movs	r3, r0
 8000ed8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000edc:	f7ff fc94 	bl	8000808 <HAL_GetTick>
 8000ee0:	0002      	movs	r2, r0
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e250      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eee:	4b36      	ldr	r3, [pc, #216]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d0f1      	beq.n	8000edc <HAL_RCC_OscConfig+0x24c>
 8000ef8:	e018      	b.n	8000f2c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000efa:	4b33      	ldr	r3, [pc, #204]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000efc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000efe:	4b32      	ldr	r3, [pc, #200]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000f00:	2101      	movs	r1, #1
 8000f02:	438a      	bics	r2, r1
 8000f04:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f06:	f7ff fc7f 	bl	8000808 <HAL_GetTick>
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f10:	f7ff fc7a 	bl	8000808 <HAL_GetTick>
 8000f14:	0002      	movs	r2, r0
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e236      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f22:	4b29      	ldr	r3, [pc, #164]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f26:	2202      	movs	r2, #2
 8000f28:	4013      	ands	r3, r2
 8000f2a:	d1f1      	bne.n	8000f10 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2204      	movs	r2, #4
 8000f32:	4013      	ands	r3, r2
 8000f34:	d100      	bne.n	8000f38 <HAL_RCC_OscConfig+0x2a8>
 8000f36:	e0b5      	b.n	80010a4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f38:	201f      	movs	r0, #31
 8000f3a:	183b      	adds	r3, r7, r0
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f40:	4b21      	ldr	r3, [pc, #132]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000f42:	69da      	ldr	r2, [r3, #28]
 8000f44:	2380      	movs	r3, #128	@ 0x80
 8000f46:	055b      	lsls	r3, r3, #21
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d110      	bne.n	8000f6e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000f4e:	69da      	ldr	r2, [r3, #28]
 8000f50:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000f52:	2180      	movs	r1, #128	@ 0x80
 8000f54:	0549      	lsls	r1, r1, #21
 8000f56:	430a      	orrs	r2, r1
 8000f58:	61da      	str	r2, [r3, #28]
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000f5c:	69da      	ldr	r2, [r3, #28]
 8000f5e:	2380      	movs	r3, #128	@ 0x80
 8000f60:	055b      	lsls	r3, r3, #21
 8000f62:	4013      	ands	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f68:	183b      	adds	r3, r7, r0
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f6e:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <HAL_RCC_OscConfig+0x344>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	2380      	movs	r3, #128	@ 0x80
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4013      	ands	r3, r2
 8000f78:	d11a      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f7a:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <HAL_RCC_OscConfig+0x344>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <HAL_RCC_OscConfig+0x344>)
 8000f80:	2180      	movs	r1, #128	@ 0x80
 8000f82:	0049      	lsls	r1, r1, #1
 8000f84:	430a      	orrs	r2, r1
 8000f86:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f88:	f7ff fc3e 	bl	8000808 <HAL_GetTick>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f90:	e008      	b.n	8000fa4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f92:	f7ff fc39 	bl	8000808 <HAL_GetTick>
 8000f96:	0002      	movs	r2, r0
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b64      	cmp	r3, #100	@ 0x64
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e1f5      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <HAL_RCC_OscConfig+0x344>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4013      	ands	r3, r2
 8000fae:	d0f0      	beq.n	8000f92 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d10f      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x348>
 8000fb8:	4b03      	ldr	r3, [pc, #12]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000fba:	6a1a      	ldr	r2, [r3, #32]
 8000fbc:	4b02      	ldr	r3, [pc, #8]	@ (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	621a      	str	r2, [r3, #32]
 8000fc4:	e036      	b.n	8001034 <HAL_RCC_OscConfig+0x3a4>
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	fffeffff 	.word	0xfffeffff
 8000fd0:	fffbffff 	.word	0xfffbffff
 8000fd4:	40007000 	.word	0x40007000
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10c      	bne.n	8000ffa <HAL_RCC_OscConfig+0x36a>
 8000fe0:	4bca      	ldr	r3, [pc, #808]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8000fe2:	6a1a      	ldr	r2, [r3, #32]
 8000fe4:	4bc9      	ldr	r3, [pc, #804]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	438a      	bics	r2, r1
 8000fea:	621a      	str	r2, [r3, #32]
 8000fec:	4bc7      	ldr	r3, [pc, #796]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8000fee:	6a1a      	ldr	r2, [r3, #32]
 8000ff0:	4bc6      	ldr	r3, [pc, #792]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	438a      	bics	r2, r1
 8000ff6:	621a      	str	r2, [r3, #32]
 8000ff8:	e01c      	b.n	8001034 <HAL_RCC_OscConfig+0x3a4>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	2b05      	cmp	r3, #5
 8001000:	d10c      	bne.n	800101c <HAL_RCC_OscConfig+0x38c>
 8001002:	4bc2      	ldr	r3, [pc, #776]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8001004:	6a1a      	ldr	r2, [r3, #32]
 8001006:	4bc1      	ldr	r3, [pc, #772]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8001008:	2104      	movs	r1, #4
 800100a:	430a      	orrs	r2, r1
 800100c:	621a      	str	r2, [r3, #32]
 800100e:	4bbf      	ldr	r3, [pc, #764]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8001010:	6a1a      	ldr	r2, [r3, #32]
 8001012:	4bbe      	ldr	r3, [pc, #760]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8001014:	2101      	movs	r1, #1
 8001016:	430a      	orrs	r2, r1
 8001018:	621a      	str	r2, [r3, #32]
 800101a:	e00b      	b.n	8001034 <HAL_RCC_OscConfig+0x3a4>
 800101c:	4bbb      	ldr	r3, [pc, #748]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 800101e:	6a1a      	ldr	r2, [r3, #32]
 8001020:	4bba      	ldr	r3, [pc, #744]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8001022:	2101      	movs	r1, #1
 8001024:	438a      	bics	r2, r1
 8001026:	621a      	str	r2, [r3, #32]
 8001028:	4bb8      	ldr	r3, [pc, #736]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 800102a:	6a1a      	ldr	r2, [r3, #32]
 800102c:	4bb7      	ldr	r3, [pc, #732]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 800102e:	2104      	movs	r1, #4
 8001030:	438a      	bics	r2, r1
 8001032:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d014      	beq.n	8001066 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800103c:	f7ff fbe4 	bl	8000808 <HAL_GetTick>
 8001040:	0003      	movs	r3, r0
 8001042:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001044:	e009      	b.n	800105a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001046:	f7ff fbdf 	bl	8000808 <HAL_GetTick>
 800104a:	0002      	movs	r2, r0
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	4aaf      	ldr	r2, [pc, #700]	@ (8001310 <HAL_RCC_OscConfig+0x680>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e19a      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800105a:	4bac      	ldr	r3, [pc, #688]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	2202      	movs	r2, #2
 8001060:	4013      	ands	r3, r2
 8001062:	d0f0      	beq.n	8001046 <HAL_RCC_OscConfig+0x3b6>
 8001064:	e013      	b.n	800108e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001066:	f7ff fbcf 	bl	8000808 <HAL_GetTick>
 800106a:	0003      	movs	r3, r0
 800106c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800106e:	e009      	b.n	8001084 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001070:	f7ff fbca 	bl	8000808 <HAL_GetTick>
 8001074:	0002      	movs	r2, r0
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	4aa5      	ldr	r2, [pc, #660]	@ (8001310 <HAL_RCC_OscConfig+0x680>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e185      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001084:	4ba1      	ldr	r3, [pc, #644]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	2202      	movs	r2, #2
 800108a:	4013      	ands	r3, r2
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800108e:	231f      	movs	r3, #31
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d105      	bne.n	80010a4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001098:	4b9c      	ldr	r3, [pc, #624]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 800109a:	69da      	ldr	r2, [r3, #28]
 800109c:	4b9b      	ldr	r3, [pc, #620]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 800109e:	499d      	ldr	r1, [pc, #628]	@ (8001314 <HAL_RCC_OscConfig+0x684>)
 80010a0:	400a      	ands	r2, r1
 80010a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2210      	movs	r2, #16
 80010aa:	4013      	ands	r3, r2
 80010ac:	d063      	beq.n	8001176 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d12a      	bne.n	800110c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010b6:	4b95      	ldr	r3, [pc, #596]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 80010b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010ba:	4b94      	ldr	r3, [pc, #592]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 80010bc:	2104      	movs	r1, #4
 80010be:	430a      	orrs	r2, r1
 80010c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80010c2:	4b92      	ldr	r3, [pc, #584]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 80010c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010c6:	4b91      	ldr	r3, [pc, #580]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 80010c8:	2101      	movs	r1, #1
 80010ca:	430a      	orrs	r2, r1
 80010cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ce:	f7ff fb9b 	bl	8000808 <HAL_GetTick>
 80010d2:	0003      	movs	r3, r0
 80010d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010d8:	f7ff fb96 	bl	8000808 <HAL_GetTick>
 80010dc:	0002      	movs	r2, r0
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e152      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010ea:	4b88      	ldr	r3, [pc, #544]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 80010ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010ee:	2202      	movs	r2, #2
 80010f0:	4013      	ands	r3, r2
 80010f2:	d0f1      	beq.n	80010d8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010f4:	4b85      	ldr	r3, [pc, #532]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 80010f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010f8:	22f8      	movs	r2, #248	@ 0xf8
 80010fa:	4393      	bics	r3, r2
 80010fc:	0019      	movs	r1, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	00da      	lsls	r2, r3, #3
 8001104:	4b81      	ldr	r3, [pc, #516]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8001106:	430a      	orrs	r2, r1
 8001108:	635a      	str	r2, [r3, #52]	@ 0x34
 800110a:	e034      	b.n	8001176 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	3305      	adds	r3, #5
 8001112:	d111      	bne.n	8001138 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001114:	4b7d      	ldr	r3, [pc, #500]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8001116:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001118:	4b7c      	ldr	r3, [pc, #496]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 800111a:	2104      	movs	r1, #4
 800111c:	438a      	bics	r2, r1
 800111e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001120:	4b7a      	ldr	r3, [pc, #488]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8001122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001124:	22f8      	movs	r2, #248	@ 0xf8
 8001126:	4393      	bics	r3, r2
 8001128:	0019      	movs	r1, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	00da      	lsls	r2, r3, #3
 8001130:	4b76      	ldr	r3, [pc, #472]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8001132:	430a      	orrs	r2, r1
 8001134:	635a      	str	r2, [r3, #52]	@ 0x34
 8001136:	e01e      	b.n	8001176 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001138:	4b74      	ldr	r3, [pc, #464]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 800113a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800113c:	4b73      	ldr	r3, [pc, #460]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 800113e:	2104      	movs	r1, #4
 8001140:	430a      	orrs	r2, r1
 8001142:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001144:	4b71      	ldr	r3, [pc, #452]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8001146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001148:	4b70      	ldr	r3, [pc, #448]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 800114a:	2101      	movs	r1, #1
 800114c:	438a      	bics	r2, r1
 800114e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001150:	f7ff fb5a 	bl	8000808 <HAL_GetTick>
 8001154:	0003      	movs	r3, r0
 8001156:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800115a:	f7ff fb55 	bl	8000808 <HAL_GetTick>
 800115e:	0002      	movs	r2, r0
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e111      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800116c:	4b67      	ldr	r3, [pc, #412]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 800116e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001170:	2202      	movs	r2, #2
 8001172:	4013      	ands	r3, r2
 8001174:	d1f1      	bne.n	800115a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2220      	movs	r2, #32
 800117c:	4013      	ands	r3, r2
 800117e:	d05c      	beq.n	800123a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001180:	4b62      	ldr	r3, [pc, #392]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	220c      	movs	r2, #12
 8001186:	4013      	ands	r3, r2
 8001188:	2b0c      	cmp	r3, #12
 800118a:	d00e      	beq.n	80011aa <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800118c:	4b5f      	ldr	r3, [pc, #380]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	220c      	movs	r2, #12
 8001192:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001194:	2b08      	cmp	r3, #8
 8001196:	d114      	bne.n	80011c2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001198:	4b5c      	ldr	r3, [pc, #368]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	23c0      	movs	r3, #192	@ 0xc0
 800119e:	025b      	lsls	r3, r3, #9
 80011a0:	401a      	ands	r2, r3
 80011a2:	23c0      	movs	r3, #192	@ 0xc0
 80011a4:	025b      	lsls	r3, r3, #9
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d10b      	bne.n	80011c2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80011aa:	4b58      	ldr	r3, [pc, #352]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 80011ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011ae:	2380      	movs	r3, #128	@ 0x80
 80011b0:	029b      	lsls	r3, r3, #10
 80011b2:	4013      	ands	r3, r2
 80011b4:	d040      	beq.n	8001238 <HAL_RCC_OscConfig+0x5a8>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d03c      	beq.n	8001238 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e0e6      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d01b      	beq.n	8001202 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80011ca:	4b50      	ldr	r3, [pc, #320]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 80011cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011ce:	4b4f      	ldr	r3, [pc, #316]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 80011d0:	2180      	movs	r1, #128	@ 0x80
 80011d2:	0249      	lsls	r1, r1, #9
 80011d4:	430a      	orrs	r2, r1
 80011d6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fb16 	bl	8000808 <HAL_GetTick>
 80011dc:	0003      	movs	r3, r0
 80011de:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011e2:	f7ff fb11 	bl	8000808 <HAL_GetTick>
 80011e6:	0002      	movs	r2, r0
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e0cd      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80011f4:	4b45      	ldr	r3, [pc, #276]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 80011f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011f8:	2380      	movs	r3, #128	@ 0x80
 80011fa:	029b      	lsls	r3, r3, #10
 80011fc:	4013      	ands	r3, r2
 80011fe:	d0f0      	beq.n	80011e2 <HAL_RCC_OscConfig+0x552>
 8001200:	e01b      	b.n	800123a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001202:	4b42      	ldr	r3, [pc, #264]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8001204:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001206:	4b41      	ldr	r3, [pc, #260]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8001208:	4943      	ldr	r1, [pc, #268]	@ (8001318 <HAL_RCC_OscConfig+0x688>)
 800120a:	400a      	ands	r2, r1
 800120c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120e:	f7ff fafb 	bl	8000808 <HAL_GetTick>
 8001212:	0003      	movs	r3, r0
 8001214:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001218:	f7ff faf6 	bl	8000808 <HAL_GetTick>
 800121c:	0002      	movs	r2, r0
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e0b2      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800122a:	4b38      	ldr	r3, [pc, #224]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 800122c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800122e:	2380      	movs	r3, #128	@ 0x80
 8001230:	029b      	lsls	r3, r3, #10
 8001232:	4013      	ands	r3, r2
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0x588>
 8001236:	e000      	b.n	800123a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001238:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123e:	2b00      	cmp	r3, #0
 8001240:	d100      	bne.n	8001244 <HAL_RCC_OscConfig+0x5b4>
 8001242:	e0a4      	b.n	800138e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001244:	4b31      	ldr	r3, [pc, #196]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	220c      	movs	r2, #12
 800124a:	4013      	ands	r3, r2
 800124c:	2b08      	cmp	r3, #8
 800124e:	d100      	bne.n	8001252 <HAL_RCC_OscConfig+0x5c2>
 8001250:	e078      	b.n	8001344 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001256:	2b02      	cmp	r3, #2
 8001258:	d14c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800125a:	4b2c      	ldr	r3, [pc, #176]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4b2b      	ldr	r3, [pc, #172]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8001260:	492e      	ldr	r1, [pc, #184]	@ (800131c <HAL_RCC_OscConfig+0x68c>)
 8001262:	400a      	ands	r2, r1
 8001264:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001266:	f7ff facf 	bl	8000808 <HAL_GetTick>
 800126a:	0003      	movs	r3, r0
 800126c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001270:	f7ff faca 	bl	8000808 <HAL_GetTick>
 8001274:	0002      	movs	r2, r0
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e086      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001282:	4b22      	ldr	r3, [pc, #136]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	2380      	movs	r3, #128	@ 0x80
 8001288:	049b      	lsls	r3, r3, #18
 800128a:	4013      	ands	r3, r2
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800128e:	4b1f      	ldr	r3, [pc, #124]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 8001290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001292:	220f      	movs	r2, #15
 8001294:	4393      	bics	r3, r2
 8001296:	0019      	movs	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800129c:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 800129e:	430a      	orrs	r2, r1
 80012a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012a2:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001320 <HAL_RCC_OscConfig+0x690>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	0019      	movs	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b4:	431a      	orrs	r2, r3
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 80012b8:	430a      	orrs	r2, r1
 80012ba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012bc:	4b13      	ldr	r3, [pc, #76]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 80012c2:	2180      	movs	r1, #128	@ 0x80
 80012c4:	0449      	lsls	r1, r1, #17
 80012c6:	430a      	orrs	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ca:	f7ff fa9d 	bl	8000808 <HAL_GetTick>
 80012ce:	0003      	movs	r3, r0
 80012d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d4:	f7ff fa98 	bl	8000808 <HAL_GetTick>
 80012d8:	0002      	movs	r2, r0
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e054      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	2380      	movs	r3, #128	@ 0x80
 80012ec:	049b      	lsls	r3, r3, #18
 80012ee:	4013      	ands	r3, r2
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0x644>
 80012f2:	e04c      	b.n	800138e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f4:	4b05      	ldr	r3, [pc, #20]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b04      	ldr	r3, [pc, #16]	@ (800130c <HAL_RCC_OscConfig+0x67c>)
 80012fa:	4908      	ldr	r1, [pc, #32]	@ (800131c <HAL_RCC_OscConfig+0x68c>)
 80012fc:	400a      	ands	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fa82 	bl	8000808 <HAL_GetTick>
 8001304:	0003      	movs	r3, r0
 8001306:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001308:	e015      	b.n	8001336 <HAL_RCC_OscConfig+0x6a6>
 800130a:	46c0      	nop			@ (mov r8, r8)
 800130c:	40021000 	.word	0x40021000
 8001310:	00001388 	.word	0x00001388
 8001314:	efffffff 	.word	0xefffffff
 8001318:	fffeffff 	.word	0xfffeffff
 800131c:	feffffff 	.word	0xfeffffff
 8001320:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff fa70 	bl	8000808 <HAL_GetTick>
 8001328:	0002      	movs	r2, r0
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e02c      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001336:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <HAL_RCC_OscConfig+0x708>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	2380      	movs	r3, #128	@ 0x80
 800133c:	049b      	lsls	r3, r3, #18
 800133e:	4013      	ands	r3, r2
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x694>
 8001342:	e024      	b.n	800138e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e01f      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001350:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <HAL_RCC_OscConfig+0x708>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <HAL_RCC_OscConfig+0x708>)
 8001358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800135a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	23c0      	movs	r3, #192	@ 0xc0
 8001360:	025b      	lsls	r3, r3, #9
 8001362:	401a      	ands	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001368:	429a      	cmp	r2, r3
 800136a:	d10e      	bne.n	800138a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	220f      	movs	r2, #15
 8001370:	401a      	ands	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001376:	429a      	cmp	r2, r3
 8001378:	d107      	bne.n	800138a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	23f0      	movs	r3, #240	@ 0xf0
 800137e:	039b      	lsls	r3, r3, #14
 8001380:	401a      	ands	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d001      	beq.n	800138e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	0018      	movs	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	b008      	add	sp, #32
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0bf      	b.n	8001530 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013b0:	4b61      	ldr	r3, [pc, #388]	@ (8001538 <HAL_RCC_ClockConfig+0x19c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	4013      	ands	r3, r2
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d911      	bls.n	80013e2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013be:	4b5e      	ldr	r3, [pc, #376]	@ (8001538 <HAL_RCC_ClockConfig+0x19c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2201      	movs	r2, #1
 80013c4:	4393      	bics	r3, r2
 80013c6:	0019      	movs	r1, r3
 80013c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001538 <HAL_RCC_ClockConfig+0x19c>)
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d0:	4b59      	ldr	r3, [pc, #356]	@ (8001538 <HAL_RCC_ClockConfig+0x19c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2201      	movs	r2, #1
 80013d6:	4013      	ands	r3, r2
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e0a6      	b.n	8001530 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2202      	movs	r2, #2
 80013e8:	4013      	ands	r3, r2
 80013ea:	d015      	beq.n	8001418 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2204      	movs	r2, #4
 80013f2:	4013      	ands	r3, r2
 80013f4:	d006      	beq.n	8001404 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013f6:	4b51      	ldr	r3, [pc, #324]	@ (800153c <HAL_RCC_ClockConfig+0x1a0>)
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4b50      	ldr	r3, [pc, #320]	@ (800153c <HAL_RCC_ClockConfig+0x1a0>)
 80013fc:	21e0      	movs	r1, #224	@ 0xe0
 80013fe:	00c9      	lsls	r1, r1, #3
 8001400:	430a      	orrs	r2, r1
 8001402:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001404:	4b4d      	ldr	r3, [pc, #308]	@ (800153c <HAL_RCC_ClockConfig+0x1a0>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	22f0      	movs	r2, #240	@ 0xf0
 800140a:	4393      	bics	r3, r2
 800140c:	0019      	movs	r1, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	4b4a      	ldr	r3, [pc, #296]	@ (800153c <HAL_RCC_ClockConfig+0x1a0>)
 8001414:	430a      	orrs	r2, r1
 8001416:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2201      	movs	r2, #1
 800141e:	4013      	ands	r3, r2
 8001420:	d04c      	beq.n	80014bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d107      	bne.n	800143a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	4b44      	ldr	r3, [pc, #272]	@ (800153c <HAL_RCC_ClockConfig+0x1a0>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	2380      	movs	r3, #128	@ 0x80
 8001430:	029b      	lsls	r3, r3, #10
 8001432:	4013      	ands	r3, r2
 8001434:	d120      	bne.n	8001478 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e07a      	b.n	8001530 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d107      	bne.n	8001452 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001442:	4b3e      	ldr	r3, [pc, #248]	@ (800153c <HAL_RCC_ClockConfig+0x1a0>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	2380      	movs	r3, #128	@ 0x80
 8001448:	049b      	lsls	r3, r3, #18
 800144a:	4013      	ands	r3, r2
 800144c:	d114      	bne.n	8001478 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e06e      	b.n	8001530 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b03      	cmp	r3, #3
 8001458:	d107      	bne.n	800146a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800145a:	4b38      	ldr	r3, [pc, #224]	@ (800153c <HAL_RCC_ClockConfig+0x1a0>)
 800145c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800145e:	2380      	movs	r3, #128	@ 0x80
 8001460:	029b      	lsls	r3, r3, #10
 8001462:	4013      	ands	r3, r2
 8001464:	d108      	bne.n	8001478 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e062      	b.n	8001530 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146a:	4b34      	ldr	r3, [pc, #208]	@ (800153c <HAL_RCC_ClockConfig+0x1a0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2202      	movs	r2, #2
 8001470:	4013      	ands	r3, r2
 8001472:	d101      	bne.n	8001478 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e05b      	b.n	8001530 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001478:	4b30      	ldr	r3, [pc, #192]	@ (800153c <HAL_RCC_ClockConfig+0x1a0>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2203      	movs	r2, #3
 800147e:	4393      	bics	r3, r2
 8001480:	0019      	movs	r1, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	4b2d      	ldr	r3, [pc, #180]	@ (800153c <HAL_RCC_ClockConfig+0x1a0>)
 8001488:	430a      	orrs	r2, r1
 800148a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800148c:	f7ff f9bc 	bl	8000808 <HAL_GetTick>
 8001490:	0003      	movs	r3, r0
 8001492:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001494:	e009      	b.n	80014aa <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001496:	f7ff f9b7 	bl	8000808 <HAL_GetTick>
 800149a:	0002      	movs	r2, r0
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	4a27      	ldr	r2, [pc, #156]	@ (8001540 <HAL_RCC_ClockConfig+0x1a4>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e042      	b.n	8001530 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014aa:	4b24      	ldr	r3, [pc, #144]	@ (800153c <HAL_RCC_ClockConfig+0x1a0>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	220c      	movs	r2, #12
 80014b0:	401a      	ands	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d1ec      	bne.n	8001496 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001538 <HAL_RCC_ClockConfig+0x19c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2201      	movs	r2, #1
 80014c2:	4013      	ands	r3, r2
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d211      	bcs.n	80014ee <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <HAL_RCC_ClockConfig+0x19c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2201      	movs	r2, #1
 80014d0:	4393      	bics	r3, r2
 80014d2:	0019      	movs	r1, r3
 80014d4:	4b18      	ldr	r3, [pc, #96]	@ (8001538 <HAL_RCC_ClockConfig+0x19c>)
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014dc:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <HAL_RCC_ClockConfig+0x19c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2201      	movs	r2, #1
 80014e2:	4013      	ands	r3, r2
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e020      	b.n	8001530 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2204      	movs	r2, #4
 80014f4:	4013      	ands	r3, r2
 80014f6:	d009      	beq.n	800150c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014f8:	4b10      	ldr	r3, [pc, #64]	@ (800153c <HAL_RCC_ClockConfig+0x1a0>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4a11      	ldr	r2, [pc, #68]	@ (8001544 <HAL_RCC_ClockConfig+0x1a8>)
 80014fe:	4013      	ands	r3, r2
 8001500:	0019      	movs	r1, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <HAL_RCC_ClockConfig+0x1a0>)
 8001508:	430a      	orrs	r2, r1
 800150a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800150c:	f000 f820 	bl	8001550 <HAL_RCC_GetSysClockFreq>
 8001510:	0001      	movs	r1, r0
 8001512:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <HAL_RCC_ClockConfig+0x1a0>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	220f      	movs	r2, #15
 800151a:	4013      	ands	r3, r2
 800151c:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <HAL_RCC_ClockConfig+0x1ac>)
 800151e:	5cd3      	ldrb	r3, [r2, r3]
 8001520:	000a      	movs	r2, r1
 8001522:	40da      	lsrs	r2, r3
 8001524:	4b09      	ldr	r3, [pc, #36]	@ (800154c <HAL_RCC_ClockConfig+0x1b0>)
 8001526:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff f927 	bl	800077c <HAL_InitTick>
  
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	0018      	movs	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	b004      	add	sp, #16
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40022000 	.word	0x40022000
 800153c:	40021000 	.word	0x40021000
 8001540:	00001388 	.word	0x00001388
 8001544:	fffff8ff 	.word	0xfffff8ff
 8001548:	080021f4 	.word	0x080021f4
 800154c:	20000000 	.word	0x20000000

08001550 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800156a:	4b2d      	ldr	r3, [pc, #180]	@ (8001620 <HAL_RCC_GetSysClockFreq+0xd0>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	220c      	movs	r2, #12
 8001574:	4013      	ands	r3, r2
 8001576:	2b0c      	cmp	r3, #12
 8001578:	d046      	beq.n	8001608 <HAL_RCC_GetSysClockFreq+0xb8>
 800157a:	d848      	bhi.n	800160e <HAL_RCC_GetSysClockFreq+0xbe>
 800157c:	2b04      	cmp	r3, #4
 800157e:	d002      	beq.n	8001586 <HAL_RCC_GetSysClockFreq+0x36>
 8001580:	2b08      	cmp	r3, #8
 8001582:	d003      	beq.n	800158c <HAL_RCC_GetSysClockFreq+0x3c>
 8001584:	e043      	b.n	800160e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001586:	4b27      	ldr	r3, [pc, #156]	@ (8001624 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001588:	613b      	str	r3, [r7, #16]
      break;
 800158a:	e043      	b.n	8001614 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	0c9b      	lsrs	r3, r3, #18
 8001590:	220f      	movs	r2, #15
 8001592:	4013      	ands	r3, r2
 8001594:	4a24      	ldr	r2, [pc, #144]	@ (8001628 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001596:	5cd3      	ldrb	r3, [r2, r3]
 8001598:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800159a:	4b21      	ldr	r3, [pc, #132]	@ (8001620 <HAL_RCC_GetSysClockFreq+0xd0>)
 800159c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159e:	220f      	movs	r2, #15
 80015a0:	4013      	ands	r3, r2
 80015a2:	4a22      	ldr	r2, [pc, #136]	@ (800162c <HAL_RCC_GetSysClockFreq+0xdc>)
 80015a4:	5cd3      	ldrb	r3, [r2, r3]
 80015a6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	23c0      	movs	r3, #192	@ 0xc0
 80015ac:	025b      	lsls	r3, r3, #9
 80015ae:	401a      	ands	r2, r3
 80015b0:	2380      	movs	r3, #128	@ 0x80
 80015b2:	025b      	lsls	r3, r3, #9
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d109      	bne.n	80015cc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	481a      	ldr	r0, [pc, #104]	@ (8001624 <HAL_RCC_GetSysClockFreq+0xd4>)
 80015bc:	f7fe fda4 	bl	8000108 <__udivsi3>
 80015c0:	0003      	movs	r3, r0
 80015c2:	001a      	movs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4353      	muls	r3, r2
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	e01a      	b.n	8001602 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	23c0      	movs	r3, #192	@ 0xc0
 80015d0:	025b      	lsls	r3, r3, #9
 80015d2:	401a      	ands	r2, r3
 80015d4:	23c0      	movs	r3, #192	@ 0xc0
 80015d6:	025b      	lsls	r3, r3, #9
 80015d8:	429a      	cmp	r2, r3
 80015da:	d109      	bne.n	80015f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	4814      	ldr	r0, [pc, #80]	@ (8001630 <HAL_RCC_GetSysClockFreq+0xe0>)
 80015e0:	f7fe fd92 	bl	8000108 <__udivsi3>
 80015e4:	0003      	movs	r3, r0
 80015e6:	001a      	movs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4353      	muls	r3, r2
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	e008      	b.n	8001602 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	480c      	ldr	r0, [pc, #48]	@ (8001624 <HAL_RCC_GetSysClockFreq+0xd4>)
 80015f4:	f7fe fd88 	bl	8000108 <__udivsi3>
 80015f8:	0003      	movs	r3, r0
 80015fa:	001a      	movs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4353      	muls	r3, r2
 8001600:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	613b      	str	r3, [r7, #16]
      break;
 8001606:	e005      	b.n	8001614 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001608:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <HAL_RCC_GetSysClockFreq+0xe0>)
 800160a:	613b      	str	r3, [r7, #16]
      break;
 800160c:	e002      	b.n	8001614 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800160e:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001610:	613b      	str	r3, [r7, #16]
      break;
 8001612:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001614:	693b      	ldr	r3, [r7, #16]
}
 8001616:	0018      	movs	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	b006      	add	sp, #24
 800161c:	bd80      	pop	{r7, pc}
 800161e:	46c0      	nop			@ (mov r8, r8)
 8001620:	40021000 	.word	0x40021000
 8001624:	007a1200 	.word	0x007a1200
 8001628:	0800220c 	.word	0x0800220c
 800162c:	0800221c 	.word	0x0800221c
 8001630:	02dc6c00 	.word	0x02dc6c00

08001634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001638:	4b02      	ldr	r3, [pc, #8]	@ (8001644 <HAL_RCC_GetHCLKFreq+0x10>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	20000000 	.word	0x20000000

08001648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800164c:	f7ff fff2 	bl	8001634 <HAL_RCC_GetHCLKFreq>
 8001650:	0001      	movs	r1, r0
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	0a1b      	lsrs	r3, r3, #8
 8001658:	2207      	movs	r2, #7
 800165a:	4013      	ands	r3, r2
 800165c:	4a04      	ldr	r2, [pc, #16]	@ (8001670 <HAL_RCC_GetPCLK1Freq+0x28>)
 800165e:	5cd3      	ldrb	r3, [r2, r3]
 8001660:	40d9      	lsrs	r1, r3
 8001662:	000b      	movs	r3, r1
}    
 8001664:	0018      	movs	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			@ (mov r8, r8)
 800166c:	40021000 	.word	0x40021000
 8001670:	08002204 	.word	0x08002204

08001674 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2380      	movs	r3, #128	@ 0x80
 800168a:	025b      	lsls	r3, r3, #9
 800168c:	4013      	ands	r3, r2
 800168e:	d100      	bne.n	8001692 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001690:	e08e      	b.n	80017b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001692:	2017      	movs	r0, #23
 8001694:	183b      	adds	r3, r7, r0
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169a:	4b67      	ldr	r3, [pc, #412]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800169c:	69da      	ldr	r2, [r3, #28]
 800169e:	2380      	movs	r3, #128	@ 0x80
 80016a0:	055b      	lsls	r3, r3, #21
 80016a2:	4013      	ands	r3, r2
 80016a4:	d110      	bne.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	4b64      	ldr	r3, [pc, #400]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80016a8:	69da      	ldr	r2, [r3, #28]
 80016aa:	4b63      	ldr	r3, [pc, #396]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80016ac:	2180      	movs	r1, #128	@ 0x80
 80016ae:	0549      	lsls	r1, r1, #21
 80016b0:	430a      	orrs	r2, r1
 80016b2:	61da      	str	r2, [r3, #28]
 80016b4:	4b60      	ldr	r3, [pc, #384]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80016b6:	69da      	ldr	r2, [r3, #28]
 80016b8:	2380      	movs	r3, #128	@ 0x80
 80016ba:	055b      	lsls	r3, r3, #21
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016c2:	183b      	adds	r3, r7, r0
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c8:	4b5c      	ldr	r3, [pc, #368]	@ (800183c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2380      	movs	r3, #128	@ 0x80
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4013      	ands	r3, r2
 80016d2:	d11a      	bne.n	800170a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016d4:	4b59      	ldr	r3, [pc, #356]	@ (800183c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b58      	ldr	r3, [pc, #352]	@ (800183c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80016da:	2180      	movs	r1, #128	@ 0x80
 80016dc:	0049      	lsls	r1, r1, #1
 80016de:	430a      	orrs	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e2:	f7ff f891 	bl	8000808 <HAL_GetTick>
 80016e6:	0003      	movs	r3, r0
 80016e8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ea:	e008      	b.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ec:	f7ff f88c 	bl	8000808 <HAL_GetTick>
 80016f0:	0002      	movs	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	@ 0x64
 80016f8:	d901      	bls.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e097      	b.n	800182e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fe:	4b4f      	ldr	r3, [pc, #316]	@ (800183c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	2380      	movs	r3, #128	@ 0x80
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4013      	ands	r3, r2
 8001708:	d0f0      	beq.n	80016ec <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800170a:	4b4b      	ldr	r3, [pc, #300]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800170c:	6a1a      	ldr	r2, [r3, #32]
 800170e:	23c0      	movs	r3, #192	@ 0xc0
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4013      	ands	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d034      	beq.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	23c0      	movs	r3, #192	@ 0xc0
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4013      	ands	r3, r2
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	429a      	cmp	r2, r3
 800172a:	d02c      	beq.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800172c:	4b42      	ldr	r3, [pc, #264]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4a43      	ldr	r2, [pc, #268]	@ (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001732:	4013      	ands	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001736:	4b40      	ldr	r3, [pc, #256]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001738:	6a1a      	ldr	r2, [r3, #32]
 800173a:	4b3f      	ldr	r3, [pc, #252]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800173c:	2180      	movs	r1, #128	@ 0x80
 800173e:	0249      	lsls	r1, r1, #9
 8001740:	430a      	orrs	r2, r1
 8001742:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001744:	4b3c      	ldr	r3, [pc, #240]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001746:	6a1a      	ldr	r2, [r3, #32]
 8001748:	4b3b      	ldr	r3, [pc, #236]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800174a:	493e      	ldr	r1, [pc, #248]	@ (8001844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800174c:	400a      	ands	r2, r1
 800174e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001750:	4b39      	ldr	r3, [pc, #228]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2201      	movs	r2, #1
 800175a:	4013      	ands	r3, r2
 800175c:	d013      	beq.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175e:	f7ff f853 	bl	8000808 <HAL_GetTick>
 8001762:	0003      	movs	r3, r0
 8001764:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001766:	e009      	b.n	800177c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001768:	f7ff f84e 	bl	8000808 <HAL_GetTick>
 800176c:	0002      	movs	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	4a35      	ldr	r2, [pc, #212]	@ (8001848 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d901      	bls.n	800177c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e058      	b.n	800182e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177c:	4b2e      	ldr	r3, [pc, #184]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	2202      	movs	r2, #2
 8001782:	4013      	ands	r3, r2
 8001784:	d0f0      	beq.n	8001768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001786:	4b2c      	ldr	r3, [pc, #176]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	4a2d      	ldr	r2, [pc, #180]	@ (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800178c:	4013      	ands	r3, r2
 800178e:	0019      	movs	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	4b28      	ldr	r3, [pc, #160]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001796:	430a      	orrs	r2, r1
 8001798:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800179a:	2317      	movs	r3, #23
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d105      	bne.n	80017b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a4:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017a6:	69da      	ldr	r2, [r3, #28]
 80017a8:	4b23      	ldr	r3, [pc, #140]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017aa:	4928      	ldr	r1, [pc, #160]	@ (800184c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80017ac:	400a      	ands	r2, r1
 80017ae:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2201      	movs	r2, #1
 80017b6:	4013      	ands	r3, r2
 80017b8:	d009      	beq.n	80017ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	2203      	movs	r2, #3
 80017c0:	4393      	bics	r3, r2
 80017c2:	0019      	movs	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017ca:	430a      	orrs	r2, r1
 80017cc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2220      	movs	r2, #32
 80017d4:	4013      	ands	r3, r2
 80017d6:	d009      	beq.n	80017ec <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017d8:	4b17      	ldr	r3, [pc, #92]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017dc:	2210      	movs	r2, #16
 80017de:	4393      	bics	r3, r2
 80017e0:	0019      	movs	r1, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017e8:	430a      	orrs	r2, r1
 80017ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	2380      	movs	r3, #128	@ 0x80
 80017f2:	029b      	lsls	r3, r3, #10
 80017f4:	4013      	ands	r3, r2
 80017f6:	d009      	beq.n	800180c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80017f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fc:	2280      	movs	r2, #128	@ 0x80
 80017fe:	4393      	bics	r3, r2
 8001800:	0019      	movs	r1, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001808:	430a      	orrs	r2, r1
 800180a:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	2380      	movs	r3, #128	@ 0x80
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4013      	ands	r3, r2
 8001816:	d009      	beq.n	800182c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001818:	4b07      	ldr	r3, [pc, #28]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181c:	2240      	movs	r2, #64	@ 0x40
 800181e:	4393      	bics	r3, r2
 8001820:	0019      	movs	r1, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691a      	ldr	r2, [r3, #16]
 8001826:	4b04      	ldr	r3, [pc, #16]	@ (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001828:	430a      	orrs	r2, r1
 800182a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	0018      	movs	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	b006      	add	sp, #24
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			@ (mov r8, r8)
 8001838:	40021000 	.word	0x40021000
 800183c:	40007000 	.word	0x40007000
 8001840:	fffffcff 	.word	0xfffffcff
 8001844:	fffeffff 	.word	0xfffeffff
 8001848:	00001388 	.word	0x00001388
 800184c:	efffffff 	.word	0xefffffff

08001850 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e044      	b.n	80018ec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001866:	2b00      	cmp	r3, #0
 8001868:	d107      	bne.n	800187a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2278      	movs	r2, #120	@ 0x78
 800186e:	2100      	movs	r1, #0
 8001870:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	0018      	movs	r0, r3
 8001876:	f7fe fe4b 	bl	8000510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2224      	movs	r2, #36	@ 0x24
 800187e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2101      	movs	r1, #1
 800188c:	438a      	bics	r2, r1
 800188e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	0018      	movs	r0, r3
 800189c:	f000 f96c 	bl	8001b78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	0018      	movs	r0, r3
 80018a4:	f000 f828 	bl	80018f8 <UART_SetConfig>
 80018a8:	0003      	movs	r3, r0
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e01c      	b.n	80018ec <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	490d      	ldr	r1, [pc, #52]	@ (80018f4 <HAL_UART_Init+0xa4>)
 80018be:	400a      	ands	r2, r1
 80018c0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	212a      	movs	r1, #42	@ 0x2a
 80018ce:	438a      	bics	r2, r1
 80018d0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2101      	movs	r1, #1
 80018de:	430a      	orrs	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	0018      	movs	r0, r3
 80018e6:	f000 f9fb 	bl	8001ce0 <UART_CheckIdleState>
 80018ea:	0003      	movs	r3, r0
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b002      	add	sp, #8
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	ffffb7ff 	.word	0xffffb7ff

080018f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001900:	231e      	movs	r3, #30
 8001902:	18fb      	adds	r3, r7, r3
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	4313      	orrs	r3, r2
 800191e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a8d      	ldr	r2, [pc, #564]	@ (8001b5c <UART_SetConfig+0x264>)
 8001928:	4013      	ands	r3, r2
 800192a:	0019      	movs	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	430a      	orrs	r2, r1
 8001934:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	4a88      	ldr	r2, [pc, #544]	@ (8001b60 <UART_SetConfig+0x268>)
 800193e:	4013      	ands	r3, r2
 8001940:	0019      	movs	r1, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	4313      	orrs	r3, r2
 800195c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4a7f      	ldr	r2, [pc, #508]	@ (8001b64 <UART_SetConfig+0x26c>)
 8001966:	4013      	ands	r3, r2
 8001968:	0019      	movs	r1, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	430a      	orrs	r2, r1
 8001972:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a7b      	ldr	r2, [pc, #492]	@ (8001b68 <UART_SetConfig+0x270>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d127      	bne.n	80019ce <UART_SetConfig+0xd6>
 800197e:	4b7b      	ldr	r3, [pc, #492]	@ (8001b6c <UART_SetConfig+0x274>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	2203      	movs	r2, #3
 8001984:	4013      	ands	r3, r2
 8001986:	2b03      	cmp	r3, #3
 8001988:	d00d      	beq.n	80019a6 <UART_SetConfig+0xae>
 800198a:	d81b      	bhi.n	80019c4 <UART_SetConfig+0xcc>
 800198c:	2b02      	cmp	r3, #2
 800198e:	d014      	beq.n	80019ba <UART_SetConfig+0xc2>
 8001990:	d818      	bhi.n	80019c4 <UART_SetConfig+0xcc>
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <UART_SetConfig+0xa4>
 8001996:	2b01      	cmp	r3, #1
 8001998:	d00a      	beq.n	80019b0 <UART_SetConfig+0xb8>
 800199a:	e013      	b.n	80019c4 <UART_SetConfig+0xcc>
 800199c:	231f      	movs	r3, #31
 800199e:	18fb      	adds	r3, r7, r3
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	e021      	b.n	80019ea <UART_SetConfig+0xf2>
 80019a6:	231f      	movs	r3, #31
 80019a8:	18fb      	adds	r3, r7, r3
 80019aa:	2202      	movs	r2, #2
 80019ac:	701a      	strb	r2, [r3, #0]
 80019ae:	e01c      	b.n	80019ea <UART_SetConfig+0xf2>
 80019b0:	231f      	movs	r3, #31
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	2204      	movs	r2, #4
 80019b6:	701a      	strb	r2, [r3, #0]
 80019b8:	e017      	b.n	80019ea <UART_SetConfig+0xf2>
 80019ba:	231f      	movs	r3, #31
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	2208      	movs	r2, #8
 80019c0:	701a      	strb	r2, [r3, #0]
 80019c2:	e012      	b.n	80019ea <UART_SetConfig+0xf2>
 80019c4:	231f      	movs	r3, #31
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	2210      	movs	r2, #16
 80019ca:	701a      	strb	r2, [r3, #0]
 80019cc:	e00d      	b.n	80019ea <UART_SetConfig+0xf2>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a67      	ldr	r2, [pc, #412]	@ (8001b70 <UART_SetConfig+0x278>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d104      	bne.n	80019e2 <UART_SetConfig+0xea>
 80019d8:	231f      	movs	r3, #31
 80019da:	18fb      	adds	r3, r7, r3
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
 80019e0:	e003      	b.n	80019ea <UART_SetConfig+0xf2>
 80019e2:	231f      	movs	r3, #31
 80019e4:	18fb      	adds	r3, r7, r3
 80019e6:	2210      	movs	r2, #16
 80019e8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69da      	ldr	r2, [r3, #28]
 80019ee:	2380      	movs	r3, #128	@ 0x80
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d15c      	bne.n	8001ab0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80019f6:	231f      	movs	r3, #31
 80019f8:	18fb      	adds	r3, r7, r3
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d015      	beq.n	8001a2c <UART_SetConfig+0x134>
 8001a00:	dc18      	bgt.n	8001a34 <UART_SetConfig+0x13c>
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d00d      	beq.n	8001a22 <UART_SetConfig+0x12a>
 8001a06:	dc15      	bgt.n	8001a34 <UART_SetConfig+0x13c>
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <UART_SetConfig+0x11a>
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d005      	beq.n	8001a1c <UART_SetConfig+0x124>
 8001a10:	e010      	b.n	8001a34 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a12:	f7ff fe19 	bl	8001648 <HAL_RCC_GetPCLK1Freq>
 8001a16:	0003      	movs	r3, r0
 8001a18:	61bb      	str	r3, [r7, #24]
        break;
 8001a1a:	e012      	b.n	8001a42 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001a1c:	4b55      	ldr	r3, [pc, #340]	@ (8001b74 <UART_SetConfig+0x27c>)
 8001a1e:	61bb      	str	r3, [r7, #24]
        break;
 8001a20:	e00f      	b.n	8001a42 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001a22:	f7ff fd95 	bl	8001550 <HAL_RCC_GetSysClockFreq>
 8001a26:	0003      	movs	r3, r0
 8001a28:	61bb      	str	r3, [r7, #24]
        break;
 8001a2a:	e00a      	b.n	8001a42 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001a2c:	2380      	movs	r3, #128	@ 0x80
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	61bb      	str	r3, [r7, #24]
        break;
 8001a32:	e006      	b.n	8001a42 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001a38:	231e      	movs	r3, #30
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]
        break;
 8001a40:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d100      	bne.n	8001a4a <UART_SetConfig+0x152>
 8001a48:	e07a      	b.n	8001b40 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	005a      	lsls	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	085b      	lsrs	r3, r3, #1
 8001a54:	18d2      	adds	r2, r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	0010      	movs	r0, r2
 8001a5e:	f7fe fb53 	bl	8000108 <__udivsi3>
 8001a62:	0003      	movs	r3, r0
 8001a64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	2b0f      	cmp	r3, #15
 8001a6a:	d91c      	bls.n	8001aa6 <UART_SetConfig+0x1ae>
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	2380      	movs	r3, #128	@ 0x80
 8001a70:	025b      	lsls	r3, r3, #9
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d217      	bcs.n	8001aa6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	200e      	movs	r0, #14
 8001a7c:	183b      	adds	r3, r7, r0
 8001a7e:	210f      	movs	r1, #15
 8001a80:	438a      	bics	r2, r1
 8001a82:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	085b      	lsrs	r3, r3, #1
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	2207      	movs	r2, #7
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	b299      	uxth	r1, r3
 8001a90:	183b      	adds	r3, r7, r0
 8001a92:	183a      	adds	r2, r7, r0
 8001a94:	8812      	ldrh	r2, [r2, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	183a      	adds	r2, r7, r0
 8001aa0:	8812      	ldrh	r2, [r2, #0]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	e04c      	b.n	8001b40 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8001aa6:	231e      	movs	r3, #30
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
 8001aae:	e047      	b.n	8001b40 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001ab0:	231f      	movs	r3, #31
 8001ab2:	18fb      	adds	r3, r7, r3
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d015      	beq.n	8001ae6 <UART_SetConfig+0x1ee>
 8001aba:	dc18      	bgt.n	8001aee <UART_SetConfig+0x1f6>
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d00d      	beq.n	8001adc <UART_SetConfig+0x1e4>
 8001ac0:	dc15      	bgt.n	8001aee <UART_SetConfig+0x1f6>
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <UART_SetConfig+0x1d4>
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d005      	beq.n	8001ad6 <UART_SetConfig+0x1de>
 8001aca:	e010      	b.n	8001aee <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001acc:	f7ff fdbc 	bl	8001648 <HAL_RCC_GetPCLK1Freq>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	61bb      	str	r3, [r7, #24]
        break;
 8001ad4:	e012      	b.n	8001afc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ad6:	4b27      	ldr	r3, [pc, #156]	@ (8001b74 <UART_SetConfig+0x27c>)
 8001ad8:	61bb      	str	r3, [r7, #24]
        break;
 8001ada:	e00f      	b.n	8001afc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001adc:	f7ff fd38 	bl	8001550 <HAL_RCC_GetSysClockFreq>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	61bb      	str	r3, [r7, #24]
        break;
 8001ae4:	e00a      	b.n	8001afc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ae6:	2380      	movs	r3, #128	@ 0x80
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	61bb      	str	r3, [r7, #24]
        break;
 8001aec:	e006      	b.n	8001afc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001af2:	231e      	movs	r3, #30
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
        break;
 8001afa:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d01e      	beq.n	8001b40 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	085a      	lsrs	r2, r3, #1
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	18d2      	adds	r2, r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	0019      	movs	r1, r3
 8001b12:	0010      	movs	r0, r2
 8001b14:	f7fe faf8 	bl	8000108 <__udivsi3>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	2b0f      	cmp	r3, #15
 8001b20:	d90a      	bls.n	8001b38 <UART_SetConfig+0x240>
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	2380      	movs	r3, #128	@ 0x80
 8001b26:	025b      	lsls	r3, r3, #9
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d205      	bcs.n	8001b38 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	e003      	b.n	8001b40 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8001b38:	231e      	movs	r3, #30
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8001b4c:	231e      	movs	r3, #30
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	781b      	ldrb	r3, [r3, #0]
}
 8001b52:	0018      	movs	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b008      	add	sp, #32
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			@ (mov r8, r8)
 8001b5c:	efff69f3 	.word	0xefff69f3
 8001b60:	ffffcfff 	.word	0xffffcfff
 8001b64:	fffff4ff 	.word	0xfffff4ff
 8001b68:	40013800 	.word	0x40013800
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40004400 	.word	0x40004400
 8001b74:	007a1200 	.word	0x007a1200

08001b78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b84:	2208      	movs	r2, #8
 8001b86:	4013      	ands	r3, r2
 8001b88:	d00b      	beq.n	8001ba2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	4a4a      	ldr	r2, [pc, #296]	@ (8001cbc <UART_AdvFeatureConfig+0x144>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	0019      	movs	r1, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d00b      	beq.n	8001bc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4a43      	ldr	r2, [pc, #268]	@ (8001cc0 <UART_AdvFeatureConfig+0x148>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	0019      	movs	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc8:	2202      	movs	r2, #2
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d00b      	beq.n	8001be6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a3b      	ldr	r2, [pc, #236]	@ (8001cc4 <UART_AdvFeatureConfig+0x14c>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	0019      	movs	r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bea:	2204      	movs	r2, #4
 8001bec:	4013      	ands	r3, r2
 8001bee:	d00b      	beq.n	8001c08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4a34      	ldr	r2, [pc, #208]	@ (8001cc8 <UART_AdvFeatureConfig+0x150>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0c:	2210      	movs	r2, #16
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d00b      	beq.n	8001c2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4a2c      	ldr	r2, [pc, #176]	@ (8001ccc <UART_AdvFeatureConfig+0x154>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2e:	2220      	movs	r2, #32
 8001c30:	4013      	ands	r3, r2
 8001c32:	d00b      	beq.n	8001c4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	4a25      	ldr	r2, [pc, #148]	@ (8001cd0 <UART_AdvFeatureConfig+0x158>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	0019      	movs	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c50:	2240      	movs	r2, #64	@ 0x40
 8001c52:	4013      	ands	r3, r2
 8001c54:	d01d      	beq.n	8001c92 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001cd4 <UART_AdvFeatureConfig+0x15c>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	0019      	movs	r1, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c72:	2380      	movs	r3, #128	@ 0x80
 8001c74:	035b      	lsls	r3, r3, #13
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d10b      	bne.n	8001c92 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4a15      	ldr	r2, [pc, #84]	@ (8001cd8 <UART_AdvFeatureConfig+0x160>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	0019      	movs	r1, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c96:	2280      	movs	r2, #128	@ 0x80
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d00b      	beq.n	8001cb4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8001cdc <UART_AdvFeatureConfig+0x164>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	0019      	movs	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	605a      	str	r2, [r3, #4]
  }
}
 8001cb4:	46c0      	nop			@ (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b002      	add	sp, #8
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	ffff7fff 	.word	0xffff7fff
 8001cc0:	fffdffff 	.word	0xfffdffff
 8001cc4:	fffeffff 	.word	0xfffeffff
 8001cc8:	fffbffff 	.word	0xfffbffff
 8001ccc:	ffffefff 	.word	0xffffefff
 8001cd0:	ffffdfff 	.word	0xffffdfff
 8001cd4:	ffefffff 	.word	0xffefffff
 8001cd8:	ff9fffff 	.word	0xff9fffff
 8001cdc:	fff7ffff 	.word	0xfff7ffff

08001ce0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b092      	sub	sp, #72	@ 0x48
 8001ce4:	af02      	add	r7, sp, #8
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2284      	movs	r2, #132	@ 0x84
 8001cec:	2100      	movs	r1, #0
 8001cee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001cf0:	f7fe fd8a 	bl	8000808 <HAL_GetTick>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2208      	movs	r2, #8
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d12c      	bne.n	8001d60 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d08:	2280      	movs	r2, #128	@ 0x80
 8001d0a:	0391      	lsls	r1, r2, #14
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	4a46      	ldr	r2, [pc, #280]	@ (8001e28 <UART_CheckIdleState+0x148>)
 8001d10:	9200      	str	r2, [sp, #0]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f000 f88c 	bl	8001e30 <UART_WaitOnFlagUntilTimeout>
 8001d18:	1e03      	subs	r3, r0, #0
 8001d1a:	d021      	beq.n	8001d60 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8001d20:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001d24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d26:	2301      	movs	r3, #1
 8001d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d2c:	f383 8810 	msr	PRIMASK, r3
}
 8001d30:	46c0      	nop			@ (mov r8, r8)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2180      	movs	r1, #128	@ 0x80
 8001d3e:	438a      	bics	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d48:	f383 8810 	msr	PRIMASK, r3
}
 8001d4c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2220      	movs	r2, #32
 8001d52:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2278      	movs	r2, #120	@ 0x78
 8001d58:	2100      	movs	r1, #0
 8001d5a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e05f      	b.n	8001e20 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2204      	movs	r2, #4
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d146      	bne.n	8001dfc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d70:	2280      	movs	r2, #128	@ 0x80
 8001d72:	03d1      	lsls	r1, r2, #15
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	4a2c      	ldr	r2, [pc, #176]	@ (8001e28 <UART_CheckIdleState+0x148>)
 8001d78:	9200      	str	r2, [sp, #0]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f000 f858 	bl	8001e30 <UART_WaitOnFlagUntilTimeout>
 8001d80:	1e03      	subs	r3, r0, #0
 8001d82:	d03b      	beq.n	8001dfc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d84:	f3ef 8310 	mrs	r3, PRIMASK
 8001d88:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d8e:	2301      	movs	r3, #1
 8001d90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	f383 8810 	msr	PRIMASK, r3
}
 8001d98:	46c0      	nop			@ (mov r8, r8)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4921      	ldr	r1, [pc, #132]	@ (8001e2c <UART_CheckIdleState+0x14c>)
 8001da6:	400a      	ands	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f383 8810 	msr	PRIMASK, r3
}
 8001db4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001db6:	f3ef 8310 	mrs	r3, PRIMASK
 8001dba:	61bb      	str	r3, [r7, #24]
  return(result);
 8001dbc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f383 8810 	msr	PRIMASK, r3
}
 8001dca:	46c0      	nop			@ (mov r8, r8)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	438a      	bics	r2, r1
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dde:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	f383 8810 	msr	PRIMASK, r3
}
 8001de6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2280      	movs	r2, #128	@ 0x80
 8001dec:	2120      	movs	r1, #32
 8001dee:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2278      	movs	r2, #120	@ 0x78
 8001df4:	2100      	movs	r1, #0
 8001df6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e011      	b.n	8001e20 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2280      	movs	r2, #128	@ 0x80
 8001e06:	2120      	movs	r1, #32
 8001e08:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2278      	movs	r2, #120	@ 0x78
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	0018      	movs	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b010      	add	sp, #64	@ 0x40
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	01ffffff 	.word	0x01ffffff
 8001e2c:	fffffedf 	.word	0xfffffedf

08001e30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	1dfb      	adds	r3, r7, #7
 8001e3e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e40:	e051      	b.n	8001ee6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	3301      	adds	r3, #1
 8001e46:	d04e      	beq.n	8001ee6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e48:	f7fe fcde 	bl	8000808 <HAL_GetTick>
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d302      	bcc.n	8001e5e <UART_WaitOnFlagUntilTimeout+0x2e>
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e051      	b.n	8001f06 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2204      	movs	r2, #4
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d03b      	beq.n	8001ee6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b80      	cmp	r3, #128	@ 0x80
 8001e72:	d038      	beq.n	8001ee6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2b40      	cmp	r3, #64	@ 0x40
 8001e78:	d035      	beq.n	8001ee6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	2208      	movs	r2, #8
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d111      	bne.n	8001eac <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	0018      	movs	r0, r3
 8001e94:	f000 f83c 	bl	8001f10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2284      	movs	r2, #132	@ 0x84
 8001e9c:	2108      	movs	r1, #8
 8001e9e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2278      	movs	r2, #120	@ 0x78
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e02c      	b.n	8001f06 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	69da      	ldr	r2, [r3, #28]
 8001eb2:	2380      	movs	r3, #128	@ 0x80
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	2380      	movs	r3, #128	@ 0x80
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d112      	bne.n	8001ee6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2280      	movs	r2, #128	@ 0x80
 8001ec6:	0112      	lsls	r2, r2, #4
 8001ec8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f000 f81f 	bl	8001f10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2284      	movs	r2, #132	@ 0x84
 8001ed6:	2120      	movs	r1, #32
 8001ed8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2278      	movs	r2, #120	@ 0x78
 8001ede:	2100      	movs	r1, #0
 8001ee0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e00f      	b.n	8001f06 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	425a      	negs	r2, r3
 8001ef6:	4153      	adcs	r3, r2
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	001a      	movs	r2, r3
 8001efc:	1dfb      	adds	r3, r7, #7
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d09e      	beq.n	8001e42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	0018      	movs	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b004      	add	sp, #16
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08e      	sub	sp, #56	@ 0x38
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f18:	f3ef 8310 	mrs	r3, PRIMASK
 8001f1c:	617b      	str	r3, [r7, #20]
  return(result);
 8001f1e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f22:	2301      	movs	r3, #1
 8001f24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	f383 8810 	msr	PRIMASK, r3
}
 8001f2c:	46c0      	nop			@ (mov r8, r8)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4926      	ldr	r1, [pc, #152]	@ (8001fd4 <UART_EndRxTransfer+0xc4>)
 8001f3a:	400a      	ands	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f383 8810 	msr	PRIMASK, r3
}
 8001f48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8001f4e:	623b      	str	r3, [r7, #32]
  return(result);
 8001f50:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f52:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f54:	2301      	movs	r3, #1
 8001f56:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5a:	f383 8810 	msr	PRIMASK, r3
}
 8001f5e:	46c0      	nop			@ (mov r8, r8)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	438a      	bics	r2, r1
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f76:	f383 8810 	msr	PRIMASK, r3
}
 8001f7a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d118      	bne.n	8001fb6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f84:	f3ef 8310 	mrs	r3, PRIMASK
 8001f88:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f8a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f8e:	2301      	movs	r3, #1
 8001f90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f383 8810 	msr	PRIMASK, r3
}
 8001f98:	46c0      	nop			@ (mov r8, r8)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2110      	movs	r1, #16
 8001fa6:	438a      	bics	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	f383 8810 	msr	PRIMASK, r3
}
 8001fb4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2280      	movs	r2, #128	@ 0x80
 8001fba:	2120      	movs	r1, #32
 8001fbc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b00e      	add	sp, #56	@ 0x38
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	fffffedf 	.word	0xfffffedf

08001fd8 <malloc>:
 8001fd8:	b510      	push	{r4, lr}
 8001fda:	4b03      	ldr	r3, [pc, #12]	@ (8001fe8 <malloc+0x10>)
 8001fdc:	0001      	movs	r1, r0
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	f000 f826 	bl	8002030 <_malloc_r>
 8001fe4:	bd10      	pop	{r4, pc}
 8001fe6:	46c0      	nop			@ (mov r8, r8)
 8001fe8:	2000000c 	.word	0x2000000c

08001fec <sbrk_aligned>:
 8001fec:	b570      	push	{r4, r5, r6, lr}
 8001fee:	4e0f      	ldr	r6, [pc, #60]	@ (800202c <sbrk_aligned+0x40>)
 8001ff0:	000d      	movs	r5, r1
 8001ff2:	6831      	ldr	r1, [r6, #0]
 8001ff4:	0004      	movs	r4, r0
 8001ff6:	2900      	cmp	r1, #0
 8001ff8:	d102      	bne.n	8002000 <sbrk_aligned+0x14>
 8001ffa:	f000 f8b1 	bl	8002160 <_sbrk_r>
 8001ffe:	6030      	str	r0, [r6, #0]
 8002000:	0029      	movs	r1, r5
 8002002:	0020      	movs	r0, r4
 8002004:	f000 f8ac 	bl	8002160 <_sbrk_r>
 8002008:	1c43      	adds	r3, r0, #1
 800200a:	d103      	bne.n	8002014 <sbrk_aligned+0x28>
 800200c:	2501      	movs	r5, #1
 800200e:	426d      	negs	r5, r5
 8002010:	0028      	movs	r0, r5
 8002012:	bd70      	pop	{r4, r5, r6, pc}
 8002014:	2303      	movs	r3, #3
 8002016:	1cc5      	adds	r5, r0, #3
 8002018:	439d      	bics	r5, r3
 800201a:	42a8      	cmp	r0, r5
 800201c:	d0f8      	beq.n	8002010 <sbrk_aligned+0x24>
 800201e:	1a29      	subs	r1, r5, r0
 8002020:	0020      	movs	r0, r4
 8002022:	f000 f89d 	bl	8002160 <_sbrk_r>
 8002026:	3001      	adds	r0, #1
 8002028:	d1f2      	bne.n	8002010 <sbrk_aligned+0x24>
 800202a:	e7ef      	b.n	800200c <sbrk_aligned+0x20>
 800202c:	20000198 	.word	0x20000198

08002030 <_malloc_r>:
 8002030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002032:	2203      	movs	r2, #3
 8002034:	1ccb      	adds	r3, r1, #3
 8002036:	4393      	bics	r3, r2
 8002038:	3308      	adds	r3, #8
 800203a:	0005      	movs	r5, r0
 800203c:	001f      	movs	r7, r3
 800203e:	2b0c      	cmp	r3, #12
 8002040:	d234      	bcs.n	80020ac <_malloc_r+0x7c>
 8002042:	270c      	movs	r7, #12
 8002044:	42b9      	cmp	r1, r7
 8002046:	d833      	bhi.n	80020b0 <_malloc_r+0x80>
 8002048:	0028      	movs	r0, r5
 800204a:	f000 f871 	bl	8002130 <__malloc_lock>
 800204e:	4e37      	ldr	r6, [pc, #220]	@ (800212c <_malloc_r+0xfc>)
 8002050:	6833      	ldr	r3, [r6, #0]
 8002052:	001c      	movs	r4, r3
 8002054:	2c00      	cmp	r4, #0
 8002056:	d12f      	bne.n	80020b8 <_malloc_r+0x88>
 8002058:	0039      	movs	r1, r7
 800205a:	0028      	movs	r0, r5
 800205c:	f7ff ffc6 	bl	8001fec <sbrk_aligned>
 8002060:	0004      	movs	r4, r0
 8002062:	1c43      	adds	r3, r0, #1
 8002064:	d15f      	bne.n	8002126 <_malloc_r+0xf6>
 8002066:	6834      	ldr	r4, [r6, #0]
 8002068:	9400      	str	r4, [sp, #0]
 800206a:	9b00      	ldr	r3, [sp, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d14a      	bne.n	8002106 <_malloc_r+0xd6>
 8002070:	2c00      	cmp	r4, #0
 8002072:	d052      	beq.n	800211a <_malloc_r+0xea>
 8002074:	6823      	ldr	r3, [r4, #0]
 8002076:	0028      	movs	r0, r5
 8002078:	18e3      	adds	r3, r4, r3
 800207a:	9900      	ldr	r1, [sp, #0]
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	f000 f86f 	bl	8002160 <_sbrk_r>
 8002082:	9b01      	ldr	r3, [sp, #4]
 8002084:	4283      	cmp	r3, r0
 8002086:	d148      	bne.n	800211a <_malloc_r+0xea>
 8002088:	6823      	ldr	r3, [r4, #0]
 800208a:	0028      	movs	r0, r5
 800208c:	1aff      	subs	r7, r7, r3
 800208e:	0039      	movs	r1, r7
 8002090:	f7ff ffac 	bl	8001fec <sbrk_aligned>
 8002094:	3001      	adds	r0, #1
 8002096:	d040      	beq.n	800211a <_malloc_r+0xea>
 8002098:	6823      	ldr	r3, [r4, #0]
 800209a:	19db      	adds	r3, r3, r7
 800209c:	6023      	str	r3, [r4, #0]
 800209e:	6833      	ldr	r3, [r6, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	2a00      	cmp	r2, #0
 80020a4:	d133      	bne.n	800210e <_malloc_r+0xde>
 80020a6:	9b00      	ldr	r3, [sp, #0]
 80020a8:	6033      	str	r3, [r6, #0]
 80020aa:	e019      	b.n	80020e0 <_malloc_r+0xb0>
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	dac9      	bge.n	8002044 <_malloc_r+0x14>
 80020b0:	230c      	movs	r3, #12
 80020b2:	602b      	str	r3, [r5, #0]
 80020b4:	2000      	movs	r0, #0
 80020b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80020b8:	6821      	ldr	r1, [r4, #0]
 80020ba:	1bc9      	subs	r1, r1, r7
 80020bc:	d420      	bmi.n	8002100 <_malloc_r+0xd0>
 80020be:	290b      	cmp	r1, #11
 80020c0:	d90a      	bls.n	80020d8 <_malloc_r+0xa8>
 80020c2:	19e2      	adds	r2, r4, r7
 80020c4:	6027      	str	r7, [r4, #0]
 80020c6:	42a3      	cmp	r3, r4
 80020c8:	d104      	bne.n	80020d4 <_malloc_r+0xa4>
 80020ca:	6032      	str	r2, [r6, #0]
 80020cc:	6863      	ldr	r3, [r4, #4]
 80020ce:	6011      	str	r1, [r2, #0]
 80020d0:	6053      	str	r3, [r2, #4]
 80020d2:	e005      	b.n	80020e0 <_malloc_r+0xb0>
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	e7f9      	b.n	80020cc <_malloc_r+0x9c>
 80020d8:	6862      	ldr	r2, [r4, #4]
 80020da:	42a3      	cmp	r3, r4
 80020dc:	d10e      	bne.n	80020fc <_malloc_r+0xcc>
 80020de:	6032      	str	r2, [r6, #0]
 80020e0:	0028      	movs	r0, r5
 80020e2:	f000 f82d 	bl	8002140 <__malloc_unlock>
 80020e6:	0020      	movs	r0, r4
 80020e8:	2207      	movs	r2, #7
 80020ea:	300b      	adds	r0, #11
 80020ec:	1d23      	adds	r3, r4, #4
 80020ee:	4390      	bics	r0, r2
 80020f0:	1ac2      	subs	r2, r0, r3
 80020f2:	4298      	cmp	r0, r3
 80020f4:	d0df      	beq.n	80020b6 <_malloc_r+0x86>
 80020f6:	1a1b      	subs	r3, r3, r0
 80020f8:	50a3      	str	r3, [r4, r2]
 80020fa:	e7dc      	b.n	80020b6 <_malloc_r+0x86>
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	e7ef      	b.n	80020e0 <_malloc_r+0xb0>
 8002100:	0023      	movs	r3, r4
 8002102:	6864      	ldr	r4, [r4, #4]
 8002104:	e7a6      	b.n	8002054 <_malloc_r+0x24>
 8002106:	9c00      	ldr	r4, [sp, #0]
 8002108:	6863      	ldr	r3, [r4, #4]
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	e7ad      	b.n	800206a <_malloc_r+0x3a>
 800210e:	001a      	movs	r2, r3
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	42a3      	cmp	r3, r4
 8002114:	d1fb      	bne.n	800210e <_malloc_r+0xde>
 8002116:	2300      	movs	r3, #0
 8002118:	e7da      	b.n	80020d0 <_malloc_r+0xa0>
 800211a:	230c      	movs	r3, #12
 800211c:	0028      	movs	r0, r5
 800211e:	602b      	str	r3, [r5, #0]
 8002120:	f000 f80e 	bl	8002140 <__malloc_unlock>
 8002124:	e7c6      	b.n	80020b4 <_malloc_r+0x84>
 8002126:	6007      	str	r7, [r0, #0]
 8002128:	e7da      	b.n	80020e0 <_malloc_r+0xb0>
 800212a:	46c0      	nop			@ (mov r8, r8)
 800212c:	2000019c 	.word	0x2000019c

08002130 <__malloc_lock>:
 8002130:	b510      	push	{r4, lr}
 8002132:	4802      	ldr	r0, [pc, #8]	@ (800213c <__malloc_lock+0xc>)
 8002134:	f000 f850 	bl	80021d8 <__retarget_lock_acquire_recursive>
 8002138:	bd10      	pop	{r4, pc}
 800213a:	46c0      	nop			@ (mov r8, r8)
 800213c:	200002dc 	.word	0x200002dc

08002140 <__malloc_unlock>:
 8002140:	b510      	push	{r4, lr}
 8002142:	4802      	ldr	r0, [pc, #8]	@ (800214c <__malloc_unlock+0xc>)
 8002144:	f000 f849 	bl	80021da <__retarget_lock_release_recursive>
 8002148:	bd10      	pop	{r4, pc}
 800214a:	46c0      	nop			@ (mov r8, r8)
 800214c:	200002dc 	.word	0x200002dc

08002150 <memset>:
 8002150:	0003      	movs	r3, r0
 8002152:	1882      	adds	r2, r0, r2
 8002154:	4293      	cmp	r3, r2
 8002156:	d100      	bne.n	800215a <memset+0xa>
 8002158:	4770      	bx	lr
 800215a:	7019      	strb	r1, [r3, #0]
 800215c:	3301      	adds	r3, #1
 800215e:	e7f9      	b.n	8002154 <memset+0x4>

08002160 <_sbrk_r>:
 8002160:	2300      	movs	r3, #0
 8002162:	b570      	push	{r4, r5, r6, lr}
 8002164:	4d06      	ldr	r5, [pc, #24]	@ (8002180 <_sbrk_r+0x20>)
 8002166:	0004      	movs	r4, r0
 8002168:	0008      	movs	r0, r1
 800216a:	602b      	str	r3, [r5, #0]
 800216c:	f7fe fa74 	bl	8000658 <_sbrk>
 8002170:	1c43      	adds	r3, r0, #1
 8002172:	d103      	bne.n	800217c <_sbrk_r+0x1c>
 8002174:	682b      	ldr	r3, [r5, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d000      	beq.n	800217c <_sbrk_r+0x1c>
 800217a:	6023      	str	r3, [r4, #0]
 800217c:	bd70      	pop	{r4, r5, r6, pc}
 800217e:	46c0      	nop			@ (mov r8, r8)
 8002180:	200002d8 	.word	0x200002d8

08002184 <__errno>:
 8002184:	4b01      	ldr	r3, [pc, #4]	@ (800218c <__errno+0x8>)
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	4770      	bx	lr
 800218a:	46c0      	nop			@ (mov r8, r8)
 800218c:	2000000c 	.word	0x2000000c

08002190 <__libc_init_array>:
 8002190:	b570      	push	{r4, r5, r6, lr}
 8002192:	2600      	movs	r6, #0
 8002194:	4c0c      	ldr	r4, [pc, #48]	@ (80021c8 <__libc_init_array+0x38>)
 8002196:	4d0d      	ldr	r5, [pc, #52]	@ (80021cc <__libc_init_array+0x3c>)
 8002198:	1b64      	subs	r4, r4, r5
 800219a:	10a4      	asrs	r4, r4, #2
 800219c:	42a6      	cmp	r6, r4
 800219e:	d109      	bne.n	80021b4 <__libc_init_array+0x24>
 80021a0:	2600      	movs	r6, #0
 80021a2:	f000 f81b 	bl	80021dc <_init>
 80021a6:	4c0a      	ldr	r4, [pc, #40]	@ (80021d0 <__libc_init_array+0x40>)
 80021a8:	4d0a      	ldr	r5, [pc, #40]	@ (80021d4 <__libc_init_array+0x44>)
 80021aa:	1b64      	subs	r4, r4, r5
 80021ac:	10a4      	asrs	r4, r4, #2
 80021ae:	42a6      	cmp	r6, r4
 80021b0:	d105      	bne.n	80021be <__libc_init_array+0x2e>
 80021b2:	bd70      	pop	{r4, r5, r6, pc}
 80021b4:	00b3      	lsls	r3, r6, #2
 80021b6:	58eb      	ldr	r3, [r5, r3]
 80021b8:	4798      	blx	r3
 80021ba:	3601      	adds	r6, #1
 80021bc:	e7ee      	b.n	800219c <__libc_init_array+0xc>
 80021be:	00b3      	lsls	r3, r6, #2
 80021c0:	58eb      	ldr	r3, [r5, r3]
 80021c2:	4798      	blx	r3
 80021c4:	3601      	adds	r6, #1
 80021c6:	e7f2      	b.n	80021ae <__libc_init_array+0x1e>
 80021c8:	0800222c 	.word	0x0800222c
 80021cc:	0800222c 	.word	0x0800222c
 80021d0:	08002230 	.word	0x08002230
 80021d4:	0800222c 	.word	0x0800222c

080021d8 <__retarget_lock_acquire_recursive>:
 80021d8:	4770      	bx	lr

080021da <__retarget_lock_release_recursive>:
 80021da:	4770      	bx	lr

080021dc <_init>:
 80021dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021de:	46c0      	nop			@ (mov r8, r8)
 80021e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021e2:	bc08      	pop	{r3}
 80021e4:	469e      	mov	lr, r3
 80021e6:	4770      	bx	lr

080021e8 <_fini>:
 80021e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ea:	46c0      	nop			@ (mov r8, r8)
 80021ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ee:	bc08      	pop	{r3}
 80021f0:	469e      	mov	lr, r3
 80021f2:	4770      	bx	lr
