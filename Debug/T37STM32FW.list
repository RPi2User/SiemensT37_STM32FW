
T37STM32FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022ac  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800236c  0800236c  0000336c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023a4  080023a4  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080023a4  080023a4  0000405c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080023a4  080023a4  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023a4  080023a4  000033a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023a8  080023a8  000033a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080023ac  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000005c  08002408  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08002408  000042e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000076b0  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001485  00000000  00000000  0000b734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  0000cbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004db  00000000  00000000  0000d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018120  00000000  00000000  0000d6f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000086a4  00000000  00000000  00025813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008966a  00000000  00000000  0002deb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7521  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001838  00000000  00000000  000b7564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000b8d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002354 	.word	0x08002354

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08002354 	.word	0x08002354

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <setLED_MLOCAL>:
int mode = 0; // 0 -> Local != 0 -> Serial


// -----------------------------------------------------------------

void setLED_MLOCAL(int state){	// LED @ A0
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	if (state != 0) {
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d007      	beq.n	800023e <setLED_MLOCAL+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800022e:	2390      	movs	r3, #144	@ 0x90
 8000230:	05db      	lsls	r3, r3, #23
 8000232:	2201      	movs	r2, #1
 8000234:	2101      	movs	r1, #1
 8000236:	0018      	movs	r0, r3
 8000238:	f000 fdc9 	bl	8000dce <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 800023c:	e006      	b.n	800024c <setLED_MLOCAL+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800023e:	2390      	movs	r3, #144	@ 0x90
 8000240:	05db      	lsls	r3, r3, #23
 8000242:	2200      	movs	r2, #0
 8000244:	2101      	movs	r1, #1
 8000246:	0018      	movs	r0, r3
 8000248:	f000 fdc1 	bl	8000dce <HAL_GPIO_WritePin>
}
 800024c:	46c0      	nop			@ (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	b002      	add	sp, #8
 8000252:	bd80      	pop	{r7, pc}

08000254 <setLED_MSERIAL>:

void setLED_MSERIAL(int state){ // LED @ A1
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	if (state != 0) {
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d007      	beq.n	8000272 <setLED_MSERIAL+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000262:	2390      	movs	r3, #144	@ 0x90
 8000264:	05db      	lsls	r3, r3, #23
 8000266:	2201      	movs	r2, #1
 8000268:	2102      	movs	r1, #2
 800026a:	0018      	movs	r0, r3
 800026c:	f000 fdaf 	bl	8000dce <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
	}
}
 8000270:	e006      	b.n	8000280 <setLED_MSERIAL+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000272:	2390      	movs	r3, #144	@ 0x90
 8000274:	05db      	lsls	r3, r3, #23
 8000276:	2200      	movs	r2, #0
 8000278:	2102      	movs	r1, #2
 800027a:	0018      	movs	r0, r3
 800027c:	f000 fda7 	bl	8000dce <HAL_GPIO_WritePin>
}
 8000280:	46c0      	nop			@ (mov r8, r8)
 8000282:	46bd      	mov	sp, r7
 8000284:	b002      	add	sp, #8
 8000286:	bd80      	pop	{r7, pc}

08000288 <setLED_BSY>:

void setLED_BSY(int state){		// LED @ A2
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	if (state != 0) {
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d007      	beq.n	80002a6 <setLED_BSY+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000296:	2390      	movs	r3, #144	@ 0x90
 8000298:	05db      	lsls	r3, r3, #23
 800029a:	2201      	movs	r2, #1
 800029c:	2108      	movs	r1, #8
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 fd95 	bl	8000dce <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
	}
}
 80002a4:	e006      	b.n	80002b4 <setLED_BSY+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80002a6:	2390      	movs	r3, #144	@ 0x90
 80002a8:	05db      	lsls	r3, r3, #23
 80002aa:	2200      	movs	r2, #0
 80002ac:	2108      	movs	r1, #8
 80002ae:	0018      	movs	r0, r3
 80002b0:	f000 fd8d 	bl	8000dce <HAL_GPIO_WritePin>
}
 80002b4:	46c0      	nop			@ (mov r8, r8)
 80002b6:	46bd      	mov	sp, r7
 80002b8:	b002      	add	sp, #8
 80002ba:	bd80      	pop	{r7, pc}

080002bc <manageIO>:


void manageIO(){
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0

	// poll Button @ D10
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET){
 80002c0:	2380      	movs	r3, #128	@ 0x80
 80002c2:	011a      	lsls	r2, r3, #4
 80002c4:	2390      	movs	r3, #144	@ 0x90
 80002c6:	05db      	lsls	r3, r3, #23
 80002c8:	0011      	movs	r1, r2
 80002ca:	0018      	movs	r0, r3
 80002cc:	f000 fd62 	bl	8000d94 <HAL_GPIO_ReadPin>
 80002d0:	0003      	movs	r3, r0
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d119      	bne.n	800030a <manageIO+0x4e>
		// 10ms delay for debounce, prolly main delay.
		HAL_Delay(10);
 80002d6:	200a      	movs	r0, #10
 80002d8:	f000 fb1c 	bl	8000914 <HAL_Delay>
		mode = mode != 0 ? 0 : 1;
 80002dc:	4b15      	ldr	r3, [pc, #84]	@ (8000334 <manageIO+0x78>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	425a      	negs	r2, r3
 80002e2:	4153      	adcs	r3, r2
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	001a      	movs	r2, r3
 80002e8:	4b12      	ldr	r3, [pc, #72]	@ (8000334 <manageIO+0x78>)
 80002ea:	601a      	str	r2, [r3, #0]
		// wait until BT is released
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET){
 80002ec:	e002      	b.n	80002f4 <manageIO+0x38>
			HAL_Delay(20);
 80002ee:	2014      	movs	r0, #20
 80002f0:	f000 fb10 	bl	8000914 <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET){
 80002f4:	2380      	movs	r3, #128	@ 0x80
 80002f6:	011a      	lsls	r2, r3, #4
 80002f8:	2390      	movs	r3, #144	@ 0x90
 80002fa:	05db      	lsls	r3, r3, #23
 80002fc:	0011      	movs	r1, r2
 80002fe:	0018      	movs	r0, r3
 8000300:	f000 fd48 	bl	8000d94 <HAL_GPIO_ReadPin>
 8000304:	0003      	movs	r3, r0
 8000306:	2b01      	cmp	r3, #1
 8000308:	d0f1      	beq.n	80002ee <manageIO+0x32>
		}
	}
	if (mode != 0){
 800030a:	4b0a      	ldr	r3, [pc, #40]	@ (8000334 <manageIO+0x78>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d006      	beq.n	8000320 <manageIO+0x64>
		setLED_MLOCAL(0);
 8000312:	2000      	movs	r0, #0
 8000314:	f7ff ff84 	bl	8000220 <setLED_MLOCAL>
		setLED_MSERIAL(1);
 8000318:	2001      	movs	r0, #1
 800031a:	f7ff ff9b 	bl	8000254 <setLED_MSERIAL>
	}
	else {
		setLED_MLOCAL(1);
		setLED_MSERIAL(0);
	}
}
 800031e:	e005      	b.n	800032c <manageIO+0x70>
		setLED_MLOCAL(1);
 8000320:	2001      	movs	r0, #1
 8000322:	f7ff ff7d 	bl	8000220 <setLED_MLOCAL>
		setLED_MSERIAL(0);
 8000326:	2000      	movs	r0, #0
 8000328:	f7ff ff94 	bl	8000254 <setLED_MSERIAL>
}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	46c0      	nop			@ (mov r8, r8)
 8000334:	2000018c 	.word	0x2000018c

08000338 <_mode>:

void _mode(){
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
    return;
 800033c:	46c0      	nop			@ (mov r8, r8)
}
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
	...

08000344 <main>:

int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	// scary ST-Stuff
    HAL_Init();
 8000348:	f000 fa80 	bl	800084c <HAL_Init>

    SystemClock_Config();
 800034c:	f000 f81e 	bl	800038c <SystemClock_Config>

    MX_GPIO_Init();
 8000350:	f000 f8d6 	bl	8000500 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8000354:	f000 f8a4 	bl	80004a0 <MX_USART2_UART_Init>
    MX_USART1_UART_Init();
 8000358:	f000 f870 	bl	800043c <MX_USART1_UART_Init>
    //--------------------------------------------------------------

    // init vars
    writeBuffer = malloc(0);
 800035c:	2000      	movs	r0, #0
 800035e:	f001 fef7 	bl	8002150 <malloc>
 8000362:	0003      	movs	r3, r0
 8000364:	001a      	movs	r2, r3
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <main+0x44>)
 8000368:	601a      	str	r2, [r3, #0]

    // init i/o stuff
    setLED_BSY(0);
 800036a:	2000      	movs	r0, #0
 800036c:	f7ff ff8c 	bl	8000288 <setLED_BSY>
    setLED_MLOCAL(0);
 8000370:	2000      	movs	r0, #0
 8000372:	f7ff ff55 	bl	8000220 <setLED_MLOCAL>
    setLED_MSERIAL(0);
 8000376:	2000      	movs	r0, #0
 8000378:	f7ff ff6c 	bl	8000254 <setLED_MSERIAL>

    // init ESP8266 uart
    while(1){
        manageIO();    // Like toggle LEDs, poll Button, etc.
 800037c:	f7ff ff9e 	bl	80002bc <manageIO>
        _mode();
 8000380:	f7ff ffda 	bl	8000338 <_mode>
        manageIO();    // Like toggle LEDs, poll Button, etc.
 8000384:	46c0      	nop			@ (mov r8, r8)
 8000386:	e7f9      	b.n	800037c <main+0x38>
 8000388:	20000188 	.word	0x20000188

0800038c <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 800038c:	b590      	push	{r4, r7, lr}
 800038e:	b099      	sub	sp, #100	@ 0x64
 8000390:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	242c      	movs	r4, #44	@ 0x2c
 8000394:	193b      	adds	r3, r7, r4
 8000396:	0018      	movs	r0, r3
 8000398:	2334      	movs	r3, #52	@ 0x34
 800039a:	001a      	movs	r2, r3
 800039c:	2100      	movs	r1, #0
 800039e:	f001 ff93 	bl	80022c8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a2:	231c      	movs	r3, #28
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	0018      	movs	r0, r3
 80003a8:	2310      	movs	r3, #16
 80003aa:	001a      	movs	r2, r3
 80003ac:	2100      	movs	r1, #0
 80003ae:	f001 ff8b 	bl	80022c8 <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	0018      	movs	r0, r3
 80003b6:	2318      	movs	r3, #24
 80003b8:	001a      	movs	r2, r3
 80003ba:	2100      	movs	r1, #0
 80003bc:	f001 ff84 	bl	80022c8 <memset>

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c0:	0021      	movs	r1, r4
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2202      	movs	r2, #2
 80003c6:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2201      	movs	r2, #1
 80003cc:	60da      	str	r2, [r3, #12]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	2210      	movs	r2, #16
 80003d2:	611a      	str	r2, [r3, #16]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	2200      	movs	r2, #0
 80003d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	0018      	movs	r0, r3
 80003de:	f000 fd13 	bl	8000e08 <HAL_RCC_OscConfig>
 80003e2:	1e03      	subs	r3, r0, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x5e>
    {
        Error_Handler();
 80003e6:	f000 f8e5 	bl	80005b4 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ea:	211c      	movs	r1, #28
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	2207      	movs	r2, #7
 80003f0:	601a      	str	r2, [r3, #0]
                                |RCC_CLOCKTYPE_PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003f2:	187b      	adds	r3, r7, r1
 80003f4:	2200      	movs	r2, #0
 80003f6:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	2200      	movs	r2, #0
 8000402:	60da      	str	r2, [r3, #12]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2100      	movs	r1, #0
 8000408:	0018      	movs	r0, r3
 800040a:	f001 f883 	bl	8001514 <HAL_RCC_ClockConfig>
 800040e:	1e03      	subs	r3, r0, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0x8a>
    {
        Error_Handler();
 8000412:	f000 f8cf 	bl	80005b4 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2201      	movs	r2, #1
 800041a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	0018      	movs	r0, r3
 8000426:	f001 f9e1 	bl	80017ec <HAL_RCCEx_PeriphCLKConfig>
 800042a:	1e03      	subs	r3, r0, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0xa6>
    {
        Error_Handler();
 800042e:	f000 f8c1 	bl	80005b4 <Error_Handler>
    }
}
 8000432:	46c0      	nop			@ (mov r8, r8)
 8000434:	46bd      	mov	sp, r7
 8000436:	b019      	add	sp, #100	@ 0x64
 8000438:	bd90      	pop	{r4, r7, pc}
	...

0800043c <MX_USART1_UART_Init>:
    * @brief USART1 Initialization Function
    * @param None
    * @retval None
*/
static void MX_USART1_UART_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8000440:	4b15      	ldr	r3, [pc, #84]	@ (8000498 <MX_USART1_UART_Init+0x5c>)
 8000442:	4a16      	ldr	r2, [pc, #88]	@ (800049c <MX_USART1_UART_Init+0x60>)
 8000444:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 9600;
 8000446:	4b14      	ldr	r3, [pc, #80]	@ (8000498 <MX_USART1_UART_Init+0x5c>)
 8000448:	2296      	movs	r2, #150	@ 0x96
 800044a:	0192      	lsls	r2, r2, #6
 800044c:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800044e:	4b12      	ldr	r3, [pc, #72]	@ (8000498 <MX_USART1_UART_Init+0x5c>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000454:	4b10      	ldr	r3, [pc, #64]	@ (8000498 <MX_USART1_UART_Init+0x5c>)
 8000456:	2200      	movs	r2, #0
 8000458:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_EVEN;
 800045a:	4b0f      	ldr	r3, [pc, #60]	@ (8000498 <MX_USART1_UART_Init+0x5c>)
 800045c:	2280      	movs	r2, #128	@ 0x80
 800045e:	00d2      	lsls	r2, r2, #3
 8000460:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000462:	4b0d      	ldr	r3, [pc, #52]	@ (8000498 <MX_USART1_UART_Init+0x5c>)
 8000464:	220c      	movs	r2, #12
 8000466:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000468:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <MX_USART1_UART_Init+0x5c>)
 800046a:	2200      	movs	r2, #0
 800046c:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800046e:	4b0a      	ldr	r3, [pc, #40]	@ (8000498 <MX_USART1_UART_Init+0x5c>)
 8000470:	2200      	movs	r2, #0
 8000472:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000474:	4b08      	ldr	r3, [pc, #32]	@ (8000498 <MX_USART1_UART_Init+0x5c>)
 8000476:	2200      	movs	r2, #0
 8000478:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800047a:	4b07      	ldr	r3, [pc, #28]	@ (8000498 <MX_USART1_UART_Init+0x5c>)
 800047c:	2200      	movs	r2, #0
 800047e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000480:	4b05      	ldr	r3, [pc, #20]	@ (8000498 <MX_USART1_UART_Init+0x5c>)
 8000482:	0018      	movs	r0, r3
 8000484:	f001 faa0 	bl	80019c8 <HAL_UART_Init>
 8000488:	1e03      	subs	r3, r0, #0
 800048a:	d001      	beq.n	8000490 <MX_USART1_UART_Init+0x54>
    {
        Error_Handler();
 800048c:	f000 f892 	bl	80005b4 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8000490:	46c0      	nop			@ (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	20000078 	.word	0x20000078
 800049c:	40013800 	.word	0x40013800

080004a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 80004a4:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <MX_USART2_UART_Init+0x58>)
 80004a6:	4a15      	ldr	r2, [pc, #84]	@ (80004fc <MX_USART2_UART_Init+0x5c>)
 80004a8:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 38400;
 80004aa:	4b13      	ldr	r3, [pc, #76]	@ (80004f8 <MX_USART2_UART_Init+0x58>)
 80004ac:	2296      	movs	r2, #150	@ 0x96
 80004ae:	0212      	lsls	r2, r2, #8
 80004b0:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004b2:	4b11      	ldr	r3, [pc, #68]	@ (80004f8 <MX_USART2_UART_Init+0x58>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	@ (80004f8 <MX_USART2_UART_Init+0x58>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80004be:	4b0e      	ldr	r3, [pc, #56]	@ (80004f8 <MX_USART2_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80004c4:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <MX_USART2_UART_Init+0x58>)
 80004c6:	220c      	movs	r2, #12
 80004c8:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ca:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <MX_USART2_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d0:	4b09      	ldr	r3, [pc, #36]	@ (80004f8 <MX_USART2_UART_Init+0x58>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004d6:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <MX_USART2_UART_Init+0x58>)
 80004d8:	2200      	movs	r2, #0
 80004da:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004dc:	4b06      	ldr	r3, [pc, #24]	@ (80004f8 <MX_USART2_UART_Init+0x58>)
 80004de:	2200      	movs	r2, #0
 80004e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 80004e2:	4b05      	ldr	r3, [pc, #20]	@ (80004f8 <MX_USART2_UART_Init+0x58>)
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 fa6f 	bl	80019c8 <HAL_UART_Init>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d001      	beq.n	80004f2 <MX_USART2_UART_Init+0x52>
    {
        Error_Handler();
 80004ee:	f000 f861 	bl	80005b4 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 80004f2:	46c0      	nop			@ (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000100 	.word	0x20000100
 80004fc:	40004400 	.word	0x40004400

08000500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b089      	sub	sp, #36	@ 0x24
 8000504:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	240c      	movs	r4, #12
 8000508:	193b      	adds	r3, r7, r4
 800050a:	0018      	movs	r0, r3
 800050c:	2314      	movs	r3, #20
 800050e:	001a      	movs	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f001 fed9 	bl	80022c8 <memset>
    /* USER CODE BEGIN MX_GPIO_Init_1 */

    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000516:	4b26      	ldr	r3, [pc, #152]	@ (80005b0 <MX_GPIO_Init+0xb0>)
 8000518:	695a      	ldr	r2, [r3, #20]
 800051a:	4b25      	ldr	r3, [pc, #148]	@ (80005b0 <MX_GPIO_Init+0xb0>)
 800051c:	2180      	movs	r1, #128	@ 0x80
 800051e:	03c9      	lsls	r1, r1, #15
 8000520:	430a      	orrs	r2, r1
 8000522:	615a      	str	r2, [r3, #20]
 8000524:	4b22      	ldr	r3, [pc, #136]	@ (80005b0 <MX_GPIO_Init+0xb0>)
 8000526:	695a      	ldr	r2, [r3, #20]
 8000528:	2380      	movs	r3, #128	@ 0x80
 800052a:	03db      	lsls	r3, r3, #15
 800052c:	4013      	ands	r3, r2
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b1f      	ldr	r3, [pc, #124]	@ (80005b0 <MX_GPIO_Init+0xb0>)
 8000534:	695a      	ldr	r2, [r3, #20]
 8000536:	4b1e      	ldr	r3, [pc, #120]	@ (80005b0 <MX_GPIO_Init+0xb0>)
 8000538:	2180      	movs	r1, #128	@ 0x80
 800053a:	0289      	lsls	r1, r1, #10
 800053c:	430a      	orrs	r2, r1
 800053e:	615a      	str	r2, [r3, #20]
 8000540:	4b1b      	ldr	r3, [pc, #108]	@ (80005b0 <MX_GPIO_Init+0xb0>)
 8000542:	695a      	ldr	r2, [r3, #20]
 8000544:	2380      	movs	r3, #128	@ 0x80
 8000546:	029b      	lsls	r3, r3, #10
 8000548:	4013      	ands	r3, r2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LED_MLOCAL_Pin|LED_MSERIAL_Pin|LED_BSY_Pin|TTY_SEND_Pin, GPIO_PIN_RESET);
 800054e:	2390      	movs	r3, #144	@ 0x90
 8000550:	05db      	lsls	r3, r3, #23
 8000552:	2200      	movs	r2, #0
 8000554:	211b      	movs	r1, #27
 8000556:	0018      	movs	r0, r3
 8000558:	f000 fc39 	bl	8000dce <HAL_GPIO_WritePin>

    /*Configure GPIO pins : LED_MLOCAL_Pin LED_MSERIAL_Pin LED_BSY_Pin TTY_SEND_Pin */
    GPIO_InitStruct.Pin = LED_MLOCAL_Pin|LED_MSERIAL_Pin|LED_BSY_Pin|TTY_SEND_Pin;
 800055c:	193b      	adds	r3, r7, r4
 800055e:	221b      	movs	r2, #27
 8000560:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2201      	movs	r2, #1
 8000566:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	193b      	adds	r3, r7, r4
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056e:	193b      	adds	r3, r7, r4
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000574:	193a      	adds	r2, r7, r4
 8000576:	2390      	movs	r3, #144	@ 0x90
 8000578:	05db      	lsls	r3, r3, #23
 800057a:	0011      	movs	r1, r2
 800057c:	0018      	movs	r0, r3
 800057e:	f000 faa1 	bl	8000ac4 <HAL_GPIO_Init>

    /*Configure GPIO pins : TTY_RECEIVE_Pin BT_Mode_Pin */
    GPIO_InitStruct.Pin = TTY_RECEIVE_Pin|BT_MODE_Pin;
 8000582:	0021      	movs	r1, r4
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2282      	movs	r2, #130	@ 0x82
 8000588:	0112      	lsls	r2, r2, #4
 800058a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000598:	187a      	adds	r2, r7, r1
 800059a:	2390      	movs	r3, #144	@ 0x90
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	0011      	movs	r1, r2
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 fa8f 	bl	8000ac4 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */

    /* USER CODE END MX_GPIO_Init_2 */
}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b009      	add	sp, #36	@ 0x24
 80005ac:	bd90      	pop	{r4, r7, pc}
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	40021000 	.word	0x40021000

080005b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b8:	b672      	cpsid	i
}
 80005ba:	46c0      	nop			@ (mov r8, r8)
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80005bc:	46c0      	nop			@ (mov r8, r8)
 80005be:	e7fd      	b.n	80005bc <Error_Handler+0x8>

080005c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <HAL_MspInit+0x44>)
 80005c8:	699a      	ldr	r2, [r3, #24]
 80005ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <HAL_MspInit+0x44>)
 80005cc:	2101      	movs	r1, #1
 80005ce:	430a      	orrs	r2, r1
 80005d0:	619a      	str	r2, [r3, #24]
 80005d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <HAL_MspInit+0x44>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	2201      	movs	r2, #1
 80005d8:	4013      	ands	r3, r2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005de:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <HAL_MspInit+0x44>)
 80005e0:	69da      	ldr	r2, [r3, #28]
 80005e2:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <HAL_MspInit+0x44>)
 80005e4:	2180      	movs	r1, #128	@ 0x80
 80005e6:	0549      	lsls	r1, r1, #21
 80005e8:	430a      	orrs	r2, r1
 80005ea:	61da      	str	r2, [r3, #28]
 80005ec:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <HAL_MspInit+0x44>)
 80005ee:	69da      	ldr	r2, [r3, #28]
 80005f0:	2380      	movs	r3, #128	@ 0x80
 80005f2:	055b      	lsls	r3, r3, #21
 80005f4:	4013      	ands	r3, r2
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fa:	46c0      	nop			@ (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b002      	add	sp, #8
 8000600:	bd80      	pop	{r7, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	40021000 	.word	0x40021000

08000608 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b08d      	sub	sp, #52	@ 0x34
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	241c      	movs	r4, #28
 8000612:	193b      	adds	r3, r7, r4
 8000614:	0018      	movs	r0, r3
 8000616:	2314      	movs	r3, #20
 8000618:	001a      	movs	r2, r3
 800061a:	2100      	movs	r1, #0
 800061c:	f001 fe54 	bl	80022c8 <memset>
  if(huart->Instance==USART1)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a39      	ldr	r2, [pc, #228]	@ (800070c <HAL_UART_MspInit+0x104>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d134      	bne.n	8000694 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800062a:	4b39      	ldr	r3, [pc, #228]	@ (8000710 <HAL_UART_MspInit+0x108>)
 800062c:	699a      	ldr	r2, [r3, #24]
 800062e:	4b38      	ldr	r3, [pc, #224]	@ (8000710 <HAL_UART_MspInit+0x108>)
 8000630:	2180      	movs	r1, #128	@ 0x80
 8000632:	01c9      	lsls	r1, r1, #7
 8000634:	430a      	orrs	r2, r1
 8000636:	619a      	str	r2, [r3, #24]
 8000638:	4b35      	ldr	r3, [pc, #212]	@ (8000710 <HAL_UART_MspInit+0x108>)
 800063a:	699a      	ldr	r2, [r3, #24]
 800063c:	2380      	movs	r3, #128	@ 0x80
 800063e:	01db      	lsls	r3, r3, #7
 8000640:	4013      	ands	r3, r2
 8000642:	61bb      	str	r3, [r7, #24]
 8000644:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b32      	ldr	r3, [pc, #200]	@ (8000710 <HAL_UART_MspInit+0x108>)
 8000648:	695a      	ldr	r2, [r3, #20]
 800064a:	4b31      	ldr	r3, [pc, #196]	@ (8000710 <HAL_UART_MspInit+0x108>)
 800064c:	2180      	movs	r1, #128	@ 0x80
 800064e:	0289      	lsls	r1, r1, #10
 8000650:	430a      	orrs	r2, r1
 8000652:	615a      	str	r2, [r3, #20]
 8000654:	4b2e      	ldr	r3, [pc, #184]	@ (8000710 <HAL_UART_MspInit+0x108>)
 8000656:	695a      	ldr	r2, [r3, #20]
 8000658:	2380      	movs	r3, #128	@ 0x80
 800065a:	029b      	lsls	r3, r3, #10
 800065c:	4013      	ands	r3, r2
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000662:	193b      	adds	r3, r7, r4
 8000664:	22c0      	movs	r2, #192	@ 0xc0
 8000666:	00d2      	lsls	r2, r2, #3
 8000668:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066a:	0021      	movs	r1, r4
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2202      	movs	r2, #2
 8000670:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2203      	movs	r2, #3
 800067c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2201      	movs	r2, #1
 8000682:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	187a      	adds	r2, r7, r1
 8000686:	2390      	movs	r3, #144	@ 0x90
 8000688:	05db      	lsls	r3, r3, #23
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fa19 	bl	8000ac4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000692:	e037      	b.n	8000704 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a1e      	ldr	r2, [pc, #120]	@ (8000714 <HAL_UART_MspInit+0x10c>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d132      	bne.n	8000704 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800069e:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <HAL_UART_MspInit+0x108>)
 80006a0:	69da      	ldr	r2, [r3, #28]
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <HAL_UART_MspInit+0x108>)
 80006a4:	2180      	movs	r1, #128	@ 0x80
 80006a6:	0289      	lsls	r1, r1, #10
 80006a8:	430a      	orrs	r2, r1
 80006aa:	61da      	str	r2, [r3, #28]
 80006ac:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <HAL_UART_MspInit+0x108>)
 80006ae:	69da      	ldr	r2, [r3, #28]
 80006b0:	2380      	movs	r3, #128	@ 0x80
 80006b2:	029b      	lsls	r3, r3, #10
 80006b4:	4013      	ands	r3, r2
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <HAL_UART_MspInit+0x108>)
 80006bc:	695a      	ldr	r2, [r3, #20]
 80006be:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <HAL_UART_MspInit+0x108>)
 80006c0:	2180      	movs	r1, #128	@ 0x80
 80006c2:	0289      	lsls	r1, r1, #10
 80006c4:	430a      	orrs	r2, r1
 80006c6:	615a      	str	r2, [r3, #20]
 80006c8:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <HAL_UART_MspInit+0x108>)
 80006ca:	695a      	ldr	r2, [r3, #20]
 80006cc:	2380      	movs	r3, #128	@ 0x80
 80006ce:	029b      	lsls	r3, r3, #10
 80006d0:	4013      	ands	r3, r2
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80006d6:	211c      	movs	r1, #28
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	4a0f      	ldr	r2, [pc, #60]	@ (8000718 <HAL_UART_MspInit+0x110>)
 80006dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2202      	movs	r2, #2
 80006e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2203      	movs	r2, #3
 80006ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2201      	movs	r2, #1
 80006f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	187a      	adds	r2, r7, r1
 80006f8:	2390      	movs	r3, #144	@ 0x90
 80006fa:	05db      	lsls	r3, r3, #23
 80006fc:	0011      	movs	r1, r2
 80006fe:	0018      	movs	r0, r3
 8000700:	f000 f9e0 	bl	8000ac4 <HAL_GPIO_Init>
}
 8000704:	46c0      	nop			@ (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	b00d      	add	sp, #52	@ 0x34
 800070a:	bd90      	pop	{r4, r7, pc}
 800070c:	40013800 	.word	0x40013800
 8000710:	40021000 	.word	0x40021000
 8000714:	40004400 	.word	0x40004400
 8000718:	00008004 	.word	0x00008004

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000720:	46c0      	nop			@ (mov r8, r8)
 8000722:	e7fd      	b.n	8000720 <NMI_Handler+0x4>

08000724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000728:	46c0      	nop			@ (mov r8, r8)
 800072a:	e7fd      	b.n	8000728 <HardFault_Handler+0x4>

0800072c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000730:	46c0      	nop			@ (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000744:	f000 f8ca 	bl	80008dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000748:	46c0      	nop			@ (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000758:	4a14      	ldr	r2, [pc, #80]	@ (80007ac <_sbrk+0x5c>)
 800075a:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <_sbrk+0x60>)
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000764:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <_sbrk+0x64>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d102      	bne.n	8000772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <_sbrk+0x64>)
 800076e:	4a12      	ldr	r2, [pc, #72]	@ (80007b8 <_sbrk+0x68>)
 8000770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <_sbrk+0x64>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	18d3      	adds	r3, r2, r3
 800077a:	693a      	ldr	r2, [r7, #16]
 800077c:	429a      	cmp	r2, r3
 800077e:	d207      	bcs.n	8000790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000780:	f001 fdbc 	bl	80022fc <__errno>
 8000784:	0003      	movs	r3, r0
 8000786:	220c      	movs	r2, #12
 8000788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800078a:	2301      	movs	r3, #1
 800078c:	425b      	negs	r3, r3
 800078e:	e009      	b.n	80007a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000790:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <_sbrk+0x64>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000796:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <_sbrk+0x64>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	18d2      	adds	r2, r2, r3
 800079e:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <_sbrk+0x64>)
 80007a0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007a2:	68fb      	ldr	r3, [r7, #12]
}
 80007a4:	0018      	movs	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b006      	add	sp, #24
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20001800 	.word	0x20001800
 80007b0:	00000400 	.word	0x00000400
 80007b4:	20000190 	.word	0x20000190
 80007b8:	200002e0 	.word	0x200002e0

080007bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007c0:	46c0      	nop			@ (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007c8:	4813      	ldr	r0, [pc, #76]	@ (8000818 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007cc:	f7ff fff6 	bl	80007bc <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80007d0:	4812      	ldr	r0, [pc, #72]	@ (800081c <LoopForever+0x6>)
    LDR R1, [R0]
 80007d2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80007d4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80007d6:	4a12      	ldr	r2, [pc, #72]	@ (8000820 <LoopForever+0xa>)
    CMP R1, R2
 80007d8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80007da:	d105      	bne.n	80007e8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80007dc:	4811      	ldr	r0, [pc, #68]	@ (8000824 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80007de:	4912      	ldr	r1, [pc, #72]	@ (8000828 <LoopForever+0x12>)
    STR R1, [R0]
 80007e0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80007e2:	4812      	ldr	r0, [pc, #72]	@ (800082c <LoopForever+0x16>)
    LDR R1,=0x00000000
 80007e4:	4912      	ldr	r1, [pc, #72]	@ (8000830 <LoopForever+0x1a>)
    STR R1, [R0]
 80007e6:	6001      	str	r1, [r0, #0]

080007e8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e8:	4812      	ldr	r0, [pc, #72]	@ (8000834 <LoopForever+0x1e>)
  ldr r1, =_edata
 80007ea:	4913      	ldr	r1, [pc, #76]	@ (8000838 <LoopForever+0x22>)
  ldr r2, =_sidata
 80007ec:	4a13      	ldr	r2, [pc, #76]	@ (800083c <LoopForever+0x26>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f0:	e002      	b.n	80007f8 <LoopCopyDataInit>

080007f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f6:	3304      	adds	r3, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007fc:	d3f9      	bcc.n	80007f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fe:	4a10      	ldr	r2, [pc, #64]	@ (8000840 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000800:	4c10      	ldr	r4, [pc, #64]	@ (8000844 <LoopForever+0x2e>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000804:	e001      	b.n	800080a <LoopFillZerobss>

08000806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000808:	3204      	adds	r2, #4

0800080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800080c:	d3fb      	bcc.n	8000806 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800080e:	f001 fd7b 	bl	8002308 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000812:	f7ff fd97 	bl	8000344 <main>

08000816 <LoopForever>:

LoopForever:
    b LoopForever
 8000816:	e7fe      	b.n	8000816 <LoopForever>
  ldr   r0, =_estack
 8000818:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800081c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000820:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000824:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000828:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800082c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000830:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000838:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800083c:	080023ac 	.word	0x080023ac
  ldr r2, =_sbss
 8000840:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000844:	200002e0 	.word	0x200002e0

08000848 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC1_IRQHandler>
	...

0800084c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000850:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <HAL_Init+0x24>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <HAL_Init+0x24>)
 8000856:	2110      	movs	r1, #16
 8000858:	430a      	orrs	r2, r1
 800085a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800085c:	2000      	movs	r0, #0
 800085e:	f000 f809 	bl	8000874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000862:	f7ff fead 	bl	80005c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000866:	2300      	movs	r3, #0
}
 8000868:	0018      	movs	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	40022000 	.word	0x40022000

08000874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800087c:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <HAL_InitTick+0x5c>)
 800087e:	681c      	ldr	r4, [r3, #0]
 8000880:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <HAL_InitTick+0x60>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	0019      	movs	r1, r3
 8000886:	23fa      	movs	r3, #250	@ 0xfa
 8000888:	0098      	lsls	r0, r3, #2
 800088a:	f7ff fc3d 	bl	8000108 <__udivsi3>
 800088e:	0003      	movs	r3, r0
 8000890:	0019      	movs	r1, r3
 8000892:	0020      	movs	r0, r4
 8000894:	f7ff fc38 	bl	8000108 <__udivsi3>
 8000898:	0003      	movs	r3, r0
 800089a:	0018      	movs	r0, r3
 800089c:	f000 f905 	bl	8000aaa <HAL_SYSTICK_Config>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d001      	beq.n	80008a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008a4:	2301      	movs	r3, #1
 80008a6:	e00f      	b.n	80008c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	d80b      	bhi.n	80008c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	2301      	movs	r3, #1
 80008b2:	425b      	negs	r3, r3
 80008b4:	2200      	movs	r2, #0
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 f8e2 	bl	8000a80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <HAL_InitTick+0x64>)
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008c2:	2300      	movs	r3, #0
 80008c4:	e000      	b.n	80008c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	0018      	movs	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b003      	add	sp, #12
 80008ce:	bd90      	pop	{r4, r7, pc}
 80008d0:	20000000 	.word	0x20000000
 80008d4:	20000008 	.word	0x20000008
 80008d8:	20000004 	.word	0x20000004

080008dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e0:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <HAL_IncTick+0x1c>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	001a      	movs	r2, r3
 80008e6:	4b05      	ldr	r3, [pc, #20]	@ (80008fc <HAL_IncTick+0x20>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	18d2      	adds	r2, r2, r3
 80008ec:	4b03      	ldr	r3, [pc, #12]	@ (80008fc <HAL_IncTick+0x20>)
 80008ee:	601a      	str	r2, [r3, #0]
}
 80008f0:	46c0      	nop			@ (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000194 	.word	0x20000194

08000900 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  return uwTick;
 8000904:	4b02      	ldr	r3, [pc, #8]	@ (8000910 <HAL_GetTick+0x10>)
 8000906:	681b      	ldr	r3, [r3, #0]
}
 8000908:	0018      	movs	r0, r3
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	20000194 	.word	0x20000194

08000914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800091c:	f7ff fff0 	bl	8000900 <HAL_GetTick>
 8000920:	0003      	movs	r3, r0
 8000922:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	3301      	adds	r3, #1
 800092c:	d005      	beq.n	800093a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800092e:	4b0a      	ldr	r3, [pc, #40]	@ (8000958 <HAL_Delay+0x44>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	001a      	movs	r2, r3
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	189b      	adds	r3, r3, r2
 8000938:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800093a:	46c0      	nop			@ (mov r8, r8)
 800093c:	f7ff ffe0 	bl	8000900 <HAL_GetTick>
 8000940:	0002      	movs	r2, r0
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	429a      	cmp	r2, r3
 800094a:	d8f7      	bhi.n	800093c <HAL_Delay+0x28>
  {
  }
}
 800094c:	46c0      	nop			@ (mov r8, r8)
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b004      	add	sp, #16
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	20000008 	.word	0x20000008

0800095c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	0002      	movs	r2, r0
 8000964:	6039      	str	r1, [r7, #0]
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000970:	d828      	bhi.n	80009c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000972:	4a2f      	ldr	r2, [pc, #188]	@ (8000a30 <__NVIC_SetPriority+0xd4>)
 8000974:	1dfb      	adds	r3, r7, #7
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b25b      	sxtb	r3, r3
 800097a:	089b      	lsrs	r3, r3, #2
 800097c:	33c0      	adds	r3, #192	@ 0xc0
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	589b      	ldr	r3, [r3, r2]
 8000982:	1dfa      	adds	r2, r7, #7
 8000984:	7812      	ldrb	r2, [r2, #0]
 8000986:	0011      	movs	r1, r2
 8000988:	2203      	movs	r2, #3
 800098a:	400a      	ands	r2, r1
 800098c:	00d2      	lsls	r2, r2, #3
 800098e:	21ff      	movs	r1, #255	@ 0xff
 8000990:	4091      	lsls	r1, r2
 8000992:	000a      	movs	r2, r1
 8000994:	43d2      	mvns	r2, r2
 8000996:	401a      	ands	r2, r3
 8000998:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	019b      	lsls	r3, r3, #6
 800099e:	22ff      	movs	r2, #255	@ 0xff
 80009a0:	401a      	ands	r2, r3
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	0018      	movs	r0, r3
 80009a8:	2303      	movs	r3, #3
 80009aa:	4003      	ands	r3, r0
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009b0:	481f      	ldr	r0, [pc, #124]	@ (8000a30 <__NVIC_SetPriority+0xd4>)
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b25b      	sxtb	r3, r3
 80009b8:	089b      	lsrs	r3, r3, #2
 80009ba:	430a      	orrs	r2, r1
 80009bc:	33c0      	adds	r3, #192	@ 0xc0
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009c2:	e031      	b.n	8000a28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a34 <__NVIC_SetPriority+0xd8>)
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	0019      	movs	r1, r3
 80009cc:	230f      	movs	r3, #15
 80009ce:	400b      	ands	r3, r1
 80009d0:	3b08      	subs	r3, #8
 80009d2:	089b      	lsrs	r3, r3, #2
 80009d4:	3306      	adds	r3, #6
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	18d3      	adds	r3, r2, r3
 80009da:	3304      	adds	r3, #4
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	1dfa      	adds	r2, r7, #7
 80009e0:	7812      	ldrb	r2, [r2, #0]
 80009e2:	0011      	movs	r1, r2
 80009e4:	2203      	movs	r2, #3
 80009e6:	400a      	ands	r2, r1
 80009e8:	00d2      	lsls	r2, r2, #3
 80009ea:	21ff      	movs	r1, #255	@ 0xff
 80009ec:	4091      	lsls	r1, r2
 80009ee:	000a      	movs	r2, r1
 80009f0:	43d2      	mvns	r2, r2
 80009f2:	401a      	ands	r2, r3
 80009f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	019b      	lsls	r3, r3, #6
 80009fa:	22ff      	movs	r2, #255	@ 0xff
 80009fc:	401a      	ands	r2, r3
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	0018      	movs	r0, r3
 8000a04:	2303      	movs	r3, #3
 8000a06:	4003      	ands	r3, r0
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a0c:	4809      	ldr	r0, [pc, #36]	@ (8000a34 <__NVIC_SetPriority+0xd8>)
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	001c      	movs	r4, r3
 8000a14:	230f      	movs	r3, #15
 8000a16:	4023      	ands	r3, r4
 8000a18:	3b08      	subs	r3, #8
 8000a1a:	089b      	lsrs	r3, r3, #2
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	3306      	adds	r3, #6
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	18c3      	adds	r3, r0, r3
 8000a24:	3304      	adds	r3, #4
 8000a26:	601a      	str	r2, [r3, #0]
}
 8000a28:	46c0      	nop			@ (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b003      	add	sp, #12
 8000a2e:	bd90      	pop	{r4, r7, pc}
 8000a30:	e000e100 	.word	0xe000e100
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	1e5a      	subs	r2, r3, #1
 8000a44:	2380      	movs	r3, #128	@ 0x80
 8000a46:	045b      	lsls	r3, r3, #17
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d301      	bcc.n	8000a50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e010      	b.n	8000a72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a50:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <SysTick_Config+0x44>)
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	3a01      	subs	r2, #1
 8000a56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a58:	2301      	movs	r3, #1
 8000a5a:	425b      	negs	r3, r3
 8000a5c:	2103      	movs	r1, #3
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f7ff ff7c 	bl	800095c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a64:	4b05      	ldr	r3, [pc, #20]	@ (8000a7c <SysTick_Config+0x44>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6a:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <SysTick_Config+0x44>)
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	0018      	movs	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b002      	add	sp, #8
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			@ (mov r8, r8)
 8000a7c:	e000e010 	.word	0xe000e010

08000a80 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	1c02      	adds	r2, r0, #0
 8000a90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b25b      	sxtb	r3, r3
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f7ff ff5d 	bl	800095c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000aa2:	46c0      	nop			@ (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b004      	add	sp, #16
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f7ff ffbf 	bl	8000a38 <SysTick_Config>
 8000aba:	0003      	movs	r3, r0
}
 8000abc:	0018      	movs	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b002      	add	sp, #8
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad2:	e149      	b.n	8000d68 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2101      	movs	r1, #1
 8000ada:	697a      	ldr	r2, [r7, #20]
 8000adc:	4091      	lsls	r1, r2
 8000ade:	000a      	movs	r2, r1
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d100      	bne.n	8000aec <HAL_GPIO_Init+0x28>
 8000aea:	e13a      	b.n	8000d62 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	2203      	movs	r2, #3
 8000af2:	4013      	ands	r3, r2
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d005      	beq.n	8000b04 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	2203      	movs	r2, #3
 8000afe:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d130      	bne.n	8000b66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	2203      	movs	r2, #3
 8000b10:	409a      	lsls	r2, r3
 8000b12:	0013      	movs	r3, r2
 8000b14:	43da      	mvns	r2, r3
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	409a      	lsls	r2, r3
 8000b26:	0013      	movs	r3, r2
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	0013      	movs	r3, r2
 8000b42:	43da      	mvns	r2, r3
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	091b      	lsrs	r3, r3, #4
 8000b50:	2201      	movs	r2, #1
 8000b52:	401a      	ands	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	409a      	lsls	r2, r3
 8000b58:	0013      	movs	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	2203      	movs	r2, #3
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	d017      	beq.n	8000ba2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	409a      	lsls	r2, r3
 8000b80:	0013      	movs	r3, r2
 8000b82:	43da      	mvns	r2, r3
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	409a      	lsls	r2, r3
 8000b94:	0013      	movs	r3, r2
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	4013      	ands	r3, r2
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d123      	bne.n	8000bf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	08da      	lsrs	r2, r3, #3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3208      	adds	r2, #8
 8000bb6:	0092      	lsls	r2, r2, #2
 8000bb8:	58d3      	ldr	r3, [r2, r3]
 8000bba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	2207      	movs	r2, #7
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	220f      	movs	r2, #15
 8000bc6:	409a      	lsls	r2, r3
 8000bc8:	0013      	movs	r3, r2
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	691a      	ldr	r2, [r3, #16]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	2107      	movs	r1, #7
 8000bda:	400b      	ands	r3, r1
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	409a      	lsls	r2, r3
 8000be0:	0013      	movs	r3, r2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	08da      	lsrs	r2, r3, #3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3208      	adds	r2, #8
 8000bf0:	0092      	lsls	r2, r2, #2
 8000bf2:	6939      	ldr	r1, [r7, #16]
 8000bf4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	2203      	movs	r2, #3
 8000c02:	409a      	lsls	r2, r3
 8000c04:	0013      	movs	r3, r2
 8000c06:	43da      	mvns	r2, r3
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2203      	movs	r2, #3
 8000c14:	401a      	ands	r2, r3
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	409a      	lsls	r2, r3
 8000c1c:	0013      	movs	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	23c0      	movs	r3, #192	@ 0xc0
 8000c30:	029b      	lsls	r3, r3, #10
 8000c32:	4013      	ands	r3, r2
 8000c34:	d100      	bne.n	8000c38 <HAL_GPIO_Init+0x174>
 8000c36:	e094      	b.n	8000d62 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c38:	4b51      	ldr	r3, [pc, #324]	@ (8000d80 <HAL_GPIO_Init+0x2bc>)
 8000c3a:	699a      	ldr	r2, [r3, #24]
 8000c3c:	4b50      	ldr	r3, [pc, #320]	@ (8000d80 <HAL_GPIO_Init+0x2bc>)
 8000c3e:	2101      	movs	r1, #1
 8000c40:	430a      	orrs	r2, r1
 8000c42:	619a      	str	r2, [r3, #24]
 8000c44:	4b4e      	ldr	r3, [pc, #312]	@ (8000d80 <HAL_GPIO_Init+0x2bc>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	2201      	movs	r2, #1
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c50:	4a4c      	ldr	r2, [pc, #304]	@ (8000d84 <HAL_GPIO_Init+0x2c0>)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	089b      	lsrs	r3, r3, #2
 8000c56:	3302      	adds	r3, #2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	589b      	ldr	r3, [r3, r2]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	2203      	movs	r2, #3
 8000c62:	4013      	ands	r3, r2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	220f      	movs	r2, #15
 8000c68:	409a      	lsls	r2, r3
 8000c6a:	0013      	movs	r3, r2
 8000c6c:	43da      	mvns	r2, r3
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	2390      	movs	r3, #144	@ 0x90
 8000c78:	05db      	lsls	r3, r3, #23
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d00d      	beq.n	8000c9a <HAL_GPIO_Init+0x1d6>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a41      	ldr	r2, [pc, #260]	@ (8000d88 <HAL_GPIO_Init+0x2c4>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d007      	beq.n	8000c96 <HAL_GPIO_Init+0x1d2>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a40      	ldr	r2, [pc, #256]	@ (8000d8c <HAL_GPIO_Init+0x2c8>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d101      	bne.n	8000c92 <HAL_GPIO_Init+0x1ce>
 8000c8e:	2302      	movs	r3, #2
 8000c90:	e004      	b.n	8000c9c <HAL_GPIO_Init+0x1d8>
 8000c92:	2305      	movs	r3, #5
 8000c94:	e002      	b.n	8000c9c <HAL_GPIO_Init+0x1d8>
 8000c96:	2301      	movs	r3, #1
 8000c98:	e000      	b.n	8000c9c <HAL_GPIO_Init+0x1d8>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	2103      	movs	r1, #3
 8000ca0:	400a      	ands	r2, r1
 8000ca2:	0092      	lsls	r2, r2, #2
 8000ca4:	4093      	lsls	r3, r2
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cac:	4935      	ldr	r1, [pc, #212]	@ (8000d84 <HAL_GPIO_Init+0x2c0>)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	089b      	lsrs	r3, r3, #2
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cba:	4b35      	ldr	r3, [pc, #212]	@ (8000d90 <HAL_GPIO_Init+0x2cc>)
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	2380      	movs	r3, #128	@ 0x80
 8000cd0:	035b      	lsls	r3, r3, #13
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cde:	4b2c      	ldr	r3, [pc, #176]	@ (8000d90 <HAL_GPIO_Init+0x2cc>)
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d90 <HAL_GPIO_Init+0x2cc>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	43da      	mvns	r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	2380      	movs	r3, #128	@ 0x80
 8000cfa:	039b      	lsls	r3, r3, #14
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d08:	4b21      	ldr	r3, [pc, #132]	@ (8000d90 <HAL_GPIO_Init+0x2cc>)
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000d0e:	4b20      	ldr	r3, [pc, #128]	@ (8000d90 <HAL_GPIO_Init+0x2cc>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	43da      	mvns	r2, r3
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	2380      	movs	r3, #128	@ 0x80
 8000d24:	029b      	lsls	r3, r3, #10
 8000d26:	4013      	ands	r3, r2
 8000d28:	d003      	beq.n	8000d32 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d32:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <HAL_GPIO_Init+0x2cc>)
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000d38:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <HAL_GPIO_Init+0x2cc>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	43da      	mvns	r2, r3
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	2380      	movs	r3, #128	@ 0x80
 8000d4e:	025b      	lsls	r3, r3, #9
 8000d50:	4013      	ands	r3, r2
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <HAL_GPIO_Init+0x2cc>)
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	3301      	adds	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	40da      	lsrs	r2, r3
 8000d70:	1e13      	subs	r3, r2, #0
 8000d72:	d000      	beq.n	8000d76 <HAL_GPIO_Init+0x2b2>
 8000d74:	e6ae      	b.n	8000ad4 <HAL_GPIO_Init+0x10>
  } 
}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	46c0      	nop			@ (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b006      	add	sp, #24
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010000 	.word	0x40010000
 8000d88:	48000400 	.word	0x48000400
 8000d8c:	48000800 	.word	0x48000800
 8000d90:	40010400 	.word	0x40010400

08000d94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	000a      	movs	r2, r1
 8000d9e:	1cbb      	adds	r3, r7, #2
 8000da0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	1cba      	adds	r2, r7, #2
 8000da8:	8812      	ldrh	r2, [r2, #0]
 8000daa:	4013      	ands	r3, r2
 8000dac:	d004      	beq.n	8000db8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000dae:	230f      	movs	r3, #15
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
 8000db6:	e003      	b.n	8000dc0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000db8:	230f      	movs	r3, #15
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000dc0:	230f      	movs	r3, #15
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	781b      	ldrb	r3, [r3, #0]
  }
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b004      	add	sp, #16
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	0008      	movs	r0, r1
 8000dd8:	0011      	movs	r1, r2
 8000dda:	1cbb      	adds	r3, r7, #2
 8000ddc:	1c02      	adds	r2, r0, #0
 8000dde:	801a      	strh	r2, [r3, #0]
 8000de0:	1c7b      	adds	r3, r7, #1
 8000de2:	1c0a      	adds	r2, r1, #0
 8000de4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000de6:	1c7b      	adds	r3, r7, #1
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d004      	beq.n	8000df8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dee:	1cbb      	adds	r3, r7, #2
 8000df0:	881a      	ldrh	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000df6:	e003      	b.n	8000e00 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000df8:	1cbb      	adds	r3, r7, #2
 8000dfa:	881a      	ldrh	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e00:	46c0      	nop			@ (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b002      	add	sp, #8
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d102      	bne.n	8000e1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f000 fb76 	bl	8001508 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2201      	movs	r2, #1
 8000e22:	4013      	ands	r3, r2
 8000e24:	d100      	bne.n	8000e28 <HAL_RCC_OscConfig+0x20>
 8000e26:	e08e      	b.n	8000f46 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e28:	4bc5      	ldr	r3, [pc, #788]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	220c      	movs	r2, #12
 8000e2e:	4013      	ands	r3, r2
 8000e30:	2b04      	cmp	r3, #4
 8000e32:	d00e      	beq.n	8000e52 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e34:	4bc2      	ldr	r3, [pc, #776]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	220c      	movs	r2, #12
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	2b08      	cmp	r3, #8
 8000e3e:	d117      	bne.n	8000e70 <HAL_RCC_OscConfig+0x68>
 8000e40:	4bbf      	ldr	r3, [pc, #764]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	23c0      	movs	r3, #192	@ 0xc0
 8000e46:	025b      	lsls	r3, r3, #9
 8000e48:	401a      	ands	r2, r3
 8000e4a:	2380      	movs	r3, #128	@ 0x80
 8000e4c:	025b      	lsls	r3, r3, #9
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d10e      	bne.n	8000e70 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e52:	4bbb      	ldr	r3, [pc, #748]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	2380      	movs	r3, #128	@ 0x80
 8000e58:	029b      	lsls	r3, r3, #10
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	d100      	bne.n	8000e60 <HAL_RCC_OscConfig+0x58>
 8000e5e:	e071      	b.n	8000f44 <HAL_RCC_OscConfig+0x13c>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d000      	beq.n	8000e6a <HAL_RCC_OscConfig+0x62>
 8000e68:	e06c      	b.n	8000f44 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	f000 fb4c 	bl	8001508 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d107      	bne.n	8000e88 <HAL_RCC_OscConfig+0x80>
 8000e78:	4bb1      	ldr	r3, [pc, #708]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4bb0      	ldr	r3, [pc, #704]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000e7e:	2180      	movs	r1, #128	@ 0x80
 8000e80:	0249      	lsls	r1, r1, #9
 8000e82:	430a      	orrs	r2, r1
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	e02f      	b.n	8000ee8 <HAL_RCC_OscConfig+0xe0>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d10c      	bne.n	8000eaa <HAL_RCC_OscConfig+0xa2>
 8000e90:	4bab      	ldr	r3, [pc, #684]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4baa      	ldr	r3, [pc, #680]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000e96:	49ab      	ldr	r1, [pc, #684]	@ (8001144 <HAL_RCC_OscConfig+0x33c>)
 8000e98:	400a      	ands	r2, r1
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	4ba8      	ldr	r3, [pc, #672]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4ba7      	ldr	r3, [pc, #668]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000ea2:	49a9      	ldr	r1, [pc, #676]	@ (8001148 <HAL_RCC_OscConfig+0x340>)
 8000ea4:	400a      	ands	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	e01e      	b.n	8000ee8 <HAL_RCC_OscConfig+0xe0>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b05      	cmp	r3, #5
 8000eb0:	d10e      	bne.n	8000ed0 <HAL_RCC_OscConfig+0xc8>
 8000eb2:	4ba3      	ldr	r3, [pc, #652]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4ba2      	ldr	r3, [pc, #648]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000eb8:	2180      	movs	r1, #128	@ 0x80
 8000eba:	02c9      	lsls	r1, r1, #11
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	4b9f      	ldr	r3, [pc, #636]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b9e      	ldr	r3, [pc, #632]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000ec6:	2180      	movs	r1, #128	@ 0x80
 8000ec8:	0249      	lsls	r1, r1, #9
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	e00b      	b.n	8000ee8 <HAL_RCC_OscConfig+0xe0>
 8000ed0:	4b9b      	ldr	r3, [pc, #620]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b9a      	ldr	r3, [pc, #616]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000ed6:	499b      	ldr	r1, [pc, #620]	@ (8001144 <HAL_RCC_OscConfig+0x33c>)
 8000ed8:	400a      	ands	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	4b98      	ldr	r3, [pc, #608]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b97      	ldr	r3, [pc, #604]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000ee2:	4999      	ldr	r1, [pc, #612]	@ (8001148 <HAL_RCC_OscConfig+0x340>)
 8000ee4:	400a      	ands	r2, r1
 8000ee6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d014      	beq.n	8000f1a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef0:	f7ff fd06 	bl	8000900 <HAL_GetTick>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef8:	e008      	b.n	8000f0c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000efa:	f7ff fd01 	bl	8000900 <HAL_GetTick>
 8000efe:	0002      	movs	r2, r0
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b64      	cmp	r3, #100	@ 0x64
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e2fd      	b.n	8001508 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f0c:	4b8c      	ldr	r3, [pc, #560]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	2380      	movs	r3, #128	@ 0x80
 8000f12:	029b      	lsls	r3, r3, #10
 8000f14:	4013      	ands	r3, r2
 8000f16:	d0f0      	beq.n	8000efa <HAL_RCC_OscConfig+0xf2>
 8000f18:	e015      	b.n	8000f46 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1a:	f7ff fcf1 	bl	8000900 <HAL_GetTick>
 8000f1e:	0003      	movs	r3, r0
 8000f20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f24:	f7ff fcec 	bl	8000900 <HAL_GetTick>
 8000f28:	0002      	movs	r2, r0
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b64      	cmp	r3, #100	@ 0x64
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e2e8      	b.n	8001508 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f36:	4b82      	ldr	r3, [pc, #520]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	2380      	movs	r3, #128	@ 0x80
 8000f3c:	029b      	lsls	r3, r3, #10
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d1f0      	bne.n	8000f24 <HAL_RCC_OscConfig+0x11c>
 8000f42:	e000      	b.n	8000f46 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f44:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d100      	bne.n	8000f52 <HAL_RCC_OscConfig+0x14a>
 8000f50:	e06c      	b.n	800102c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f52:	4b7b      	ldr	r3, [pc, #492]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	220c      	movs	r2, #12
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d00e      	beq.n	8000f7a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f5c:	4b78      	ldr	r3, [pc, #480]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	220c      	movs	r2, #12
 8000f62:	4013      	ands	r3, r2
 8000f64:	2b08      	cmp	r3, #8
 8000f66:	d11f      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x1a0>
 8000f68:	4b75      	ldr	r3, [pc, #468]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	23c0      	movs	r3, #192	@ 0xc0
 8000f6e:	025b      	lsls	r3, r3, #9
 8000f70:	401a      	ands	r2, r3
 8000f72:	2380      	movs	r3, #128	@ 0x80
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d116      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f7a:	4b71      	ldr	r3, [pc, #452]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2202      	movs	r2, #2
 8000f80:	4013      	ands	r3, r2
 8000f82:	d005      	beq.n	8000f90 <HAL_RCC_OscConfig+0x188>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d001      	beq.n	8000f90 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e2bb      	b.n	8001508 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f90:	4b6b      	ldr	r3, [pc, #428]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	22f8      	movs	r2, #248	@ 0xf8
 8000f96:	4393      	bics	r3, r2
 8000f98:	0019      	movs	r1, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	00da      	lsls	r2, r3, #3
 8000fa0:	4b67      	ldr	r3, [pc, #412]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa6:	e041      	b.n	800102c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d024      	beq.n	8000ffa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fb0:	4b63      	ldr	r3, [pc, #396]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b62      	ldr	r3, [pc, #392]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fca0 	bl	8000900 <HAL_GetTick>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fc6:	f7ff fc9b 	bl	8000900 <HAL_GetTick>
 8000fca:	0002      	movs	r2, r0
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e297      	b.n	8001508 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd8:	4b59      	ldr	r3, [pc, #356]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2202      	movs	r2, #2
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d0f1      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe2:	4b57      	ldr	r3, [pc, #348]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	22f8      	movs	r2, #248	@ 0xf8
 8000fe8:	4393      	bics	r3, r2
 8000fea:	0019      	movs	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	00da      	lsls	r2, r3, #3
 8000ff2:	4b53      	ldr	r3, [pc, #332]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	e018      	b.n	800102c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ffa:	4b51      	ldr	r3, [pc, #324]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b50      	ldr	r3, [pc, #320]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8001000:	2101      	movs	r1, #1
 8001002:	438a      	bics	r2, r1
 8001004:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001006:	f7ff fc7b 	bl	8000900 <HAL_GetTick>
 800100a:	0003      	movs	r3, r0
 800100c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001010:	f7ff fc76 	bl	8000900 <HAL_GetTick>
 8001014:	0002      	movs	r2, r0
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b02      	cmp	r3, #2
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e272      	b.n	8001508 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001022:	4b47      	ldr	r3, [pc, #284]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2202      	movs	r2, #2
 8001028:	4013      	ands	r3, r2
 800102a:	d1f1      	bne.n	8001010 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2208      	movs	r2, #8
 8001032:	4013      	ands	r3, r2
 8001034:	d036      	beq.n	80010a4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d019      	beq.n	8001072 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800103e:	4b40      	ldr	r3, [pc, #256]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8001040:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001042:	4b3f      	ldr	r3, [pc, #252]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8001044:	2101      	movs	r1, #1
 8001046:	430a      	orrs	r2, r1
 8001048:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104a:	f7ff fc59 	bl	8000900 <HAL_GetTick>
 800104e:	0003      	movs	r3, r0
 8001050:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001054:	f7ff fc54 	bl	8000900 <HAL_GetTick>
 8001058:	0002      	movs	r2, r0
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e250      	b.n	8001508 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001066:	4b36      	ldr	r3, [pc, #216]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8001068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106a:	2202      	movs	r2, #2
 800106c:	4013      	ands	r3, r2
 800106e:	d0f1      	beq.n	8001054 <HAL_RCC_OscConfig+0x24c>
 8001070:	e018      	b.n	80010a4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001072:	4b33      	ldr	r3, [pc, #204]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8001074:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001076:	4b32      	ldr	r3, [pc, #200]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8001078:	2101      	movs	r1, #1
 800107a:	438a      	bics	r2, r1
 800107c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107e:	f7ff fc3f 	bl	8000900 <HAL_GetTick>
 8001082:	0003      	movs	r3, r0
 8001084:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001088:	f7ff fc3a 	bl	8000900 <HAL_GetTick>
 800108c:	0002      	movs	r2, r0
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e236      	b.n	8001508 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800109a:	4b29      	ldr	r3, [pc, #164]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 800109c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109e:	2202      	movs	r2, #2
 80010a0:	4013      	ands	r3, r2
 80010a2:	d1f1      	bne.n	8001088 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2204      	movs	r2, #4
 80010aa:	4013      	ands	r3, r2
 80010ac:	d100      	bne.n	80010b0 <HAL_RCC_OscConfig+0x2a8>
 80010ae:	e0b5      	b.n	800121c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010b0:	201f      	movs	r0, #31
 80010b2:	183b      	adds	r3, r7, r0
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010b8:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 80010ba:	69da      	ldr	r2, [r3, #28]
 80010bc:	2380      	movs	r3, #128	@ 0x80
 80010be:	055b      	lsls	r3, r3, #21
 80010c0:	4013      	ands	r3, r2
 80010c2:	d110      	bne.n	80010e6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 80010c6:	69da      	ldr	r2, [r3, #28]
 80010c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 80010ca:	2180      	movs	r1, #128	@ 0x80
 80010cc:	0549      	lsls	r1, r1, #21
 80010ce:	430a      	orrs	r2, r1
 80010d0:	61da      	str	r2, [r3, #28]
 80010d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 80010d4:	69da      	ldr	r2, [r3, #28]
 80010d6:	2380      	movs	r3, #128	@ 0x80
 80010d8:	055b      	lsls	r3, r3, #21
 80010da:	4013      	ands	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010e0:	183b      	adds	r3, r7, r0
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e6:	4b19      	ldr	r3, [pc, #100]	@ (800114c <HAL_RCC_OscConfig+0x344>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	2380      	movs	r3, #128	@ 0x80
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4013      	ands	r3, r2
 80010f0:	d11a      	bne.n	8001128 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010f2:	4b16      	ldr	r3, [pc, #88]	@ (800114c <HAL_RCC_OscConfig+0x344>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b15      	ldr	r3, [pc, #84]	@ (800114c <HAL_RCC_OscConfig+0x344>)
 80010f8:	2180      	movs	r1, #128	@ 0x80
 80010fa:	0049      	lsls	r1, r1, #1
 80010fc:	430a      	orrs	r2, r1
 80010fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001100:	f7ff fbfe 	bl	8000900 <HAL_GetTick>
 8001104:	0003      	movs	r3, r0
 8001106:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800110a:	f7ff fbf9 	bl	8000900 <HAL_GetTick>
 800110e:	0002      	movs	r2, r0
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b64      	cmp	r3, #100	@ 0x64
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e1f5      	b.n	8001508 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800111c:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <HAL_RCC_OscConfig+0x344>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2380      	movs	r3, #128	@ 0x80
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4013      	ands	r3, r2
 8001126:	d0f0      	beq.n	800110a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d10f      	bne.n	8001150 <HAL_RCC_OscConfig+0x348>
 8001130:	4b03      	ldr	r3, [pc, #12]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8001132:	6a1a      	ldr	r2, [r3, #32]
 8001134:	4b02      	ldr	r3, [pc, #8]	@ (8001140 <HAL_RCC_OscConfig+0x338>)
 8001136:	2101      	movs	r1, #1
 8001138:	430a      	orrs	r2, r1
 800113a:	621a      	str	r2, [r3, #32]
 800113c:	e036      	b.n	80011ac <HAL_RCC_OscConfig+0x3a4>
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	40021000 	.word	0x40021000
 8001144:	fffeffff 	.word	0xfffeffff
 8001148:	fffbffff 	.word	0xfffbffff
 800114c:	40007000 	.word	0x40007000
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10c      	bne.n	8001172 <HAL_RCC_OscConfig+0x36a>
 8001158:	4bca      	ldr	r3, [pc, #808]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 800115a:	6a1a      	ldr	r2, [r3, #32]
 800115c:	4bc9      	ldr	r3, [pc, #804]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 800115e:	2101      	movs	r1, #1
 8001160:	438a      	bics	r2, r1
 8001162:	621a      	str	r2, [r3, #32]
 8001164:	4bc7      	ldr	r3, [pc, #796]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001166:	6a1a      	ldr	r2, [r3, #32]
 8001168:	4bc6      	ldr	r3, [pc, #792]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 800116a:	2104      	movs	r1, #4
 800116c:	438a      	bics	r2, r1
 800116e:	621a      	str	r2, [r3, #32]
 8001170:	e01c      	b.n	80011ac <HAL_RCC_OscConfig+0x3a4>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	2b05      	cmp	r3, #5
 8001178:	d10c      	bne.n	8001194 <HAL_RCC_OscConfig+0x38c>
 800117a:	4bc2      	ldr	r3, [pc, #776]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 800117c:	6a1a      	ldr	r2, [r3, #32]
 800117e:	4bc1      	ldr	r3, [pc, #772]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001180:	2104      	movs	r1, #4
 8001182:	430a      	orrs	r2, r1
 8001184:	621a      	str	r2, [r3, #32]
 8001186:	4bbf      	ldr	r3, [pc, #764]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001188:	6a1a      	ldr	r2, [r3, #32]
 800118a:	4bbe      	ldr	r3, [pc, #760]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 800118c:	2101      	movs	r1, #1
 800118e:	430a      	orrs	r2, r1
 8001190:	621a      	str	r2, [r3, #32]
 8001192:	e00b      	b.n	80011ac <HAL_RCC_OscConfig+0x3a4>
 8001194:	4bbb      	ldr	r3, [pc, #748]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001196:	6a1a      	ldr	r2, [r3, #32]
 8001198:	4bba      	ldr	r3, [pc, #744]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 800119a:	2101      	movs	r1, #1
 800119c:	438a      	bics	r2, r1
 800119e:	621a      	str	r2, [r3, #32]
 80011a0:	4bb8      	ldr	r3, [pc, #736]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 80011a2:	6a1a      	ldr	r2, [r3, #32]
 80011a4:	4bb7      	ldr	r3, [pc, #732]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 80011a6:	2104      	movs	r1, #4
 80011a8:	438a      	bics	r2, r1
 80011aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d014      	beq.n	80011de <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b4:	f7ff fba4 	bl	8000900 <HAL_GetTick>
 80011b8:	0003      	movs	r3, r0
 80011ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011bc:	e009      	b.n	80011d2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011be:	f7ff fb9f 	bl	8000900 <HAL_GetTick>
 80011c2:	0002      	movs	r2, r0
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	4aaf      	ldr	r2, [pc, #700]	@ (8001488 <HAL_RCC_OscConfig+0x680>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e19a      	b.n	8001508 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d2:	4bac      	ldr	r3, [pc, #688]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	2202      	movs	r2, #2
 80011d8:	4013      	ands	r3, r2
 80011da:	d0f0      	beq.n	80011be <HAL_RCC_OscConfig+0x3b6>
 80011dc:	e013      	b.n	8001206 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011de:	f7ff fb8f 	bl	8000900 <HAL_GetTick>
 80011e2:	0003      	movs	r3, r0
 80011e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e6:	e009      	b.n	80011fc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011e8:	f7ff fb8a 	bl	8000900 <HAL_GetTick>
 80011ec:	0002      	movs	r2, r0
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	4aa5      	ldr	r2, [pc, #660]	@ (8001488 <HAL_RCC_OscConfig+0x680>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e185      	b.n	8001508 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011fc:	4ba1      	ldr	r3, [pc, #644]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	2202      	movs	r2, #2
 8001202:	4013      	ands	r3, r2
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001206:	231f      	movs	r3, #31
 8001208:	18fb      	adds	r3, r7, r3
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d105      	bne.n	800121c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001210:	4b9c      	ldr	r3, [pc, #624]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001212:	69da      	ldr	r2, [r3, #28]
 8001214:	4b9b      	ldr	r3, [pc, #620]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001216:	499d      	ldr	r1, [pc, #628]	@ (800148c <HAL_RCC_OscConfig+0x684>)
 8001218:	400a      	ands	r2, r1
 800121a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2210      	movs	r2, #16
 8001222:	4013      	ands	r3, r2
 8001224:	d063      	beq.n	80012ee <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d12a      	bne.n	8001284 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800122e:	4b95      	ldr	r3, [pc, #596]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001232:	4b94      	ldr	r3, [pc, #592]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001234:	2104      	movs	r1, #4
 8001236:	430a      	orrs	r2, r1
 8001238:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800123a:	4b92      	ldr	r3, [pc, #584]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 800123c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800123e:	4b91      	ldr	r3, [pc, #580]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001240:	2101      	movs	r1, #1
 8001242:	430a      	orrs	r2, r1
 8001244:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001246:	f7ff fb5b 	bl	8000900 <HAL_GetTick>
 800124a:	0003      	movs	r3, r0
 800124c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001250:	f7ff fb56 	bl	8000900 <HAL_GetTick>
 8001254:	0002      	movs	r2, r0
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e152      	b.n	8001508 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001262:	4b88      	ldr	r3, [pc, #544]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001266:	2202      	movs	r2, #2
 8001268:	4013      	ands	r3, r2
 800126a:	d0f1      	beq.n	8001250 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800126c:	4b85      	ldr	r3, [pc, #532]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 800126e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001270:	22f8      	movs	r2, #248	@ 0xf8
 8001272:	4393      	bics	r3, r2
 8001274:	0019      	movs	r1, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	00da      	lsls	r2, r3, #3
 800127c:	4b81      	ldr	r3, [pc, #516]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 800127e:	430a      	orrs	r2, r1
 8001280:	635a      	str	r2, [r3, #52]	@ 0x34
 8001282:	e034      	b.n	80012ee <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	3305      	adds	r3, #5
 800128a:	d111      	bne.n	80012b0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800128c:	4b7d      	ldr	r3, [pc, #500]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 800128e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001290:	4b7c      	ldr	r3, [pc, #496]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001292:	2104      	movs	r1, #4
 8001294:	438a      	bics	r2, r1
 8001296:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001298:	4b7a      	ldr	r3, [pc, #488]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 800129a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800129c:	22f8      	movs	r2, #248	@ 0xf8
 800129e:	4393      	bics	r3, r2
 80012a0:	0019      	movs	r1, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	00da      	lsls	r2, r3, #3
 80012a8:	4b76      	ldr	r3, [pc, #472]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 80012aa:	430a      	orrs	r2, r1
 80012ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80012ae:	e01e      	b.n	80012ee <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012b0:	4b74      	ldr	r3, [pc, #464]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 80012b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012b4:	4b73      	ldr	r3, [pc, #460]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 80012b6:	2104      	movs	r1, #4
 80012b8:	430a      	orrs	r2, r1
 80012ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80012bc:	4b71      	ldr	r3, [pc, #452]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 80012be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012c0:	4b70      	ldr	r3, [pc, #448]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 80012c2:	2101      	movs	r1, #1
 80012c4:	438a      	bics	r2, r1
 80012c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c8:	f7ff fb1a 	bl	8000900 <HAL_GetTick>
 80012cc:	0003      	movs	r3, r0
 80012ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012d2:	f7ff fb15 	bl	8000900 <HAL_GetTick>
 80012d6:	0002      	movs	r2, r0
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e111      	b.n	8001508 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012e4:	4b67      	ldr	r3, [pc, #412]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 80012e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012e8:	2202      	movs	r2, #2
 80012ea:	4013      	ands	r3, r2
 80012ec:	d1f1      	bne.n	80012d2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2220      	movs	r2, #32
 80012f4:	4013      	ands	r3, r2
 80012f6:	d05c      	beq.n	80013b2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80012f8:	4b62      	ldr	r3, [pc, #392]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	220c      	movs	r2, #12
 80012fe:	4013      	ands	r3, r2
 8001300:	2b0c      	cmp	r3, #12
 8001302:	d00e      	beq.n	8001322 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001304:	4b5f      	ldr	r3, [pc, #380]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	220c      	movs	r2, #12
 800130a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800130c:	2b08      	cmp	r3, #8
 800130e:	d114      	bne.n	800133a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001310:	4b5c      	ldr	r3, [pc, #368]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	23c0      	movs	r3, #192	@ 0xc0
 8001316:	025b      	lsls	r3, r3, #9
 8001318:	401a      	ands	r2, r3
 800131a:	23c0      	movs	r3, #192	@ 0xc0
 800131c:	025b      	lsls	r3, r3, #9
 800131e:	429a      	cmp	r2, r3
 8001320:	d10b      	bne.n	800133a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001322:	4b58      	ldr	r3, [pc, #352]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001324:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001326:	2380      	movs	r3, #128	@ 0x80
 8001328:	029b      	lsls	r3, r3, #10
 800132a:	4013      	ands	r3, r2
 800132c:	d040      	beq.n	80013b0 <HAL_RCC_OscConfig+0x5a8>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d03c      	beq.n	80013b0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e0e6      	b.n	8001508 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d01b      	beq.n	800137a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001342:	4b50      	ldr	r3, [pc, #320]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001344:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001346:	4b4f      	ldr	r3, [pc, #316]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001348:	2180      	movs	r1, #128	@ 0x80
 800134a:	0249      	lsls	r1, r1, #9
 800134c:	430a      	orrs	r2, r1
 800134e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fad6 	bl	8000900 <HAL_GetTick>
 8001354:	0003      	movs	r3, r0
 8001356:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800135a:	f7ff fad1 	bl	8000900 <HAL_GetTick>
 800135e:	0002      	movs	r2, r0
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e0cd      	b.n	8001508 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800136c:	4b45      	ldr	r3, [pc, #276]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 800136e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001370:	2380      	movs	r3, #128	@ 0x80
 8001372:	029b      	lsls	r3, r3, #10
 8001374:	4013      	ands	r3, r2
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0x552>
 8001378:	e01b      	b.n	80013b2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800137a:	4b42      	ldr	r3, [pc, #264]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 800137c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800137e:	4b41      	ldr	r3, [pc, #260]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001380:	4943      	ldr	r1, [pc, #268]	@ (8001490 <HAL_RCC_OscConfig+0x688>)
 8001382:	400a      	ands	r2, r1
 8001384:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001386:	f7ff fabb 	bl	8000900 <HAL_GetTick>
 800138a:	0003      	movs	r3, r0
 800138c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001390:	f7ff fab6 	bl	8000900 <HAL_GetTick>
 8001394:	0002      	movs	r2, r0
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e0b2      	b.n	8001508 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80013a2:	4b38      	ldr	r3, [pc, #224]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 80013a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013a6:	2380      	movs	r3, #128	@ 0x80
 80013a8:	029b      	lsls	r3, r3, #10
 80013aa:	4013      	ands	r3, r2
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x588>
 80013ae:	e000      	b.n	80013b2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80013b0:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d100      	bne.n	80013bc <HAL_RCC_OscConfig+0x5b4>
 80013ba:	e0a4      	b.n	8001506 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013bc:	4b31      	ldr	r3, [pc, #196]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	220c      	movs	r2, #12
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	d100      	bne.n	80013ca <HAL_RCC_OscConfig+0x5c2>
 80013c8:	e078      	b.n	80014bc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d14c      	bne.n	800146c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 80013d8:	492e      	ldr	r1, [pc, #184]	@ (8001494 <HAL_RCC_OscConfig+0x68c>)
 80013da:	400a      	ands	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7ff fa8f 	bl	8000900 <HAL_GetTick>
 80013e2:	0003      	movs	r3, r0
 80013e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e8:	f7ff fa8a 	bl	8000900 <HAL_GetTick>
 80013ec:	0002      	movs	r2, r0
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e086      	b.n	8001508 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fa:	4b22      	ldr	r3, [pc, #136]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	2380      	movs	r3, #128	@ 0x80
 8001400:	049b      	lsls	r3, r3, #18
 8001402:	4013      	ands	r3, r2
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001406:	4b1f      	ldr	r3, [pc, #124]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800140a:	220f      	movs	r2, #15
 800140c:	4393      	bics	r3, r2
 800140e:	0019      	movs	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001414:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001416:	430a      	orrs	r2, r1
 8001418:	62da      	str	r2, [r3, #44]	@ 0x2c
 800141a:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4a1e      	ldr	r2, [pc, #120]	@ (8001498 <HAL_RCC_OscConfig+0x690>)
 8001420:	4013      	ands	r3, r2
 8001422:	0019      	movs	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800142c:	431a      	orrs	r2, r3
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001430:	430a      	orrs	r2, r1
 8001432:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001434:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 800143a:	2180      	movs	r1, #128	@ 0x80
 800143c:	0449      	lsls	r1, r1, #17
 800143e:	430a      	orrs	r2, r1
 8001440:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001442:	f7ff fa5d 	bl	8000900 <HAL_GetTick>
 8001446:	0003      	movs	r3, r0
 8001448:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144c:	f7ff fa58 	bl	8000900 <HAL_GetTick>
 8001450:	0002      	movs	r2, r0
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e054      	b.n	8001508 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800145e:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	2380      	movs	r3, #128	@ 0x80
 8001464:	049b      	lsls	r3, r3, #18
 8001466:	4013      	ands	r3, r2
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x644>
 800146a:	e04c      	b.n	8001506 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146c:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b04      	ldr	r3, [pc, #16]	@ (8001484 <HAL_RCC_OscConfig+0x67c>)
 8001472:	4908      	ldr	r1, [pc, #32]	@ (8001494 <HAL_RCC_OscConfig+0x68c>)
 8001474:	400a      	ands	r2, r1
 8001476:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fa42 	bl	8000900 <HAL_GetTick>
 800147c:	0003      	movs	r3, r0
 800147e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001480:	e015      	b.n	80014ae <HAL_RCC_OscConfig+0x6a6>
 8001482:	46c0      	nop			@ (mov r8, r8)
 8001484:	40021000 	.word	0x40021000
 8001488:	00001388 	.word	0x00001388
 800148c:	efffffff 	.word	0xefffffff
 8001490:	fffeffff 	.word	0xfffeffff
 8001494:	feffffff 	.word	0xfeffffff
 8001498:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800149c:	f7ff fa30 	bl	8000900 <HAL_GetTick>
 80014a0:	0002      	movs	r2, r0
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e02c      	b.n	8001508 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ae:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <HAL_RCC_OscConfig+0x708>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	2380      	movs	r3, #128	@ 0x80
 80014b4:	049b      	lsls	r3, r3, #18
 80014b6:	4013      	ands	r3, r2
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x694>
 80014ba:	e024      	b.n	8001506 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e01f      	b.n	8001508 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014c8:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <HAL_RCC_OscConfig+0x708>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <HAL_RCC_OscConfig+0x708>)
 80014d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	23c0      	movs	r3, #192	@ 0xc0
 80014d8:	025b      	lsls	r3, r3, #9
 80014da:	401a      	ands	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d10e      	bne.n	8001502 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	220f      	movs	r2, #15
 80014e8:	401a      	ands	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	23f0      	movs	r3, #240	@ 0xf0
 80014f6:	039b      	lsls	r3, r3, #14
 80014f8:	401a      	ands	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014fe:	429a      	cmp	r2, r3
 8001500:	d001      	beq.n	8001506 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	0018      	movs	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	b008      	add	sp, #32
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000

08001514 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0bf      	b.n	80016a8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001528:	4b61      	ldr	r3, [pc, #388]	@ (80016b0 <HAL_RCC_ClockConfig+0x19c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2201      	movs	r2, #1
 800152e:	4013      	ands	r3, r2
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d911      	bls.n	800155a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	4b5e      	ldr	r3, [pc, #376]	@ (80016b0 <HAL_RCC_ClockConfig+0x19c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2201      	movs	r2, #1
 800153c:	4393      	bics	r3, r2
 800153e:	0019      	movs	r1, r3
 8001540:	4b5b      	ldr	r3, [pc, #364]	@ (80016b0 <HAL_RCC_ClockConfig+0x19c>)
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001548:	4b59      	ldr	r3, [pc, #356]	@ (80016b0 <HAL_RCC_ClockConfig+0x19c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2201      	movs	r2, #1
 800154e:	4013      	ands	r3, r2
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d001      	beq.n	800155a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e0a6      	b.n	80016a8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2202      	movs	r2, #2
 8001560:	4013      	ands	r3, r2
 8001562:	d015      	beq.n	8001590 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2204      	movs	r2, #4
 800156a:	4013      	ands	r3, r2
 800156c:	d006      	beq.n	800157c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800156e:	4b51      	ldr	r3, [pc, #324]	@ (80016b4 <HAL_RCC_ClockConfig+0x1a0>)
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	4b50      	ldr	r3, [pc, #320]	@ (80016b4 <HAL_RCC_ClockConfig+0x1a0>)
 8001574:	21e0      	movs	r1, #224	@ 0xe0
 8001576:	00c9      	lsls	r1, r1, #3
 8001578:	430a      	orrs	r2, r1
 800157a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800157c:	4b4d      	ldr	r3, [pc, #308]	@ (80016b4 <HAL_RCC_ClockConfig+0x1a0>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	22f0      	movs	r2, #240	@ 0xf0
 8001582:	4393      	bics	r3, r2
 8001584:	0019      	movs	r1, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	4b4a      	ldr	r3, [pc, #296]	@ (80016b4 <HAL_RCC_ClockConfig+0x1a0>)
 800158c:	430a      	orrs	r2, r1
 800158e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2201      	movs	r2, #1
 8001596:	4013      	ands	r3, r2
 8001598:	d04c      	beq.n	8001634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d107      	bne.n	80015b2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a2:	4b44      	ldr	r3, [pc, #272]	@ (80016b4 <HAL_RCC_ClockConfig+0x1a0>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	2380      	movs	r3, #128	@ 0x80
 80015a8:	029b      	lsls	r3, r3, #10
 80015aa:	4013      	ands	r3, r2
 80015ac:	d120      	bne.n	80015f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e07a      	b.n	80016a8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d107      	bne.n	80015ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ba:	4b3e      	ldr	r3, [pc, #248]	@ (80016b4 <HAL_RCC_ClockConfig+0x1a0>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	2380      	movs	r3, #128	@ 0x80
 80015c0:	049b      	lsls	r3, r3, #18
 80015c2:	4013      	ands	r3, r2
 80015c4:	d114      	bne.n	80015f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e06e      	b.n	80016a8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015d2:	4b38      	ldr	r3, [pc, #224]	@ (80016b4 <HAL_RCC_ClockConfig+0x1a0>)
 80015d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015d6:	2380      	movs	r3, #128	@ 0x80
 80015d8:	029b      	lsls	r3, r3, #10
 80015da:	4013      	ands	r3, r2
 80015dc:	d108      	bne.n	80015f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e062      	b.n	80016a8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e2:	4b34      	ldr	r3, [pc, #208]	@ (80016b4 <HAL_RCC_ClockConfig+0x1a0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2202      	movs	r2, #2
 80015e8:	4013      	ands	r3, r2
 80015ea:	d101      	bne.n	80015f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e05b      	b.n	80016a8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f0:	4b30      	ldr	r3, [pc, #192]	@ (80016b4 <HAL_RCC_ClockConfig+0x1a0>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2203      	movs	r2, #3
 80015f6:	4393      	bics	r3, r2
 80015f8:	0019      	movs	r1, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	4b2d      	ldr	r3, [pc, #180]	@ (80016b4 <HAL_RCC_ClockConfig+0x1a0>)
 8001600:	430a      	orrs	r2, r1
 8001602:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001604:	f7ff f97c 	bl	8000900 <HAL_GetTick>
 8001608:	0003      	movs	r3, r0
 800160a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160c:	e009      	b.n	8001622 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800160e:	f7ff f977 	bl	8000900 <HAL_GetTick>
 8001612:	0002      	movs	r2, r0
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	4a27      	ldr	r2, [pc, #156]	@ (80016b8 <HAL_RCC_ClockConfig+0x1a4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e042      	b.n	80016a8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001622:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <HAL_RCC_ClockConfig+0x1a0>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	220c      	movs	r2, #12
 8001628:	401a      	ands	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	429a      	cmp	r2, r3
 8001632:	d1ec      	bne.n	800160e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001634:	4b1e      	ldr	r3, [pc, #120]	@ (80016b0 <HAL_RCC_ClockConfig+0x19c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2201      	movs	r2, #1
 800163a:	4013      	ands	r3, r2
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d211      	bcs.n	8001666 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	4b1b      	ldr	r3, [pc, #108]	@ (80016b0 <HAL_RCC_ClockConfig+0x19c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2201      	movs	r2, #1
 8001648:	4393      	bics	r3, r2
 800164a:	0019      	movs	r1, r3
 800164c:	4b18      	ldr	r3, [pc, #96]	@ (80016b0 <HAL_RCC_ClockConfig+0x19c>)
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001654:	4b16      	ldr	r3, [pc, #88]	@ (80016b0 <HAL_RCC_ClockConfig+0x19c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2201      	movs	r2, #1
 800165a:	4013      	ands	r3, r2
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d001      	beq.n	8001666 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e020      	b.n	80016a8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2204      	movs	r2, #4
 800166c:	4013      	ands	r3, r2
 800166e:	d009      	beq.n	8001684 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001670:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <HAL_RCC_ClockConfig+0x1a0>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	4a11      	ldr	r2, [pc, #68]	@ (80016bc <HAL_RCC_ClockConfig+0x1a8>)
 8001676:	4013      	ands	r3, r2
 8001678:	0019      	movs	r1, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <HAL_RCC_ClockConfig+0x1a0>)
 8001680:	430a      	orrs	r2, r1
 8001682:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001684:	f000 f820 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 8001688:	0001      	movs	r1, r0
 800168a:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <HAL_RCC_ClockConfig+0x1a0>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	091b      	lsrs	r3, r3, #4
 8001690:	220f      	movs	r2, #15
 8001692:	4013      	ands	r3, r2
 8001694:	4a0a      	ldr	r2, [pc, #40]	@ (80016c0 <HAL_RCC_ClockConfig+0x1ac>)
 8001696:	5cd3      	ldrb	r3, [r2, r3]
 8001698:	000a      	movs	r2, r1
 800169a:	40da      	lsrs	r2, r3
 800169c:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <HAL_RCC_ClockConfig+0x1b0>)
 800169e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff f8e7 	bl	8000874 <HAL_InitTick>
  
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	0018      	movs	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b004      	add	sp, #16
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40022000 	.word	0x40022000
 80016b4:	40021000 	.word	0x40021000
 80016b8:	00001388 	.word	0x00001388
 80016bc:	fffff8ff 	.word	0xfffff8ff
 80016c0:	0800236c 	.word	0x0800236c
 80016c4:	20000000 	.word	0x20000000

080016c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80016e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001798 <HAL_RCC_GetSysClockFreq+0xd0>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	220c      	movs	r2, #12
 80016ec:	4013      	ands	r3, r2
 80016ee:	2b0c      	cmp	r3, #12
 80016f0:	d046      	beq.n	8001780 <HAL_RCC_GetSysClockFreq+0xb8>
 80016f2:	d848      	bhi.n	8001786 <HAL_RCC_GetSysClockFreq+0xbe>
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d002      	beq.n	80016fe <HAL_RCC_GetSysClockFreq+0x36>
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d003      	beq.n	8001704 <HAL_RCC_GetSysClockFreq+0x3c>
 80016fc:	e043      	b.n	8001786 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016fe:	4b27      	ldr	r3, [pc, #156]	@ (800179c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001700:	613b      	str	r3, [r7, #16]
      break;
 8001702:	e043      	b.n	800178c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	0c9b      	lsrs	r3, r3, #18
 8001708:	220f      	movs	r2, #15
 800170a:	4013      	ands	r3, r2
 800170c:	4a24      	ldr	r2, [pc, #144]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800170e:	5cd3      	ldrb	r3, [r2, r3]
 8001710:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001712:	4b21      	ldr	r3, [pc, #132]	@ (8001798 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001716:	220f      	movs	r2, #15
 8001718:	4013      	ands	r3, r2
 800171a:	4a22      	ldr	r2, [pc, #136]	@ (80017a4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800171c:	5cd3      	ldrb	r3, [r2, r3]
 800171e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	23c0      	movs	r3, #192	@ 0xc0
 8001724:	025b      	lsls	r3, r3, #9
 8001726:	401a      	ands	r2, r3
 8001728:	2380      	movs	r3, #128	@ 0x80
 800172a:	025b      	lsls	r3, r3, #9
 800172c:	429a      	cmp	r2, r3
 800172e:	d109      	bne.n	8001744 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	481a      	ldr	r0, [pc, #104]	@ (800179c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001734:	f7fe fce8 	bl	8000108 <__udivsi3>
 8001738:	0003      	movs	r3, r0
 800173a:	001a      	movs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4353      	muls	r3, r2
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	e01a      	b.n	800177a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	23c0      	movs	r3, #192	@ 0xc0
 8001748:	025b      	lsls	r3, r3, #9
 800174a:	401a      	ands	r2, r3
 800174c:	23c0      	movs	r3, #192	@ 0xc0
 800174e:	025b      	lsls	r3, r3, #9
 8001750:	429a      	cmp	r2, r3
 8001752:	d109      	bne.n	8001768 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	4814      	ldr	r0, [pc, #80]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001758:	f7fe fcd6 	bl	8000108 <__udivsi3>
 800175c:	0003      	movs	r3, r0
 800175e:	001a      	movs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4353      	muls	r3, r2
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	e008      	b.n	800177a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	480c      	ldr	r0, [pc, #48]	@ (800179c <HAL_RCC_GetSysClockFreq+0xd4>)
 800176c:	f7fe fccc 	bl	8000108 <__udivsi3>
 8001770:	0003      	movs	r3, r0
 8001772:	001a      	movs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4353      	muls	r3, r2
 8001778:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	613b      	str	r3, [r7, #16]
      break;
 800177e:	e005      	b.n	800178c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001780:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001782:	613b      	str	r3, [r7, #16]
      break;
 8001784:	e002      	b.n	800178c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001786:	4b05      	ldr	r3, [pc, #20]	@ (800179c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001788:	613b      	str	r3, [r7, #16]
      break;
 800178a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800178c:	693b      	ldr	r3, [r7, #16]
}
 800178e:	0018      	movs	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	b006      	add	sp, #24
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			@ (mov r8, r8)
 8001798:	40021000 	.word	0x40021000
 800179c:	007a1200 	.word	0x007a1200
 80017a0:	08002384 	.word	0x08002384
 80017a4:	08002394 	.word	0x08002394
 80017a8:	02dc6c00 	.word	0x02dc6c00

080017ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017b0:	4b02      	ldr	r3, [pc, #8]	@ (80017bc <HAL_RCC_GetHCLKFreq+0x10>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	0018      	movs	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			@ (mov r8, r8)
 80017bc:	20000000 	.word	0x20000000

080017c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80017c4:	f7ff fff2 	bl	80017ac <HAL_RCC_GetHCLKFreq>
 80017c8:	0001      	movs	r1, r0
 80017ca:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	2207      	movs	r2, #7
 80017d2:	4013      	ands	r3, r2
 80017d4:	4a04      	ldr	r2, [pc, #16]	@ (80017e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80017d6:	5cd3      	ldrb	r3, [r2, r3]
 80017d8:	40d9      	lsrs	r1, r3
 80017da:	000b      	movs	r3, r1
}    
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	46c0      	nop			@ (mov r8, r8)
 80017e4:	40021000 	.word	0x40021000
 80017e8:	0800237c 	.word	0x0800237c

080017ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	025b      	lsls	r3, r3, #9
 8001804:	4013      	ands	r3, r2
 8001806:	d100      	bne.n	800180a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001808:	e08e      	b.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800180a:	2017      	movs	r0, #23
 800180c:	183b      	adds	r3, r7, r0
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001812:	4b67      	ldr	r3, [pc, #412]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001814:	69da      	ldr	r2, [r3, #28]
 8001816:	2380      	movs	r3, #128	@ 0x80
 8001818:	055b      	lsls	r3, r3, #21
 800181a:	4013      	ands	r3, r2
 800181c:	d110      	bne.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b64      	ldr	r3, [pc, #400]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001820:	69da      	ldr	r2, [r3, #28]
 8001822:	4b63      	ldr	r3, [pc, #396]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001824:	2180      	movs	r1, #128	@ 0x80
 8001826:	0549      	lsls	r1, r1, #21
 8001828:	430a      	orrs	r2, r1
 800182a:	61da      	str	r2, [r3, #28]
 800182c:	4b60      	ldr	r3, [pc, #384]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800182e:	69da      	ldr	r2, [r3, #28]
 8001830:	2380      	movs	r3, #128	@ 0x80
 8001832:	055b      	lsls	r3, r3, #21
 8001834:	4013      	ands	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800183a:	183b      	adds	r3, r7, r0
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001840:	4b5c      	ldr	r3, [pc, #368]	@ (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2380      	movs	r3, #128	@ 0x80
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4013      	ands	r3, r2
 800184a:	d11a      	bne.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184c:	4b59      	ldr	r3, [pc, #356]	@ (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b58      	ldr	r3, [pc, #352]	@ (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001852:	2180      	movs	r1, #128	@ 0x80
 8001854:	0049      	lsls	r1, r1, #1
 8001856:	430a      	orrs	r2, r1
 8001858:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185a:	f7ff f851 	bl	8000900 <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001862:	e008      	b.n	8001876 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001864:	f7ff f84c 	bl	8000900 <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b64      	cmp	r3, #100	@ 0x64
 8001870:	d901      	bls.n	8001876 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e097      	b.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001876:	4b4f      	ldr	r3, [pc, #316]	@ (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	@ 0x80
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4013      	ands	r3, r2
 8001880:	d0f0      	beq.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001882:	4b4b      	ldr	r3, [pc, #300]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001884:	6a1a      	ldr	r2, [r3, #32]
 8001886:	23c0      	movs	r3, #192	@ 0xc0
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4013      	ands	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d034      	beq.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	23c0      	movs	r3, #192	@ 0xc0
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4013      	ands	r3, r2
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d02c      	beq.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018a4:	4b42      	ldr	r3, [pc, #264]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	4a43      	ldr	r2, [pc, #268]	@ (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018ae:	4b40      	ldr	r3, [pc, #256]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018b0:	6a1a      	ldr	r2, [r3, #32]
 80018b2:	4b3f      	ldr	r3, [pc, #252]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018b4:	2180      	movs	r1, #128	@ 0x80
 80018b6:	0249      	lsls	r1, r1, #9
 80018b8:	430a      	orrs	r2, r1
 80018ba:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018bc:	4b3c      	ldr	r3, [pc, #240]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018be:	6a1a      	ldr	r2, [r3, #32]
 80018c0:	4b3b      	ldr	r3, [pc, #236]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018c2:	493e      	ldr	r1, [pc, #248]	@ (80019bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018c4:	400a      	ands	r2, r1
 80018c6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80018c8:	4b39      	ldr	r3, [pc, #228]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2201      	movs	r2, #1
 80018d2:	4013      	ands	r3, r2
 80018d4:	d013      	beq.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff f813 	bl	8000900 <HAL_GetTick>
 80018da:	0003      	movs	r3, r0
 80018dc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018de:	e009      	b.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e0:	f7ff f80e 	bl	8000900 <HAL_GetTick>
 80018e4:	0002      	movs	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	4a35      	ldr	r2, [pc, #212]	@ (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e058      	b.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f4:	4b2e      	ldr	r3, [pc, #184]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	2202      	movs	r2, #2
 80018fa:	4013      	ands	r3, r2
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018fe:	4b2c      	ldr	r3, [pc, #176]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4a2d      	ldr	r2, [pc, #180]	@ (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001904:	4013      	ands	r3, r2
 8001906:	0019      	movs	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	4b28      	ldr	r3, [pc, #160]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800190e:	430a      	orrs	r2, r1
 8001910:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001912:	2317      	movs	r3, #23
 8001914:	18fb      	adds	r3, r7, r3
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d105      	bne.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800191c:	4b24      	ldr	r3, [pc, #144]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800191e:	69da      	ldr	r2, [r3, #28]
 8001920:	4b23      	ldr	r3, [pc, #140]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001922:	4928      	ldr	r1, [pc, #160]	@ (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001924:	400a      	ands	r2, r1
 8001926:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2201      	movs	r2, #1
 800192e:	4013      	ands	r3, r2
 8001930:	d009      	beq.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001932:	4b1f      	ldr	r3, [pc, #124]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	2203      	movs	r2, #3
 8001938:	4393      	bics	r3, r2
 800193a:	0019      	movs	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	4b1b      	ldr	r3, [pc, #108]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001942:	430a      	orrs	r2, r1
 8001944:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2220      	movs	r2, #32
 800194c:	4013      	ands	r3, r2
 800194e:	d009      	beq.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001950:	4b17      	ldr	r3, [pc, #92]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001954:	2210      	movs	r2, #16
 8001956:	4393      	bics	r3, r2
 8001958:	0019      	movs	r1, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001960:	430a      	orrs	r2, r1
 8001962:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2380      	movs	r3, #128	@ 0x80
 800196a:	029b      	lsls	r3, r3, #10
 800196c:	4013      	ands	r3, r2
 800196e:	d009      	beq.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001970:	4b0f      	ldr	r3, [pc, #60]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001974:	2280      	movs	r2, #128	@ 0x80
 8001976:	4393      	bics	r3, r2
 8001978:	0019      	movs	r1, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	695a      	ldr	r2, [r3, #20]
 800197e:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001980:	430a      	orrs	r2, r1
 8001982:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2380      	movs	r3, #128	@ 0x80
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4013      	ands	r3, r2
 800198e:	d009      	beq.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001990:	4b07      	ldr	r3, [pc, #28]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001994:	2240      	movs	r2, #64	@ 0x40
 8001996:	4393      	bics	r3, r2
 8001998:	0019      	movs	r1, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691a      	ldr	r2, [r3, #16]
 800199e:	4b04      	ldr	r3, [pc, #16]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80019a0:	430a      	orrs	r2, r1
 80019a2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b006      	add	sp, #24
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40007000 	.word	0x40007000
 80019b8:	fffffcff 	.word	0xfffffcff
 80019bc:	fffeffff 	.word	0xfffeffff
 80019c0:	00001388 	.word	0x00001388
 80019c4:	efffffff 	.word	0xefffffff

080019c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e044      	b.n	8001a64 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d107      	bne.n	80019f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2278      	movs	r2, #120	@ 0x78
 80019e6:	2100      	movs	r1, #0
 80019e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	0018      	movs	r0, r3
 80019ee:	f7fe fe0b 	bl	8000608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2224      	movs	r2, #36	@ 0x24
 80019f6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2101      	movs	r1, #1
 8001a04:	438a      	bics	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	0018      	movs	r0, r3
 8001a14:	f000 f96c 	bl	8001cf0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f000 f828 	bl	8001a70 <UART_SetConfig>
 8001a20:	0003      	movs	r3, r0
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e01c      	b.n	8001a64 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	490d      	ldr	r1, [pc, #52]	@ (8001a6c <HAL_UART_Init+0xa4>)
 8001a36:	400a      	ands	r2, r1
 8001a38:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	212a      	movs	r1, #42	@ 0x2a
 8001a46:	438a      	bics	r2, r1
 8001a48:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2101      	movs	r1, #1
 8001a56:	430a      	orrs	r2, r1
 8001a58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f000 f9fb 	bl	8001e58 <UART_CheckIdleState>
 8001a62:	0003      	movs	r3, r0
}
 8001a64:	0018      	movs	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b002      	add	sp, #8
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	ffffb7ff 	.word	0xffffb7ff

08001a70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a78:	231e      	movs	r3, #30
 8001a7a:	18fb      	adds	r3, r7, r3
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a8d      	ldr	r2, [pc, #564]	@ (8001cd4 <UART_SetConfig+0x264>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	4a88      	ldr	r2, [pc, #544]	@ (8001cd8 <UART_SetConfig+0x268>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	0019      	movs	r1, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4a7f      	ldr	r2, [pc, #508]	@ (8001cdc <UART_SetConfig+0x26c>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a7b      	ldr	r2, [pc, #492]	@ (8001ce0 <UART_SetConfig+0x270>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d127      	bne.n	8001b46 <UART_SetConfig+0xd6>
 8001af6:	4b7b      	ldr	r3, [pc, #492]	@ (8001ce4 <UART_SetConfig+0x274>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	2203      	movs	r2, #3
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d00d      	beq.n	8001b1e <UART_SetConfig+0xae>
 8001b02:	d81b      	bhi.n	8001b3c <UART_SetConfig+0xcc>
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d014      	beq.n	8001b32 <UART_SetConfig+0xc2>
 8001b08:	d818      	bhi.n	8001b3c <UART_SetConfig+0xcc>
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <UART_SetConfig+0xa4>
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d00a      	beq.n	8001b28 <UART_SetConfig+0xb8>
 8001b12:	e013      	b.n	8001b3c <UART_SetConfig+0xcc>
 8001b14:	231f      	movs	r3, #31
 8001b16:	18fb      	adds	r3, r7, r3
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
 8001b1c:	e021      	b.n	8001b62 <UART_SetConfig+0xf2>
 8001b1e:	231f      	movs	r3, #31
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	2202      	movs	r2, #2
 8001b24:	701a      	strb	r2, [r3, #0]
 8001b26:	e01c      	b.n	8001b62 <UART_SetConfig+0xf2>
 8001b28:	231f      	movs	r3, #31
 8001b2a:	18fb      	adds	r3, r7, r3
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	701a      	strb	r2, [r3, #0]
 8001b30:	e017      	b.n	8001b62 <UART_SetConfig+0xf2>
 8001b32:	231f      	movs	r3, #31
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	2208      	movs	r2, #8
 8001b38:	701a      	strb	r2, [r3, #0]
 8001b3a:	e012      	b.n	8001b62 <UART_SetConfig+0xf2>
 8001b3c:	231f      	movs	r3, #31
 8001b3e:	18fb      	adds	r3, r7, r3
 8001b40:	2210      	movs	r2, #16
 8001b42:	701a      	strb	r2, [r3, #0]
 8001b44:	e00d      	b.n	8001b62 <UART_SetConfig+0xf2>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a67      	ldr	r2, [pc, #412]	@ (8001ce8 <UART_SetConfig+0x278>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d104      	bne.n	8001b5a <UART_SetConfig+0xea>
 8001b50:	231f      	movs	r3, #31
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	e003      	b.n	8001b62 <UART_SetConfig+0xf2>
 8001b5a:	231f      	movs	r3, #31
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	2210      	movs	r2, #16
 8001b60:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69da      	ldr	r2, [r3, #28]
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d15c      	bne.n	8001c28 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8001b6e:	231f      	movs	r3, #31
 8001b70:	18fb      	adds	r3, r7, r3
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d015      	beq.n	8001ba4 <UART_SetConfig+0x134>
 8001b78:	dc18      	bgt.n	8001bac <UART_SetConfig+0x13c>
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d00d      	beq.n	8001b9a <UART_SetConfig+0x12a>
 8001b7e:	dc15      	bgt.n	8001bac <UART_SetConfig+0x13c>
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <UART_SetConfig+0x11a>
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d005      	beq.n	8001b94 <UART_SetConfig+0x124>
 8001b88:	e010      	b.n	8001bac <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001b8a:	f7ff fe19 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	61bb      	str	r3, [r7, #24]
        break;
 8001b92:	e012      	b.n	8001bba <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001b94:	4b55      	ldr	r3, [pc, #340]	@ (8001cec <UART_SetConfig+0x27c>)
 8001b96:	61bb      	str	r3, [r7, #24]
        break;
 8001b98:	e00f      	b.n	8001bba <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001b9a:	f7ff fd95 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	61bb      	str	r3, [r7, #24]
        break;
 8001ba2:	e00a      	b.n	8001bba <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	021b      	lsls	r3, r3, #8
 8001ba8:	61bb      	str	r3, [r7, #24]
        break;
 8001baa:	e006      	b.n	8001bba <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001bb0:	231e      	movs	r3, #30
 8001bb2:	18fb      	adds	r3, r7, r3
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
        break;
 8001bb8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d100      	bne.n	8001bc2 <UART_SetConfig+0x152>
 8001bc0:	e07a      	b.n	8001cb8 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	005a      	lsls	r2, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	18d2      	adds	r2, r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	0010      	movs	r0, r2
 8001bd6:	f7fe fa97 	bl	8000108 <__udivsi3>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	d91c      	bls.n	8001c1e <UART_SetConfig+0x1ae>
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	2380      	movs	r3, #128	@ 0x80
 8001be8:	025b      	lsls	r3, r3, #9
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d217      	bcs.n	8001c1e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	200e      	movs	r0, #14
 8001bf4:	183b      	adds	r3, r7, r0
 8001bf6:	210f      	movs	r1, #15
 8001bf8:	438a      	bics	r2, r1
 8001bfa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	085b      	lsrs	r3, r3, #1
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2207      	movs	r2, #7
 8001c04:	4013      	ands	r3, r2
 8001c06:	b299      	uxth	r1, r3
 8001c08:	183b      	adds	r3, r7, r0
 8001c0a:	183a      	adds	r2, r7, r0
 8001c0c:	8812      	ldrh	r2, [r2, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	183a      	adds	r2, r7, r0
 8001c18:	8812      	ldrh	r2, [r2, #0]
 8001c1a:	60da      	str	r2, [r3, #12]
 8001c1c:	e04c      	b.n	8001cb8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8001c1e:	231e      	movs	r3, #30
 8001c20:	18fb      	adds	r3, r7, r3
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
 8001c26:	e047      	b.n	8001cb8 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001c28:	231f      	movs	r3, #31
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d015      	beq.n	8001c5e <UART_SetConfig+0x1ee>
 8001c32:	dc18      	bgt.n	8001c66 <UART_SetConfig+0x1f6>
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d00d      	beq.n	8001c54 <UART_SetConfig+0x1e4>
 8001c38:	dc15      	bgt.n	8001c66 <UART_SetConfig+0x1f6>
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <UART_SetConfig+0x1d4>
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d005      	beq.n	8001c4e <UART_SetConfig+0x1de>
 8001c42:	e010      	b.n	8001c66 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001c44:	f7ff fdbc 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	61bb      	str	r3, [r7, #24]
        break;
 8001c4c:	e012      	b.n	8001c74 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001c4e:	4b27      	ldr	r3, [pc, #156]	@ (8001cec <UART_SetConfig+0x27c>)
 8001c50:	61bb      	str	r3, [r7, #24]
        break;
 8001c52:	e00f      	b.n	8001c74 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001c54:	f7ff fd38 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	61bb      	str	r3, [r7, #24]
        break;
 8001c5c:	e00a      	b.n	8001c74 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001c5e:	2380      	movs	r3, #128	@ 0x80
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	61bb      	str	r3, [r7, #24]
        break;
 8001c64:	e006      	b.n	8001c74 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001c6a:	231e      	movs	r3, #30
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
        break;
 8001c72:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d01e      	beq.n	8001cb8 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	085a      	lsrs	r2, r3, #1
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	18d2      	adds	r2, r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	0019      	movs	r1, r3
 8001c8a:	0010      	movs	r0, r2
 8001c8c:	f7fe fa3c 	bl	8000108 <__udivsi3>
 8001c90:	0003      	movs	r3, r0
 8001c92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	2b0f      	cmp	r3, #15
 8001c98:	d90a      	bls.n	8001cb0 <UART_SetConfig+0x240>
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	2380      	movs	r3, #128	@ 0x80
 8001c9e:	025b      	lsls	r3, r3, #9
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d205      	bcs.n	8001cb0 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	e003      	b.n	8001cb8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8001cb0:	231e      	movs	r3, #30
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8001cc4:	231e      	movs	r3, #30
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	781b      	ldrb	r3, [r3, #0]
}
 8001cca:	0018      	movs	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b008      	add	sp, #32
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			@ (mov r8, r8)
 8001cd4:	efff69f3 	.word	0xefff69f3
 8001cd8:	ffffcfff 	.word	0xffffcfff
 8001cdc:	fffff4ff 	.word	0xfffff4ff
 8001ce0:	40013800 	.word	0x40013800
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40004400 	.word	0x40004400
 8001cec:	007a1200 	.word	0x007a1200

08001cf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfc:	2208      	movs	r2, #8
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d00b      	beq.n	8001d1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4a4a      	ldr	r2, [pc, #296]	@ (8001e34 <UART_AdvFeatureConfig+0x144>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	0019      	movs	r1, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4013      	ands	r3, r2
 8001d22:	d00b      	beq.n	8001d3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4a43      	ldr	r2, [pc, #268]	@ (8001e38 <UART_AdvFeatureConfig+0x148>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	0019      	movs	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d40:	2202      	movs	r2, #2
 8001d42:	4013      	ands	r3, r2
 8001d44:	d00b      	beq.n	8001d5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4a3b      	ldr	r2, [pc, #236]	@ (8001e3c <UART_AdvFeatureConfig+0x14c>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	0019      	movs	r1, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d62:	2204      	movs	r2, #4
 8001d64:	4013      	ands	r3, r2
 8001d66:	d00b      	beq.n	8001d80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4a34      	ldr	r2, [pc, #208]	@ (8001e40 <UART_AdvFeatureConfig+0x150>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	0019      	movs	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d84:	2210      	movs	r2, #16
 8001d86:	4013      	ands	r3, r2
 8001d88:	d00b      	beq.n	8001da2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4a2c      	ldr	r2, [pc, #176]	@ (8001e44 <UART_AdvFeatureConfig+0x154>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	0019      	movs	r1, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da6:	2220      	movs	r2, #32
 8001da8:	4013      	ands	r3, r2
 8001daa:	d00b      	beq.n	8001dc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	4a25      	ldr	r2, [pc, #148]	@ (8001e48 <UART_AdvFeatureConfig+0x158>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	0019      	movs	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc8:	2240      	movs	r2, #64	@ 0x40
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d01d      	beq.n	8001e0a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e4c <UART_AdvFeatureConfig+0x15c>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	0019      	movs	r1, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dea:	2380      	movs	r3, #128	@ 0x80
 8001dec:	035b      	lsls	r3, r3, #13
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d10b      	bne.n	8001e0a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4a15      	ldr	r2, [pc, #84]	@ (8001e50 <UART_AdvFeatureConfig+0x160>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	0019      	movs	r1, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0e:	2280      	movs	r2, #128	@ 0x80
 8001e10:	4013      	ands	r3, r2
 8001e12:	d00b      	beq.n	8001e2c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001e54 <UART_AdvFeatureConfig+0x164>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	0019      	movs	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	605a      	str	r2, [r3, #4]
  }
}
 8001e2c:	46c0      	nop			@ (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b002      	add	sp, #8
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	ffff7fff 	.word	0xffff7fff
 8001e38:	fffdffff 	.word	0xfffdffff
 8001e3c:	fffeffff 	.word	0xfffeffff
 8001e40:	fffbffff 	.word	0xfffbffff
 8001e44:	ffffefff 	.word	0xffffefff
 8001e48:	ffffdfff 	.word	0xffffdfff
 8001e4c:	ffefffff 	.word	0xffefffff
 8001e50:	ff9fffff 	.word	0xff9fffff
 8001e54:	fff7ffff 	.word	0xfff7ffff

08001e58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b092      	sub	sp, #72	@ 0x48
 8001e5c:	af02      	add	r7, sp, #8
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2284      	movs	r2, #132	@ 0x84
 8001e64:	2100      	movs	r1, #0
 8001e66:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001e68:	f7fe fd4a 	bl	8000900 <HAL_GetTick>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2208      	movs	r2, #8
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d12c      	bne.n	8001ed8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e80:	2280      	movs	r2, #128	@ 0x80
 8001e82:	0391      	lsls	r1, r2, #14
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	4a46      	ldr	r2, [pc, #280]	@ (8001fa0 <UART_CheckIdleState+0x148>)
 8001e88:	9200      	str	r2, [sp, #0]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f000 f88c 	bl	8001fa8 <UART_WaitOnFlagUntilTimeout>
 8001e90:	1e03      	subs	r3, r0, #0
 8001e92:	d021      	beq.n	8001ed8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e94:	f3ef 8310 	mrs	r3, PRIMASK
 8001e98:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea4:	f383 8810 	msr	PRIMASK, r3
}
 8001ea8:	46c0      	nop			@ (mov r8, r8)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2180      	movs	r1, #128	@ 0x80
 8001eb6:	438a      	bics	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ec0:	f383 8810 	msr	PRIMASK, r3
}
 8001ec4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2278      	movs	r2, #120	@ 0x78
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e05f      	b.n	8001f98 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2204      	movs	r2, #4
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d146      	bne.n	8001f74 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ee8:	2280      	movs	r2, #128	@ 0x80
 8001eea:	03d1      	lsls	r1, r2, #15
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	4a2c      	ldr	r2, [pc, #176]	@ (8001fa0 <UART_CheckIdleState+0x148>)
 8001ef0:	9200      	str	r2, [sp, #0]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f000 f858 	bl	8001fa8 <UART_WaitOnFlagUntilTimeout>
 8001ef8:	1e03      	subs	r3, r0, #0
 8001efa:	d03b      	beq.n	8001f74 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001efc:	f3ef 8310 	mrs	r3, PRIMASK
 8001f00:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f02:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f06:	2301      	movs	r3, #1
 8001f08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	f383 8810 	msr	PRIMASK, r3
}
 8001f10:	46c0      	nop			@ (mov r8, r8)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4921      	ldr	r1, [pc, #132]	@ (8001fa4 <UART_CheckIdleState+0x14c>)
 8001f1e:	400a      	ands	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f383 8810 	msr	PRIMASK, r3
}
 8001f2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8001f32:	61bb      	str	r3, [r7, #24]
  return(result);
 8001f34:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f36:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f38:	2301      	movs	r3, #1
 8001f3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f383 8810 	msr	PRIMASK, r3
}
 8001f42:	46c0      	nop			@ (mov r8, r8)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2101      	movs	r1, #1
 8001f50:	438a      	bics	r2, r1
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	f383 8810 	msr	PRIMASK, r3
}
 8001f5e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2280      	movs	r2, #128	@ 0x80
 8001f64:	2120      	movs	r1, #32
 8001f66:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2278      	movs	r2, #120	@ 0x78
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e011      	b.n	8001f98 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2220      	movs	r2, #32
 8001f78:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2280      	movs	r2, #128	@ 0x80
 8001f7e:	2120      	movs	r1, #32
 8001f80:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2278      	movs	r2, #120	@ 0x78
 8001f92:	2100      	movs	r1, #0
 8001f94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	0018      	movs	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b010      	add	sp, #64	@ 0x40
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	01ffffff 	.word	0x01ffffff
 8001fa4:	fffffedf 	.word	0xfffffedf

08001fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	1dfb      	adds	r3, r7, #7
 8001fb6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fb8:	e051      	b.n	800205e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	d04e      	beq.n	800205e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc0:	f7fe fc9e 	bl	8000900 <HAL_GetTick>
 8001fc4:	0002      	movs	r2, r0
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d302      	bcc.n	8001fd6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e051      	b.n	800207e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d03b      	beq.n	800205e <UART_WaitOnFlagUntilTimeout+0xb6>
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b80      	cmp	r3, #128	@ 0x80
 8001fea:	d038      	beq.n	800205e <UART_WaitOnFlagUntilTimeout+0xb6>
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2b40      	cmp	r3, #64	@ 0x40
 8001ff0:	d035      	beq.n	800205e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d111      	bne.n	8002024 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2208      	movs	r2, #8
 8002006:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	0018      	movs	r0, r3
 800200c:	f000 f83c 	bl	8002088 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2284      	movs	r2, #132	@ 0x84
 8002014:	2108      	movs	r1, #8
 8002016:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2278      	movs	r2, #120	@ 0x78
 800201c:	2100      	movs	r1, #0
 800201e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e02c      	b.n	800207e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	69da      	ldr	r2, [r3, #28]
 800202a:	2380      	movs	r3, #128	@ 0x80
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	401a      	ands	r2, r3
 8002030:	2380      	movs	r3, #128	@ 0x80
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	429a      	cmp	r2, r3
 8002036:	d112      	bne.n	800205e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2280      	movs	r2, #128	@ 0x80
 800203e:	0112      	lsls	r2, r2, #4
 8002040:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	0018      	movs	r0, r3
 8002046:	f000 f81f 	bl	8002088 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2284      	movs	r2, #132	@ 0x84
 800204e:	2120      	movs	r1, #32
 8002050:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2278      	movs	r2, #120	@ 0x78
 8002056:	2100      	movs	r1, #0
 8002058:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e00f      	b.n	800207e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	4013      	ands	r3, r2
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	425a      	negs	r2, r3
 800206e:	4153      	adcs	r3, r2
 8002070:	b2db      	uxtb	r3, r3
 8002072:	001a      	movs	r2, r3
 8002074:	1dfb      	adds	r3, r7, #7
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d09e      	beq.n	8001fba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	0018      	movs	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	b004      	add	sp, #16
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08e      	sub	sp, #56	@ 0x38
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002090:	f3ef 8310 	mrs	r3, PRIMASK
 8002094:	617b      	str	r3, [r7, #20]
  return(result);
 8002096:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002098:	637b      	str	r3, [r7, #52]	@ 0x34
 800209a:	2301      	movs	r3, #1
 800209c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	f383 8810 	msr	PRIMASK, r3
}
 80020a4:	46c0      	nop			@ (mov r8, r8)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4926      	ldr	r1, [pc, #152]	@ (800214c <UART_EndRxTransfer+0xc4>)
 80020b2:	400a      	ands	r2, r1
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f383 8810 	msr	PRIMASK, r3
}
 80020c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020c2:	f3ef 8310 	mrs	r3, PRIMASK
 80020c6:	623b      	str	r3, [r7, #32]
  return(result);
 80020c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80020cc:	2301      	movs	r3, #1
 80020ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d2:	f383 8810 	msr	PRIMASK, r3
}
 80020d6:	46c0      	nop			@ (mov r8, r8)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2101      	movs	r1, #1
 80020e4:	438a      	bics	r2, r1
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ee:	f383 8810 	msr	PRIMASK, r3
}
 80020f2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d118      	bne.n	800212e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002100:	60bb      	str	r3, [r7, #8]
  return(result);
 8002102:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002106:	2301      	movs	r3, #1
 8002108:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f383 8810 	msr	PRIMASK, r3
}
 8002110:	46c0      	nop			@ (mov r8, r8)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2110      	movs	r1, #16
 800211e:	438a      	bics	r2, r1
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002124:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	f383 8810 	msr	PRIMASK, r3
}
 800212c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2280      	movs	r2, #128	@ 0x80
 8002132:	2120      	movs	r1, #32
 8002134:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002142:	46c0      	nop			@ (mov r8, r8)
 8002144:	46bd      	mov	sp, r7
 8002146:	b00e      	add	sp, #56	@ 0x38
 8002148:	bd80      	pop	{r7, pc}
 800214a:	46c0      	nop			@ (mov r8, r8)
 800214c:	fffffedf 	.word	0xfffffedf

08002150 <malloc>:
 8002150:	b510      	push	{r4, lr}
 8002152:	4b03      	ldr	r3, [pc, #12]	@ (8002160 <malloc+0x10>)
 8002154:	0001      	movs	r1, r0
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	f000 f826 	bl	80021a8 <_malloc_r>
 800215c:	bd10      	pop	{r4, pc}
 800215e:	46c0      	nop			@ (mov r8, r8)
 8002160:	2000000c 	.word	0x2000000c

08002164 <sbrk_aligned>:
 8002164:	b570      	push	{r4, r5, r6, lr}
 8002166:	4e0f      	ldr	r6, [pc, #60]	@ (80021a4 <sbrk_aligned+0x40>)
 8002168:	000d      	movs	r5, r1
 800216a:	6831      	ldr	r1, [r6, #0]
 800216c:	0004      	movs	r4, r0
 800216e:	2900      	cmp	r1, #0
 8002170:	d102      	bne.n	8002178 <sbrk_aligned+0x14>
 8002172:	f000 f8b1 	bl	80022d8 <_sbrk_r>
 8002176:	6030      	str	r0, [r6, #0]
 8002178:	0029      	movs	r1, r5
 800217a:	0020      	movs	r0, r4
 800217c:	f000 f8ac 	bl	80022d8 <_sbrk_r>
 8002180:	1c43      	adds	r3, r0, #1
 8002182:	d103      	bne.n	800218c <sbrk_aligned+0x28>
 8002184:	2501      	movs	r5, #1
 8002186:	426d      	negs	r5, r5
 8002188:	0028      	movs	r0, r5
 800218a:	bd70      	pop	{r4, r5, r6, pc}
 800218c:	2303      	movs	r3, #3
 800218e:	1cc5      	adds	r5, r0, #3
 8002190:	439d      	bics	r5, r3
 8002192:	42a8      	cmp	r0, r5
 8002194:	d0f8      	beq.n	8002188 <sbrk_aligned+0x24>
 8002196:	1a29      	subs	r1, r5, r0
 8002198:	0020      	movs	r0, r4
 800219a:	f000 f89d 	bl	80022d8 <_sbrk_r>
 800219e:	3001      	adds	r0, #1
 80021a0:	d1f2      	bne.n	8002188 <sbrk_aligned+0x24>
 80021a2:	e7ef      	b.n	8002184 <sbrk_aligned+0x20>
 80021a4:	20000198 	.word	0x20000198

080021a8 <_malloc_r>:
 80021a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021aa:	2203      	movs	r2, #3
 80021ac:	1ccb      	adds	r3, r1, #3
 80021ae:	4393      	bics	r3, r2
 80021b0:	3308      	adds	r3, #8
 80021b2:	0005      	movs	r5, r0
 80021b4:	001f      	movs	r7, r3
 80021b6:	2b0c      	cmp	r3, #12
 80021b8:	d234      	bcs.n	8002224 <_malloc_r+0x7c>
 80021ba:	270c      	movs	r7, #12
 80021bc:	42b9      	cmp	r1, r7
 80021be:	d833      	bhi.n	8002228 <_malloc_r+0x80>
 80021c0:	0028      	movs	r0, r5
 80021c2:	f000 f871 	bl	80022a8 <__malloc_lock>
 80021c6:	4e37      	ldr	r6, [pc, #220]	@ (80022a4 <_malloc_r+0xfc>)
 80021c8:	6833      	ldr	r3, [r6, #0]
 80021ca:	001c      	movs	r4, r3
 80021cc:	2c00      	cmp	r4, #0
 80021ce:	d12f      	bne.n	8002230 <_malloc_r+0x88>
 80021d0:	0039      	movs	r1, r7
 80021d2:	0028      	movs	r0, r5
 80021d4:	f7ff ffc6 	bl	8002164 <sbrk_aligned>
 80021d8:	0004      	movs	r4, r0
 80021da:	1c43      	adds	r3, r0, #1
 80021dc:	d15f      	bne.n	800229e <_malloc_r+0xf6>
 80021de:	6834      	ldr	r4, [r6, #0]
 80021e0:	9400      	str	r4, [sp, #0]
 80021e2:	9b00      	ldr	r3, [sp, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d14a      	bne.n	800227e <_malloc_r+0xd6>
 80021e8:	2c00      	cmp	r4, #0
 80021ea:	d052      	beq.n	8002292 <_malloc_r+0xea>
 80021ec:	6823      	ldr	r3, [r4, #0]
 80021ee:	0028      	movs	r0, r5
 80021f0:	18e3      	adds	r3, r4, r3
 80021f2:	9900      	ldr	r1, [sp, #0]
 80021f4:	9301      	str	r3, [sp, #4]
 80021f6:	f000 f86f 	bl	80022d8 <_sbrk_r>
 80021fa:	9b01      	ldr	r3, [sp, #4]
 80021fc:	4283      	cmp	r3, r0
 80021fe:	d148      	bne.n	8002292 <_malloc_r+0xea>
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	0028      	movs	r0, r5
 8002204:	1aff      	subs	r7, r7, r3
 8002206:	0039      	movs	r1, r7
 8002208:	f7ff ffac 	bl	8002164 <sbrk_aligned>
 800220c:	3001      	adds	r0, #1
 800220e:	d040      	beq.n	8002292 <_malloc_r+0xea>
 8002210:	6823      	ldr	r3, [r4, #0]
 8002212:	19db      	adds	r3, r3, r7
 8002214:	6023      	str	r3, [r4, #0]
 8002216:	6833      	ldr	r3, [r6, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	2a00      	cmp	r2, #0
 800221c:	d133      	bne.n	8002286 <_malloc_r+0xde>
 800221e:	9b00      	ldr	r3, [sp, #0]
 8002220:	6033      	str	r3, [r6, #0]
 8002222:	e019      	b.n	8002258 <_malloc_r+0xb0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	dac9      	bge.n	80021bc <_malloc_r+0x14>
 8002228:	230c      	movs	r3, #12
 800222a:	602b      	str	r3, [r5, #0]
 800222c:	2000      	movs	r0, #0
 800222e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002230:	6821      	ldr	r1, [r4, #0]
 8002232:	1bc9      	subs	r1, r1, r7
 8002234:	d420      	bmi.n	8002278 <_malloc_r+0xd0>
 8002236:	290b      	cmp	r1, #11
 8002238:	d90a      	bls.n	8002250 <_malloc_r+0xa8>
 800223a:	19e2      	adds	r2, r4, r7
 800223c:	6027      	str	r7, [r4, #0]
 800223e:	42a3      	cmp	r3, r4
 8002240:	d104      	bne.n	800224c <_malloc_r+0xa4>
 8002242:	6032      	str	r2, [r6, #0]
 8002244:	6863      	ldr	r3, [r4, #4]
 8002246:	6011      	str	r1, [r2, #0]
 8002248:	6053      	str	r3, [r2, #4]
 800224a:	e005      	b.n	8002258 <_malloc_r+0xb0>
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	e7f9      	b.n	8002244 <_malloc_r+0x9c>
 8002250:	6862      	ldr	r2, [r4, #4]
 8002252:	42a3      	cmp	r3, r4
 8002254:	d10e      	bne.n	8002274 <_malloc_r+0xcc>
 8002256:	6032      	str	r2, [r6, #0]
 8002258:	0028      	movs	r0, r5
 800225a:	f000 f82d 	bl	80022b8 <__malloc_unlock>
 800225e:	0020      	movs	r0, r4
 8002260:	2207      	movs	r2, #7
 8002262:	300b      	adds	r0, #11
 8002264:	1d23      	adds	r3, r4, #4
 8002266:	4390      	bics	r0, r2
 8002268:	1ac2      	subs	r2, r0, r3
 800226a:	4298      	cmp	r0, r3
 800226c:	d0df      	beq.n	800222e <_malloc_r+0x86>
 800226e:	1a1b      	subs	r3, r3, r0
 8002270:	50a3      	str	r3, [r4, r2]
 8002272:	e7dc      	b.n	800222e <_malloc_r+0x86>
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	e7ef      	b.n	8002258 <_malloc_r+0xb0>
 8002278:	0023      	movs	r3, r4
 800227a:	6864      	ldr	r4, [r4, #4]
 800227c:	e7a6      	b.n	80021cc <_malloc_r+0x24>
 800227e:	9c00      	ldr	r4, [sp, #0]
 8002280:	6863      	ldr	r3, [r4, #4]
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	e7ad      	b.n	80021e2 <_malloc_r+0x3a>
 8002286:	001a      	movs	r2, r3
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	42a3      	cmp	r3, r4
 800228c:	d1fb      	bne.n	8002286 <_malloc_r+0xde>
 800228e:	2300      	movs	r3, #0
 8002290:	e7da      	b.n	8002248 <_malloc_r+0xa0>
 8002292:	230c      	movs	r3, #12
 8002294:	0028      	movs	r0, r5
 8002296:	602b      	str	r3, [r5, #0]
 8002298:	f000 f80e 	bl	80022b8 <__malloc_unlock>
 800229c:	e7c6      	b.n	800222c <_malloc_r+0x84>
 800229e:	6007      	str	r7, [r0, #0]
 80022a0:	e7da      	b.n	8002258 <_malloc_r+0xb0>
 80022a2:	46c0      	nop			@ (mov r8, r8)
 80022a4:	2000019c 	.word	0x2000019c

080022a8 <__malloc_lock>:
 80022a8:	b510      	push	{r4, lr}
 80022aa:	4802      	ldr	r0, [pc, #8]	@ (80022b4 <__malloc_lock+0xc>)
 80022ac:	f000 f850 	bl	8002350 <__retarget_lock_acquire_recursive>
 80022b0:	bd10      	pop	{r4, pc}
 80022b2:	46c0      	nop			@ (mov r8, r8)
 80022b4:	200002dc 	.word	0x200002dc

080022b8 <__malloc_unlock>:
 80022b8:	b510      	push	{r4, lr}
 80022ba:	4802      	ldr	r0, [pc, #8]	@ (80022c4 <__malloc_unlock+0xc>)
 80022bc:	f000 f849 	bl	8002352 <__retarget_lock_release_recursive>
 80022c0:	bd10      	pop	{r4, pc}
 80022c2:	46c0      	nop			@ (mov r8, r8)
 80022c4:	200002dc 	.word	0x200002dc

080022c8 <memset>:
 80022c8:	0003      	movs	r3, r0
 80022ca:	1882      	adds	r2, r0, r2
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d100      	bne.n	80022d2 <memset+0xa>
 80022d0:	4770      	bx	lr
 80022d2:	7019      	strb	r1, [r3, #0]
 80022d4:	3301      	adds	r3, #1
 80022d6:	e7f9      	b.n	80022cc <memset+0x4>

080022d8 <_sbrk_r>:
 80022d8:	2300      	movs	r3, #0
 80022da:	b570      	push	{r4, r5, r6, lr}
 80022dc:	4d06      	ldr	r5, [pc, #24]	@ (80022f8 <_sbrk_r+0x20>)
 80022de:	0004      	movs	r4, r0
 80022e0:	0008      	movs	r0, r1
 80022e2:	602b      	str	r3, [r5, #0]
 80022e4:	f7fe fa34 	bl	8000750 <_sbrk>
 80022e8:	1c43      	adds	r3, r0, #1
 80022ea:	d103      	bne.n	80022f4 <_sbrk_r+0x1c>
 80022ec:	682b      	ldr	r3, [r5, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d000      	beq.n	80022f4 <_sbrk_r+0x1c>
 80022f2:	6023      	str	r3, [r4, #0]
 80022f4:	bd70      	pop	{r4, r5, r6, pc}
 80022f6:	46c0      	nop			@ (mov r8, r8)
 80022f8:	200002d8 	.word	0x200002d8

080022fc <__errno>:
 80022fc:	4b01      	ldr	r3, [pc, #4]	@ (8002304 <__errno+0x8>)
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	4770      	bx	lr
 8002302:	46c0      	nop			@ (mov r8, r8)
 8002304:	2000000c 	.word	0x2000000c

08002308 <__libc_init_array>:
 8002308:	b570      	push	{r4, r5, r6, lr}
 800230a:	2600      	movs	r6, #0
 800230c:	4c0c      	ldr	r4, [pc, #48]	@ (8002340 <__libc_init_array+0x38>)
 800230e:	4d0d      	ldr	r5, [pc, #52]	@ (8002344 <__libc_init_array+0x3c>)
 8002310:	1b64      	subs	r4, r4, r5
 8002312:	10a4      	asrs	r4, r4, #2
 8002314:	42a6      	cmp	r6, r4
 8002316:	d109      	bne.n	800232c <__libc_init_array+0x24>
 8002318:	2600      	movs	r6, #0
 800231a:	f000 f81b 	bl	8002354 <_init>
 800231e:	4c0a      	ldr	r4, [pc, #40]	@ (8002348 <__libc_init_array+0x40>)
 8002320:	4d0a      	ldr	r5, [pc, #40]	@ (800234c <__libc_init_array+0x44>)
 8002322:	1b64      	subs	r4, r4, r5
 8002324:	10a4      	asrs	r4, r4, #2
 8002326:	42a6      	cmp	r6, r4
 8002328:	d105      	bne.n	8002336 <__libc_init_array+0x2e>
 800232a:	bd70      	pop	{r4, r5, r6, pc}
 800232c:	00b3      	lsls	r3, r6, #2
 800232e:	58eb      	ldr	r3, [r5, r3]
 8002330:	4798      	blx	r3
 8002332:	3601      	adds	r6, #1
 8002334:	e7ee      	b.n	8002314 <__libc_init_array+0xc>
 8002336:	00b3      	lsls	r3, r6, #2
 8002338:	58eb      	ldr	r3, [r5, r3]
 800233a:	4798      	blx	r3
 800233c:	3601      	adds	r6, #1
 800233e:	e7f2      	b.n	8002326 <__libc_init_array+0x1e>
 8002340:	080023a4 	.word	0x080023a4
 8002344:	080023a4 	.word	0x080023a4
 8002348:	080023a8 	.word	0x080023a8
 800234c:	080023a4 	.word	0x080023a4

08002350 <__retarget_lock_acquire_recursive>:
 8002350:	4770      	bx	lr

08002352 <__retarget_lock_release_recursive>:
 8002352:	4770      	bx	lr

08002354 <_init>:
 8002354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800235a:	bc08      	pop	{r3}
 800235c:	469e      	mov	lr, r3
 800235e:	4770      	bx	lr

08002360 <_fini>:
 8002360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002362:	46c0      	nop			@ (mov r8, r8)
 8002364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002366:	bc08      	pop	{r3}
 8002368:	469e      	mov	lr, r3
 800236a:	4770      	bx	lr
